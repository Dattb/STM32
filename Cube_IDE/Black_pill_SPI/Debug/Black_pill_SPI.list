
Black_pill_SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003200  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  0800330c  0800330c  0001330c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080033d8  080033d8  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080033d8  080033d8  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080033d8  080033d8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033d8  080033d8  000133d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080033dc  080033dc  000133dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080033e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000124  20000074  08003454  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000198  08003454  00020198  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000852e  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001758  00000000  00000000  000285cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000878  00000000  00000000  00029d28  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007b0  00000000  00000000  0002a5a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000148cd  00000000  00000000  0002ad50  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000069a7  00000000  00000000  0003f61d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006ce16  00000000  00000000  00045fc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b2dda  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002890  00000000  00000000  000b2e58  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	080032f4 	.word	0x080032f4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	080032f4 	.word	0x080032f4

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fb96 	bl	8000880 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f83a 	bl	80001cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f912 	bl	8000380 <MX_GPIO_Init>
  MX_SPI1_Init();
 800015c:	f000 f87c 	bl	8000258 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000160:	f000 f8b0 	bl	80002c4 <MX_SPI2_Init>
  MX_USART3_UART_Init();
 8000164:	f000 f8e2 	bl	800032c <MX_USART3_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  { // tim hieu that ki khi thay doi cac thong so ve SPI roi note ra vo cac truogn hop xay ra khi thay doi cac thong  so do
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4,0);// enable slave
 8000168:	2200      	movs	r2, #0
 800016a:	2110      	movs	r1, #16
 800016c:	4811      	ldr	r0, [pc, #68]	; (80001b4 <main+0x68>)
 800016e:	f000 fe49 	bl	8000e04 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi1, &SPI1_Tx_Buff, 1,100);
 8000172:	2364      	movs	r3, #100	; 0x64
 8000174:	2201      	movs	r2, #1
 8000176:	4910      	ldr	r1, [pc, #64]	; (80001b8 <main+0x6c>)
 8000178:	4810      	ldr	r0, [pc, #64]	; (80001bc <main+0x70>)
 800017a:	f001 fad8 	bl	800172e <HAL_SPI_Transmit>
	  if(HAL_SPI_Receive(&hspi2, &SPI2_Rx_Buff, 1,100)==HAL_OK)
 800017e:	2364      	movs	r3, #100	; 0x64
 8000180:	2201      	movs	r2, #1
 8000182:	490f      	ldr	r1, [pc, #60]	; (80001c0 <main+0x74>)
 8000184:	480f      	ldr	r0, [pc, #60]	; (80001c4 <main+0x78>)
 8000186:	f001 fc06 	bl	8001996 <HAL_SPI_Receive>
 800018a:	4603      	mov	r3, r0
 800018c:	2b00      	cmp	r3, #0
 800018e:	d105      	bne.n	800019c <main+0x50>
	  {printf("%d \r\n",SPI2_Rx_Buff);}
 8000190:	4b0b      	ldr	r3, [pc, #44]	; (80001c0 <main+0x74>)
 8000192:	781b      	ldrb	r3, [r3, #0]
 8000194:	4619      	mov	r1, r3
 8000196:	480c      	ldr	r0, [pc, #48]	; (80001c8 <main+0x7c>)
 8000198:	f002 f9be 	bl	8002518 <iprintf>
	  HAL_Delay(1000);
 800019c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001a0:	f000 fbd0 	bl	8000944 <HAL_Delay>
	  SPI1_Tx_Buff++;
 80001a4:	4b04      	ldr	r3, [pc, #16]	; (80001b8 <main+0x6c>)
 80001a6:	781b      	ldrb	r3, [r3, #0]
 80001a8:	3301      	adds	r3, #1
 80001aa:	b2da      	uxtb	r2, r3
 80001ac:	4b02      	ldr	r3, [pc, #8]	; (80001b8 <main+0x6c>)
 80001ae:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4,0);// enable slave
 80001b0:	e7da      	b.n	8000168 <main+0x1c>
 80001b2:	bf00      	nop
 80001b4:	40010800 	.word	0x40010800
 80001b8:	20000000 	.word	0x20000000
 80001bc:	20000138 	.word	0x20000138
 80001c0:	20000134 	.word	0x20000134
 80001c4:	2000009c 	.word	0x2000009c
 80001c8:	0800330c 	.word	0x0800330c

080001cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b090      	sub	sp, #64	; 0x40
 80001d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001d2:	f107 0318 	add.w	r3, r7, #24
 80001d6:	2228      	movs	r2, #40	; 0x28
 80001d8:	2100      	movs	r1, #0
 80001da:	4618      	mov	r0, r3
 80001dc:	f002 f994 	bl	8002508 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001e0:	1d3b      	adds	r3, r7, #4
 80001e2:	2200      	movs	r2, #0
 80001e4:	601a      	str	r2, [r3, #0]
 80001e6:	605a      	str	r2, [r3, #4]
 80001e8:	609a      	str	r2, [r3, #8]
 80001ea:	60da      	str	r2, [r3, #12]
 80001ec:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001ee:	2301      	movs	r3, #1
 80001f0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001f6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001f8:	2300      	movs	r3, #0
 80001fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001fc:	2301      	movs	r3, #1
 80001fe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000200:	2302      	movs	r3, #2
 8000202:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000204:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000208:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800020a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800020e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000210:	f107 0318 	add.w	r3, r7, #24
 8000214:	4618      	mov	r0, r3
 8000216:	f000 fe0d 	bl	8000e34 <HAL_RCC_OscConfig>
 800021a:	4603      	mov	r3, r0
 800021c:	2b00      	cmp	r3, #0
 800021e:	d001      	beq.n	8000224 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000220:	f000 f90a 	bl	8000438 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000224:	230f      	movs	r3, #15
 8000226:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000228:	2302      	movs	r3, #2
 800022a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800022c:	2300      	movs	r3, #0
 800022e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000230:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000234:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000236:	2300      	movs	r3, #0
 8000238:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800023a:	1d3b      	adds	r3, r7, #4
 800023c:	2102      	movs	r1, #2
 800023e:	4618      	mov	r0, r3
 8000240:	f001 f878 	bl	8001334 <HAL_RCC_ClockConfig>
 8000244:	4603      	mov	r3, r0
 8000246:	2b00      	cmp	r3, #0
 8000248:	d001      	beq.n	800024e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800024a:	f000 f8f5 	bl	8000438 <Error_Handler>
  }
}
 800024e:	bf00      	nop
 8000250:	3740      	adds	r7, #64	; 0x40
 8000252:	46bd      	mov	sp, r7
 8000254:	bd80      	pop	{r7, pc}
	...

08000258 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800025c:	4b17      	ldr	r3, [pc, #92]	; (80002bc <MX_SPI1_Init+0x64>)
 800025e:	4a18      	ldr	r2, [pc, #96]	; (80002c0 <MX_SPI1_Init+0x68>)
 8000260:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000262:	4b16      	ldr	r3, [pc, #88]	; (80002bc <MX_SPI1_Init+0x64>)
 8000264:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000268:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800026a:	4b14      	ldr	r3, [pc, #80]	; (80002bc <MX_SPI1_Init+0x64>)
 800026c:	2200      	movs	r2, #0
 800026e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000270:	4b12      	ldr	r3, [pc, #72]	; (80002bc <MX_SPI1_Init+0x64>)
 8000272:	2200      	movs	r2, #0
 8000274:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000276:	4b11      	ldr	r3, [pc, #68]	; (80002bc <MX_SPI1_Init+0x64>)
 8000278:	2200      	movs	r2, #0
 800027a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800027c:	4b0f      	ldr	r3, [pc, #60]	; (80002bc <MX_SPI1_Init+0x64>)
 800027e:	2200      	movs	r2, #0
 8000280:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000282:	4b0e      	ldr	r3, [pc, #56]	; (80002bc <MX_SPI1_Init+0x64>)
 8000284:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000288:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800028a:	4b0c      	ldr	r3, [pc, #48]	; (80002bc <MX_SPI1_Init+0x64>)
 800028c:	2208      	movs	r2, #8
 800028e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000290:	4b0a      	ldr	r3, [pc, #40]	; (80002bc <MX_SPI1_Init+0x64>)
 8000292:	2200      	movs	r2, #0
 8000294:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000296:	4b09      	ldr	r3, [pc, #36]	; (80002bc <MX_SPI1_Init+0x64>)
 8000298:	2200      	movs	r2, #0
 800029a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800029c:	4b07      	ldr	r3, [pc, #28]	; (80002bc <MX_SPI1_Init+0x64>)
 800029e:	2200      	movs	r2, #0
 80002a0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80002a2:	4b06      	ldr	r3, [pc, #24]	; (80002bc <MX_SPI1_Init+0x64>)
 80002a4:	220a      	movs	r2, #10
 80002a6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80002a8:	4804      	ldr	r0, [pc, #16]	; (80002bc <MX_SPI1_Init+0x64>)
 80002aa:	f001 f9df 	bl	800166c <HAL_SPI_Init>
 80002ae:	4603      	mov	r3, r0
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d001      	beq.n	80002b8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80002b4:	f000 f8c0 	bl	8000438 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80002b8:	bf00      	nop
 80002ba:	bd80      	pop	{r7, pc}
 80002bc:	20000138 	.word	0x20000138
 80002c0:	40013000 	.word	0x40013000

080002c4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80002c8:	4b16      	ldr	r3, [pc, #88]	; (8000324 <MX_SPI2_Init+0x60>)
 80002ca:	4a17      	ldr	r2, [pc, #92]	; (8000328 <MX_SPI2_Init+0x64>)
 80002cc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 80002ce:	4b15      	ldr	r3, [pc, #84]	; (8000324 <MX_SPI2_Init+0x60>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80002d4:	4b13      	ldr	r3, [pc, #76]	; (8000324 <MX_SPI2_Init+0x60>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80002da:	4b12      	ldr	r3, [pc, #72]	; (8000324 <MX_SPI2_Init+0x60>)
 80002dc:	2200      	movs	r2, #0
 80002de:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80002e0:	4b10      	ldr	r3, [pc, #64]	; (8000324 <MX_SPI2_Init+0x60>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80002e6:	4b0f      	ldr	r3, [pc, #60]	; (8000324 <MX_SPI2_Init+0x60>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 80002ec:	4b0d      	ldr	r3, [pc, #52]	; (8000324 <MX_SPI2_Init+0x60>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80002f2:	4b0c      	ldr	r3, [pc, #48]	; (8000324 <MX_SPI2_Init+0x60>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80002f8:	4b0a      	ldr	r3, [pc, #40]	; (8000324 <MX_SPI2_Init+0x60>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80002fe:	4b09      	ldr	r3, [pc, #36]	; (8000324 <MX_SPI2_Init+0x60>)
 8000300:	2200      	movs	r2, #0
 8000302:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000304:	4b07      	ldr	r3, [pc, #28]	; (8000324 <MX_SPI2_Init+0x60>)
 8000306:	2200      	movs	r2, #0
 8000308:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800030a:	4b06      	ldr	r3, [pc, #24]	; (8000324 <MX_SPI2_Init+0x60>)
 800030c:	220a      	movs	r2, #10
 800030e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000310:	4804      	ldr	r0, [pc, #16]	; (8000324 <MX_SPI2_Init+0x60>)
 8000312:	f001 f9ab 	bl	800166c <HAL_SPI_Init>
 8000316:	4603      	mov	r3, r0
 8000318:	2b00      	cmp	r3, #0
 800031a:	d001      	beq.n	8000320 <MX_SPI2_Init+0x5c>
  {
    Error_Handler();
 800031c:	f000 f88c 	bl	8000438 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000320:	bf00      	nop
 8000322:	bd80      	pop	{r7, pc}
 8000324:	2000009c 	.word	0x2000009c
 8000328:	40003800 	.word	0x40003800

0800032c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000330:	4b11      	ldr	r3, [pc, #68]	; (8000378 <MX_USART3_UART_Init+0x4c>)
 8000332:	4a12      	ldr	r2, [pc, #72]	; (800037c <MX_USART3_UART_Init+0x50>)
 8000334:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000336:	4b10      	ldr	r3, [pc, #64]	; (8000378 <MX_USART3_UART_Init+0x4c>)
 8000338:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800033c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800033e:	4b0e      	ldr	r3, [pc, #56]	; (8000378 <MX_USART3_UART_Init+0x4c>)
 8000340:	2200      	movs	r2, #0
 8000342:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000344:	4b0c      	ldr	r3, [pc, #48]	; (8000378 <MX_USART3_UART_Init+0x4c>)
 8000346:	2200      	movs	r2, #0
 8000348:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800034a:	4b0b      	ldr	r3, [pc, #44]	; (8000378 <MX_USART3_UART_Init+0x4c>)
 800034c:	2200      	movs	r2, #0
 800034e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000350:	4b09      	ldr	r3, [pc, #36]	; (8000378 <MX_USART3_UART_Init+0x4c>)
 8000352:	220c      	movs	r2, #12
 8000354:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000356:	4b08      	ldr	r3, [pc, #32]	; (8000378 <MX_USART3_UART_Init+0x4c>)
 8000358:	2200      	movs	r2, #0
 800035a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800035c:	4b06      	ldr	r3, [pc, #24]	; (8000378 <MX_USART3_UART_Init+0x4c>)
 800035e:	2200      	movs	r2, #0
 8000360:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000362:	4805      	ldr	r0, [pc, #20]	; (8000378 <MX_USART3_UART_Init+0x4c>)
 8000364:	f001 fe9c 	bl	80020a0 <HAL_UART_Init>
 8000368:	4603      	mov	r3, r0
 800036a:	2b00      	cmp	r3, #0
 800036c:	d001      	beq.n	8000372 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800036e:	f000 f863 	bl	8000438 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000372:	bf00      	nop
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	200000f4 	.word	0x200000f4
 800037c:	40004800 	.word	0x40004800

08000380 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b088      	sub	sp, #32
 8000384:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000386:	f107 0310 	add.w	r3, r7, #16
 800038a:	2200      	movs	r2, #0
 800038c:	601a      	str	r2, [r3, #0]
 800038e:	605a      	str	r2, [r3, #4]
 8000390:	609a      	str	r2, [r3, #8]
 8000392:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000394:	4b1d      	ldr	r3, [pc, #116]	; (800040c <MX_GPIO_Init+0x8c>)
 8000396:	699b      	ldr	r3, [r3, #24]
 8000398:	4a1c      	ldr	r2, [pc, #112]	; (800040c <MX_GPIO_Init+0x8c>)
 800039a:	f043 0320 	orr.w	r3, r3, #32
 800039e:	6193      	str	r3, [r2, #24]
 80003a0:	4b1a      	ldr	r3, [pc, #104]	; (800040c <MX_GPIO_Init+0x8c>)
 80003a2:	699b      	ldr	r3, [r3, #24]
 80003a4:	f003 0320 	and.w	r3, r3, #32
 80003a8:	60fb      	str	r3, [r7, #12]
 80003aa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ac:	4b17      	ldr	r3, [pc, #92]	; (800040c <MX_GPIO_Init+0x8c>)
 80003ae:	699b      	ldr	r3, [r3, #24]
 80003b0:	4a16      	ldr	r2, [pc, #88]	; (800040c <MX_GPIO_Init+0x8c>)
 80003b2:	f043 0304 	orr.w	r3, r3, #4
 80003b6:	6193      	str	r3, [r2, #24]
 80003b8:	4b14      	ldr	r3, [pc, #80]	; (800040c <MX_GPIO_Init+0x8c>)
 80003ba:	699b      	ldr	r3, [r3, #24]
 80003bc:	f003 0304 	and.w	r3, r3, #4
 80003c0:	60bb      	str	r3, [r7, #8]
 80003c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003c4:	4b11      	ldr	r3, [pc, #68]	; (800040c <MX_GPIO_Init+0x8c>)
 80003c6:	699b      	ldr	r3, [r3, #24]
 80003c8:	4a10      	ldr	r2, [pc, #64]	; (800040c <MX_GPIO_Init+0x8c>)
 80003ca:	f043 0308 	orr.w	r3, r3, #8
 80003ce:	6193      	str	r3, [r2, #24]
 80003d0:	4b0e      	ldr	r3, [pc, #56]	; (800040c <MX_GPIO_Init+0x8c>)
 80003d2:	699b      	ldr	r3, [r3, #24]
 80003d4:	f003 0308 	and.w	r3, r3, #8
 80003d8:	607b      	str	r3, [r7, #4]
 80003da:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80003dc:	2201      	movs	r2, #1
 80003de:	2110      	movs	r1, #16
 80003e0:	480b      	ldr	r0, [pc, #44]	; (8000410 <MX_GPIO_Init+0x90>)
 80003e2:	f000 fd0f 	bl	8000e04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80003e6:	2310      	movs	r3, #16
 80003e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003ea:	2301      	movs	r3, #1
 80003ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ee:	2300      	movs	r3, #0
 80003f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003f2:	2303      	movs	r3, #3
 80003f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003f6:	f107 0310 	add.w	r3, r7, #16
 80003fa:	4619      	mov	r1, r3
 80003fc:	4804      	ldr	r0, [pc, #16]	; (8000410 <MX_GPIO_Init+0x90>)
 80003fe:	f000 fba7 	bl	8000b50 <HAL_GPIO_Init>

}
 8000402:	bf00      	nop
 8000404:	3720      	adds	r7, #32
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}
 800040a:	bf00      	nop
 800040c:	40021000 	.word	0x40021000
 8000410:	40010800 	.word	0x40010800

08000414 <__io_putchar>:
#else
 #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b082      	sub	sp, #8
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
 HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 100);
 800041c:	1d39      	adds	r1, r7, #4
 800041e:	2364      	movs	r3, #100	; 0x64
 8000420:	2201      	movs	r2, #1
 8000422:	4804      	ldr	r0, [pc, #16]	; (8000434 <__io_putchar+0x20>)
 8000424:	f001 fe89 	bl	800213a <HAL_UART_Transmit>
 return ch;
 8000428:	687b      	ldr	r3, [r7, #4]
}
 800042a:	4618      	mov	r0, r3
 800042c:	3708      	adds	r7, #8
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}
 8000432:	bf00      	nop
 8000434:	200000f4 	.word	0x200000f4

08000438 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000438:	b480      	push	{r7}
 800043a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800043c:	bf00      	nop
 800043e:	46bd      	mov	sp, r7
 8000440:	bc80      	pop	{r7}
 8000442:	4770      	bx	lr

08000444 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000444:	b480      	push	{r7}
 8000446:	b085      	sub	sp, #20
 8000448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800044a:	4b15      	ldr	r3, [pc, #84]	; (80004a0 <HAL_MspInit+0x5c>)
 800044c:	699b      	ldr	r3, [r3, #24]
 800044e:	4a14      	ldr	r2, [pc, #80]	; (80004a0 <HAL_MspInit+0x5c>)
 8000450:	f043 0301 	orr.w	r3, r3, #1
 8000454:	6193      	str	r3, [r2, #24]
 8000456:	4b12      	ldr	r3, [pc, #72]	; (80004a0 <HAL_MspInit+0x5c>)
 8000458:	699b      	ldr	r3, [r3, #24]
 800045a:	f003 0301 	and.w	r3, r3, #1
 800045e:	60bb      	str	r3, [r7, #8]
 8000460:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000462:	4b0f      	ldr	r3, [pc, #60]	; (80004a0 <HAL_MspInit+0x5c>)
 8000464:	69db      	ldr	r3, [r3, #28]
 8000466:	4a0e      	ldr	r2, [pc, #56]	; (80004a0 <HAL_MspInit+0x5c>)
 8000468:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800046c:	61d3      	str	r3, [r2, #28]
 800046e:	4b0c      	ldr	r3, [pc, #48]	; (80004a0 <HAL_MspInit+0x5c>)
 8000470:	69db      	ldr	r3, [r3, #28]
 8000472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000476:	607b      	str	r3, [r7, #4]
 8000478:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800047a:	4b0a      	ldr	r3, [pc, #40]	; (80004a4 <HAL_MspInit+0x60>)
 800047c:	685b      	ldr	r3, [r3, #4]
 800047e:	60fb      	str	r3, [r7, #12]
 8000480:	68fb      	ldr	r3, [r7, #12]
 8000482:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000486:	60fb      	str	r3, [r7, #12]
 8000488:	68fb      	ldr	r3, [r7, #12]
 800048a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800048e:	60fb      	str	r3, [r7, #12]
 8000490:	4a04      	ldr	r2, [pc, #16]	; (80004a4 <HAL_MspInit+0x60>)
 8000492:	68fb      	ldr	r3, [r7, #12]
 8000494:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000496:	bf00      	nop
 8000498:	3714      	adds	r7, #20
 800049a:	46bd      	mov	sp, r7
 800049c:	bc80      	pop	{r7}
 800049e:	4770      	bx	lr
 80004a0:	40021000 	.word	0x40021000
 80004a4:	40010000 	.word	0x40010000

080004a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b08a      	sub	sp, #40	; 0x28
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004b0:	f107 0318 	add.w	r3, r7, #24
 80004b4:	2200      	movs	r2, #0
 80004b6:	601a      	str	r2, [r3, #0]
 80004b8:	605a      	str	r2, [r3, #4]
 80004ba:	609a      	str	r2, [r3, #8]
 80004bc:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	4a37      	ldr	r2, [pc, #220]	; (80005a0 <HAL_SPI_MspInit+0xf8>)
 80004c4:	4293      	cmp	r3, r2
 80004c6:	d130      	bne.n	800052a <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80004c8:	4b36      	ldr	r3, [pc, #216]	; (80005a4 <HAL_SPI_MspInit+0xfc>)
 80004ca:	699b      	ldr	r3, [r3, #24]
 80004cc:	4a35      	ldr	r2, [pc, #212]	; (80005a4 <HAL_SPI_MspInit+0xfc>)
 80004ce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80004d2:	6193      	str	r3, [r2, #24]
 80004d4:	4b33      	ldr	r3, [pc, #204]	; (80005a4 <HAL_SPI_MspInit+0xfc>)
 80004d6:	699b      	ldr	r3, [r3, #24]
 80004d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80004dc:	617b      	str	r3, [r7, #20]
 80004de:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004e0:	4b30      	ldr	r3, [pc, #192]	; (80005a4 <HAL_SPI_MspInit+0xfc>)
 80004e2:	699b      	ldr	r3, [r3, #24]
 80004e4:	4a2f      	ldr	r2, [pc, #188]	; (80005a4 <HAL_SPI_MspInit+0xfc>)
 80004e6:	f043 0304 	orr.w	r3, r3, #4
 80004ea:	6193      	str	r3, [r2, #24]
 80004ec:	4b2d      	ldr	r3, [pc, #180]	; (80005a4 <HAL_SPI_MspInit+0xfc>)
 80004ee:	699b      	ldr	r3, [r3, #24]
 80004f0:	f003 0304 	and.w	r3, r3, #4
 80004f4:	613b      	str	r3, [r7, #16]
 80004f6:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80004f8:	23a0      	movs	r3, #160	; 0xa0
 80004fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004fc:	2302      	movs	r3, #2
 80004fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000500:	2303      	movs	r3, #3
 8000502:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000504:	f107 0318 	add.w	r3, r7, #24
 8000508:	4619      	mov	r1, r3
 800050a:	4827      	ldr	r0, [pc, #156]	; (80005a8 <HAL_SPI_MspInit+0x100>)
 800050c:	f000 fb20 	bl	8000b50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000510:	2340      	movs	r3, #64	; 0x40
 8000512:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000514:	2300      	movs	r3, #0
 8000516:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000518:	2300      	movs	r3, #0
 800051a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800051c:	f107 0318 	add.w	r3, r7, #24
 8000520:	4619      	mov	r1, r3
 8000522:	4821      	ldr	r0, [pc, #132]	; (80005a8 <HAL_SPI_MspInit+0x100>)
 8000524:	f000 fb14 	bl	8000b50 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000528:	e036      	b.n	8000598 <HAL_SPI_MspInit+0xf0>
  else if(hspi->Instance==SPI2)
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	4a1f      	ldr	r2, [pc, #124]	; (80005ac <HAL_SPI_MspInit+0x104>)
 8000530:	4293      	cmp	r3, r2
 8000532:	d131      	bne.n	8000598 <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000534:	4b1b      	ldr	r3, [pc, #108]	; (80005a4 <HAL_SPI_MspInit+0xfc>)
 8000536:	69db      	ldr	r3, [r3, #28]
 8000538:	4a1a      	ldr	r2, [pc, #104]	; (80005a4 <HAL_SPI_MspInit+0xfc>)
 800053a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800053e:	61d3      	str	r3, [r2, #28]
 8000540:	4b18      	ldr	r3, [pc, #96]	; (80005a4 <HAL_SPI_MspInit+0xfc>)
 8000542:	69db      	ldr	r3, [r3, #28]
 8000544:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000548:	60fb      	str	r3, [r7, #12]
 800054a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800054c:	4b15      	ldr	r3, [pc, #84]	; (80005a4 <HAL_SPI_MspInit+0xfc>)
 800054e:	699b      	ldr	r3, [r3, #24]
 8000550:	4a14      	ldr	r2, [pc, #80]	; (80005a4 <HAL_SPI_MspInit+0xfc>)
 8000552:	f043 0308 	orr.w	r3, r3, #8
 8000556:	6193      	str	r3, [r2, #24]
 8000558:	4b12      	ldr	r3, [pc, #72]	; (80005a4 <HAL_SPI_MspInit+0xfc>)
 800055a:	699b      	ldr	r3, [r3, #24]
 800055c:	f003 0308 	and.w	r3, r3, #8
 8000560:	60bb      	str	r3, [r7, #8]
 8000562:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8000564:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8000568:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800056a:	2300      	movs	r3, #0
 800056c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056e:	2300      	movs	r3, #0
 8000570:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000572:	f107 0318 	add.w	r3, r7, #24
 8000576:	4619      	mov	r1, r3
 8000578:	480d      	ldr	r0, [pc, #52]	; (80005b0 <HAL_SPI_MspInit+0x108>)
 800057a:	f000 fae9 	bl	8000b50 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800057e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000582:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000584:	2302      	movs	r3, #2
 8000586:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000588:	2303      	movs	r3, #3
 800058a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800058c:	f107 0318 	add.w	r3, r7, #24
 8000590:	4619      	mov	r1, r3
 8000592:	4807      	ldr	r0, [pc, #28]	; (80005b0 <HAL_SPI_MspInit+0x108>)
 8000594:	f000 fadc 	bl	8000b50 <HAL_GPIO_Init>
}
 8000598:	bf00      	nop
 800059a:	3728      	adds	r7, #40	; 0x28
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	40013000 	.word	0x40013000
 80005a4:	40021000 	.word	0x40021000
 80005a8:	40010800 	.word	0x40010800
 80005ac:	40003800 	.word	0x40003800
 80005b0:	40010c00 	.word	0x40010c00

080005b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b088      	sub	sp, #32
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005bc:	f107 0310 	add.w	r3, r7, #16
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
 80005c4:	605a      	str	r2, [r3, #4]
 80005c6:	609a      	str	r2, [r3, #8]
 80005c8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	4a1c      	ldr	r2, [pc, #112]	; (8000640 <HAL_UART_MspInit+0x8c>)
 80005d0:	4293      	cmp	r3, r2
 80005d2:	d131      	bne.n	8000638 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80005d4:	4b1b      	ldr	r3, [pc, #108]	; (8000644 <HAL_UART_MspInit+0x90>)
 80005d6:	69db      	ldr	r3, [r3, #28]
 80005d8:	4a1a      	ldr	r2, [pc, #104]	; (8000644 <HAL_UART_MspInit+0x90>)
 80005da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005de:	61d3      	str	r3, [r2, #28]
 80005e0:	4b18      	ldr	r3, [pc, #96]	; (8000644 <HAL_UART_MspInit+0x90>)
 80005e2:	69db      	ldr	r3, [r3, #28]
 80005e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80005e8:	60fb      	str	r3, [r7, #12]
 80005ea:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ec:	4b15      	ldr	r3, [pc, #84]	; (8000644 <HAL_UART_MspInit+0x90>)
 80005ee:	699b      	ldr	r3, [r3, #24]
 80005f0:	4a14      	ldr	r2, [pc, #80]	; (8000644 <HAL_UART_MspInit+0x90>)
 80005f2:	f043 0308 	orr.w	r3, r3, #8
 80005f6:	6193      	str	r3, [r2, #24]
 80005f8:	4b12      	ldr	r3, [pc, #72]	; (8000644 <HAL_UART_MspInit+0x90>)
 80005fa:	699b      	ldr	r3, [r3, #24]
 80005fc:	f003 0308 	and.w	r3, r3, #8
 8000600:	60bb      	str	r3, [r7, #8]
 8000602:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration    
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000604:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000608:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800060a:	2302      	movs	r3, #2
 800060c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800060e:	2303      	movs	r3, #3
 8000610:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000612:	f107 0310 	add.w	r3, r7, #16
 8000616:	4619      	mov	r1, r3
 8000618:	480b      	ldr	r0, [pc, #44]	; (8000648 <HAL_UART_MspInit+0x94>)
 800061a:	f000 fa99 	bl	8000b50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800061e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000622:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000624:	2300      	movs	r3, #0
 8000626:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000628:	2300      	movs	r3, #0
 800062a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800062c:	f107 0310 	add.w	r3, r7, #16
 8000630:	4619      	mov	r1, r3
 8000632:	4805      	ldr	r0, [pc, #20]	; (8000648 <HAL_UART_MspInit+0x94>)
 8000634:	f000 fa8c 	bl	8000b50 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000638:	bf00      	nop
 800063a:	3720      	adds	r7, #32
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	40004800 	.word	0x40004800
 8000644:	40021000 	.word	0x40021000
 8000648:	40010c00 	.word	0x40010c00

0800064c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000650:	bf00      	nop
 8000652:	46bd      	mov	sp, r7
 8000654:	bc80      	pop	{r7}
 8000656:	4770      	bx	lr

08000658 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800065c:	e7fe      	b.n	800065c <HardFault_Handler+0x4>

0800065e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800065e:	b480      	push	{r7}
 8000660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000662:	e7fe      	b.n	8000662 <MemManage_Handler+0x4>

08000664 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000668:	e7fe      	b.n	8000668 <BusFault_Handler+0x4>

0800066a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800066a:	b480      	push	{r7}
 800066c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800066e:	e7fe      	b.n	800066e <UsageFault_Handler+0x4>

08000670 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000674:	bf00      	nop
 8000676:	46bd      	mov	sp, r7
 8000678:	bc80      	pop	{r7}
 800067a:	4770      	bx	lr

0800067c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000680:	bf00      	nop
 8000682:	46bd      	mov	sp, r7
 8000684:	bc80      	pop	{r7}
 8000686:	4770      	bx	lr

08000688 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800068c:	bf00      	nop
 800068e:	46bd      	mov	sp, r7
 8000690:	bc80      	pop	{r7}
 8000692:	4770      	bx	lr

08000694 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000698:	f000 f938 	bl	800090c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800069c:	bf00      	nop
 800069e:	bd80      	pop	{r7, pc}

080006a0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b086      	sub	sp, #24
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	60f8      	str	r0, [r7, #12]
 80006a8:	60b9      	str	r1, [r7, #8]
 80006aa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006ac:	2300      	movs	r3, #0
 80006ae:	617b      	str	r3, [r7, #20]
 80006b0:	e00a      	b.n	80006c8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80006b2:	f3af 8000 	nop.w
 80006b6:	4601      	mov	r1, r0
 80006b8:	68bb      	ldr	r3, [r7, #8]
 80006ba:	1c5a      	adds	r2, r3, #1
 80006bc:	60ba      	str	r2, [r7, #8]
 80006be:	b2ca      	uxtb	r2, r1
 80006c0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006c2:	697b      	ldr	r3, [r7, #20]
 80006c4:	3301      	adds	r3, #1
 80006c6:	617b      	str	r3, [r7, #20]
 80006c8:	697a      	ldr	r2, [r7, #20]
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	429a      	cmp	r2, r3
 80006ce:	dbf0      	blt.n	80006b2 <_read+0x12>
	}

return len;
 80006d0:	687b      	ldr	r3, [r7, #4]
}
 80006d2:	4618      	mov	r0, r3
 80006d4:	3718      	adds	r7, #24
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}

080006da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80006da:	b580      	push	{r7, lr}
 80006dc:	b086      	sub	sp, #24
 80006de:	af00      	add	r7, sp, #0
 80006e0:	60f8      	str	r0, [r7, #12]
 80006e2:	60b9      	str	r1, [r7, #8]
 80006e4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006e6:	2300      	movs	r3, #0
 80006e8:	617b      	str	r3, [r7, #20]
 80006ea:	e009      	b.n	8000700 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	1c5a      	adds	r2, r3, #1
 80006f0:	60ba      	str	r2, [r7, #8]
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	4618      	mov	r0, r3
 80006f6:	f7ff fe8d 	bl	8000414 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006fa:	697b      	ldr	r3, [r7, #20]
 80006fc:	3301      	adds	r3, #1
 80006fe:	617b      	str	r3, [r7, #20]
 8000700:	697a      	ldr	r2, [r7, #20]
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	429a      	cmp	r2, r3
 8000706:	dbf1      	blt.n	80006ec <_write+0x12>
	}
	return len;
 8000708:	687b      	ldr	r3, [r7, #4]
}
 800070a:	4618      	mov	r0, r3
 800070c:	3718      	adds	r7, #24
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}

08000712 <_close>:

int _close(int file)
{
 8000712:	b480      	push	{r7}
 8000714:	b083      	sub	sp, #12
 8000716:	af00      	add	r7, sp, #0
 8000718:	6078      	str	r0, [r7, #4]
	return -1;
 800071a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800071e:	4618      	mov	r0, r3
 8000720:	370c      	adds	r7, #12
 8000722:	46bd      	mov	sp, r7
 8000724:	bc80      	pop	{r7}
 8000726:	4770      	bx	lr

08000728 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
 8000730:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000732:	683b      	ldr	r3, [r7, #0]
 8000734:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000738:	605a      	str	r2, [r3, #4]
	return 0;
 800073a:	2300      	movs	r3, #0
}
 800073c:	4618      	mov	r0, r3
 800073e:	370c      	adds	r7, #12
 8000740:	46bd      	mov	sp, r7
 8000742:	bc80      	pop	{r7}
 8000744:	4770      	bx	lr

08000746 <_isatty>:

int _isatty(int file)
{
 8000746:	b480      	push	{r7}
 8000748:	b083      	sub	sp, #12
 800074a:	af00      	add	r7, sp, #0
 800074c:	6078      	str	r0, [r7, #4]
	return 1;
 800074e:	2301      	movs	r3, #1
}
 8000750:	4618      	mov	r0, r3
 8000752:	370c      	adds	r7, #12
 8000754:	46bd      	mov	sp, r7
 8000756:	bc80      	pop	{r7}
 8000758:	4770      	bx	lr

0800075a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800075a:	b480      	push	{r7}
 800075c:	b085      	sub	sp, #20
 800075e:	af00      	add	r7, sp, #0
 8000760:	60f8      	str	r0, [r7, #12]
 8000762:	60b9      	str	r1, [r7, #8]
 8000764:	607a      	str	r2, [r7, #4]
	return 0;
 8000766:	2300      	movs	r3, #0
}
 8000768:	4618      	mov	r0, r3
 800076a:	3714      	adds	r7, #20
 800076c:	46bd      	mov	sp, r7
 800076e:	bc80      	pop	{r7}
 8000770:	4770      	bx	lr
	...

08000774 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800077c:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <_sbrk+0x50>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	2b00      	cmp	r3, #0
 8000782:	d102      	bne.n	800078a <_sbrk+0x16>
		heap_end = &end;
 8000784:	4b0f      	ldr	r3, [pc, #60]	; (80007c4 <_sbrk+0x50>)
 8000786:	4a10      	ldr	r2, [pc, #64]	; (80007c8 <_sbrk+0x54>)
 8000788:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800078a:	4b0e      	ldr	r3, [pc, #56]	; (80007c4 <_sbrk+0x50>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000790:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <_sbrk+0x50>)
 8000792:	681a      	ldr	r2, [r3, #0]
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	4413      	add	r3, r2
 8000798:	466a      	mov	r2, sp
 800079a:	4293      	cmp	r3, r2
 800079c:	d907      	bls.n	80007ae <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800079e:	f001 fe89 	bl	80024b4 <__errno>
 80007a2:	4602      	mov	r2, r0
 80007a4:	230c      	movs	r3, #12
 80007a6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80007a8:	f04f 33ff 	mov.w	r3, #4294967295
 80007ac:	e006      	b.n	80007bc <_sbrk+0x48>
	}

	heap_end += incr;
 80007ae:	4b05      	ldr	r3, [pc, #20]	; (80007c4 <_sbrk+0x50>)
 80007b0:	681a      	ldr	r2, [r3, #0]
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	4413      	add	r3, r2
 80007b6:	4a03      	ldr	r2, [pc, #12]	; (80007c4 <_sbrk+0x50>)
 80007b8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80007ba:	68fb      	ldr	r3, [r7, #12]
}
 80007bc:	4618      	mov	r0, r3
 80007be:	3710      	adds	r7, #16
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	20000090 	.word	0x20000090
 80007c8:	20000198 	.word	0x20000198

080007cc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80007d0:	4b15      	ldr	r3, [pc, #84]	; (8000828 <SystemInit+0x5c>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a14      	ldr	r2, [pc, #80]	; (8000828 <SystemInit+0x5c>)
 80007d6:	f043 0301 	orr.w	r3, r3, #1
 80007da:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80007dc:	4b12      	ldr	r3, [pc, #72]	; (8000828 <SystemInit+0x5c>)
 80007de:	685a      	ldr	r2, [r3, #4]
 80007e0:	4911      	ldr	r1, [pc, #68]	; (8000828 <SystemInit+0x5c>)
 80007e2:	4b12      	ldr	r3, [pc, #72]	; (800082c <SystemInit+0x60>)
 80007e4:	4013      	ands	r3, r2
 80007e6:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80007e8:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <SystemInit+0x5c>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a0e      	ldr	r2, [pc, #56]	; (8000828 <SystemInit+0x5c>)
 80007ee:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80007f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80007f6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80007f8:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <SystemInit+0x5c>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a0a      	ldr	r2, [pc, #40]	; (8000828 <SystemInit+0x5c>)
 80007fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000802:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000804:	4b08      	ldr	r3, [pc, #32]	; (8000828 <SystemInit+0x5c>)
 8000806:	685b      	ldr	r3, [r3, #4]
 8000808:	4a07      	ldr	r2, [pc, #28]	; (8000828 <SystemInit+0x5c>)
 800080a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800080e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000810:	4b05      	ldr	r3, [pc, #20]	; (8000828 <SystemInit+0x5c>)
 8000812:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000816:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000818:	4b05      	ldr	r3, [pc, #20]	; (8000830 <SystemInit+0x64>)
 800081a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800081e:	609a      	str	r2, [r3, #8]
#endif 
}
 8000820:	bf00      	nop
 8000822:	46bd      	mov	sp, r7
 8000824:	bc80      	pop	{r7}
 8000826:	4770      	bx	lr
 8000828:	40021000 	.word	0x40021000
 800082c:	f8ff0000 	.word	0xf8ff0000
 8000830:	e000ed00 	.word	0xe000ed00

08000834 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000834:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000836:	e003      	b.n	8000840 <LoopCopyDataInit>

08000838 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000838:	4b0b      	ldr	r3, [pc, #44]	; (8000868 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800083a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800083c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800083e:	3104      	adds	r1, #4

08000840 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000840:	480a      	ldr	r0, [pc, #40]	; (800086c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000842:	4b0b      	ldr	r3, [pc, #44]	; (8000870 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000844:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000846:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000848:	d3f6      	bcc.n	8000838 <CopyDataInit>
  ldr r2, =_sbss
 800084a:	4a0a      	ldr	r2, [pc, #40]	; (8000874 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800084c:	e002      	b.n	8000854 <LoopFillZerobss>

0800084e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800084e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000850:	f842 3b04 	str.w	r3, [r2], #4

08000854 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000854:	4b08      	ldr	r3, [pc, #32]	; (8000878 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000856:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000858:	d3f9      	bcc.n	800084e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800085a:	f7ff ffb7 	bl	80007cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800085e:	f001 fe2f 	bl	80024c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000862:	f7ff fc73 	bl	800014c <main>
  bx lr
 8000866:	4770      	bx	lr
  ldr r3, =_sidata
 8000868:	080033e0 	.word	0x080033e0
  ldr r0, =_sdata
 800086c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000870:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 8000874:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 8000878:	20000198 	.word	0x20000198

0800087c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800087c:	e7fe      	b.n	800087c <ADC1_2_IRQHandler>
	...

08000880 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000884:	4b08      	ldr	r3, [pc, #32]	; (80008a8 <HAL_Init+0x28>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a07      	ldr	r2, [pc, #28]	; (80008a8 <HAL_Init+0x28>)
 800088a:	f043 0310 	orr.w	r3, r3, #16
 800088e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000890:	2003      	movs	r0, #3
 8000892:	f000 f929 	bl	8000ae8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000896:	2000      	movs	r0, #0
 8000898:	f000 f808 	bl	80008ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800089c:	f7ff fdd2 	bl	8000444 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008a0:	2300      	movs	r3, #0
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40022000 	.word	0x40022000

080008ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008b4:	4b12      	ldr	r3, [pc, #72]	; (8000900 <HAL_InitTick+0x54>)
 80008b6:	681a      	ldr	r2, [r3, #0]
 80008b8:	4b12      	ldr	r3, [pc, #72]	; (8000904 <HAL_InitTick+0x58>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	4619      	mov	r1, r3
 80008be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80008c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80008ca:	4618      	mov	r0, r3
 80008cc:	f000 f933 	bl	8000b36 <HAL_SYSTICK_Config>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008d6:	2301      	movs	r3, #1
 80008d8:	e00e      	b.n	80008f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	2b0f      	cmp	r3, #15
 80008de:	d80a      	bhi.n	80008f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008e0:	2200      	movs	r2, #0
 80008e2:	6879      	ldr	r1, [r7, #4]
 80008e4:	f04f 30ff 	mov.w	r0, #4294967295
 80008e8:	f000 f909 	bl	8000afe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008ec:	4a06      	ldr	r2, [pc, #24]	; (8000908 <HAL_InitTick+0x5c>)
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008f2:	2300      	movs	r3, #0
 80008f4:	e000      	b.n	80008f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008f6:	2301      	movs	r3, #1
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3708      	adds	r7, #8
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	20000004 	.word	0x20000004
 8000904:	2000000c 	.word	0x2000000c
 8000908:	20000008 	.word	0x20000008

0800090c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000910:	4b05      	ldr	r3, [pc, #20]	; (8000928 <HAL_IncTick+0x1c>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	461a      	mov	r2, r3
 8000916:	4b05      	ldr	r3, [pc, #20]	; (800092c <HAL_IncTick+0x20>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	4413      	add	r3, r2
 800091c:	4a03      	ldr	r2, [pc, #12]	; (800092c <HAL_IncTick+0x20>)
 800091e:	6013      	str	r3, [r2, #0]
}
 8000920:	bf00      	nop
 8000922:	46bd      	mov	sp, r7
 8000924:	bc80      	pop	{r7}
 8000926:	4770      	bx	lr
 8000928:	2000000c 	.word	0x2000000c
 800092c:	20000190 	.word	0x20000190

08000930 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  return uwTick;
 8000934:	4b02      	ldr	r3, [pc, #8]	; (8000940 <HAL_GetTick+0x10>)
 8000936:	681b      	ldr	r3, [r3, #0]
}
 8000938:	4618      	mov	r0, r3
 800093a:	46bd      	mov	sp, r7
 800093c:	bc80      	pop	{r7}
 800093e:	4770      	bx	lr
 8000940:	20000190 	.word	0x20000190

08000944 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b084      	sub	sp, #16
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800094c:	f7ff fff0 	bl	8000930 <HAL_GetTick>
 8000950:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800095c:	d005      	beq.n	800096a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800095e:	4b09      	ldr	r3, [pc, #36]	; (8000984 <HAL_Delay+0x40>)
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	461a      	mov	r2, r3
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	4413      	add	r3, r2
 8000968:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800096a:	bf00      	nop
 800096c:	f7ff ffe0 	bl	8000930 <HAL_GetTick>
 8000970:	4602      	mov	r2, r0
 8000972:	68bb      	ldr	r3, [r7, #8]
 8000974:	1ad3      	subs	r3, r2, r3
 8000976:	68fa      	ldr	r2, [r7, #12]
 8000978:	429a      	cmp	r2, r3
 800097a:	d8f7      	bhi.n	800096c <HAL_Delay+0x28>
  {
  }
}
 800097c:	bf00      	nop
 800097e:	3710      	adds	r7, #16
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	2000000c 	.word	0x2000000c

08000988 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000988:	b480      	push	{r7}
 800098a:	b085      	sub	sp, #20
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	f003 0307 	and.w	r3, r3, #7
 8000996:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000998:	4b0c      	ldr	r3, [pc, #48]	; (80009cc <__NVIC_SetPriorityGrouping+0x44>)
 800099a:	68db      	ldr	r3, [r3, #12]
 800099c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800099e:	68ba      	ldr	r2, [r7, #8]
 80009a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009a4:	4013      	ands	r3, r2
 80009a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009ac:	68bb      	ldr	r3, [r7, #8]
 80009ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009ba:	4a04      	ldr	r2, [pc, #16]	; (80009cc <__NVIC_SetPriorityGrouping+0x44>)
 80009bc:	68bb      	ldr	r3, [r7, #8]
 80009be:	60d3      	str	r3, [r2, #12]
}
 80009c0:	bf00      	nop
 80009c2:	3714      	adds	r7, #20
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bc80      	pop	{r7}
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	e000ed00 	.word	0xe000ed00

080009d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009d4:	4b04      	ldr	r3, [pc, #16]	; (80009e8 <__NVIC_GetPriorityGrouping+0x18>)
 80009d6:	68db      	ldr	r3, [r3, #12]
 80009d8:	0a1b      	lsrs	r3, r3, #8
 80009da:	f003 0307 	and.w	r3, r3, #7
}
 80009de:	4618      	mov	r0, r3
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bc80      	pop	{r7}
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	e000ed00 	.word	0xe000ed00

080009ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	4603      	mov	r3, r0
 80009f4:	6039      	str	r1, [r7, #0]
 80009f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	db0a      	blt.n	8000a16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	b2da      	uxtb	r2, r3
 8000a04:	490c      	ldr	r1, [pc, #48]	; (8000a38 <__NVIC_SetPriority+0x4c>)
 8000a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a0a:	0112      	lsls	r2, r2, #4
 8000a0c:	b2d2      	uxtb	r2, r2
 8000a0e:	440b      	add	r3, r1
 8000a10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a14:	e00a      	b.n	8000a2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	b2da      	uxtb	r2, r3
 8000a1a:	4908      	ldr	r1, [pc, #32]	; (8000a3c <__NVIC_SetPriority+0x50>)
 8000a1c:	79fb      	ldrb	r3, [r7, #7]
 8000a1e:	f003 030f 	and.w	r3, r3, #15
 8000a22:	3b04      	subs	r3, #4
 8000a24:	0112      	lsls	r2, r2, #4
 8000a26:	b2d2      	uxtb	r2, r2
 8000a28:	440b      	add	r3, r1
 8000a2a:	761a      	strb	r2, [r3, #24]
}
 8000a2c:	bf00      	nop
 8000a2e:	370c      	adds	r7, #12
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bc80      	pop	{r7}
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	e000e100 	.word	0xe000e100
 8000a3c:	e000ed00 	.word	0xe000ed00

08000a40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b089      	sub	sp, #36	; 0x24
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	60f8      	str	r0, [r7, #12]
 8000a48:	60b9      	str	r1, [r7, #8]
 8000a4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	f003 0307 	and.w	r3, r3, #7
 8000a52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a54:	69fb      	ldr	r3, [r7, #28]
 8000a56:	f1c3 0307 	rsb	r3, r3, #7
 8000a5a:	2b04      	cmp	r3, #4
 8000a5c:	bf28      	it	cs
 8000a5e:	2304      	movcs	r3, #4
 8000a60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a62:	69fb      	ldr	r3, [r7, #28]
 8000a64:	3304      	adds	r3, #4
 8000a66:	2b06      	cmp	r3, #6
 8000a68:	d902      	bls.n	8000a70 <NVIC_EncodePriority+0x30>
 8000a6a:	69fb      	ldr	r3, [r7, #28]
 8000a6c:	3b03      	subs	r3, #3
 8000a6e:	e000      	b.n	8000a72 <NVIC_EncodePriority+0x32>
 8000a70:	2300      	movs	r3, #0
 8000a72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a74:	f04f 32ff 	mov.w	r2, #4294967295
 8000a78:	69bb      	ldr	r3, [r7, #24]
 8000a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7e:	43da      	mvns	r2, r3
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	401a      	ands	r2, r3
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a88:	f04f 31ff 	mov.w	r1, #4294967295
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a92:	43d9      	mvns	r1, r3
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a98:	4313      	orrs	r3, r2
         );
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	3724      	adds	r7, #36	; 0x24
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bc80      	pop	{r7}
 8000aa2:	4770      	bx	lr

08000aa4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	3b01      	subs	r3, #1
 8000ab0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ab4:	d301      	bcc.n	8000aba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	e00f      	b.n	8000ada <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aba:	4a0a      	ldr	r2, [pc, #40]	; (8000ae4 <SysTick_Config+0x40>)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	3b01      	subs	r3, #1
 8000ac0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ac2:	210f      	movs	r1, #15
 8000ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac8:	f7ff ff90 	bl	80009ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000acc:	4b05      	ldr	r3, [pc, #20]	; (8000ae4 <SysTick_Config+0x40>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ad2:	4b04      	ldr	r3, [pc, #16]	; (8000ae4 <SysTick_Config+0x40>)
 8000ad4:	2207      	movs	r2, #7
 8000ad6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ad8:	2300      	movs	r3, #0
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	e000e010 	.word	0xe000e010

08000ae8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000af0:	6878      	ldr	r0, [r7, #4]
 8000af2:	f7ff ff49 	bl	8000988 <__NVIC_SetPriorityGrouping>
}
 8000af6:	bf00      	nop
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}

08000afe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000afe:	b580      	push	{r7, lr}
 8000b00:	b086      	sub	sp, #24
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	4603      	mov	r3, r0
 8000b06:	60b9      	str	r1, [r7, #8]
 8000b08:	607a      	str	r2, [r7, #4]
 8000b0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b10:	f7ff ff5e 	bl	80009d0 <__NVIC_GetPriorityGrouping>
 8000b14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b16:	687a      	ldr	r2, [r7, #4]
 8000b18:	68b9      	ldr	r1, [r7, #8]
 8000b1a:	6978      	ldr	r0, [r7, #20]
 8000b1c:	f7ff ff90 	bl	8000a40 <NVIC_EncodePriority>
 8000b20:	4602      	mov	r2, r0
 8000b22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b26:	4611      	mov	r1, r2
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f7ff ff5f 	bl	80009ec <__NVIC_SetPriority>
}
 8000b2e:	bf00      	nop
 8000b30:	3718      	adds	r7, #24
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}

08000b36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b36:	b580      	push	{r7, lr}
 8000b38:	b082      	sub	sp, #8
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b3e:	6878      	ldr	r0, [r7, #4]
 8000b40:	f7ff ffb0 	bl	8000aa4 <SysTick_Config>
 8000b44:	4603      	mov	r3, r0
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
	...

08000b50 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b08b      	sub	sp, #44	; 0x2c
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
 8000b58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b62:	e127      	b.n	8000db4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b64:	2201      	movs	r2, #1
 8000b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b68:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	69fa      	ldr	r2, [r7, #28]
 8000b74:	4013      	ands	r3, r2
 8000b76:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b78:	69ba      	ldr	r2, [r7, #24]
 8000b7a:	69fb      	ldr	r3, [r7, #28]
 8000b7c:	429a      	cmp	r2, r3
 8000b7e:	f040 8116 	bne.w	8000dae <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	2b12      	cmp	r3, #18
 8000b88:	d034      	beq.n	8000bf4 <HAL_GPIO_Init+0xa4>
 8000b8a:	2b12      	cmp	r3, #18
 8000b8c:	d80d      	bhi.n	8000baa <HAL_GPIO_Init+0x5a>
 8000b8e:	2b02      	cmp	r3, #2
 8000b90:	d02b      	beq.n	8000bea <HAL_GPIO_Init+0x9a>
 8000b92:	2b02      	cmp	r3, #2
 8000b94:	d804      	bhi.n	8000ba0 <HAL_GPIO_Init+0x50>
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d031      	beq.n	8000bfe <HAL_GPIO_Init+0xae>
 8000b9a:	2b01      	cmp	r3, #1
 8000b9c:	d01c      	beq.n	8000bd8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b9e:	e048      	b.n	8000c32 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000ba0:	2b03      	cmp	r3, #3
 8000ba2:	d043      	beq.n	8000c2c <HAL_GPIO_Init+0xdc>
 8000ba4:	2b11      	cmp	r3, #17
 8000ba6:	d01b      	beq.n	8000be0 <HAL_GPIO_Init+0x90>
          break;
 8000ba8:	e043      	b.n	8000c32 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000baa:	4a89      	ldr	r2, [pc, #548]	; (8000dd0 <HAL_GPIO_Init+0x280>)
 8000bac:	4293      	cmp	r3, r2
 8000bae:	d026      	beq.n	8000bfe <HAL_GPIO_Init+0xae>
 8000bb0:	4a87      	ldr	r2, [pc, #540]	; (8000dd0 <HAL_GPIO_Init+0x280>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d806      	bhi.n	8000bc4 <HAL_GPIO_Init+0x74>
 8000bb6:	4a87      	ldr	r2, [pc, #540]	; (8000dd4 <HAL_GPIO_Init+0x284>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d020      	beq.n	8000bfe <HAL_GPIO_Init+0xae>
 8000bbc:	4a86      	ldr	r2, [pc, #536]	; (8000dd8 <HAL_GPIO_Init+0x288>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d01d      	beq.n	8000bfe <HAL_GPIO_Init+0xae>
          break;
 8000bc2:	e036      	b.n	8000c32 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000bc4:	4a85      	ldr	r2, [pc, #532]	; (8000ddc <HAL_GPIO_Init+0x28c>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d019      	beq.n	8000bfe <HAL_GPIO_Init+0xae>
 8000bca:	4a85      	ldr	r2, [pc, #532]	; (8000de0 <HAL_GPIO_Init+0x290>)
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d016      	beq.n	8000bfe <HAL_GPIO_Init+0xae>
 8000bd0:	4a84      	ldr	r2, [pc, #528]	; (8000de4 <HAL_GPIO_Init+0x294>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d013      	beq.n	8000bfe <HAL_GPIO_Init+0xae>
          break;
 8000bd6:	e02c      	b.n	8000c32 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	68db      	ldr	r3, [r3, #12]
 8000bdc:	623b      	str	r3, [r7, #32]
          break;
 8000bde:	e028      	b.n	8000c32 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	68db      	ldr	r3, [r3, #12]
 8000be4:	3304      	adds	r3, #4
 8000be6:	623b      	str	r3, [r7, #32]
          break;
 8000be8:	e023      	b.n	8000c32 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	68db      	ldr	r3, [r3, #12]
 8000bee:	3308      	adds	r3, #8
 8000bf0:	623b      	str	r3, [r7, #32]
          break;
 8000bf2:	e01e      	b.n	8000c32 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	68db      	ldr	r3, [r3, #12]
 8000bf8:	330c      	adds	r3, #12
 8000bfa:	623b      	str	r3, [r7, #32]
          break;
 8000bfc:	e019      	b.n	8000c32 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	689b      	ldr	r3, [r3, #8]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d102      	bne.n	8000c0c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c06:	2304      	movs	r3, #4
 8000c08:	623b      	str	r3, [r7, #32]
          break;
 8000c0a:	e012      	b.n	8000c32 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	689b      	ldr	r3, [r3, #8]
 8000c10:	2b01      	cmp	r3, #1
 8000c12:	d105      	bne.n	8000c20 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c14:	2308      	movs	r3, #8
 8000c16:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	69fa      	ldr	r2, [r7, #28]
 8000c1c:	611a      	str	r2, [r3, #16]
          break;
 8000c1e:	e008      	b.n	8000c32 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c20:	2308      	movs	r3, #8
 8000c22:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	69fa      	ldr	r2, [r7, #28]
 8000c28:	615a      	str	r2, [r3, #20]
          break;
 8000c2a:	e002      	b.n	8000c32 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	623b      	str	r3, [r7, #32]
          break;
 8000c30:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c32:	69bb      	ldr	r3, [r7, #24]
 8000c34:	2bff      	cmp	r3, #255	; 0xff
 8000c36:	d801      	bhi.n	8000c3c <HAL_GPIO_Init+0xec>
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	e001      	b.n	8000c40 <HAL_GPIO_Init+0xf0>
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	3304      	adds	r3, #4
 8000c40:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c42:	69bb      	ldr	r3, [r7, #24]
 8000c44:	2bff      	cmp	r3, #255	; 0xff
 8000c46:	d802      	bhi.n	8000c4e <HAL_GPIO_Init+0xfe>
 8000c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c4a:	009b      	lsls	r3, r3, #2
 8000c4c:	e002      	b.n	8000c54 <HAL_GPIO_Init+0x104>
 8000c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c50:	3b08      	subs	r3, #8
 8000c52:	009b      	lsls	r3, r3, #2
 8000c54:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	681a      	ldr	r2, [r3, #0]
 8000c5a:	210f      	movs	r1, #15
 8000c5c:	693b      	ldr	r3, [r7, #16]
 8000c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c62:	43db      	mvns	r3, r3
 8000c64:	401a      	ands	r2, r3
 8000c66:	6a39      	ldr	r1, [r7, #32]
 8000c68:	693b      	ldr	r3, [r7, #16]
 8000c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c6e:	431a      	orrs	r2, r3
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	f000 8096 	beq.w	8000dae <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c82:	4b59      	ldr	r3, [pc, #356]	; (8000de8 <HAL_GPIO_Init+0x298>)
 8000c84:	699b      	ldr	r3, [r3, #24]
 8000c86:	4a58      	ldr	r2, [pc, #352]	; (8000de8 <HAL_GPIO_Init+0x298>)
 8000c88:	f043 0301 	orr.w	r3, r3, #1
 8000c8c:	6193      	str	r3, [r2, #24]
 8000c8e:	4b56      	ldr	r3, [pc, #344]	; (8000de8 <HAL_GPIO_Init+0x298>)
 8000c90:	699b      	ldr	r3, [r3, #24]
 8000c92:	f003 0301 	and.w	r3, r3, #1
 8000c96:	60bb      	str	r3, [r7, #8]
 8000c98:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c9a:	4a54      	ldr	r2, [pc, #336]	; (8000dec <HAL_GPIO_Init+0x29c>)
 8000c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c9e:	089b      	lsrs	r3, r3, #2
 8000ca0:	3302      	adds	r3, #2
 8000ca2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ca6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000caa:	f003 0303 	and.w	r3, r3, #3
 8000cae:	009b      	lsls	r3, r3, #2
 8000cb0:	220f      	movs	r2, #15
 8000cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb6:	43db      	mvns	r3, r3
 8000cb8:	68fa      	ldr	r2, [r7, #12]
 8000cba:	4013      	ands	r3, r2
 8000cbc:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	4a4b      	ldr	r2, [pc, #300]	; (8000df0 <HAL_GPIO_Init+0x2a0>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d013      	beq.n	8000cee <HAL_GPIO_Init+0x19e>
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	4a4a      	ldr	r2, [pc, #296]	; (8000df4 <HAL_GPIO_Init+0x2a4>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d00d      	beq.n	8000cea <HAL_GPIO_Init+0x19a>
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4a49      	ldr	r2, [pc, #292]	; (8000df8 <HAL_GPIO_Init+0x2a8>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d007      	beq.n	8000ce6 <HAL_GPIO_Init+0x196>
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4a48      	ldr	r2, [pc, #288]	; (8000dfc <HAL_GPIO_Init+0x2ac>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d101      	bne.n	8000ce2 <HAL_GPIO_Init+0x192>
 8000cde:	2303      	movs	r3, #3
 8000ce0:	e006      	b.n	8000cf0 <HAL_GPIO_Init+0x1a0>
 8000ce2:	2304      	movs	r3, #4
 8000ce4:	e004      	b.n	8000cf0 <HAL_GPIO_Init+0x1a0>
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	e002      	b.n	8000cf0 <HAL_GPIO_Init+0x1a0>
 8000cea:	2301      	movs	r3, #1
 8000cec:	e000      	b.n	8000cf0 <HAL_GPIO_Init+0x1a0>
 8000cee:	2300      	movs	r3, #0
 8000cf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000cf2:	f002 0203 	and.w	r2, r2, #3
 8000cf6:	0092      	lsls	r2, r2, #2
 8000cf8:	4093      	lsls	r3, r2
 8000cfa:	68fa      	ldr	r2, [r7, #12]
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d00:	493a      	ldr	r1, [pc, #232]	; (8000dec <HAL_GPIO_Init+0x29c>)
 8000d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d04:	089b      	lsrs	r3, r3, #2
 8000d06:	3302      	adds	r3, #2
 8000d08:	68fa      	ldr	r2, [r7, #12]
 8000d0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d006      	beq.n	8000d28 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d1a:	4b39      	ldr	r3, [pc, #228]	; (8000e00 <HAL_GPIO_Init+0x2b0>)
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	4938      	ldr	r1, [pc, #224]	; (8000e00 <HAL_GPIO_Init+0x2b0>)
 8000d20:	69bb      	ldr	r3, [r7, #24]
 8000d22:	4313      	orrs	r3, r2
 8000d24:	600b      	str	r3, [r1, #0]
 8000d26:	e006      	b.n	8000d36 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d28:	4b35      	ldr	r3, [pc, #212]	; (8000e00 <HAL_GPIO_Init+0x2b0>)
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	69bb      	ldr	r3, [r7, #24]
 8000d2e:	43db      	mvns	r3, r3
 8000d30:	4933      	ldr	r1, [pc, #204]	; (8000e00 <HAL_GPIO_Init+0x2b0>)
 8000d32:	4013      	ands	r3, r2
 8000d34:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d006      	beq.n	8000d50 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d42:	4b2f      	ldr	r3, [pc, #188]	; (8000e00 <HAL_GPIO_Init+0x2b0>)
 8000d44:	685a      	ldr	r2, [r3, #4]
 8000d46:	492e      	ldr	r1, [pc, #184]	; (8000e00 <HAL_GPIO_Init+0x2b0>)
 8000d48:	69bb      	ldr	r3, [r7, #24]
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	604b      	str	r3, [r1, #4]
 8000d4e:	e006      	b.n	8000d5e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d50:	4b2b      	ldr	r3, [pc, #172]	; (8000e00 <HAL_GPIO_Init+0x2b0>)
 8000d52:	685a      	ldr	r2, [r3, #4]
 8000d54:	69bb      	ldr	r3, [r7, #24]
 8000d56:	43db      	mvns	r3, r3
 8000d58:	4929      	ldr	r1, [pc, #164]	; (8000e00 <HAL_GPIO_Init+0x2b0>)
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d006      	beq.n	8000d78 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d6a:	4b25      	ldr	r3, [pc, #148]	; (8000e00 <HAL_GPIO_Init+0x2b0>)
 8000d6c:	689a      	ldr	r2, [r3, #8]
 8000d6e:	4924      	ldr	r1, [pc, #144]	; (8000e00 <HAL_GPIO_Init+0x2b0>)
 8000d70:	69bb      	ldr	r3, [r7, #24]
 8000d72:	4313      	orrs	r3, r2
 8000d74:	608b      	str	r3, [r1, #8]
 8000d76:	e006      	b.n	8000d86 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d78:	4b21      	ldr	r3, [pc, #132]	; (8000e00 <HAL_GPIO_Init+0x2b0>)
 8000d7a:	689a      	ldr	r2, [r3, #8]
 8000d7c:	69bb      	ldr	r3, [r7, #24]
 8000d7e:	43db      	mvns	r3, r3
 8000d80:	491f      	ldr	r1, [pc, #124]	; (8000e00 <HAL_GPIO_Init+0x2b0>)
 8000d82:	4013      	ands	r3, r2
 8000d84:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d006      	beq.n	8000da0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d92:	4b1b      	ldr	r3, [pc, #108]	; (8000e00 <HAL_GPIO_Init+0x2b0>)
 8000d94:	68da      	ldr	r2, [r3, #12]
 8000d96:	491a      	ldr	r1, [pc, #104]	; (8000e00 <HAL_GPIO_Init+0x2b0>)
 8000d98:	69bb      	ldr	r3, [r7, #24]
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	60cb      	str	r3, [r1, #12]
 8000d9e:	e006      	b.n	8000dae <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000da0:	4b17      	ldr	r3, [pc, #92]	; (8000e00 <HAL_GPIO_Init+0x2b0>)
 8000da2:	68da      	ldr	r2, [r3, #12]
 8000da4:	69bb      	ldr	r3, [r7, #24]
 8000da6:	43db      	mvns	r3, r3
 8000da8:	4915      	ldr	r1, [pc, #84]	; (8000e00 <HAL_GPIO_Init+0x2b0>)
 8000daa:	4013      	ands	r3, r2
 8000dac:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db0:	3301      	adds	r3, #1
 8000db2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dba:	fa22 f303 	lsr.w	r3, r2, r3
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	f47f aed0 	bne.w	8000b64 <HAL_GPIO_Init+0x14>
  }
}
 8000dc4:	bf00      	nop
 8000dc6:	372c      	adds	r7, #44	; 0x2c
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bc80      	pop	{r7}
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	10210000 	.word	0x10210000
 8000dd4:	10110000 	.word	0x10110000
 8000dd8:	10120000 	.word	0x10120000
 8000ddc:	10310000 	.word	0x10310000
 8000de0:	10320000 	.word	0x10320000
 8000de4:	10220000 	.word	0x10220000
 8000de8:	40021000 	.word	0x40021000
 8000dec:	40010000 	.word	0x40010000
 8000df0:	40010800 	.word	0x40010800
 8000df4:	40010c00 	.word	0x40010c00
 8000df8:	40011000 	.word	0x40011000
 8000dfc:	40011400 	.word	0x40011400
 8000e00:	40010400 	.word	0x40010400

08000e04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
 8000e0c:	460b      	mov	r3, r1
 8000e0e:	807b      	strh	r3, [r7, #2]
 8000e10:	4613      	mov	r3, r2
 8000e12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e14:	787b      	ldrb	r3, [r7, #1]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d003      	beq.n	8000e22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e1a:	887a      	ldrh	r2, [r7, #2]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e20:	e003      	b.n	8000e2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e22:	887b      	ldrh	r3, [r7, #2]
 8000e24:	041a      	lsls	r2, r3, #16
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	611a      	str	r2, [r3, #16]
}
 8000e2a:	bf00      	nop
 8000e2c:	370c      	adds	r7, #12
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bc80      	pop	{r7}
 8000e32:	4770      	bx	lr

08000e34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b086      	sub	sp, #24
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d101      	bne.n	8000e46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
 8000e44:	e26c      	b.n	8001320 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f003 0301 	and.w	r3, r3, #1
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	f000 8087 	beq.w	8000f62 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e54:	4b92      	ldr	r3, [pc, #584]	; (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	f003 030c 	and.w	r3, r3, #12
 8000e5c:	2b04      	cmp	r3, #4
 8000e5e:	d00c      	beq.n	8000e7a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e60:	4b8f      	ldr	r3, [pc, #572]	; (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f003 030c 	and.w	r3, r3, #12
 8000e68:	2b08      	cmp	r3, #8
 8000e6a:	d112      	bne.n	8000e92 <HAL_RCC_OscConfig+0x5e>
 8000e6c:	4b8c      	ldr	r3, [pc, #560]	; (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e78:	d10b      	bne.n	8000e92 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e7a:	4b89      	ldr	r3, [pc, #548]	; (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d06c      	beq.n	8000f60 <HAL_RCC_OscConfig+0x12c>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d168      	bne.n	8000f60 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e246      	b.n	8001320 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e9a:	d106      	bne.n	8000eaa <HAL_RCC_OscConfig+0x76>
 8000e9c:	4b80      	ldr	r3, [pc, #512]	; (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a7f      	ldr	r2, [pc, #508]	; (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000ea2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ea6:	6013      	str	r3, [r2, #0]
 8000ea8:	e02e      	b.n	8000f08 <HAL_RCC_OscConfig+0xd4>
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d10c      	bne.n	8000ecc <HAL_RCC_OscConfig+0x98>
 8000eb2:	4b7b      	ldr	r3, [pc, #492]	; (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a7a      	ldr	r2, [pc, #488]	; (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000eb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ebc:	6013      	str	r3, [r2, #0]
 8000ebe:	4b78      	ldr	r3, [pc, #480]	; (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4a77      	ldr	r2, [pc, #476]	; (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000ec4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ec8:	6013      	str	r3, [r2, #0]
 8000eca:	e01d      	b.n	8000f08 <HAL_RCC_OscConfig+0xd4>
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ed4:	d10c      	bne.n	8000ef0 <HAL_RCC_OscConfig+0xbc>
 8000ed6:	4b72      	ldr	r3, [pc, #456]	; (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a71      	ldr	r2, [pc, #452]	; (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000edc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ee0:	6013      	str	r3, [r2, #0]
 8000ee2:	4b6f      	ldr	r3, [pc, #444]	; (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4a6e      	ldr	r2, [pc, #440]	; (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000ee8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000eec:	6013      	str	r3, [r2, #0]
 8000eee:	e00b      	b.n	8000f08 <HAL_RCC_OscConfig+0xd4>
 8000ef0:	4b6b      	ldr	r3, [pc, #428]	; (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a6a      	ldr	r2, [pc, #424]	; (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000ef6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000efa:	6013      	str	r3, [r2, #0]
 8000efc:	4b68      	ldr	r3, [pc, #416]	; (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a67      	ldr	r2, [pc, #412]	; (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000f02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f06:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d013      	beq.n	8000f38 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f10:	f7ff fd0e 	bl	8000930 <HAL_GetTick>
 8000f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f16:	e008      	b.n	8000f2a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f18:	f7ff fd0a 	bl	8000930 <HAL_GetTick>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	1ad3      	subs	r3, r2, r3
 8000f22:	2b64      	cmp	r3, #100	; 0x64
 8000f24:	d901      	bls.n	8000f2a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000f26:	2303      	movs	r3, #3
 8000f28:	e1fa      	b.n	8001320 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f2a:	4b5d      	ldr	r3, [pc, #372]	; (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d0f0      	beq.n	8000f18 <HAL_RCC_OscConfig+0xe4>
 8000f36:	e014      	b.n	8000f62 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f38:	f7ff fcfa 	bl	8000930 <HAL_GetTick>
 8000f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f3e:	e008      	b.n	8000f52 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f40:	f7ff fcf6 	bl	8000930 <HAL_GetTick>
 8000f44:	4602      	mov	r2, r0
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	2b64      	cmp	r3, #100	; 0x64
 8000f4c:	d901      	bls.n	8000f52 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	e1e6      	b.n	8001320 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f52:	4b53      	ldr	r3, [pc, #332]	; (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d1f0      	bne.n	8000f40 <HAL_RCC_OscConfig+0x10c>
 8000f5e:	e000      	b.n	8000f62 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f003 0302 	and.w	r3, r3, #2
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d063      	beq.n	8001036 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f6e:	4b4c      	ldr	r3, [pc, #304]	; (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	f003 030c 	and.w	r3, r3, #12
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d00b      	beq.n	8000f92 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000f7a:	4b49      	ldr	r3, [pc, #292]	; (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	f003 030c 	and.w	r3, r3, #12
 8000f82:	2b08      	cmp	r3, #8
 8000f84:	d11c      	bne.n	8000fc0 <HAL_RCC_OscConfig+0x18c>
 8000f86:	4b46      	ldr	r3, [pc, #280]	; (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d116      	bne.n	8000fc0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f92:	4b43      	ldr	r3, [pc, #268]	; (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f003 0302 	and.w	r3, r3, #2
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d005      	beq.n	8000faa <HAL_RCC_OscConfig+0x176>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	691b      	ldr	r3, [r3, #16]
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d001      	beq.n	8000faa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e1ba      	b.n	8001320 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000faa:	4b3d      	ldr	r3, [pc, #244]	; (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	695b      	ldr	r3, [r3, #20]
 8000fb6:	00db      	lsls	r3, r3, #3
 8000fb8:	4939      	ldr	r1, [pc, #228]	; (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fbe:	e03a      	b.n	8001036 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	691b      	ldr	r3, [r3, #16]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d020      	beq.n	800100a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fc8:	4b36      	ldr	r3, [pc, #216]	; (80010a4 <HAL_RCC_OscConfig+0x270>)
 8000fca:	2201      	movs	r2, #1
 8000fcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fce:	f7ff fcaf 	bl	8000930 <HAL_GetTick>
 8000fd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fd4:	e008      	b.n	8000fe8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fd6:	f7ff fcab 	bl	8000930 <HAL_GetTick>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	1ad3      	subs	r3, r2, r3
 8000fe0:	2b02      	cmp	r3, #2
 8000fe2:	d901      	bls.n	8000fe8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000fe4:	2303      	movs	r3, #3
 8000fe6:	e19b      	b.n	8001320 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fe8:	4b2d      	ldr	r3, [pc, #180]	; (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f003 0302 	and.w	r3, r3, #2
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d0f0      	beq.n	8000fd6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ff4:	4b2a      	ldr	r3, [pc, #168]	; (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	695b      	ldr	r3, [r3, #20]
 8001000:	00db      	lsls	r3, r3, #3
 8001002:	4927      	ldr	r1, [pc, #156]	; (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8001004:	4313      	orrs	r3, r2
 8001006:	600b      	str	r3, [r1, #0]
 8001008:	e015      	b.n	8001036 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800100a:	4b26      	ldr	r3, [pc, #152]	; (80010a4 <HAL_RCC_OscConfig+0x270>)
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001010:	f7ff fc8e 	bl	8000930 <HAL_GetTick>
 8001014:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001016:	e008      	b.n	800102a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001018:	f7ff fc8a 	bl	8000930 <HAL_GetTick>
 800101c:	4602      	mov	r2, r0
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	2b02      	cmp	r3, #2
 8001024:	d901      	bls.n	800102a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001026:	2303      	movs	r3, #3
 8001028:	e17a      	b.n	8001320 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800102a:	4b1d      	ldr	r3, [pc, #116]	; (80010a0 <HAL_RCC_OscConfig+0x26c>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f003 0302 	and.w	r3, r3, #2
 8001032:	2b00      	cmp	r3, #0
 8001034:	d1f0      	bne.n	8001018 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f003 0308 	and.w	r3, r3, #8
 800103e:	2b00      	cmp	r3, #0
 8001040:	d03a      	beq.n	80010b8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	699b      	ldr	r3, [r3, #24]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d019      	beq.n	800107e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800104a:	4b17      	ldr	r3, [pc, #92]	; (80010a8 <HAL_RCC_OscConfig+0x274>)
 800104c:	2201      	movs	r2, #1
 800104e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001050:	f7ff fc6e 	bl	8000930 <HAL_GetTick>
 8001054:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001056:	e008      	b.n	800106a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001058:	f7ff fc6a 	bl	8000930 <HAL_GetTick>
 800105c:	4602      	mov	r2, r0
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	2b02      	cmp	r3, #2
 8001064:	d901      	bls.n	800106a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001066:	2303      	movs	r3, #3
 8001068:	e15a      	b.n	8001320 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800106a:	4b0d      	ldr	r3, [pc, #52]	; (80010a0 <HAL_RCC_OscConfig+0x26c>)
 800106c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800106e:	f003 0302 	and.w	r3, r3, #2
 8001072:	2b00      	cmp	r3, #0
 8001074:	d0f0      	beq.n	8001058 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001076:	2001      	movs	r0, #1
 8001078:	f000 fada 	bl	8001630 <RCC_Delay>
 800107c:	e01c      	b.n	80010b8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800107e:	4b0a      	ldr	r3, [pc, #40]	; (80010a8 <HAL_RCC_OscConfig+0x274>)
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001084:	f7ff fc54 	bl	8000930 <HAL_GetTick>
 8001088:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800108a:	e00f      	b.n	80010ac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800108c:	f7ff fc50 	bl	8000930 <HAL_GetTick>
 8001090:	4602      	mov	r2, r0
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	1ad3      	subs	r3, r2, r3
 8001096:	2b02      	cmp	r3, #2
 8001098:	d908      	bls.n	80010ac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800109a:	2303      	movs	r3, #3
 800109c:	e140      	b.n	8001320 <HAL_RCC_OscConfig+0x4ec>
 800109e:	bf00      	nop
 80010a0:	40021000 	.word	0x40021000
 80010a4:	42420000 	.word	0x42420000
 80010a8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010ac:	4b9e      	ldr	r3, [pc, #632]	; (8001328 <HAL_RCC_OscConfig+0x4f4>)
 80010ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b0:	f003 0302 	and.w	r3, r3, #2
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d1e9      	bne.n	800108c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f003 0304 	and.w	r3, r3, #4
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	f000 80a6 	beq.w	8001212 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010c6:	2300      	movs	r3, #0
 80010c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010ca:	4b97      	ldr	r3, [pc, #604]	; (8001328 <HAL_RCC_OscConfig+0x4f4>)
 80010cc:	69db      	ldr	r3, [r3, #28]
 80010ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d10d      	bne.n	80010f2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010d6:	4b94      	ldr	r3, [pc, #592]	; (8001328 <HAL_RCC_OscConfig+0x4f4>)
 80010d8:	69db      	ldr	r3, [r3, #28]
 80010da:	4a93      	ldr	r2, [pc, #588]	; (8001328 <HAL_RCC_OscConfig+0x4f4>)
 80010dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010e0:	61d3      	str	r3, [r2, #28]
 80010e2:	4b91      	ldr	r3, [pc, #580]	; (8001328 <HAL_RCC_OscConfig+0x4f4>)
 80010e4:	69db      	ldr	r3, [r3, #28]
 80010e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ea:	60bb      	str	r3, [r7, #8]
 80010ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80010ee:	2301      	movs	r3, #1
 80010f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010f2:	4b8e      	ldr	r3, [pc, #568]	; (800132c <HAL_RCC_OscConfig+0x4f8>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d118      	bne.n	8001130 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010fe:	4b8b      	ldr	r3, [pc, #556]	; (800132c <HAL_RCC_OscConfig+0x4f8>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a8a      	ldr	r2, [pc, #552]	; (800132c <HAL_RCC_OscConfig+0x4f8>)
 8001104:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001108:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800110a:	f7ff fc11 	bl	8000930 <HAL_GetTick>
 800110e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001110:	e008      	b.n	8001124 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001112:	f7ff fc0d 	bl	8000930 <HAL_GetTick>
 8001116:	4602      	mov	r2, r0
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	2b64      	cmp	r3, #100	; 0x64
 800111e:	d901      	bls.n	8001124 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001120:	2303      	movs	r3, #3
 8001122:	e0fd      	b.n	8001320 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001124:	4b81      	ldr	r3, [pc, #516]	; (800132c <HAL_RCC_OscConfig+0x4f8>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800112c:	2b00      	cmp	r3, #0
 800112e:	d0f0      	beq.n	8001112 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	2b01      	cmp	r3, #1
 8001136:	d106      	bne.n	8001146 <HAL_RCC_OscConfig+0x312>
 8001138:	4b7b      	ldr	r3, [pc, #492]	; (8001328 <HAL_RCC_OscConfig+0x4f4>)
 800113a:	6a1b      	ldr	r3, [r3, #32]
 800113c:	4a7a      	ldr	r2, [pc, #488]	; (8001328 <HAL_RCC_OscConfig+0x4f4>)
 800113e:	f043 0301 	orr.w	r3, r3, #1
 8001142:	6213      	str	r3, [r2, #32]
 8001144:	e02d      	b.n	80011a2 <HAL_RCC_OscConfig+0x36e>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	68db      	ldr	r3, [r3, #12]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d10c      	bne.n	8001168 <HAL_RCC_OscConfig+0x334>
 800114e:	4b76      	ldr	r3, [pc, #472]	; (8001328 <HAL_RCC_OscConfig+0x4f4>)
 8001150:	6a1b      	ldr	r3, [r3, #32]
 8001152:	4a75      	ldr	r2, [pc, #468]	; (8001328 <HAL_RCC_OscConfig+0x4f4>)
 8001154:	f023 0301 	bic.w	r3, r3, #1
 8001158:	6213      	str	r3, [r2, #32]
 800115a:	4b73      	ldr	r3, [pc, #460]	; (8001328 <HAL_RCC_OscConfig+0x4f4>)
 800115c:	6a1b      	ldr	r3, [r3, #32]
 800115e:	4a72      	ldr	r2, [pc, #456]	; (8001328 <HAL_RCC_OscConfig+0x4f4>)
 8001160:	f023 0304 	bic.w	r3, r3, #4
 8001164:	6213      	str	r3, [r2, #32]
 8001166:	e01c      	b.n	80011a2 <HAL_RCC_OscConfig+0x36e>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	2b05      	cmp	r3, #5
 800116e:	d10c      	bne.n	800118a <HAL_RCC_OscConfig+0x356>
 8001170:	4b6d      	ldr	r3, [pc, #436]	; (8001328 <HAL_RCC_OscConfig+0x4f4>)
 8001172:	6a1b      	ldr	r3, [r3, #32]
 8001174:	4a6c      	ldr	r2, [pc, #432]	; (8001328 <HAL_RCC_OscConfig+0x4f4>)
 8001176:	f043 0304 	orr.w	r3, r3, #4
 800117a:	6213      	str	r3, [r2, #32]
 800117c:	4b6a      	ldr	r3, [pc, #424]	; (8001328 <HAL_RCC_OscConfig+0x4f4>)
 800117e:	6a1b      	ldr	r3, [r3, #32]
 8001180:	4a69      	ldr	r2, [pc, #420]	; (8001328 <HAL_RCC_OscConfig+0x4f4>)
 8001182:	f043 0301 	orr.w	r3, r3, #1
 8001186:	6213      	str	r3, [r2, #32]
 8001188:	e00b      	b.n	80011a2 <HAL_RCC_OscConfig+0x36e>
 800118a:	4b67      	ldr	r3, [pc, #412]	; (8001328 <HAL_RCC_OscConfig+0x4f4>)
 800118c:	6a1b      	ldr	r3, [r3, #32]
 800118e:	4a66      	ldr	r2, [pc, #408]	; (8001328 <HAL_RCC_OscConfig+0x4f4>)
 8001190:	f023 0301 	bic.w	r3, r3, #1
 8001194:	6213      	str	r3, [r2, #32]
 8001196:	4b64      	ldr	r3, [pc, #400]	; (8001328 <HAL_RCC_OscConfig+0x4f4>)
 8001198:	6a1b      	ldr	r3, [r3, #32]
 800119a:	4a63      	ldr	r2, [pc, #396]	; (8001328 <HAL_RCC_OscConfig+0x4f4>)
 800119c:	f023 0304 	bic.w	r3, r3, #4
 80011a0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	68db      	ldr	r3, [r3, #12]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d015      	beq.n	80011d6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011aa:	f7ff fbc1 	bl	8000930 <HAL_GetTick>
 80011ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011b0:	e00a      	b.n	80011c8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011b2:	f7ff fbbd 	bl	8000930 <HAL_GetTick>
 80011b6:	4602      	mov	r2, r0
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	1ad3      	subs	r3, r2, r3
 80011bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d901      	bls.n	80011c8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80011c4:	2303      	movs	r3, #3
 80011c6:	e0ab      	b.n	8001320 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011c8:	4b57      	ldr	r3, [pc, #348]	; (8001328 <HAL_RCC_OscConfig+0x4f4>)
 80011ca:	6a1b      	ldr	r3, [r3, #32]
 80011cc:	f003 0302 	and.w	r3, r3, #2
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d0ee      	beq.n	80011b2 <HAL_RCC_OscConfig+0x37e>
 80011d4:	e014      	b.n	8001200 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011d6:	f7ff fbab 	bl	8000930 <HAL_GetTick>
 80011da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011dc:	e00a      	b.n	80011f4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011de:	f7ff fba7 	bl	8000930 <HAL_GetTick>
 80011e2:	4602      	mov	r2, r0
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	1ad3      	subs	r3, r2, r3
 80011e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d901      	bls.n	80011f4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80011f0:	2303      	movs	r3, #3
 80011f2:	e095      	b.n	8001320 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011f4:	4b4c      	ldr	r3, [pc, #304]	; (8001328 <HAL_RCC_OscConfig+0x4f4>)
 80011f6:	6a1b      	ldr	r3, [r3, #32]
 80011f8:	f003 0302 	and.w	r3, r3, #2
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d1ee      	bne.n	80011de <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001200:	7dfb      	ldrb	r3, [r7, #23]
 8001202:	2b01      	cmp	r3, #1
 8001204:	d105      	bne.n	8001212 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001206:	4b48      	ldr	r3, [pc, #288]	; (8001328 <HAL_RCC_OscConfig+0x4f4>)
 8001208:	69db      	ldr	r3, [r3, #28]
 800120a:	4a47      	ldr	r2, [pc, #284]	; (8001328 <HAL_RCC_OscConfig+0x4f4>)
 800120c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001210:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	69db      	ldr	r3, [r3, #28]
 8001216:	2b00      	cmp	r3, #0
 8001218:	f000 8081 	beq.w	800131e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800121c:	4b42      	ldr	r3, [pc, #264]	; (8001328 <HAL_RCC_OscConfig+0x4f4>)
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f003 030c 	and.w	r3, r3, #12
 8001224:	2b08      	cmp	r3, #8
 8001226:	d061      	beq.n	80012ec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	69db      	ldr	r3, [r3, #28]
 800122c:	2b02      	cmp	r3, #2
 800122e:	d146      	bne.n	80012be <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001230:	4b3f      	ldr	r3, [pc, #252]	; (8001330 <HAL_RCC_OscConfig+0x4fc>)
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001236:	f7ff fb7b 	bl	8000930 <HAL_GetTick>
 800123a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800123c:	e008      	b.n	8001250 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800123e:	f7ff fb77 	bl	8000930 <HAL_GetTick>
 8001242:	4602      	mov	r2, r0
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	1ad3      	subs	r3, r2, r3
 8001248:	2b02      	cmp	r3, #2
 800124a:	d901      	bls.n	8001250 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800124c:	2303      	movs	r3, #3
 800124e:	e067      	b.n	8001320 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001250:	4b35      	ldr	r3, [pc, #212]	; (8001328 <HAL_RCC_OscConfig+0x4f4>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001258:	2b00      	cmp	r3, #0
 800125a:	d1f0      	bne.n	800123e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6a1b      	ldr	r3, [r3, #32]
 8001260:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001264:	d108      	bne.n	8001278 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001266:	4b30      	ldr	r3, [pc, #192]	; (8001328 <HAL_RCC_OscConfig+0x4f4>)
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	492d      	ldr	r1, [pc, #180]	; (8001328 <HAL_RCC_OscConfig+0x4f4>)
 8001274:	4313      	orrs	r3, r2
 8001276:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001278:	4b2b      	ldr	r3, [pc, #172]	; (8001328 <HAL_RCC_OscConfig+0x4f4>)
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6a19      	ldr	r1, [r3, #32]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001288:	430b      	orrs	r3, r1
 800128a:	4927      	ldr	r1, [pc, #156]	; (8001328 <HAL_RCC_OscConfig+0x4f4>)
 800128c:	4313      	orrs	r3, r2
 800128e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001290:	4b27      	ldr	r3, [pc, #156]	; (8001330 <HAL_RCC_OscConfig+0x4fc>)
 8001292:	2201      	movs	r2, #1
 8001294:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001296:	f7ff fb4b 	bl	8000930 <HAL_GetTick>
 800129a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800129c:	e008      	b.n	80012b0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800129e:	f7ff fb47 	bl	8000930 <HAL_GetTick>
 80012a2:	4602      	mov	r2, r0
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	2b02      	cmp	r3, #2
 80012aa:	d901      	bls.n	80012b0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80012ac:	2303      	movs	r3, #3
 80012ae:	e037      	b.n	8001320 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012b0:	4b1d      	ldr	r3, [pc, #116]	; (8001328 <HAL_RCC_OscConfig+0x4f4>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d0f0      	beq.n	800129e <HAL_RCC_OscConfig+0x46a>
 80012bc:	e02f      	b.n	800131e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012be:	4b1c      	ldr	r3, [pc, #112]	; (8001330 <HAL_RCC_OscConfig+0x4fc>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c4:	f7ff fb34 	bl	8000930 <HAL_GetTick>
 80012c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012ca:	e008      	b.n	80012de <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012cc:	f7ff fb30 	bl	8000930 <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d901      	bls.n	80012de <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80012da:	2303      	movs	r3, #3
 80012dc:	e020      	b.n	8001320 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012de:	4b12      	ldr	r3, [pc, #72]	; (8001328 <HAL_RCC_OscConfig+0x4f4>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d1f0      	bne.n	80012cc <HAL_RCC_OscConfig+0x498>
 80012ea:	e018      	b.n	800131e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	69db      	ldr	r3, [r3, #28]
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d101      	bne.n	80012f8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80012f4:	2301      	movs	r3, #1
 80012f6:	e013      	b.n	8001320 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80012f8:	4b0b      	ldr	r3, [pc, #44]	; (8001328 <HAL_RCC_OscConfig+0x4f4>)
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6a1b      	ldr	r3, [r3, #32]
 8001308:	429a      	cmp	r2, r3
 800130a:	d106      	bne.n	800131a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001316:	429a      	cmp	r2, r3
 8001318:	d001      	beq.n	800131e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	e000      	b.n	8001320 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800131e:	2300      	movs	r3, #0
}
 8001320:	4618      	mov	r0, r3
 8001322:	3718      	adds	r7, #24
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	40021000 	.word	0x40021000
 800132c:	40007000 	.word	0x40007000
 8001330:	42420060 	.word	0x42420060

08001334 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d101      	bne.n	8001348 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001344:	2301      	movs	r3, #1
 8001346:	e0d0      	b.n	80014ea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001348:	4b6a      	ldr	r3, [pc, #424]	; (80014f4 <HAL_RCC_ClockConfig+0x1c0>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f003 0307 	and.w	r3, r3, #7
 8001350:	683a      	ldr	r2, [r7, #0]
 8001352:	429a      	cmp	r2, r3
 8001354:	d910      	bls.n	8001378 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001356:	4b67      	ldr	r3, [pc, #412]	; (80014f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f023 0207 	bic.w	r2, r3, #7
 800135e:	4965      	ldr	r1, [pc, #404]	; (80014f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	4313      	orrs	r3, r2
 8001364:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001366:	4b63      	ldr	r3, [pc, #396]	; (80014f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 0307 	and.w	r3, r3, #7
 800136e:	683a      	ldr	r2, [r7, #0]
 8001370:	429a      	cmp	r2, r3
 8001372:	d001      	beq.n	8001378 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001374:	2301      	movs	r3, #1
 8001376:	e0b8      	b.n	80014ea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f003 0302 	and.w	r3, r3, #2
 8001380:	2b00      	cmp	r3, #0
 8001382:	d020      	beq.n	80013c6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f003 0304 	and.w	r3, r3, #4
 800138c:	2b00      	cmp	r3, #0
 800138e:	d005      	beq.n	800139c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001390:	4b59      	ldr	r3, [pc, #356]	; (80014f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	4a58      	ldr	r2, [pc, #352]	; (80014f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001396:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800139a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f003 0308 	and.w	r3, r3, #8
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d005      	beq.n	80013b4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013a8:	4b53      	ldr	r3, [pc, #332]	; (80014f8 <HAL_RCC_ClockConfig+0x1c4>)
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	4a52      	ldr	r2, [pc, #328]	; (80014f8 <HAL_RCC_ClockConfig+0x1c4>)
 80013ae:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80013b2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013b4:	4b50      	ldr	r3, [pc, #320]	; (80014f8 <HAL_RCC_ClockConfig+0x1c4>)
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	494d      	ldr	r1, [pc, #308]	; (80014f8 <HAL_RCC_ClockConfig+0x1c4>)
 80013c2:	4313      	orrs	r3, r2
 80013c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 0301 	and.w	r3, r3, #1
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d040      	beq.n	8001454 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d107      	bne.n	80013ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013da:	4b47      	ldr	r3, [pc, #284]	; (80014f8 <HAL_RCC_ClockConfig+0x1c4>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d115      	bne.n	8001412 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e07f      	b.n	80014ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d107      	bne.n	8001402 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013f2:	4b41      	ldr	r3, [pc, #260]	; (80014f8 <HAL_RCC_ClockConfig+0x1c4>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d109      	bne.n	8001412 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e073      	b.n	80014ea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001402:	4b3d      	ldr	r3, [pc, #244]	; (80014f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 0302 	and.w	r3, r3, #2
 800140a:	2b00      	cmp	r3, #0
 800140c:	d101      	bne.n	8001412 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e06b      	b.n	80014ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001412:	4b39      	ldr	r3, [pc, #228]	; (80014f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f023 0203 	bic.w	r2, r3, #3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	4936      	ldr	r1, [pc, #216]	; (80014f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001420:	4313      	orrs	r3, r2
 8001422:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001424:	f7ff fa84 	bl	8000930 <HAL_GetTick>
 8001428:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800142a:	e00a      	b.n	8001442 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800142c:	f7ff fa80 	bl	8000930 <HAL_GetTick>
 8001430:	4602      	mov	r2, r0
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	f241 3288 	movw	r2, #5000	; 0x1388
 800143a:	4293      	cmp	r3, r2
 800143c:	d901      	bls.n	8001442 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800143e:	2303      	movs	r3, #3
 8001440:	e053      	b.n	80014ea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001442:	4b2d      	ldr	r3, [pc, #180]	; (80014f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f003 020c 	and.w	r2, r3, #12
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	429a      	cmp	r2, r3
 8001452:	d1eb      	bne.n	800142c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001454:	4b27      	ldr	r3, [pc, #156]	; (80014f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 0307 	and.w	r3, r3, #7
 800145c:	683a      	ldr	r2, [r7, #0]
 800145e:	429a      	cmp	r2, r3
 8001460:	d210      	bcs.n	8001484 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001462:	4b24      	ldr	r3, [pc, #144]	; (80014f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f023 0207 	bic.w	r2, r3, #7
 800146a:	4922      	ldr	r1, [pc, #136]	; (80014f4 <HAL_RCC_ClockConfig+0x1c0>)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	4313      	orrs	r3, r2
 8001470:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001472:	4b20      	ldr	r3, [pc, #128]	; (80014f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0307 	and.w	r3, r3, #7
 800147a:	683a      	ldr	r2, [r7, #0]
 800147c:	429a      	cmp	r2, r3
 800147e:	d001      	beq.n	8001484 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	e032      	b.n	80014ea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 0304 	and.w	r3, r3, #4
 800148c:	2b00      	cmp	r3, #0
 800148e:	d008      	beq.n	80014a2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001490:	4b19      	ldr	r3, [pc, #100]	; (80014f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	4916      	ldr	r1, [pc, #88]	; (80014f8 <HAL_RCC_ClockConfig+0x1c4>)
 800149e:	4313      	orrs	r3, r2
 80014a0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 0308 	and.w	r3, r3, #8
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d009      	beq.n	80014c2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80014ae:	4b12      	ldr	r3, [pc, #72]	; (80014f8 <HAL_RCC_ClockConfig+0x1c4>)
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	691b      	ldr	r3, [r3, #16]
 80014ba:	00db      	lsls	r3, r3, #3
 80014bc:	490e      	ldr	r1, [pc, #56]	; (80014f8 <HAL_RCC_ClockConfig+0x1c4>)
 80014be:	4313      	orrs	r3, r2
 80014c0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80014c2:	f000 f821 	bl	8001508 <HAL_RCC_GetSysClockFreq>
 80014c6:	4601      	mov	r1, r0
 80014c8:	4b0b      	ldr	r3, [pc, #44]	; (80014f8 <HAL_RCC_ClockConfig+0x1c4>)
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	091b      	lsrs	r3, r3, #4
 80014ce:	f003 030f 	and.w	r3, r3, #15
 80014d2:	4a0a      	ldr	r2, [pc, #40]	; (80014fc <HAL_RCC_ClockConfig+0x1c8>)
 80014d4:	5cd3      	ldrb	r3, [r2, r3]
 80014d6:	fa21 f303 	lsr.w	r3, r1, r3
 80014da:	4a09      	ldr	r2, [pc, #36]	; (8001500 <HAL_RCC_ClockConfig+0x1cc>)
 80014dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80014de:	4b09      	ldr	r3, [pc, #36]	; (8001504 <HAL_RCC_ClockConfig+0x1d0>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4618      	mov	r0, r3
 80014e4:	f7ff f9e2 	bl	80008ac <HAL_InitTick>

  return HAL_OK;
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3710      	adds	r7, #16
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	40022000 	.word	0x40022000
 80014f8:	40021000 	.word	0x40021000
 80014fc:	08003328 	.word	0x08003328
 8001500:	20000004 	.word	0x20000004
 8001504:	20000008 	.word	0x20000008

08001508 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001508:	b490      	push	{r4, r7}
 800150a:	b08a      	sub	sp, #40	; 0x28
 800150c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800150e:	4b2a      	ldr	r3, [pc, #168]	; (80015b8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001510:	1d3c      	adds	r4, r7, #4
 8001512:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001514:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001518:	4b28      	ldr	r3, [pc, #160]	; (80015bc <HAL_RCC_GetSysClockFreq+0xb4>)
 800151a:	881b      	ldrh	r3, [r3, #0]
 800151c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800151e:	2300      	movs	r3, #0
 8001520:	61fb      	str	r3, [r7, #28]
 8001522:	2300      	movs	r3, #0
 8001524:	61bb      	str	r3, [r7, #24]
 8001526:	2300      	movs	r3, #0
 8001528:	627b      	str	r3, [r7, #36]	; 0x24
 800152a:	2300      	movs	r3, #0
 800152c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800152e:	2300      	movs	r3, #0
 8001530:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001532:	4b23      	ldr	r3, [pc, #140]	; (80015c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	f003 030c 	and.w	r3, r3, #12
 800153e:	2b04      	cmp	r3, #4
 8001540:	d002      	beq.n	8001548 <HAL_RCC_GetSysClockFreq+0x40>
 8001542:	2b08      	cmp	r3, #8
 8001544:	d003      	beq.n	800154e <HAL_RCC_GetSysClockFreq+0x46>
 8001546:	e02d      	b.n	80015a4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001548:	4b1e      	ldr	r3, [pc, #120]	; (80015c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800154a:	623b      	str	r3, [r7, #32]
      break;
 800154c:	e02d      	b.n	80015aa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	0c9b      	lsrs	r3, r3, #18
 8001552:	f003 030f 	and.w	r3, r3, #15
 8001556:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800155a:	4413      	add	r3, r2
 800155c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001560:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001568:	2b00      	cmp	r3, #0
 800156a:	d013      	beq.n	8001594 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800156c:	4b14      	ldr	r3, [pc, #80]	; (80015c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	0c5b      	lsrs	r3, r3, #17
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800157a:	4413      	add	r3, r2
 800157c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001580:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	4a0f      	ldr	r2, [pc, #60]	; (80015c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001586:	fb02 f203 	mul.w	r2, r2, r3
 800158a:	69bb      	ldr	r3, [r7, #24]
 800158c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001590:	627b      	str	r3, [r7, #36]	; 0x24
 8001592:	e004      	b.n	800159e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	4a0c      	ldr	r2, [pc, #48]	; (80015c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001598:	fb02 f303 	mul.w	r3, r2, r3
 800159c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800159e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a0:	623b      	str	r3, [r7, #32]
      break;
 80015a2:	e002      	b.n	80015aa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80015a4:	4b07      	ldr	r3, [pc, #28]	; (80015c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80015a6:	623b      	str	r3, [r7, #32]
      break;
 80015a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80015aa:	6a3b      	ldr	r3, [r7, #32]
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3728      	adds	r7, #40	; 0x28
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bc90      	pop	{r4, r7}
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	08003314 	.word	0x08003314
 80015bc:	08003324 	.word	0x08003324
 80015c0:	40021000 	.word	0x40021000
 80015c4:	007a1200 	.word	0x007a1200
 80015c8:	003d0900 	.word	0x003d0900

080015cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80015d0:	4b02      	ldr	r3, [pc, #8]	; (80015dc <HAL_RCC_GetHCLKFreq+0x10>)
 80015d2:	681b      	ldr	r3, [r3, #0]
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bc80      	pop	{r7}
 80015da:	4770      	bx	lr
 80015dc:	20000004 	.word	0x20000004

080015e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80015e4:	f7ff fff2 	bl	80015cc <HAL_RCC_GetHCLKFreq>
 80015e8:	4601      	mov	r1, r0
 80015ea:	4b05      	ldr	r3, [pc, #20]	; (8001600 <HAL_RCC_GetPCLK1Freq+0x20>)
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	0a1b      	lsrs	r3, r3, #8
 80015f0:	f003 0307 	and.w	r3, r3, #7
 80015f4:	4a03      	ldr	r2, [pc, #12]	; (8001604 <HAL_RCC_GetPCLK1Freq+0x24>)
 80015f6:	5cd3      	ldrb	r3, [r2, r3]
 80015f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	40021000 	.word	0x40021000
 8001604:	08003338 	.word	0x08003338

08001608 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800160c:	f7ff ffde 	bl	80015cc <HAL_RCC_GetHCLKFreq>
 8001610:	4601      	mov	r1, r0
 8001612:	4b05      	ldr	r3, [pc, #20]	; (8001628 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	0adb      	lsrs	r3, r3, #11
 8001618:	f003 0307 	and.w	r3, r3, #7
 800161c:	4a03      	ldr	r2, [pc, #12]	; (800162c <HAL_RCC_GetPCLK2Freq+0x24>)
 800161e:	5cd3      	ldrb	r3, [r2, r3]
 8001620:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001624:	4618      	mov	r0, r3
 8001626:	bd80      	pop	{r7, pc}
 8001628:	40021000 	.word	0x40021000
 800162c:	08003338 	.word	0x08003338

08001630 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001630:	b480      	push	{r7}
 8001632:	b085      	sub	sp, #20
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001638:	4b0a      	ldr	r3, [pc, #40]	; (8001664 <RCC_Delay+0x34>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a0a      	ldr	r2, [pc, #40]	; (8001668 <RCC_Delay+0x38>)
 800163e:	fba2 2303 	umull	r2, r3, r2, r3
 8001642:	0a5b      	lsrs	r3, r3, #9
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	fb02 f303 	mul.w	r3, r2, r3
 800164a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800164c:	bf00      	nop
  }
  while (Delay --);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	1e5a      	subs	r2, r3, #1
 8001652:	60fa      	str	r2, [r7, #12]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d1f9      	bne.n	800164c <RCC_Delay+0x1c>
}
 8001658:	bf00      	nop
 800165a:	3714      	adds	r7, #20
 800165c:	46bd      	mov	sp, r7
 800165e:	bc80      	pop	{r7}
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	20000004 	.word	0x20000004
 8001668:	10624dd3 	.word	0x10624dd3

0800166c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d101      	bne.n	800167e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e053      	b.n	8001726 <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2200      	movs	r2, #0
 8001682:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800168a:	b2db      	uxtb	r3, r3
 800168c:	2b00      	cmp	r3, #0
 800168e:	d106      	bne.n	800169e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2200      	movs	r2, #0
 8001694:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f7fe ff05 	bl	80004a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2202      	movs	r2, #2
 80016a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80016b4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	685a      	ldr	r2, [r3, #4]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	431a      	orrs	r2, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	431a      	orrs	r2, r3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	691b      	ldr	r3, [r3, #16]
 80016ca:	431a      	orrs	r2, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	695b      	ldr	r3, [r3, #20]
 80016d0:	431a      	orrs	r2, r3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	699b      	ldr	r3, [r3, #24]
 80016d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016da:	431a      	orrs	r2, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	69db      	ldr	r3, [r3, #28]
 80016e0:	431a      	orrs	r2, r3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6a1b      	ldr	r3, [r3, #32]
 80016e6:	ea42 0103 	orr.w	r1, r2, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	430a      	orrs	r2, r1
 80016f4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	699b      	ldr	r3, [r3, #24]
 80016fa:	0c1a      	lsrs	r2, r3, #16
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f002 0204 	and.w	r2, r2, #4
 8001704:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	69da      	ldr	r2, [r3, #28]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001714:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2200      	movs	r2, #0
 800171a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2201      	movs	r2, #1
 8001720:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	b088      	sub	sp, #32
 8001732:	af00      	add	r7, sp, #0
 8001734:	60f8      	str	r0, [r7, #12]
 8001736:	60b9      	str	r1, [r7, #8]
 8001738:	603b      	str	r3, [r7, #0]
 800173a:	4613      	mov	r3, r2
 800173c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800173e:	2300      	movs	r3, #0
 8001740:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001748:	2b01      	cmp	r3, #1
 800174a:	d101      	bne.n	8001750 <HAL_SPI_Transmit+0x22>
 800174c:	2302      	movs	r3, #2
 800174e:	e11e      	b.n	800198e <HAL_SPI_Transmit+0x260>
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	2201      	movs	r2, #1
 8001754:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001758:	f7ff f8ea 	bl	8000930 <HAL_GetTick>
 800175c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800175e:	88fb      	ldrh	r3, [r7, #6]
 8001760:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001768:	b2db      	uxtb	r3, r3
 800176a:	2b01      	cmp	r3, #1
 800176c:	d002      	beq.n	8001774 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800176e:	2302      	movs	r3, #2
 8001770:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001772:	e103      	b.n	800197c <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d002      	beq.n	8001780 <HAL_SPI_Transmit+0x52>
 800177a:	88fb      	ldrh	r3, [r7, #6]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d102      	bne.n	8001786 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001784:	e0fa      	b.n	800197c <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	2203      	movs	r2, #3
 800178a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	2200      	movs	r2, #0
 8001792:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	68ba      	ldr	r2, [r7, #8]
 8001798:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	88fa      	ldrh	r2, [r7, #6]
 800179e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	88fa      	ldrh	r2, [r7, #6]
 80017a4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	2200      	movs	r2, #0
 80017aa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	2200      	movs	r2, #0
 80017b0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	2200      	movs	r2, #0
 80017b6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	2200      	movs	r2, #0
 80017bc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	2200      	movs	r2, #0
 80017c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80017cc:	d107      	bne.n	80017de <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80017dc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017e8:	2b40      	cmp	r3, #64	; 0x40
 80017ea:	d007      	beq.n	80017fc <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80017fa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001804:	d14b      	bne.n	800189e <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d002      	beq.n	8001814 <HAL_SPI_Transmit+0xe6>
 800180e:	8afb      	ldrh	r3, [r7, #22]
 8001810:	2b01      	cmp	r3, #1
 8001812:	d13e      	bne.n	8001892 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001818:	881a      	ldrh	r2, [r3, #0]
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001824:	1c9a      	adds	r2, r3, #2
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800182e:	b29b      	uxth	r3, r3
 8001830:	3b01      	subs	r3, #1
 8001832:	b29a      	uxth	r2, r3
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001838:	e02b      	b.n	8001892 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	f003 0302 	and.w	r3, r3, #2
 8001844:	2b02      	cmp	r3, #2
 8001846:	d112      	bne.n	800186e <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184c:	881a      	ldrh	r2, [r3, #0]
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001858:	1c9a      	adds	r2, r3, #2
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001862:	b29b      	uxth	r3, r3
 8001864:	3b01      	subs	r3, #1
 8001866:	b29a      	uxth	r2, r3
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	86da      	strh	r2, [r3, #54]	; 0x36
 800186c:	e011      	b.n	8001892 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800186e:	f7ff f85f 	bl	8000930 <HAL_GetTick>
 8001872:	4602      	mov	r2, r0
 8001874:	69bb      	ldr	r3, [r7, #24]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	683a      	ldr	r2, [r7, #0]
 800187a:	429a      	cmp	r2, r3
 800187c:	d803      	bhi.n	8001886 <HAL_SPI_Transmit+0x158>
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001884:	d102      	bne.n	800188c <HAL_SPI_Transmit+0x15e>
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d102      	bne.n	8001892 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800188c:	2303      	movs	r3, #3
 800188e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001890:	e074      	b.n	800197c <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001896:	b29b      	uxth	r3, r3
 8001898:	2b00      	cmp	r3, #0
 800189a:	d1ce      	bne.n	800183a <HAL_SPI_Transmit+0x10c>
 800189c:	e04c      	b.n	8001938 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d002      	beq.n	80018ac <HAL_SPI_Transmit+0x17e>
 80018a6:	8afb      	ldrh	r3, [r7, #22]
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d140      	bne.n	800192e <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	330c      	adds	r3, #12
 80018b6:	7812      	ldrb	r2, [r2, #0]
 80018b8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018be:	1c5a      	adds	r2, r3, #1
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80018c8:	b29b      	uxth	r3, r3
 80018ca:	3b01      	subs	r3, #1
 80018cc:	b29a      	uxth	r2, r3
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80018d2:	e02c      	b.n	800192e <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d113      	bne.n	800190a <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	330c      	adds	r3, #12
 80018ec:	7812      	ldrb	r2, [r2, #0]
 80018ee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f4:	1c5a      	adds	r2, r3, #1
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80018fe:	b29b      	uxth	r3, r3
 8001900:	3b01      	subs	r3, #1
 8001902:	b29a      	uxth	r2, r3
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	86da      	strh	r2, [r3, #54]	; 0x36
 8001908:	e011      	b.n	800192e <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800190a:	f7ff f811 	bl	8000930 <HAL_GetTick>
 800190e:	4602      	mov	r2, r0
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	683a      	ldr	r2, [r7, #0]
 8001916:	429a      	cmp	r2, r3
 8001918:	d803      	bhi.n	8001922 <HAL_SPI_Transmit+0x1f4>
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001920:	d102      	bne.n	8001928 <HAL_SPI_Transmit+0x1fa>
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d102      	bne.n	800192e <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8001928:	2303      	movs	r3, #3
 800192a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800192c:	e026      	b.n	800197c <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001932:	b29b      	uxth	r3, r3
 8001934:	2b00      	cmp	r3, #0
 8001936:	d1cd      	bne.n	80018d4 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001938:	69ba      	ldr	r2, [r7, #24]
 800193a:	6839      	ldr	r1, [r7, #0]
 800193c:	68f8      	ldr	r0, [r7, #12]
 800193e:	f000 fb91 	bl	8002064 <SPI_EndRxTxTransaction>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d002      	beq.n	800194e <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2220      	movs	r2, #32
 800194c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d10a      	bne.n	800196c <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001956:	2300      	movs	r3, #0
 8001958:	613b      	str	r3, [r7, #16]
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	613b      	str	r3, [r7, #16]
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	613b      	str	r3, [r7, #16]
 800196a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001970:	2b00      	cmp	r3, #0
 8001972:	d002      	beq.n	800197a <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	77fb      	strb	r3, [r7, #31]
 8001978:	e000      	b.n	800197c <HAL_SPI_Transmit+0x24e>
  }

error:
 800197a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2201      	movs	r2, #1
 8001980:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	2200      	movs	r2, #0
 8001988:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800198c:	7ffb      	ldrb	r3, [r7, #31]
}
 800198e:	4618      	mov	r0, r3
 8001990:	3720      	adds	r7, #32
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	b088      	sub	sp, #32
 800199a:	af02      	add	r7, sp, #8
 800199c:	60f8      	str	r0, [r7, #12]
 800199e:	60b9      	str	r1, [r7, #8]
 80019a0:	603b      	str	r3, [r7, #0]
 80019a2:	4613      	mov	r3, r2
 80019a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80019a6:	2300      	movs	r3, #0
 80019a8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80019b2:	d112      	bne.n	80019da <HAL_SPI_Receive+0x44>
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d10e      	bne.n	80019da <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	2204      	movs	r2, #4
 80019c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80019c4:	88fa      	ldrh	r2, [r7, #6]
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	9300      	str	r3, [sp, #0]
 80019ca:	4613      	mov	r3, r2
 80019cc:	68ba      	ldr	r2, [r7, #8]
 80019ce:	68b9      	ldr	r1, [r7, #8]
 80019d0:	68f8      	ldr	r0, [r7, #12]
 80019d2:	f000 f8e9 	bl	8001ba8 <HAL_SPI_TransmitReceive>
 80019d6:	4603      	mov	r3, r0
 80019d8:	e0e2      	b.n	8001ba0 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d101      	bne.n	80019e8 <HAL_SPI_Receive+0x52>
 80019e4:	2302      	movs	r3, #2
 80019e6:	e0db      	b.n	8001ba0 <HAL_SPI_Receive+0x20a>
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	2201      	movs	r2, #1
 80019ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80019f0:	f7fe ff9e 	bl	8000930 <HAL_GetTick>
 80019f4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d002      	beq.n	8001a08 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8001a02:	2302      	movs	r3, #2
 8001a04:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001a06:	e0c2      	b.n	8001b8e <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d002      	beq.n	8001a14 <HAL_SPI_Receive+0x7e>
 8001a0e:	88fb      	ldrh	r3, [r7, #6]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d102      	bne.n	8001a1a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001a18:	e0b9      	b.n	8001b8e <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	2204      	movs	r2, #4
 8001a1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	2200      	movs	r2, #0
 8001a26:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	68ba      	ldr	r2, [r7, #8]
 8001a2c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	88fa      	ldrh	r2, [r7, #6]
 8001a32:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	88fa      	ldrh	r2, [r7, #6]
 8001a38:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2200      	movs	r2, #0
 8001a44:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	2200      	movs	r2, #0
 8001a56:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a60:	d107      	bne.n	8001a72 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001a70:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a7c:	2b40      	cmp	r3, #64	; 0x40
 8001a7e:	d007      	beq.n	8001a90 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a8e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d162      	bne.n	8001b5e <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001a98:	e02e      	b.n	8001af8 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	f003 0301 	and.w	r3, r3, #1
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d115      	bne.n	8001ad4 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f103 020c 	add.w	r2, r3, #12
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ab4:	7812      	ldrb	r2, [r2, #0]
 8001ab6:	b2d2      	uxtb	r2, r2
 8001ab8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001abe:	1c5a      	adds	r2, r3, #1
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	3b01      	subs	r3, #1
 8001acc:	b29a      	uxth	r2, r3
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001ad2:	e011      	b.n	8001af8 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001ad4:	f7fe ff2c 	bl	8000930 <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	683a      	ldr	r2, [r7, #0]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d803      	bhi.n	8001aec <HAL_SPI_Receive+0x156>
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aea:	d102      	bne.n	8001af2 <HAL_SPI_Receive+0x15c>
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d102      	bne.n	8001af8 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001af6:	e04a      	b.n	8001b8e <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001afc:	b29b      	uxth	r3, r3
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d1cb      	bne.n	8001a9a <HAL_SPI_Receive+0x104>
 8001b02:	e031      	b.n	8001b68 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	f003 0301 	and.w	r3, r3, #1
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d113      	bne.n	8001b3a <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	68da      	ldr	r2, [r3, #12]
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b1c:	b292      	uxth	r2, r2
 8001b1e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b24:	1c9a      	adds	r2, r3, #2
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b2e:	b29b      	uxth	r3, r3
 8001b30:	3b01      	subs	r3, #1
 8001b32:	b29a      	uxth	r2, r3
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001b38:	e011      	b.n	8001b5e <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001b3a:	f7fe fef9 	bl	8000930 <HAL_GetTick>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	683a      	ldr	r2, [r7, #0]
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d803      	bhi.n	8001b52 <HAL_SPI_Receive+0x1bc>
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b50:	d102      	bne.n	8001b58 <HAL_SPI_Receive+0x1c2>
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d102      	bne.n	8001b5e <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001b5c:	e017      	b.n	8001b8e <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b62:	b29b      	uxth	r3, r3
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d1cd      	bne.n	8001b04 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001b68:	693a      	ldr	r2, [r7, #16]
 8001b6a:	6839      	ldr	r1, [r7, #0]
 8001b6c:	68f8      	ldr	r0, [r7, #12]
 8001b6e:	f000 fa27 	bl	8001fc0 <SPI_EndRxTransaction>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d002      	beq.n	8001b7e <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2220      	movs	r2, #32
 8001b7c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d002      	beq.n	8001b8c <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	75fb      	strb	r3, [r7, #23]
 8001b8a:	e000      	b.n	8001b8e <HAL_SPI_Receive+0x1f8>
  }

error :
 8001b8c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	2201      	movs	r2, #1
 8001b92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001b9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3718      	adds	r7, #24
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b08c      	sub	sp, #48	; 0x30
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	60f8      	str	r0, [r7, #12]
 8001bb0:	60b9      	str	r1, [r7, #8]
 8001bb2:	607a      	str	r2, [r7, #4]
 8001bb4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d101      	bne.n	8001bce <HAL_SPI_TransmitReceive+0x26>
 8001bca:	2302      	movs	r3, #2
 8001bcc:	e18a      	b.n	8001ee4 <HAL_SPI_TransmitReceive+0x33c>
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001bd6:	f7fe feab 	bl	8000930 <HAL_GetTick>
 8001bda:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001be2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001bec:	887b      	ldrh	r3, [r7, #2]
 8001bee:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001bf0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d00f      	beq.n	8001c18 <HAL_SPI_TransmitReceive+0x70>
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001bfe:	d107      	bne.n	8001c10 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d103      	bne.n	8001c10 <HAL_SPI_TransmitReceive+0x68>
 8001c08:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001c0c:	2b04      	cmp	r3, #4
 8001c0e:	d003      	beq.n	8001c18 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001c10:	2302      	movs	r3, #2
 8001c12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001c16:	e15b      	b.n	8001ed0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d005      	beq.n	8001c2a <HAL_SPI_TransmitReceive+0x82>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d002      	beq.n	8001c2a <HAL_SPI_TransmitReceive+0x82>
 8001c24:	887b      	ldrh	r3, [r7, #2]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d103      	bne.n	8001c32 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001c30:	e14e      	b.n	8001ed0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	2b04      	cmp	r3, #4
 8001c3c:	d003      	beq.n	8001c46 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	2205      	movs	r2, #5
 8001c42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	887a      	ldrh	r2, [r7, #2]
 8001c56:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	887a      	ldrh	r2, [r7, #2]
 8001c5c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	68ba      	ldr	r2, [r7, #8]
 8001c62:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	887a      	ldrh	r2, [r7, #2]
 8001c68:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	887a      	ldrh	r2, [r7, #2]
 8001c6e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2200      	movs	r2, #0
 8001c74:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c86:	2b40      	cmp	r3, #64	; 0x40
 8001c88:	d007      	beq.n	8001c9a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c98:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ca2:	d178      	bne.n	8001d96 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d002      	beq.n	8001cb2 <HAL_SPI_TransmitReceive+0x10a>
 8001cac:	8b7b      	ldrh	r3, [r7, #26]
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d166      	bne.n	8001d80 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb6:	881a      	ldrh	r2, [r3, #0]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc2:	1c9a      	adds	r2, r3, #2
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	3b01      	subs	r3, #1
 8001cd0:	b29a      	uxth	r2, r3
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001cd6:	e053      	b.n	8001d80 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	f003 0302 	and.w	r3, r3, #2
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d11b      	bne.n	8001d1e <HAL_SPI_TransmitReceive+0x176>
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001cea:	b29b      	uxth	r3, r3
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d016      	beq.n	8001d1e <HAL_SPI_TransmitReceive+0x176>
 8001cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d113      	bne.n	8001d1e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfa:	881a      	ldrh	r2, [r3, #0]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d06:	1c9a      	adds	r2, r3, #2
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	3b01      	subs	r3, #1
 8001d14:	b29a      	uxth	r2, r3
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	f003 0301 	and.w	r3, r3, #1
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d119      	bne.n	8001d60 <HAL_SPI_TransmitReceive+0x1b8>
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d30:	b29b      	uxth	r3, r3
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d014      	beq.n	8001d60 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	68da      	ldr	r2, [r3, #12]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d40:	b292      	uxth	r2, r2
 8001d42:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d48:	1c9a      	adds	r2, r3, #2
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	3b01      	subs	r3, #1
 8001d56:	b29a      	uxth	r2, r3
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001d60:	f7fe fde6 	bl	8000930 <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d807      	bhi.n	8001d80 <HAL_SPI_TransmitReceive+0x1d8>
 8001d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d76:	d003      	beq.n	8001d80 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001d7e:	e0a7      	b.n	8001ed0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d84:	b29b      	uxth	r3, r3
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d1a6      	bne.n	8001cd8 <HAL_SPI_TransmitReceive+0x130>
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d8e:	b29b      	uxth	r3, r3
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d1a1      	bne.n	8001cd8 <HAL_SPI_TransmitReceive+0x130>
 8001d94:	e07c      	b.n	8001e90 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d002      	beq.n	8001da4 <HAL_SPI_TransmitReceive+0x1fc>
 8001d9e:	8b7b      	ldrh	r3, [r7, #26]
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d16b      	bne.n	8001e7c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	330c      	adds	r3, #12
 8001dae:	7812      	ldrb	r2, [r2, #0]
 8001db0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db6:	1c5a      	adds	r2, r3, #1
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	b29a      	uxth	r2, r3
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001dca:	e057      	b.n	8001e7c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	f003 0302 	and.w	r3, r3, #2
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d11c      	bne.n	8001e14 <HAL_SPI_TransmitReceive+0x26c>
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d017      	beq.n	8001e14 <HAL_SPI_TransmitReceive+0x26c>
 8001de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d114      	bne.n	8001e14 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	330c      	adds	r3, #12
 8001df4:	7812      	ldrb	r2, [r2, #0]
 8001df6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfc:	1c5a      	adds	r2, r3, #1
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	3b01      	subs	r3, #1
 8001e0a:	b29a      	uxth	r2, r3
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001e10:	2300      	movs	r3, #0
 8001e12:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d119      	bne.n	8001e56 <HAL_SPI_TransmitReceive+0x2ae>
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d014      	beq.n	8001e56 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	68da      	ldr	r2, [r3, #12]
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e36:	b2d2      	uxtb	r2, r2
 8001e38:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e3e:	1c5a      	adds	r2, r3, #1
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	3b01      	subs	r3, #1
 8001e4c:	b29a      	uxth	r2, r3
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001e52:	2301      	movs	r3, #1
 8001e54:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001e56:	f7fe fd6b 	bl	8000930 <HAL_GetTick>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d803      	bhi.n	8001e6e <HAL_SPI_TransmitReceive+0x2c6>
 8001e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e6c:	d102      	bne.n	8001e74 <HAL_SPI_TransmitReceive+0x2cc>
 8001e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d103      	bne.n	8001e7c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8001e74:	2303      	movs	r3, #3
 8001e76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001e7a:	e029      	b.n	8001ed0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d1a2      	bne.n	8001dcc <HAL_SPI_TransmitReceive+0x224>
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d19d      	bne.n	8001dcc <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001e90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e92:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001e94:	68f8      	ldr	r0, [r7, #12]
 8001e96:	f000 f8e5 	bl	8002064 <SPI_EndRxTxTransaction>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d006      	beq.n	8001eae <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2220      	movs	r2, #32
 8001eaa:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8001eac:	e010      	b.n	8001ed0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d10b      	bne.n	8001ece <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	617b      	str	r3, [r7, #20]
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	617b      	str	r3, [r7, #20]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	617b      	str	r3, [r7, #20]
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	e000      	b.n	8001ed0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8001ece:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2200      	movs	r2, #0
 8001edc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001ee0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3730      	adds	r7, #48	; 0x30
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}

08001eec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	60f8      	str	r0, [r7, #12]
 8001ef4:	60b9      	str	r1, [r7, #8]
 8001ef6:	603b      	str	r3, [r7, #0]
 8001ef8:	4613      	mov	r3, r2
 8001efa:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001efc:	e04c      	b.n	8001f98 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f04:	d048      	beq.n	8001f98 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001f06:	f7fe fd13 	bl	8000930 <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	683a      	ldr	r2, [r7, #0]
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d902      	bls.n	8001f1c <SPI_WaitFlagStateUntilTimeout+0x30>
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d13d      	bne.n	8001f98 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	685a      	ldr	r2, [r3, #4]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001f2a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001f34:	d111      	bne.n	8001f5a <SPI_WaitFlagStateUntilTimeout+0x6e>
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f3e:	d004      	beq.n	8001f4a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f48:	d107      	bne.n	8001f5a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f58:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f62:	d10f      	bne.n	8001f84 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f72:	601a      	str	r2, [r3, #0]
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f82:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2201      	movs	r2, #1
 8001f88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001f94:	2303      	movs	r3, #3
 8001f96:	e00f      	b.n	8001fb8 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	689a      	ldr	r2, [r3, #8]
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	68ba      	ldr	r2, [r7, #8]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	bf0c      	ite	eq
 8001fa8:	2301      	moveq	r3, #1
 8001faa:	2300      	movne	r3, #0
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	461a      	mov	r2, r3
 8001fb0:	79fb      	ldrb	r3, [r7, #7]
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d1a3      	bne.n	8001efe <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8001fb6:	2300      	movs	r3, #0
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3710      	adds	r7, #16
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b086      	sub	sp, #24
 8001fc4:	af02      	add	r7, sp, #8
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	60b9      	str	r1, [r7, #8]
 8001fca:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001fd4:	d111      	bne.n	8001ffa <SPI_EndRxTransaction+0x3a>
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001fde:	d004      	beq.n	8001fea <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fe8:	d107      	bne.n	8001ffa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ff8:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002002:	d117      	bne.n	8002034 <SPI_EndRxTransaction+0x74>
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800200c:	d112      	bne.n	8002034 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	9300      	str	r3, [sp, #0]
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	2200      	movs	r2, #0
 8002016:	2101      	movs	r1, #1
 8002018:	68f8      	ldr	r0, [r7, #12]
 800201a:	f7ff ff67 	bl	8001eec <SPI_WaitFlagStateUntilTimeout>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d01a      	beq.n	800205a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002028:	f043 0220 	orr.w	r2, r3, #32
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002030:	2303      	movs	r3, #3
 8002032:	e013      	b.n	800205c <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	9300      	str	r3, [sp, #0]
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	2200      	movs	r2, #0
 800203c:	2180      	movs	r1, #128	; 0x80
 800203e:	68f8      	ldr	r0, [r7, #12]
 8002040:	f7ff ff54 	bl	8001eec <SPI_WaitFlagStateUntilTimeout>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d007      	beq.n	800205a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800204e:	f043 0220 	orr.w	r2, r3, #32
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e000      	b.n	800205c <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800205a:	2300      	movs	r3, #0
}
 800205c:	4618      	mov	r0, r3
 800205e:	3710      	adds	r7, #16
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}

08002064 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b086      	sub	sp, #24
 8002068:	af02      	add	r7, sp, #8
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	60b9      	str	r1, [r7, #8]
 800206e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	9300      	str	r3, [sp, #0]
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	2200      	movs	r2, #0
 8002078:	2180      	movs	r1, #128	; 0x80
 800207a:	68f8      	ldr	r0, [r7, #12]
 800207c:	f7ff ff36 	bl	8001eec <SPI_WaitFlagStateUntilTimeout>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d007      	beq.n	8002096 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800208a:	f043 0220 	orr.w	r2, r3, #32
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e000      	b.n	8002098 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002096:	2300      	movs	r3, #0
}
 8002098:	4618      	mov	r0, r3
 800209a:	3710      	adds	r7, #16
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d101      	bne.n	80020b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e03f      	b.n	8002132 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d106      	bne.n	80020cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f7fe fa74 	bl	80005b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2224      	movs	r2, #36	; 0x24
 80020d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	68da      	ldr	r2, [r3, #12]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80020e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f000 f90b 	bl	8002300 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	691a      	ldr	r2, [r3, #16]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80020f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	695a      	ldr	r2, [r3, #20]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002108:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	68da      	ldr	r2, [r3, #12]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002118:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2200      	movs	r2, #0
 800211e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2220      	movs	r2, #32
 8002124:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2220      	movs	r2, #32
 800212c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002130:	2300      	movs	r3, #0
}
 8002132:	4618      	mov	r0, r3
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}

0800213a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800213a:	b580      	push	{r7, lr}
 800213c:	b088      	sub	sp, #32
 800213e:	af02      	add	r7, sp, #8
 8002140:	60f8      	str	r0, [r7, #12]
 8002142:	60b9      	str	r1, [r7, #8]
 8002144:	603b      	str	r3, [r7, #0]
 8002146:	4613      	mov	r3, r2
 8002148:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800214a:	2300      	movs	r3, #0
 800214c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002154:	b2db      	uxtb	r3, r3
 8002156:	2b20      	cmp	r3, #32
 8002158:	f040 8083 	bne.w	8002262 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d002      	beq.n	8002168 <HAL_UART_Transmit+0x2e>
 8002162:	88fb      	ldrh	r3, [r7, #6]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d101      	bne.n	800216c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e07b      	b.n	8002264 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002172:	2b01      	cmp	r3, #1
 8002174:	d101      	bne.n	800217a <HAL_UART_Transmit+0x40>
 8002176:	2302      	movs	r3, #2
 8002178:	e074      	b.n	8002264 <HAL_UART_Transmit+0x12a>
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2201      	movs	r2, #1
 800217e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2200      	movs	r2, #0
 8002186:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2221      	movs	r2, #33	; 0x21
 800218c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002190:	f7fe fbce 	bl	8000930 <HAL_GetTick>
 8002194:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	88fa      	ldrh	r2, [r7, #6]
 800219a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	88fa      	ldrh	r2, [r7, #6]
 80021a0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80021a2:	e042      	b.n	800222a <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80021a8:	b29b      	uxth	r3, r3
 80021aa:	3b01      	subs	r3, #1
 80021ac:	b29a      	uxth	r2, r3
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021ba:	d122      	bne.n	8002202 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	9300      	str	r3, [sp, #0]
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	2200      	movs	r2, #0
 80021c4:	2180      	movs	r1, #128	; 0x80
 80021c6:	68f8      	ldr	r0, [r7, #12]
 80021c8:	f000 f850 	bl	800226c <UART_WaitOnFlagUntilTimeout>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e046      	b.n	8002264 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	881b      	ldrh	r3, [r3, #0]
 80021de:	461a      	mov	r2, r3
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80021e8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	691b      	ldr	r3, [r3, #16]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d103      	bne.n	80021fa <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	3302      	adds	r3, #2
 80021f6:	60bb      	str	r3, [r7, #8]
 80021f8:	e017      	b.n	800222a <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	3301      	adds	r3, #1
 80021fe:	60bb      	str	r3, [r7, #8]
 8002200:	e013      	b.n	800222a <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	9300      	str	r3, [sp, #0]
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	2200      	movs	r2, #0
 800220a:	2180      	movs	r1, #128	; 0x80
 800220c:	68f8      	ldr	r0, [r7, #12]
 800220e:	f000 f82d 	bl	800226c <UART_WaitOnFlagUntilTimeout>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d001      	beq.n	800221c <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e023      	b.n	8002264 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	1c5a      	adds	r2, r3, #1
 8002220:	60ba      	str	r2, [r7, #8]
 8002222:	781a      	ldrb	r2, [r3, #0]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800222e:	b29b      	uxth	r3, r3
 8002230:	2b00      	cmp	r3, #0
 8002232:	d1b7      	bne.n	80021a4 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	9300      	str	r3, [sp, #0]
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	2200      	movs	r2, #0
 800223c:	2140      	movs	r1, #64	; 0x40
 800223e:	68f8      	ldr	r0, [r7, #12]
 8002240:	f000 f814 	bl	800226c <UART_WaitOnFlagUntilTimeout>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e00a      	b.n	8002264 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2220      	movs	r2, #32
 8002252:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2200      	movs	r2, #0
 800225a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800225e:	2300      	movs	r3, #0
 8002260:	e000      	b.n	8002264 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002262:	2302      	movs	r3, #2
  }
}
 8002264:	4618      	mov	r0, r3
 8002266:	3718      	adds	r7, #24
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	60b9      	str	r1, [r7, #8]
 8002276:	603b      	str	r3, [r7, #0]
 8002278:	4613      	mov	r3, r2
 800227a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800227c:	e02c      	b.n	80022d8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800227e:	69bb      	ldr	r3, [r7, #24]
 8002280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002284:	d028      	beq.n	80022d8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d007      	beq.n	800229c <UART_WaitOnFlagUntilTimeout+0x30>
 800228c:	f7fe fb50 	bl	8000930 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	429a      	cmp	r2, r3
 800229a:	d21d      	bcs.n	80022d8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	68da      	ldr	r2, [r3, #12]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80022aa:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	695a      	ldr	r2, [r3, #20]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f022 0201 	bic.w	r2, r2, #1
 80022ba:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2220      	movs	r2, #32
 80022c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2220      	movs	r2, #32
 80022c8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2200      	movs	r2, #0
 80022d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80022d4:	2303      	movs	r3, #3
 80022d6:	e00f      	b.n	80022f8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	4013      	ands	r3, r2
 80022e2:	68ba      	ldr	r2, [r7, #8]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	bf0c      	ite	eq
 80022e8:	2301      	moveq	r3, #1
 80022ea:	2300      	movne	r3, #0
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	461a      	mov	r2, r3
 80022f0:	79fb      	ldrb	r3, [r7, #7]
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d0c3      	beq.n	800227e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80022f6:	2300      	movs	r3, #0
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3710      	adds	r7, #16
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}

08002300 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	691b      	ldr	r3, [r3, #16]
 800230e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	68da      	ldr	r2, [r3, #12]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	430a      	orrs	r2, r1
 800231c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	689a      	ldr	r2, [r3, #8]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	691b      	ldr	r3, [r3, #16]
 8002326:	431a      	orrs	r2, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	695b      	ldr	r3, [r3, #20]
 800232c:	4313      	orrs	r3, r2
 800232e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800233a:	f023 030c 	bic.w	r3, r3, #12
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	6812      	ldr	r2, [r2, #0]
 8002342:	68f9      	ldr	r1, [r7, #12]
 8002344:	430b      	orrs	r3, r1
 8002346:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	695b      	ldr	r3, [r3, #20]
 800234e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	699a      	ldr	r2, [r3, #24]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	430a      	orrs	r2, r1
 800235c:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a52      	ldr	r2, [pc, #328]	; (80024ac <UART_SetConfig+0x1ac>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d14e      	bne.n	8002406 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002368:	f7ff f94e 	bl	8001608 <HAL_RCC_GetPCLK2Freq>
 800236c:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800236e:	68ba      	ldr	r2, [r7, #8]
 8002370:	4613      	mov	r3, r2
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	4413      	add	r3, r2
 8002376:	009a      	lsls	r2, r3, #2
 8002378:	441a      	add	r2, r3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	fbb2 f3f3 	udiv	r3, r2, r3
 8002384:	4a4a      	ldr	r2, [pc, #296]	; (80024b0 <UART_SetConfig+0x1b0>)
 8002386:	fba2 2303 	umull	r2, r3, r2, r3
 800238a:	095b      	lsrs	r3, r3, #5
 800238c:	0119      	lsls	r1, r3, #4
 800238e:	68ba      	ldr	r2, [r7, #8]
 8002390:	4613      	mov	r3, r2
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	4413      	add	r3, r2
 8002396:	009a      	lsls	r2, r3, #2
 8002398:	441a      	add	r2, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80023a4:	4b42      	ldr	r3, [pc, #264]	; (80024b0 <UART_SetConfig+0x1b0>)
 80023a6:	fba3 0302 	umull	r0, r3, r3, r2
 80023aa:	095b      	lsrs	r3, r3, #5
 80023ac:	2064      	movs	r0, #100	; 0x64
 80023ae:	fb00 f303 	mul.w	r3, r0, r3
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	011b      	lsls	r3, r3, #4
 80023b6:	3332      	adds	r3, #50	; 0x32
 80023b8:	4a3d      	ldr	r2, [pc, #244]	; (80024b0 <UART_SetConfig+0x1b0>)
 80023ba:	fba2 2303 	umull	r2, r3, r2, r3
 80023be:	095b      	lsrs	r3, r3, #5
 80023c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023c4:	4419      	add	r1, r3
 80023c6:	68ba      	ldr	r2, [r7, #8]
 80023c8:	4613      	mov	r3, r2
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	4413      	add	r3, r2
 80023ce:	009a      	lsls	r2, r3, #2
 80023d0:	441a      	add	r2, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80023dc:	4b34      	ldr	r3, [pc, #208]	; (80024b0 <UART_SetConfig+0x1b0>)
 80023de:	fba3 0302 	umull	r0, r3, r3, r2
 80023e2:	095b      	lsrs	r3, r3, #5
 80023e4:	2064      	movs	r0, #100	; 0x64
 80023e6:	fb00 f303 	mul.w	r3, r0, r3
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	011b      	lsls	r3, r3, #4
 80023ee:	3332      	adds	r3, #50	; 0x32
 80023f0:	4a2f      	ldr	r2, [pc, #188]	; (80024b0 <UART_SetConfig+0x1b0>)
 80023f2:	fba2 2303 	umull	r2, r3, r2, r3
 80023f6:	095b      	lsrs	r3, r3, #5
 80023f8:	f003 020f 	and.w	r2, r3, #15
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	440a      	add	r2, r1
 8002402:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8002404:	e04d      	b.n	80024a2 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8002406:	f7ff f8eb 	bl	80015e0 <HAL_RCC_GetPCLK1Freq>
 800240a:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800240c:	68ba      	ldr	r2, [r7, #8]
 800240e:	4613      	mov	r3, r2
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	4413      	add	r3, r2
 8002414:	009a      	lsls	r2, r3, #2
 8002416:	441a      	add	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002422:	4a23      	ldr	r2, [pc, #140]	; (80024b0 <UART_SetConfig+0x1b0>)
 8002424:	fba2 2303 	umull	r2, r3, r2, r3
 8002428:	095b      	lsrs	r3, r3, #5
 800242a:	0119      	lsls	r1, r3, #4
 800242c:	68ba      	ldr	r2, [r7, #8]
 800242e:	4613      	mov	r3, r2
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	4413      	add	r3, r2
 8002434:	009a      	lsls	r2, r3, #2
 8002436:	441a      	add	r2, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002442:	4b1b      	ldr	r3, [pc, #108]	; (80024b0 <UART_SetConfig+0x1b0>)
 8002444:	fba3 0302 	umull	r0, r3, r3, r2
 8002448:	095b      	lsrs	r3, r3, #5
 800244a:	2064      	movs	r0, #100	; 0x64
 800244c:	fb00 f303 	mul.w	r3, r0, r3
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	011b      	lsls	r3, r3, #4
 8002454:	3332      	adds	r3, #50	; 0x32
 8002456:	4a16      	ldr	r2, [pc, #88]	; (80024b0 <UART_SetConfig+0x1b0>)
 8002458:	fba2 2303 	umull	r2, r3, r2, r3
 800245c:	095b      	lsrs	r3, r3, #5
 800245e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002462:	4419      	add	r1, r3
 8002464:	68ba      	ldr	r2, [r7, #8]
 8002466:	4613      	mov	r3, r2
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	4413      	add	r3, r2
 800246c:	009a      	lsls	r2, r3, #2
 800246e:	441a      	add	r2, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	fbb2 f2f3 	udiv	r2, r2, r3
 800247a:	4b0d      	ldr	r3, [pc, #52]	; (80024b0 <UART_SetConfig+0x1b0>)
 800247c:	fba3 0302 	umull	r0, r3, r3, r2
 8002480:	095b      	lsrs	r3, r3, #5
 8002482:	2064      	movs	r0, #100	; 0x64
 8002484:	fb00 f303 	mul.w	r3, r0, r3
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	011b      	lsls	r3, r3, #4
 800248c:	3332      	adds	r3, #50	; 0x32
 800248e:	4a08      	ldr	r2, [pc, #32]	; (80024b0 <UART_SetConfig+0x1b0>)
 8002490:	fba2 2303 	umull	r2, r3, r2, r3
 8002494:	095b      	lsrs	r3, r3, #5
 8002496:	f003 020f 	and.w	r2, r3, #15
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	440a      	add	r2, r1
 80024a0:	609a      	str	r2, [r3, #8]
}
 80024a2:	bf00      	nop
 80024a4:	3710      	adds	r7, #16
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	40013800 	.word	0x40013800
 80024b0:	51eb851f 	.word	0x51eb851f

080024b4 <__errno>:
 80024b4:	4b01      	ldr	r3, [pc, #4]	; (80024bc <__errno+0x8>)
 80024b6:	6818      	ldr	r0, [r3, #0]
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	20000010 	.word	0x20000010

080024c0 <__libc_init_array>:
 80024c0:	b570      	push	{r4, r5, r6, lr}
 80024c2:	2500      	movs	r5, #0
 80024c4:	4e0c      	ldr	r6, [pc, #48]	; (80024f8 <__libc_init_array+0x38>)
 80024c6:	4c0d      	ldr	r4, [pc, #52]	; (80024fc <__libc_init_array+0x3c>)
 80024c8:	1ba4      	subs	r4, r4, r6
 80024ca:	10a4      	asrs	r4, r4, #2
 80024cc:	42a5      	cmp	r5, r4
 80024ce:	d109      	bne.n	80024e4 <__libc_init_array+0x24>
 80024d0:	f000 ff10 	bl	80032f4 <_init>
 80024d4:	2500      	movs	r5, #0
 80024d6:	4e0a      	ldr	r6, [pc, #40]	; (8002500 <__libc_init_array+0x40>)
 80024d8:	4c0a      	ldr	r4, [pc, #40]	; (8002504 <__libc_init_array+0x44>)
 80024da:	1ba4      	subs	r4, r4, r6
 80024dc:	10a4      	asrs	r4, r4, #2
 80024de:	42a5      	cmp	r5, r4
 80024e0:	d105      	bne.n	80024ee <__libc_init_array+0x2e>
 80024e2:	bd70      	pop	{r4, r5, r6, pc}
 80024e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80024e8:	4798      	blx	r3
 80024ea:	3501      	adds	r5, #1
 80024ec:	e7ee      	b.n	80024cc <__libc_init_array+0xc>
 80024ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80024f2:	4798      	blx	r3
 80024f4:	3501      	adds	r5, #1
 80024f6:	e7f2      	b.n	80024de <__libc_init_array+0x1e>
 80024f8:	080033d8 	.word	0x080033d8
 80024fc:	080033d8 	.word	0x080033d8
 8002500:	080033d8 	.word	0x080033d8
 8002504:	080033dc 	.word	0x080033dc

08002508 <memset>:
 8002508:	4603      	mov	r3, r0
 800250a:	4402      	add	r2, r0
 800250c:	4293      	cmp	r3, r2
 800250e:	d100      	bne.n	8002512 <memset+0xa>
 8002510:	4770      	bx	lr
 8002512:	f803 1b01 	strb.w	r1, [r3], #1
 8002516:	e7f9      	b.n	800250c <memset+0x4>

08002518 <iprintf>:
 8002518:	b40f      	push	{r0, r1, r2, r3}
 800251a:	4b0a      	ldr	r3, [pc, #40]	; (8002544 <iprintf+0x2c>)
 800251c:	b513      	push	{r0, r1, r4, lr}
 800251e:	681c      	ldr	r4, [r3, #0]
 8002520:	b124      	cbz	r4, 800252c <iprintf+0x14>
 8002522:	69a3      	ldr	r3, [r4, #24]
 8002524:	b913      	cbnz	r3, 800252c <iprintf+0x14>
 8002526:	4620      	mov	r0, r4
 8002528:	f000 f84e 	bl	80025c8 <__sinit>
 800252c:	ab05      	add	r3, sp, #20
 800252e:	9a04      	ldr	r2, [sp, #16]
 8002530:	68a1      	ldr	r1, [r4, #8]
 8002532:	4620      	mov	r0, r4
 8002534:	9301      	str	r3, [sp, #4]
 8002536:	f000 f953 	bl	80027e0 <_vfiprintf_r>
 800253a:	b002      	add	sp, #8
 800253c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002540:	b004      	add	sp, #16
 8002542:	4770      	bx	lr
 8002544:	20000010 	.word	0x20000010

08002548 <std>:
 8002548:	2300      	movs	r3, #0
 800254a:	b510      	push	{r4, lr}
 800254c:	4604      	mov	r4, r0
 800254e:	e9c0 3300 	strd	r3, r3, [r0]
 8002552:	6083      	str	r3, [r0, #8]
 8002554:	8181      	strh	r1, [r0, #12]
 8002556:	6643      	str	r3, [r0, #100]	; 0x64
 8002558:	81c2      	strh	r2, [r0, #14]
 800255a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800255e:	6183      	str	r3, [r0, #24]
 8002560:	4619      	mov	r1, r3
 8002562:	2208      	movs	r2, #8
 8002564:	305c      	adds	r0, #92	; 0x5c
 8002566:	f7ff ffcf 	bl	8002508 <memset>
 800256a:	4b05      	ldr	r3, [pc, #20]	; (8002580 <std+0x38>)
 800256c:	6224      	str	r4, [r4, #32]
 800256e:	6263      	str	r3, [r4, #36]	; 0x24
 8002570:	4b04      	ldr	r3, [pc, #16]	; (8002584 <std+0x3c>)
 8002572:	62a3      	str	r3, [r4, #40]	; 0x28
 8002574:	4b04      	ldr	r3, [pc, #16]	; (8002588 <std+0x40>)
 8002576:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002578:	4b04      	ldr	r3, [pc, #16]	; (800258c <std+0x44>)
 800257a:	6323      	str	r3, [r4, #48]	; 0x30
 800257c:	bd10      	pop	{r4, pc}
 800257e:	bf00      	nop
 8002580:	08002d3d 	.word	0x08002d3d
 8002584:	08002d5f 	.word	0x08002d5f
 8002588:	08002d97 	.word	0x08002d97
 800258c:	08002dbb 	.word	0x08002dbb

08002590 <_cleanup_r>:
 8002590:	4901      	ldr	r1, [pc, #4]	; (8002598 <_cleanup_r+0x8>)
 8002592:	f000 b885 	b.w	80026a0 <_fwalk_reent>
 8002596:	bf00      	nop
 8002598:	08003095 	.word	0x08003095

0800259c <__sfmoreglue>:
 800259c:	b570      	push	{r4, r5, r6, lr}
 800259e:	2568      	movs	r5, #104	; 0x68
 80025a0:	1e4a      	subs	r2, r1, #1
 80025a2:	4355      	muls	r5, r2
 80025a4:	460e      	mov	r6, r1
 80025a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80025aa:	f000 f897 	bl	80026dc <_malloc_r>
 80025ae:	4604      	mov	r4, r0
 80025b0:	b140      	cbz	r0, 80025c4 <__sfmoreglue+0x28>
 80025b2:	2100      	movs	r1, #0
 80025b4:	e9c0 1600 	strd	r1, r6, [r0]
 80025b8:	300c      	adds	r0, #12
 80025ba:	60a0      	str	r0, [r4, #8]
 80025bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80025c0:	f7ff ffa2 	bl	8002508 <memset>
 80025c4:	4620      	mov	r0, r4
 80025c6:	bd70      	pop	{r4, r5, r6, pc}

080025c8 <__sinit>:
 80025c8:	6983      	ldr	r3, [r0, #24]
 80025ca:	b510      	push	{r4, lr}
 80025cc:	4604      	mov	r4, r0
 80025ce:	bb33      	cbnz	r3, 800261e <__sinit+0x56>
 80025d0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80025d4:	6503      	str	r3, [r0, #80]	; 0x50
 80025d6:	4b12      	ldr	r3, [pc, #72]	; (8002620 <__sinit+0x58>)
 80025d8:	4a12      	ldr	r2, [pc, #72]	; (8002624 <__sinit+0x5c>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	6282      	str	r2, [r0, #40]	; 0x28
 80025de:	4298      	cmp	r0, r3
 80025e0:	bf04      	itt	eq
 80025e2:	2301      	moveq	r3, #1
 80025e4:	6183      	streq	r3, [r0, #24]
 80025e6:	f000 f81f 	bl	8002628 <__sfp>
 80025ea:	6060      	str	r0, [r4, #4]
 80025ec:	4620      	mov	r0, r4
 80025ee:	f000 f81b 	bl	8002628 <__sfp>
 80025f2:	60a0      	str	r0, [r4, #8]
 80025f4:	4620      	mov	r0, r4
 80025f6:	f000 f817 	bl	8002628 <__sfp>
 80025fa:	2200      	movs	r2, #0
 80025fc:	60e0      	str	r0, [r4, #12]
 80025fe:	2104      	movs	r1, #4
 8002600:	6860      	ldr	r0, [r4, #4]
 8002602:	f7ff ffa1 	bl	8002548 <std>
 8002606:	2201      	movs	r2, #1
 8002608:	2109      	movs	r1, #9
 800260a:	68a0      	ldr	r0, [r4, #8]
 800260c:	f7ff ff9c 	bl	8002548 <std>
 8002610:	2202      	movs	r2, #2
 8002612:	2112      	movs	r1, #18
 8002614:	68e0      	ldr	r0, [r4, #12]
 8002616:	f7ff ff97 	bl	8002548 <std>
 800261a:	2301      	movs	r3, #1
 800261c:	61a3      	str	r3, [r4, #24]
 800261e:	bd10      	pop	{r4, pc}
 8002620:	08003340 	.word	0x08003340
 8002624:	08002591 	.word	0x08002591

08002628 <__sfp>:
 8002628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800262a:	4b1b      	ldr	r3, [pc, #108]	; (8002698 <__sfp+0x70>)
 800262c:	4607      	mov	r7, r0
 800262e:	681e      	ldr	r6, [r3, #0]
 8002630:	69b3      	ldr	r3, [r6, #24]
 8002632:	b913      	cbnz	r3, 800263a <__sfp+0x12>
 8002634:	4630      	mov	r0, r6
 8002636:	f7ff ffc7 	bl	80025c8 <__sinit>
 800263a:	3648      	adds	r6, #72	; 0x48
 800263c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002640:	3b01      	subs	r3, #1
 8002642:	d503      	bpl.n	800264c <__sfp+0x24>
 8002644:	6833      	ldr	r3, [r6, #0]
 8002646:	b133      	cbz	r3, 8002656 <__sfp+0x2e>
 8002648:	6836      	ldr	r6, [r6, #0]
 800264a:	e7f7      	b.n	800263c <__sfp+0x14>
 800264c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002650:	b16d      	cbz	r5, 800266e <__sfp+0x46>
 8002652:	3468      	adds	r4, #104	; 0x68
 8002654:	e7f4      	b.n	8002640 <__sfp+0x18>
 8002656:	2104      	movs	r1, #4
 8002658:	4638      	mov	r0, r7
 800265a:	f7ff ff9f 	bl	800259c <__sfmoreglue>
 800265e:	6030      	str	r0, [r6, #0]
 8002660:	2800      	cmp	r0, #0
 8002662:	d1f1      	bne.n	8002648 <__sfp+0x20>
 8002664:	230c      	movs	r3, #12
 8002666:	4604      	mov	r4, r0
 8002668:	603b      	str	r3, [r7, #0]
 800266a:	4620      	mov	r0, r4
 800266c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800266e:	4b0b      	ldr	r3, [pc, #44]	; (800269c <__sfp+0x74>)
 8002670:	6665      	str	r5, [r4, #100]	; 0x64
 8002672:	e9c4 5500 	strd	r5, r5, [r4]
 8002676:	60a5      	str	r5, [r4, #8]
 8002678:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800267c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8002680:	2208      	movs	r2, #8
 8002682:	4629      	mov	r1, r5
 8002684:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002688:	f7ff ff3e 	bl	8002508 <memset>
 800268c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002690:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002694:	e7e9      	b.n	800266a <__sfp+0x42>
 8002696:	bf00      	nop
 8002698:	08003340 	.word	0x08003340
 800269c:	ffff0001 	.word	0xffff0001

080026a0 <_fwalk_reent>:
 80026a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80026a4:	4680      	mov	r8, r0
 80026a6:	4689      	mov	r9, r1
 80026a8:	2600      	movs	r6, #0
 80026aa:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80026ae:	b914      	cbnz	r4, 80026b6 <_fwalk_reent+0x16>
 80026b0:	4630      	mov	r0, r6
 80026b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80026b6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80026ba:	3f01      	subs	r7, #1
 80026bc:	d501      	bpl.n	80026c2 <_fwalk_reent+0x22>
 80026be:	6824      	ldr	r4, [r4, #0]
 80026c0:	e7f5      	b.n	80026ae <_fwalk_reent+0xe>
 80026c2:	89ab      	ldrh	r3, [r5, #12]
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d907      	bls.n	80026d8 <_fwalk_reent+0x38>
 80026c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80026cc:	3301      	adds	r3, #1
 80026ce:	d003      	beq.n	80026d8 <_fwalk_reent+0x38>
 80026d0:	4629      	mov	r1, r5
 80026d2:	4640      	mov	r0, r8
 80026d4:	47c8      	blx	r9
 80026d6:	4306      	orrs	r6, r0
 80026d8:	3568      	adds	r5, #104	; 0x68
 80026da:	e7ee      	b.n	80026ba <_fwalk_reent+0x1a>

080026dc <_malloc_r>:
 80026dc:	b570      	push	{r4, r5, r6, lr}
 80026de:	1ccd      	adds	r5, r1, #3
 80026e0:	f025 0503 	bic.w	r5, r5, #3
 80026e4:	3508      	adds	r5, #8
 80026e6:	2d0c      	cmp	r5, #12
 80026e8:	bf38      	it	cc
 80026ea:	250c      	movcc	r5, #12
 80026ec:	2d00      	cmp	r5, #0
 80026ee:	4606      	mov	r6, r0
 80026f0:	db01      	blt.n	80026f6 <_malloc_r+0x1a>
 80026f2:	42a9      	cmp	r1, r5
 80026f4:	d903      	bls.n	80026fe <_malloc_r+0x22>
 80026f6:	230c      	movs	r3, #12
 80026f8:	6033      	str	r3, [r6, #0]
 80026fa:	2000      	movs	r0, #0
 80026fc:	bd70      	pop	{r4, r5, r6, pc}
 80026fe:	f000 fd77 	bl	80031f0 <__malloc_lock>
 8002702:	4a21      	ldr	r2, [pc, #132]	; (8002788 <_malloc_r+0xac>)
 8002704:	6814      	ldr	r4, [r2, #0]
 8002706:	4621      	mov	r1, r4
 8002708:	b991      	cbnz	r1, 8002730 <_malloc_r+0x54>
 800270a:	4c20      	ldr	r4, [pc, #128]	; (800278c <_malloc_r+0xb0>)
 800270c:	6823      	ldr	r3, [r4, #0]
 800270e:	b91b      	cbnz	r3, 8002718 <_malloc_r+0x3c>
 8002710:	4630      	mov	r0, r6
 8002712:	f000 fb03 	bl	8002d1c <_sbrk_r>
 8002716:	6020      	str	r0, [r4, #0]
 8002718:	4629      	mov	r1, r5
 800271a:	4630      	mov	r0, r6
 800271c:	f000 fafe 	bl	8002d1c <_sbrk_r>
 8002720:	1c43      	adds	r3, r0, #1
 8002722:	d124      	bne.n	800276e <_malloc_r+0x92>
 8002724:	230c      	movs	r3, #12
 8002726:	4630      	mov	r0, r6
 8002728:	6033      	str	r3, [r6, #0]
 800272a:	f000 fd62 	bl	80031f2 <__malloc_unlock>
 800272e:	e7e4      	b.n	80026fa <_malloc_r+0x1e>
 8002730:	680b      	ldr	r3, [r1, #0]
 8002732:	1b5b      	subs	r3, r3, r5
 8002734:	d418      	bmi.n	8002768 <_malloc_r+0x8c>
 8002736:	2b0b      	cmp	r3, #11
 8002738:	d90f      	bls.n	800275a <_malloc_r+0x7e>
 800273a:	600b      	str	r3, [r1, #0]
 800273c:	18cc      	adds	r4, r1, r3
 800273e:	50cd      	str	r5, [r1, r3]
 8002740:	4630      	mov	r0, r6
 8002742:	f000 fd56 	bl	80031f2 <__malloc_unlock>
 8002746:	f104 000b 	add.w	r0, r4, #11
 800274a:	1d23      	adds	r3, r4, #4
 800274c:	f020 0007 	bic.w	r0, r0, #7
 8002750:	1ac3      	subs	r3, r0, r3
 8002752:	d0d3      	beq.n	80026fc <_malloc_r+0x20>
 8002754:	425a      	negs	r2, r3
 8002756:	50e2      	str	r2, [r4, r3]
 8002758:	e7d0      	b.n	80026fc <_malloc_r+0x20>
 800275a:	684b      	ldr	r3, [r1, #4]
 800275c:	428c      	cmp	r4, r1
 800275e:	bf16      	itet	ne
 8002760:	6063      	strne	r3, [r4, #4]
 8002762:	6013      	streq	r3, [r2, #0]
 8002764:	460c      	movne	r4, r1
 8002766:	e7eb      	b.n	8002740 <_malloc_r+0x64>
 8002768:	460c      	mov	r4, r1
 800276a:	6849      	ldr	r1, [r1, #4]
 800276c:	e7cc      	b.n	8002708 <_malloc_r+0x2c>
 800276e:	1cc4      	adds	r4, r0, #3
 8002770:	f024 0403 	bic.w	r4, r4, #3
 8002774:	42a0      	cmp	r0, r4
 8002776:	d005      	beq.n	8002784 <_malloc_r+0xa8>
 8002778:	1a21      	subs	r1, r4, r0
 800277a:	4630      	mov	r0, r6
 800277c:	f000 face 	bl	8002d1c <_sbrk_r>
 8002780:	3001      	adds	r0, #1
 8002782:	d0cf      	beq.n	8002724 <_malloc_r+0x48>
 8002784:	6025      	str	r5, [r4, #0]
 8002786:	e7db      	b.n	8002740 <_malloc_r+0x64>
 8002788:	20000094 	.word	0x20000094
 800278c:	20000098 	.word	0x20000098

08002790 <__sfputc_r>:
 8002790:	6893      	ldr	r3, [r2, #8]
 8002792:	b410      	push	{r4}
 8002794:	3b01      	subs	r3, #1
 8002796:	2b00      	cmp	r3, #0
 8002798:	6093      	str	r3, [r2, #8]
 800279a:	da07      	bge.n	80027ac <__sfputc_r+0x1c>
 800279c:	6994      	ldr	r4, [r2, #24]
 800279e:	42a3      	cmp	r3, r4
 80027a0:	db01      	blt.n	80027a6 <__sfputc_r+0x16>
 80027a2:	290a      	cmp	r1, #10
 80027a4:	d102      	bne.n	80027ac <__sfputc_r+0x1c>
 80027a6:	bc10      	pop	{r4}
 80027a8:	f000 bb0c 	b.w	8002dc4 <__swbuf_r>
 80027ac:	6813      	ldr	r3, [r2, #0]
 80027ae:	1c58      	adds	r0, r3, #1
 80027b0:	6010      	str	r0, [r2, #0]
 80027b2:	7019      	strb	r1, [r3, #0]
 80027b4:	4608      	mov	r0, r1
 80027b6:	bc10      	pop	{r4}
 80027b8:	4770      	bx	lr

080027ba <__sfputs_r>:
 80027ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027bc:	4606      	mov	r6, r0
 80027be:	460f      	mov	r7, r1
 80027c0:	4614      	mov	r4, r2
 80027c2:	18d5      	adds	r5, r2, r3
 80027c4:	42ac      	cmp	r4, r5
 80027c6:	d101      	bne.n	80027cc <__sfputs_r+0x12>
 80027c8:	2000      	movs	r0, #0
 80027ca:	e007      	b.n	80027dc <__sfputs_r+0x22>
 80027cc:	463a      	mov	r2, r7
 80027ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80027d2:	4630      	mov	r0, r6
 80027d4:	f7ff ffdc 	bl	8002790 <__sfputc_r>
 80027d8:	1c43      	adds	r3, r0, #1
 80027da:	d1f3      	bne.n	80027c4 <__sfputs_r+0xa>
 80027dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080027e0 <_vfiprintf_r>:
 80027e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027e4:	460c      	mov	r4, r1
 80027e6:	b09d      	sub	sp, #116	; 0x74
 80027e8:	4617      	mov	r7, r2
 80027ea:	461d      	mov	r5, r3
 80027ec:	4606      	mov	r6, r0
 80027ee:	b118      	cbz	r0, 80027f8 <_vfiprintf_r+0x18>
 80027f0:	6983      	ldr	r3, [r0, #24]
 80027f2:	b90b      	cbnz	r3, 80027f8 <_vfiprintf_r+0x18>
 80027f4:	f7ff fee8 	bl	80025c8 <__sinit>
 80027f8:	4b7c      	ldr	r3, [pc, #496]	; (80029ec <_vfiprintf_r+0x20c>)
 80027fa:	429c      	cmp	r4, r3
 80027fc:	d158      	bne.n	80028b0 <_vfiprintf_r+0xd0>
 80027fe:	6874      	ldr	r4, [r6, #4]
 8002800:	89a3      	ldrh	r3, [r4, #12]
 8002802:	0718      	lsls	r0, r3, #28
 8002804:	d55e      	bpl.n	80028c4 <_vfiprintf_r+0xe4>
 8002806:	6923      	ldr	r3, [r4, #16]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d05b      	beq.n	80028c4 <_vfiprintf_r+0xe4>
 800280c:	2300      	movs	r3, #0
 800280e:	9309      	str	r3, [sp, #36]	; 0x24
 8002810:	2320      	movs	r3, #32
 8002812:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002816:	2330      	movs	r3, #48	; 0x30
 8002818:	f04f 0b01 	mov.w	fp, #1
 800281c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002820:	9503      	str	r5, [sp, #12]
 8002822:	46b8      	mov	r8, r7
 8002824:	4645      	mov	r5, r8
 8002826:	f815 3b01 	ldrb.w	r3, [r5], #1
 800282a:	b10b      	cbz	r3, 8002830 <_vfiprintf_r+0x50>
 800282c:	2b25      	cmp	r3, #37	; 0x25
 800282e:	d154      	bne.n	80028da <_vfiprintf_r+0xfa>
 8002830:	ebb8 0a07 	subs.w	sl, r8, r7
 8002834:	d00b      	beq.n	800284e <_vfiprintf_r+0x6e>
 8002836:	4653      	mov	r3, sl
 8002838:	463a      	mov	r2, r7
 800283a:	4621      	mov	r1, r4
 800283c:	4630      	mov	r0, r6
 800283e:	f7ff ffbc 	bl	80027ba <__sfputs_r>
 8002842:	3001      	adds	r0, #1
 8002844:	f000 80c2 	beq.w	80029cc <_vfiprintf_r+0x1ec>
 8002848:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800284a:	4453      	add	r3, sl
 800284c:	9309      	str	r3, [sp, #36]	; 0x24
 800284e:	f898 3000 	ldrb.w	r3, [r8]
 8002852:	2b00      	cmp	r3, #0
 8002854:	f000 80ba 	beq.w	80029cc <_vfiprintf_r+0x1ec>
 8002858:	2300      	movs	r3, #0
 800285a:	f04f 32ff 	mov.w	r2, #4294967295
 800285e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002862:	9304      	str	r3, [sp, #16]
 8002864:	9307      	str	r3, [sp, #28]
 8002866:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800286a:	931a      	str	r3, [sp, #104]	; 0x68
 800286c:	46a8      	mov	r8, r5
 800286e:	2205      	movs	r2, #5
 8002870:	f818 1b01 	ldrb.w	r1, [r8], #1
 8002874:	485e      	ldr	r0, [pc, #376]	; (80029f0 <_vfiprintf_r+0x210>)
 8002876:	f000 fcad 	bl	80031d4 <memchr>
 800287a:	9b04      	ldr	r3, [sp, #16]
 800287c:	bb78      	cbnz	r0, 80028de <_vfiprintf_r+0xfe>
 800287e:	06d9      	lsls	r1, r3, #27
 8002880:	bf44      	itt	mi
 8002882:	2220      	movmi	r2, #32
 8002884:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002888:	071a      	lsls	r2, r3, #28
 800288a:	bf44      	itt	mi
 800288c:	222b      	movmi	r2, #43	; 0x2b
 800288e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002892:	782a      	ldrb	r2, [r5, #0]
 8002894:	2a2a      	cmp	r2, #42	; 0x2a
 8002896:	d02a      	beq.n	80028ee <_vfiprintf_r+0x10e>
 8002898:	46a8      	mov	r8, r5
 800289a:	2000      	movs	r0, #0
 800289c:	250a      	movs	r5, #10
 800289e:	9a07      	ldr	r2, [sp, #28]
 80028a0:	4641      	mov	r1, r8
 80028a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80028a6:	3b30      	subs	r3, #48	; 0x30
 80028a8:	2b09      	cmp	r3, #9
 80028aa:	d969      	bls.n	8002980 <_vfiprintf_r+0x1a0>
 80028ac:	b360      	cbz	r0, 8002908 <_vfiprintf_r+0x128>
 80028ae:	e024      	b.n	80028fa <_vfiprintf_r+0x11a>
 80028b0:	4b50      	ldr	r3, [pc, #320]	; (80029f4 <_vfiprintf_r+0x214>)
 80028b2:	429c      	cmp	r4, r3
 80028b4:	d101      	bne.n	80028ba <_vfiprintf_r+0xda>
 80028b6:	68b4      	ldr	r4, [r6, #8]
 80028b8:	e7a2      	b.n	8002800 <_vfiprintf_r+0x20>
 80028ba:	4b4f      	ldr	r3, [pc, #316]	; (80029f8 <_vfiprintf_r+0x218>)
 80028bc:	429c      	cmp	r4, r3
 80028be:	bf08      	it	eq
 80028c0:	68f4      	ldreq	r4, [r6, #12]
 80028c2:	e79d      	b.n	8002800 <_vfiprintf_r+0x20>
 80028c4:	4621      	mov	r1, r4
 80028c6:	4630      	mov	r0, r6
 80028c8:	f000 fae0 	bl	8002e8c <__swsetup_r>
 80028cc:	2800      	cmp	r0, #0
 80028ce:	d09d      	beq.n	800280c <_vfiprintf_r+0x2c>
 80028d0:	f04f 30ff 	mov.w	r0, #4294967295
 80028d4:	b01d      	add	sp, #116	; 0x74
 80028d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80028da:	46a8      	mov	r8, r5
 80028dc:	e7a2      	b.n	8002824 <_vfiprintf_r+0x44>
 80028de:	4a44      	ldr	r2, [pc, #272]	; (80029f0 <_vfiprintf_r+0x210>)
 80028e0:	4645      	mov	r5, r8
 80028e2:	1a80      	subs	r0, r0, r2
 80028e4:	fa0b f000 	lsl.w	r0, fp, r0
 80028e8:	4318      	orrs	r0, r3
 80028ea:	9004      	str	r0, [sp, #16]
 80028ec:	e7be      	b.n	800286c <_vfiprintf_r+0x8c>
 80028ee:	9a03      	ldr	r2, [sp, #12]
 80028f0:	1d11      	adds	r1, r2, #4
 80028f2:	6812      	ldr	r2, [r2, #0]
 80028f4:	9103      	str	r1, [sp, #12]
 80028f6:	2a00      	cmp	r2, #0
 80028f8:	db01      	blt.n	80028fe <_vfiprintf_r+0x11e>
 80028fa:	9207      	str	r2, [sp, #28]
 80028fc:	e004      	b.n	8002908 <_vfiprintf_r+0x128>
 80028fe:	4252      	negs	r2, r2
 8002900:	f043 0302 	orr.w	r3, r3, #2
 8002904:	9207      	str	r2, [sp, #28]
 8002906:	9304      	str	r3, [sp, #16]
 8002908:	f898 3000 	ldrb.w	r3, [r8]
 800290c:	2b2e      	cmp	r3, #46	; 0x2e
 800290e:	d10e      	bne.n	800292e <_vfiprintf_r+0x14e>
 8002910:	f898 3001 	ldrb.w	r3, [r8, #1]
 8002914:	2b2a      	cmp	r3, #42	; 0x2a
 8002916:	d138      	bne.n	800298a <_vfiprintf_r+0x1aa>
 8002918:	9b03      	ldr	r3, [sp, #12]
 800291a:	f108 0802 	add.w	r8, r8, #2
 800291e:	1d1a      	adds	r2, r3, #4
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	9203      	str	r2, [sp, #12]
 8002924:	2b00      	cmp	r3, #0
 8002926:	bfb8      	it	lt
 8002928:	f04f 33ff 	movlt.w	r3, #4294967295
 800292c:	9305      	str	r3, [sp, #20]
 800292e:	4d33      	ldr	r5, [pc, #204]	; (80029fc <_vfiprintf_r+0x21c>)
 8002930:	2203      	movs	r2, #3
 8002932:	f898 1000 	ldrb.w	r1, [r8]
 8002936:	4628      	mov	r0, r5
 8002938:	f000 fc4c 	bl	80031d4 <memchr>
 800293c:	b140      	cbz	r0, 8002950 <_vfiprintf_r+0x170>
 800293e:	2340      	movs	r3, #64	; 0x40
 8002940:	1b40      	subs	r0, r0, r5
 8002942:	fa03 f000 	lsl.w	r0, r3, r0
 8002946:	9b04      	ldr	r3, [sp, #16]
 8002948:	f108 0801 	add.w	r8, r8, #1
 800294c:	4303      	orrs	r3, r0
 800294e:	9304      	str	r3, [sp, #16]
 8002950:	f898 1000 	ldrb.w	r1, [r8]
 8002954:	2206      	movs	r2, #6
 8002956:	482a      	ldr	r0, [pc, #168]	; (8002a00 <_vfiprintf_r+0x220>)
 8002958:	f108 0701 	add.w	r7, r8, #1
 800295c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002960:	f000 fc38 	bl	80031d4 <memchr>
 8002964:	2800      	cmp	r0, #0
 8002966:	d037      	beq.n	80029d8 <_vfiprintf_r+0x1f8>
 8002968:	4b26      	ldr	r3, [pc, #152]	; (8002a04 <_vfiprintf_r+0x224>)
 800296a:	bb1b      	cbnz	r3, 80029b4 <_vfiprintf_r+0x1d4>
 800296c:	9b03      	ldr	r3, [sp, #12]
 800296e:	3307      	adds	r3, #7
 8002970:	f023 0307 	bic.w	r3, r3, #7
 8002974:	3308      	adds	r3, #8
 8002976:	9303      	str	r3, [sp, #12]
 8002978:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800297a:	444b      	add	r3, r9
 800297c:	9309      	str	r3, [sp, #36]	; 0x24
 800297e:	e750      	b.n	8002822 <_vfiprintf_r+0x42>
 8002980:	fb05 3202 	mla	r2, r5, r2, r3
 8002984:	2001      	movs	r0, #1
 8002986:	4688      	mov	r8, r1
 8002988:	e78a      	b.n	80028a0 <_vfiprintf_r+0xc0>
 800298a:	2300      	movs	r3, #0
 800298c:	250a      	movs	r5, #10
 800298e:	4619      	mov	r1, r3
 8002990:	f108 0801 	add.w	r8, r8, #1
 8002994:	9305      	str	r3, [sp, #20]
 8002996:	4640      	mov	r0, r8
 8002998:	f810 2b01 	ldrb.w	r2, [r0], #1
 800299c:	3a30      	subs	r2, #48	; 0x30
 800299e:	2a09      	cmp	r2, #9
 80029a0:	d903      	bls.n	80029aa <_vfiprintf_r+0x1ca>
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d0c3      	beq.n	800292e <_vfiprintf_r+0x14e>
 80029a6:	9105      	str	r1, [sp, #20]
 80029a8:	e7c1      	b.n	800292e <_vfiprintf_r+0x14e>
 80029aa:	fb05 2101 	mla	r1, r5, r1, r2
 80029ae:	2301      	movs	r3, #1
 80029b0:	4680      	mov	r8, r0
 80029b2:	e7f0      	b.n	8002996 <_vfiprintf_r+0x1b6>
 80029b4:	ab03      	add	r3, sp, #12
 80029b6:	9300      	str	r3, [sp, #0]
 80029b8:	4622      	mov	r2, r4
 80029ba:	4b13      	ldr	r3, [pc, #76]	; (8002a08 <_vfiprintf_r+0x228>)
 80029bc:	a904      	add	r1, sp, #16
 80029be:	4630      	mov	r0, r6
 80029c0:	f3af 8000 	nop.w
 80029c4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80029c8:	4681      	mov	r9, r0
 80029ca:	d1d5      	bne.n	8002978 <_vfiprintf_r+0x198>
 80029cc:	89a3      	ldrh	r3, [r4, #12]
 80029ce:	065b      	lsls	r3, r3, #25
 80029d0:	f53f af7e 	bmi.w	80028d0 <_vfiprintf_r+0xf0>
 80029d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80029d6:	e77d      	b.n	80028d4 <_vfiprintf_r+0xf4>
 80029d8:	ab03      	add	r3, sp, #12
 80029da:	9300      	str	r3, [sp, #0]
 80029dc:	4622      	mov	r2, r4
 80029de:	4b0a      	ldr	r3, [pc, #40]	; (8002a08 <_vfiprintf_r+0x228>)
 80029e0:	a904      	add	r1, sp, #16
 80029e2:	4630      	mov	r0, r6
 80029e4:	f000 f888 	bl	8002af8 <_printf_i>
 80029e8:	e7ec      	b.n	80029c4 <_vfiprintf_r+0x1e4>
 80029ea:	bf00      	nop
 80029ec:	08003364 	.word	0x08003364
 80029f0:	080033a4 	.word	0x080033a4
 80029f4:	08003384 	.word	0x08003384
 80029f8:	08003344 	.word	0x08003344
 80029fc:	080033aa 	.word	0x080033aa
 8002a00:	080033ae 	.word	0x080033ae
 8002a04:	00000000 	.word	0x00000000
 8002a08:	080027bb 	.word	0x080027bb

08002a0c <_printf_common>:
 8002a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a10:	4691      	mov	r9, r2
 8002a12:	461f      	mov	r7, r3
 8002a14:	688a      	ldr	r2, [r1, #8]
 8002a16:	690b      	ldr	r3, [r1, #16]
 8002a18:	4606      	mov	r6, r0
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	bfb8      	it	lt
 8002a1e:	4613      	movlt	r3, r2
 8002a20:	f8c9 3000 	str.w	r3, [r9]
 8002a24:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002a28:	460c      	mov	r4, r1
 8002a2a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002a2e:	b112      	cbz	r2, 8002a36 <_printf_common+0x2a>
 8002a30:	3301      	adds	r3, #1
 8002a32:	f8c9 3000 	str.w	r3, [r9]
 8002a36:	6823      	ldr	r3, [r4, #0]
 8002a38:	0699      	lsls	r1, r3, #26
 8002a3a:	bf42      	ittt	mi
 8002a3c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002a40:	3302      	addmi	r3, #2
 8002a42:	f8c9 3000 	strmi.w	r3, [r9]
 8002a46:	6825      	ldr	r5, [r4, #0]
 8002a48:	f015 0506 	ands.w	r5, r5, #6
 8002a4c:	d107      	bne.n	8002a5e <_printf_common+0x52>
 8002a4e:	f104 0a19 	add.w	sl, r4, #25
 8002a52:	68e3      	ldr	r3, [r4, #12]
 8002a54:	f8d9 2000 	ldr.w	r2, [r9]
 8002a58:	1a9b      	subs	r3, r3, r2
 8002a5a:	42ab      	cmp	r3, r5
 8002a5c:	dc29      	bgt.n	8002ab2 <_printf_common+0xa6>
 8002a5e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002a62:	6822      	ldr	r2, [r4, #0]
 8002a64:	3300      	adds	r3, #0
 8002a66:	bf18      	it	ne
 8002a68:	2301      	movne	r3, #1
 8002a6a:	0692      	lsls	r2, r2, #26
 8002a6c:	d42e      	bmi.n	8002acc <_printf_common+0xc0>
 8002a6e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002a72:	4639      	mov	r1, r7
 8002a74:	4630      	mov	r0, r6
 8002a76:	47c0      	blx	r8
 8002a78:	3001      	adds	r0, #1
 8002a7a:	d021      	beq.n	8002ac0 <_printf_common+0xb4>
 8002a7c:	6823      	ldr	r3, [r4, #0]
 8002a7e:	68e5      	ldr	r5, [r4, #12]
 8002a80:	f003 0306 	and.w	r3, r3, #6
 8002a84:	2b04      	cmp	r3, #4
 8002a86:	bf18      	it	ne
 8002a88:	2500      	movne	r5, #0
 8002a8a:	f8d9 2000 	ldr.w	r2, [r9]
 8002a8e:	f04f 0900 	mov.w	r9, #0
 8002a92:	bf08      	it	eq
 8002a94:	1aad      	subeq	r5, r5, r2
 8002a96:	68a3      	ldr	r3, [r4, #8]
 8002a98:	6922      	ldr	r2, [r4, #16]
 8002a9a:	bf08      	it	eq
 8002a9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	bfc4      	itt	gt
 8002aa4:	1a9b      	subgt	r3, r3, r2
 8002aa6:	18ed      	addgt	r5, r5, r3
 8002aa8:	341a      	adds	r4, #26
 8002aaa:	454d      	cmp	r5, r9
 8002aac:	d11a      	bne.n	8002ae4 <_printf_common+0xd8>
 8002aae:	2000      	movs	r0, #0
 8002ab0:	e008      	b.n	8002ac4 <_printf_common+0xb8>
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	4652      	mov	r2, sl
 8002ab6:	4639      	mov	r1, r7
 8002ab8:	4630      	mov	r0, r6
 8002aba:	47c0      	blx	r8
 8002abc:	3001      	adds	r0, #1
 8002abe:	d103      	bne.n	8002ac8 <_printf_common+0xbc>
 8002ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ac4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ac8:	3501      	adds	r5, #1
 8002aca:	e7c2      	b.n	8002a52 <_printf_common+0x46>
 8002acc:	2030      	movs	r0, #48	; 0x30
 8002ace:	18e1      	adds	r1, r4, r3
 8002ad0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002ad4:	1c5a      	adds	r2, r3, #1
 8002ad6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002ada:	4422      	add	r2, r4
 8002adc:	3302      	adds	r3, #2
 8002ade:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002ae2:	e7c4      	b.n	8002a6e <_printf_common+0x62>
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	4622      	mov	r2, r4
 8002ae8:	4639      	mov	r1, r7
 8002aea:	4630      	mov	r0, r6
 8002aec:	47c0      	blx	r8
 8002aee:	3001      	adds	r0, #1
 8002af0:	d0e6      	beq.n	8002ac0 <_printf_common+0xb4>
 8002af2:	f109 0901 	add.w	r9, r9, #1
 8002af6:	e7d8      	b.n	8002aaa <_printf_common+0x9e>

08002af8 <_printf_i>:
 8002af8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002afc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002b00:	460c      	mov	r4, r1
 8002b02:	7e09      	ldrb	r1, [r1, #24]
 8002b04:	b085      	sub	sp, #20
 8002b06:	296e      	cmp	r1, #110	; 0x6e
 8002b08:	4617      	mov	r7, r2
 8002b0a:	4606      	mov	r6, r0
 8002b0c:	4698      	mov	r8, r3
 8002b0e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002b10:	f000 80b3 	beq.w	8002c7a <_printf_i+0x182>
 8002b14:	d822      	bhi.n	8002b5c <_printf_i+0x64>
 8002b16:	2963      	cmp	r1, #99	; 0x63
 8002b18:	d036      	beq.n	8002b88 <_printf_i+0x90>
 8002b1a:	d80a      	bhi.n	8002b32 <_printf_i+0x3a>
 8002b1c:	2900      	cmp	r1, #0
 8002b1e:	f000 80b9 	beq.w	8002c94 <_printf_i+0x19c>
 8002b22:	2958      	cmp	r1, #88	; 0x58
 8002b24:	f000 8083 	beq.w	8002c2e <_printf_i+0x136>
 8002b28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002b2c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002b30:	e032      	b.n	8002b98 <_printf_i+0xa0>
 8002b32:	2964      	cmp	r1, #100	; 0x64
 8002b34:	d001      	beq.n	8002b3a <_printf_i+0x42>
 8002b36:	2969      	cmp	r1, #105	; 0x69
 8002b38:	d1f6      	bne.n	8002b28 <_printf_i+0x30>
 8002b3a:	6820      	ldr	r0, [r4, #0]
 8002b3c:	6813      	ldr	r3, [r2, #0]
 8002b3e:	0605      	lsls	r5, r0, #24
 8002b40:	f103 0104 	add.w	r1, r3, #4
 8002b44:	d52a      	bpl.n	8002b9c <_printf_i+0xa4>
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	6011      	str	r1, [r2, #0]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	da03      	bge.n	8002b56 <_printf_i+0x5e>
 8002b4e:	222d      	movs	r2, #45	; 0x2d
 8002b50:	425b      	negs	r3, r3
 8002b52:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002b56:	486f      	ldr	r0, [pc, #444]	; (8002d14 <_printf_i+0x21c>)
 8002b58:	220a      	movs	r2, #10
 8002b5a:	e039      	b.n	8002bd0 <_printf_i+0xd8>
 8002b5c:	2973      	cmp	r1, #115	; 0x73
 8002b5e:	f000 809d 	beq.w	8002c9c <_printf_i+0x1a4>
 8002b62:	d808      	bhi.n	8002b76 <_printf_i+0x7e>
 8002b64:	296f      	cmp	r1, #111	; 0x6f
 8002b66:	d020      	beq.n	8002baa <_printf_i+0xb2>
 8002b68:	2970      	cmp	r1, #112	; 0x70
 8002b6a:	d1dd      	bne.n	8002b28 <_printf_i+0x30>
 8002b6c:	6823      	ldr	r3, [r4, #0]
 8002b6e:	f043 0320 	orr.w	r3, r3, #32
 8002b72:	6023      	str	r3, [r4, #0]
 8002b74:	e003      	b.n	8002b7e <_printf_i+0x86>
 8002b76:	2975      	cmp	r1, #117	; 0x75
 8002b78:	d017      	beq.n	8002baa <_printf_i+0xb2>
 8002b7a:	2978      	cmp	r1, #120	; 0x78
 8002b7c:	d1d4      	bne.n	8002b28 <_printf_i+0x30>
 8002b7e:	2378      	movs	r3, #120	; 0x78
 8002b80:	4865      	ldr	r0, [pc, #404]	; (8002d18 <_printf_i+0x220>)
 8002b82:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002b86:	e055      	b.n	8002c34 <_printf_i+0x13c>
 8002b88:	6813      	ldr	r3, [r2, #0]
 8002b8a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002b8e:	1d19      	adds	r1, r3, #4
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	6011      	str	r1, [r2, #0]
 8002b94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e08c      	b.n	8002cb6 <_printf_i+0x1be>
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002ba2:	6011      	str	r1, [r2, #0]
 8002ba4:	bf18      	it	ne
 8002ba6:	b21b      	sxthne	r3, r3
 8002ba8:	e7cf      	b.n	8002b4a <_printf_i+0x52>
 8002baa:	6813      	ldr	r3, [r2, #0]
 8002bac:	6825      	ldr	r5, [r4, #0]
 8002bae:	1d18      	adds	r0, r3, #4
 8002bb0:	6010      	str	r0, [r2, #0]
 8002bb2:	0628      	lsls	r0, r5, #24
 8002bb4:	d501      	bpl.n	8002bba <_printf_i+0xc2>
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	e002      	b.n	8002bc0 <_printf_i+0xc8>
 8002bba:	0668      	lsls	r0, r5, #25
 8002bbc:	d5fb      	bpl.n	8002bb6 <_printf_i+0xbe>
 8002bbe:	881b      	ldrh	r3, [r3, #0]
 8002bc0:	296f      	cmp	r1, #111	; 0x6f
 8002bc2:	bf14      	ite	ne
 8002bc4:	220a      	movne	r2, #10
 8002bc6:	2208      	moveq	r2, #8
 8002bc8:	4852      	ldr	r0, [pc, #328]	; (8002d14 <_printf_i+0x21c>)
 8002bca:	2100      	movs	r1, #0
 8002bcc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002bd0:	6865      	ldr	r5, [r4, #4]
 8002bd2:	2d00      	cmp	r5, #0
 8002bd4:	60a5      	str	r5, [r4, #8]
 8002bd6:	f2c0 8095 	blt.w	8002d04 <_printf_i+0x20c>
 8002bda:	6821      	ldr	r1, [r4, #0]
 8002bdc:	f021 0104 	bic.w	r1, r1, #4
 8002be0:	6021      	str	r1, [r4, #0]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d13d      	bne.n	8002c62 <_printf_i+0x16a>
 8002be6:	2d00      	cmp	r5, #0
 8002be8:	f040 808e 	bne.w	8002d08 <_printf_i+0x210>
 8002bec:	4665      	mov	r5, ip
 8002bee:	2a08      	cmp	r2, #8
 8002bf0:	d10b      	bne.n	8002c0a <_printf_i+0x112>
 8002bf2:	6823      	ldr	r3, [r4, #0]
 8002bf4:	07db      	lsls	r3, r3, #31
 8002bf6:	d508      	bpl.n	8002c0a <_printf_i+0x112>
 8002bf8:	6923      	ldr	r3, [r4, #16]
 8002bfa:	6862      	ldr	r2, [r4, #4]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	bfde      	ittt	le
 8002c00:	2330      	movle	r3, #48	; 0x30
 8002c02:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002c06:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002c0a:	ebac 0305 	sub.w	r3, ip, r5
 8002c0e:	6123      	str	r3, [r4, #16]
 8002c10:	f8cd 8000 	str.w	r8, [sp]
 8002c14:	463b      	mov	r3, r7
 8002c16:	aa03      	add	r2, sp, #12
 8002c18:	4621      	mov	r1, r4
 8002c1a:	4630      	mov	r0, r6
 8002c1c:	f7ff fef6 	bl	8002a0c <_printf_common>
 8002c20:	3001      	adds	r0, #1
 8002c22:	d14d      	bne.n	8002cc0 <_printf_i+0x1c8>
 8002c24:	f04f 30ff 	mov.w	r0, #4294967295
 8002c28:	b005      	add	sp, #20
 8002c2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002c2e:	4839      	ldr	r0, [pc, #228]	; (8002d14 <_printf_i+0x21c>)
 8002c30:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002c34:	6813      	ldr	r3, [r2, #0]
 8002c36:	6821      	ldr	r1, [r4, #0]
 8002c38:	1d1d      	adds	r5, r3, #4
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	6015      	str	r5, [r2, #0]
 8002c3e:	060a      	lsls	r2, r1, #24
 8002c40:	d50b      	bpl.n	8002c5a <_printf_i+0x162>
 8002c42:	07ca      	lsls	r2, r1, #31
 8002c44:	bf44      	itt	mi
 8002c46:	f041 0120 	orrmi.w	r1, r1, #32
 8002c4a:	6021      	strmi	r1, [r4, #0]
 8002c4c:	b91b      	cbnz	r3, 8002c56 <_printf_i+0x15e>
 8002c4e:	6822      	ldr	r2, [r4, #0]
 8002c50:	f022 0220 	bic.w	r2, r2, #32
 8002c54:	6022      	str	r2, [r4, #0]
 8002c56:	2210      	movs	r2, #16
 8002c58:	e7b7      	b.n	8002bca <_printf_i+0xd2>
 8002c5a:	064d      	lsls	r5, r1, #25
 8002c5c:	bf48      	it	mi
 8002c5e:	b29b      	uxthmi	r3, r3
 8002c60:	e7ef      	b.n	8002c42 <_printf_i+0x14a>
 8002c62:	4665      	mov	r5, ip
 8002c64:	fbb3 f1f2 	udiv	r1, r3, r2
 8002c68:	fb02 3311 	mls	r3, r2, r1, r3
 8002c6c:	5cc3      	ldrb	r3, [r0, r3]
 8002c6e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002c72:	460b      	mov	r3, r1
 8002c74:	2900      	cmp	r1, #0
 8002c76:	d1f5      	bne.n	8002c64 <_printf_i+0x16c>
 8002c78:	e7b9      	b.n	8002bee <_printf_i+0xf6>
 8002c7a:	6813      	ldr	r3, [r2, #0]
 8002c7c:	6825      	ldr	r5, [r4, #0]
 8002c7e:	1d18      	adds	r0, r3, #4
 8002c80:	6961      	ldr	r1, [r4, #20]
 8002c82:	6010      	str	r0, [r2, #0]
 8002c84:	0628      	lsls	r0, r5, #24
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	d501      	bpl.n	8002c8e <_printf_i+0x196>
 8002c8a:	6019      	str	r1, [r3, #0]
 8002c8c:	e002      	b.n	8002c94 <_printf_i+0x19c>
 8002c8e:	066a      	lsls	r2, r5, #25
 8002c90:	d5fb      	bpl.n	8002c8a <_printf_i+0x192>
 8002c92:	8019      	strh	r1, [r3, #0]
 8002c94:	2300      	movs	r3, #0
 8002c96:	4665      	mov	r5, ip
 8002c98:	6123      	str	r3, [r4, #16]
 8002c9a:	e7b9      	b.n	8002c10 <_printf_i+0x118>
 8002c9c:	6813      	ldr	r3, [r2, #0]
 8002c9e:	1d19      	adds	r1, r3, #4
 8002ca0:	6011      	str	r1, [r2, #0]
 8002ca2:	681d      	ldr	r5, [r3, #0]
 8002ca4:	6862      	ldr	r2, [r4, #4]
 8002ca6:	2100      	movs	r1, #0
 8002ca8:	4628      	mov	r0, r5
 8002caa:	f000 fa93 	bl	80031d4 <memchr>
 8002cae:	b108      	cbz	r0, 8002cb4 <_printf_i+0x1bc>
 8002cb0:	1b40      	subs	r0, r0, r5
 8002cb2:	6060      	str	r0, [r4, #4]
 8002cb4:	6863      	ldr	r3, [r4, #4]
 8002cb6:	6123      	str	r3, [r4, #16]
 8002cb8:	2300      	movs	r3, #0
 8002cba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002cbe:	e7a7      	b.n	8002c10 <_printf_i+0x118>
 8002cc0:	6923      	ldr	r3, [r4, #16]
 8002cc2:	462a      	mov	r2, r5
 8002cc4:	4639      	mov	r1, r7
 8002cc6:	4630      	mov	r0, r6
 8002cc8:	47c0      	blx	r8
 8002cca:	3001      	adds	r0, #1
 8002ccc:	d0aa      	beq.n	8002c24 <_printf_i+0x12c>
 8002cce:	6823      	ldr	r3, [r4, #0]
 8002cd0:	079b      	lsls	r3, r3, #30
 8002cd2:	d413      	bmi.n	8002cfc <_printf_i+0x204>
 8002cd4:	68e0      	ldr	r0, [r4, #12]
 8002cd6:	9b03      	ldr	r3, [sp, #12]
 8002cd8:	4298      	cmp	r0, r3
 8002cda:	bfb8      	it	lt
 8002cdc:	4618      	movlt	r0, r3
 8002cde:	e7a3      	b.n	8002c28 <_printf_i+0x130>
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	464a      	mov	r2, r9
 8002ce4:	4639      	mov	r1, r7
 8002ce6:	4630      	mov	r0, r6
 8002ce8:	47c0      	blx	r8
 8002cea:	3001      	adds	r0, #1
 8002cec:	d09a      	beq.n	8002c24 <_printf_i+0x12c>
 8002cee:	3501      	adds	r5, #1
 8002cf0:	68e3      	ldr	r3, [r4, #12]
 8002cf2:	9a03      	ldr	r2, [sp, #12]
 8002cf4:	1a9b      	subs	r3, r3, r2
 8002cf6:	42ab      	cmp	r3, r5
 8002cf8:	dcf2      	bgt.n	8002ce0 <_printf_i+0x1e8>
 8002cfa:	e7eb      	b.n	8002cd4 <_printf_i+0x1dc>
 8002cfc:	2500      	movs	r5, #0
 8002cfe:	f104 0919 	add.w	r9, r4, #25
 8002d02:	e7f5      	b.n	8002cf0 <_printf_i+0x1f8>
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d1ac      	bne.n	8002c62 <_printf_i+0x16a>
 8002d08:	7803      	ldrb	r3, [r0, #0]
 8002d0a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002d0e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002d12:	e76c      	b.n	8002bee <_printf_i+0xf6>
 8002d14:	080033b5 	.word	0x080033b5
 8002d18:	080033c6 	.word	0x080033c6

08002d1c <_sbrk_r>:
 8002d1c:	b538      	push	{r3, r4, r5, lr}
 8002d1e:	2300      	movs	r3, #0
 8002d20:	4c05      	ldr	r4, [pc, #20]	; (8002d38 <_sbrk_r+0x1c>)
 8002d22:	4605      	mov	r5, r0
 8002d24:	4608      	mov	r0, r1
 8002d26:	6023      	str	r3, [r4, #0]
 8002d28:	f7fd fd24 	bl	8000774 <_sbrk>
 8002d2c:	1c43      	adds	r3, r0, #1
 8002d2e:	d102      	bne.n	8002d36 <_sbrk_r+0x1a>
 8002d30:	6823      	ldr	r3, [r4, #0]
 8002d32:	b103      	cbz	r3, 8002d36 <_sbrk_r+0x1a>
 8002d34:	602b      	str	r3, [r5, #0]
 8002d36:	bd38      	pop	{r3, r4, r5, pc}
 8002d38:	20000194 	.word	0x20000194

08002d3c <__sread>:
 8002d3c:	b510      	push	{r4, lr}
 8002d3e:	460c      	mov	r4, r1
 8002d40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d44:	f000 faa2 	bl	800328c <_read_r>
 8002d48:	2800      	cmp	r0, #0
 8002d4a:	bfab      	itete	ge
 8002d4c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002d4e:	89a3      	ldrhlt	r3, [r4, #12]
 8002d50:	181b      	addge	r3, r3, r0
 8002d52:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002d56:	bfac      	ite	ge
 8002d58:	6563      	strge	r3, [r4, #84]	; 0x54
 8002d5a:	81a3      	strhlt	r3, [r4, #12]
 8002d5c:	bd10      	pop	{r4, pc}

08002d5e <__swrite>:
 8002d5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d62:	461f      	mov	r7, r3
 8002d64:	898b      	ldrh	r3, [r1, #12]
 8002d66:	4605      	mov	r5, r0
 8002d68:	05db      	lsls	r3, r3, #23
 8002d6a:	460c      	mov	r4, r1
 8002d6c:	4616      	mov	r6, r2
 8002d6e:	d505      	bpl.n	8002d7c <__swrite+0x1e>
 8002d70:	2302      	movs	r3, #2
 8002d72:	2200      	movs	r2, #0
 8002d74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d78:	f000 f9b6 	bl	80030e8 <_lseek_r>
 8002d7c:	89a3      	ldrh	r3, [r4, #12]
 8002d7e:	4632      	mov	r2, r6
 8002d80:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d84:	81a3      	strh	r3, [r4, #12]
 8002d86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002d8a:	463b      	mov	r3, r7
 8002d8c:	4628      	mov	r0, r5
 8002d8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002d92:	f000 b869 	b.w	8002e68 <_write_r>

08002d96 <__sseek>:
 8002d96:	b510      	push	{r4, lr}
 8002d98:	460c      	mov	r4, r1
 8002d9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d9e:	f000 f9a3 	bl	80030e8 <_lseek_r>
 8002da2:	1c43      	adds	r3, r0, #1
 8002da4:	89a3      	ldrh	r3, [r4, #12]
 8002da6:	bf15      	itete	ne
 8002da8:	6560      	strne	r0, [r4, #84]	; 0x54
 8002daa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002dae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002db2:	81a3      	strheq	r3, [r4, #12]
 8002db4:	bf18      	it	ne
 8002db6:	81a3      	strhne	r3, [r4, #12]
 8002db8:	bd10      	pop	{r4, pc}

08002dba <__sclose>:
 8002dba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002dbe:	f000 b8d3 	b.w	8002f68 <_close_r>
	...

08002dc4 <__swbuf_r>:
 8002dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dc6:	460e      	mov	r6, r1
 8002dc8:	4614      	mov	r4, r2
 8002dca:	4605      	mov	r5, r0
 8002dcc:	b118      	cbz	r0, 8002dd6 <__swbuf_r+0x12>
 8002dce:	6983      	ldr	r3, [r0, #24]
 8002dd0:	b90b      	cbnz	r3, 8002dd6 <__swbuf_r+0x12>
 8002dd2:	f7ff fbf9 	bl	80025c8 <__sinit>
 8002dd6:	4b21      	ldr	r3, [pc, #132]	; (8002e5c <__swbuf_r+0x98>)
 8002dd8:	429c      	cmp	r4, r3
 8002dda:	d12a      	bne.n	8002e32 <__swbuf_r+0x6e>
 8002ddc:	686c      	ldr	r4, [r5, #4]
 8002dde:	69a3      	ldr	r3, [r4, #24]
 8002de0:	60a3      	str	r3, [r4, #8]
 8002de2:	89a3      	ldrh	r3, [r4, #12]
 8002de4:	071a      	lsls	r2, r3, #28
 8002de6:	d52e      	bpl.n	8002e46 <__swbuf_r+0x82>
 8002de8:	6923      	ldr	r3, [r4, #16]
 8002dea:	b363      	cbz	r3, 8002e46 <__swbuf_r+0x82>
 8002dec:	6923      	ldr	r3, [r4, #16]
 8002dee:	6820      	ldr	r0, [r4, #0]
 8002df0:	b2f6      	uxtb	r6, r6
 8002df2:	1ac0      	subs	r0, r0, r3
 8002df4:	6963      	ldr	r3, [r4, #20]
 8002df6:	4637      	mov	r7, r6
 8002df8:	4283      	cmp	r3, r0
 8002dfa:	dc04      	bgt.n	8002e06 <__swbuf_r+0x42>
 8002dfc:	4621      	mov	r1, r4
 8002dfe:	4628      	mov	r0, r5
 8002e00:	f000 f948 	bl	8003094 <_fflush_r>
 8002e04:	bb28      	cbnz	r0, 8002e52 <__swbuf_r+0x8e>
 8002e06:	68a3      	ldr	r3, [r4, #8]
 8002e08:	3001      	adds	r0, #1
 8002e0a:	3b01      	subs	r3, #1
 8002e0c:	60a3      	str	r3, [r4, #8]
 8002e0e:	6823      	ldr	r3, [r4, #0]
 8002e10:	1c5a      	adds	r2, r3, #1
 8002e12:	6022      	str	r2, [r4, #0]
 8002e14:	701e      	strb	r6, [r3, #0]
 8002e16:	6963      	ldr	r3, [r4, #20]
 8002e18:	4283      	cmp	r3, r0
 8002e1a:	d004      	beq.n	8002e26 <__swbuf_r+0x62>
 8002e1c:	89a3      	ldrh	r3, [r4, #12]
 8002e1e:	07db      	lsls	r3, r3, #31
 8002e20:	d519      	bpl.n	8002e56 <__swbuf_r+0x92>
 8002e22:	2e0a      	cmp	r6, #10
 8002e24:	d117      	bne.n	8002e56 <__swbuf_r+0x92>
 8002e26:	4621      	mov	r1, r4
 8002e28:	4628      	mov	r0, r5
 8002e2a:	f000 f933 	bl	8003094 <_fflush_r>
 8002e2e:	b190      	cbz	r0, 8002e56 <__swbuf_r+0x92>
 8002e30:	e00f      	b.n	8002e52 <__swbuf_r+0x8e>
 8002e32:	4b0b      	ldr	r3, [pc, #44]	; (8002e60 <__swbuf_r+0x9c>)
 8002e34:	429c      	cmp	r4, r3
 8002e36:	d101      	bne.n	8002e3c <__swbuf_r+0x78>
 8002e38:	68ac      	ldr	r4, [r5, #8]
 8002e3a:	e7d0      	b.n	8002dde <__swbuf_r+0x1a>
 8002e3c:	4b09      	ldr	r3, [pc, #36]	; (8002e64 <__swbuf_r+0xa0>)
 8002e3e:	429c      	cmp	r4, r3
 8002e40:	bf08      	it	eq
 8002e42:	68ec      	ldreq	r4, [r5, #12]
 8002e44:	e7cb      	b.n	8002dde <__swbuf_r+0x1a>
 8002e46:	4621      	mov	r1, r4
 8002e48:	4628      	mov	r0, r5
 8002e4a:	f000 f81f 	bl	8002e8c <__swsetup_r>
 8002e4e:	2800      	cmp	r0, #0
 8002e50:	d0cc      	beq.n	8002dec <__swbuf_r+0x28>
 8002e52:	f04f 37ff 	mov.w	r7, #4294967295
 8002e56:	4638      	mov	r0, r7
 8002e58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	08003364 	.word	0x08003364
 8002e60:	08003384 	.word	0x08003384
 8002e64:	08003344 	.word	0x08003344

08002e68 <_write_r>:
 8002e68:	b538      	push	{r3, r4, r5, lr}
 8002e6a:	4605      	mov	r5, r0
 8002e6c:	4608      	mov	r0, r1
 8002e6e:	4611      	mov	r1, r2
 8002e70:	2200      	movs	r2, #0
 8002e72:	4c05      	ldr	r4, [pc, #20]	; (8002e88 <_write_r+0x20>)
 8002e74:	6022      	str	r2, [r4, #0]
 8002e76:	461a      	mov	r2, r3
 8002e78:	f7fd fc2f 	bl	80006da <_write>
 8002e7c:	1c43      	adds	r3, r0, #1
 8002e7e:	d102      	bne.n	8002e86 <_write_r+0x1e>
 8002e80:	6823      	ldr	r3, [r4, #0]
 8002e82:	b103      	cbz	r3, 8002e86 <_write_r+0x1e>
 8002e84:	602b      	str	r3, [r5, #0]
 8002e86:	bd38      	pop	{r3, r4, r5, pc}
 8002e88:	20000194 	.word	0x20000194

08002e8c <__swsetup_r>:
 8002e8c:	4b32      	ldr	r3, [pc, #200]	; (8002f58 <__swsetup_r+0xcc>)
 8002e8e:	b570      	push	{r4, r5, r6, lr}
 8002e90:	681d      	ldr	r5, [r3, #0]
 8002e92:	4606      	mov	r6, r0
 8002e94:	460c      	mov	r4, r1
 8002e96:	b125      	cbz	r5, 8002ea2 <__swsetup_r+0x16>
 8002e98:	69ab      	ldr	r3, [r5, #24]
 8002e9a:	b913      	cbnz	r3, 8002ea2 <__swsetup_r+0x16>
 8002e9c:	4628      	mov	r0, r5
 8002e9e:	f7ff fb93 	bl	80025c8 <__sinit>
 8002ea2:	4b2e      	ldr	r3, [pc, #184]	; (8002f5c <__swsetup_r+0xd0>)
 8002ea4:	429c      	cmp	r4, r3
 8002ea6:	d10f      	bne.n	8002ec8 <__swsetup_r+0x3c>
 8002ea8:	686c      	ldr	r4, [r5, #4]
 8002eaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002eae:	b29a      	uxth	r2, r3
 8002eb0:	0715      	lsls	r5, r2, #28
 8002eb2:	d42c      	bmi.n	8002f0e <__swsetup_r+0x82>
 8002eb4:	06d0      	lsls	r0, r2, #27
 8002eb6:	d411      	bmi.n	8002edc <__swsetup_r+0x50>
 8002eb8:	2209      	movs	r2, #9
 8002eba:	6032      	str	r2, [r6, #0]
 8002ebc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ec0:	81a3      	strh	r3, [r4, #12]
 8002ec2:	f04f 30ff 	mov.w	r0, #4294967295
 8002ec6:	e03e      	b.n	8002f46 <__swsetup_r+0xba>
 8002ec8:	4b25      	ldr	r3, [pc, #148]	; (8002f60 <__swsetup_r+0xd4>)
 8002eca:	429c      	cmp	r4, r3
 8002ecc:	d101      	bne.n	8002ed2 <__swsetup_r+0x46>
 8002ece:	68ac      	ldr	r4, [r5, #8]
 8002ed0:	e7eb      	b.n	8002eaa <__swsetup_r+0x1e>
 8002ed2:	4b24      	ldr	r3, [pc, #144]	; (8002f64 <__swsetup_r+0xd8>)
 8002ed4:	429c      	cmp	r4, r3
 8002ed6:	bf08      	it	eq
 8002ed8:	68ec      	ldreq	r4, [r5, #12]
 8002eda:	e7e6      	b.n	8002eaa <__swsetup_r+0x1e>
 8002edc:	0751      	lsls	r1, r2, #29
 8002ede:	d512      	bpl.n	8002f06 <__swsetup_r+0x7a>
 8002ee0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002ee2:	b141      	cbz	r1, 8002ef6 <__swsetup_r+0x6a>
 8002ee4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002ee8:	4299      	cmp	r1, r3
 8002eea:	d002      	beq.n	8002ef2 <__swsetup_r+0x66>
 8002eec:	4630      	mov	r0, r6
 8002eee:	f000 f981 	bl	80031f4 <_free_r>
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	6363      	str	r3, [r4, #52]	; 0x34
 8002ef6:	89a3      	ldrh	r3, [r4, #12]
 8002ef8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002efc:	81a3      	strh	r3, [r4, #12]
 8002efe:	2300      	movs	r3, #0
 8002f00:	6063      	str	r3, [r4, #4]
 8002f02:	6923      	ldr	r3, [r4, #16]
 8002f04:	6023      	str	r3, [r4, #0]
 8002f06:	89a3      	ldrh	r3, [r4, #12]
 8002f08:	f043 0308 	orr.w	r3, r3, #8
 8002f0c:	81a3      	strh	r3, [r4, #12]
 8002f0e:	6923      	ldr	r3, [r4, #16]
 8002f10:	b94b      	cbnz	r3, 8002f26 <__swsetup_r+0x9a>
 8002f12:	89a3      	ldrh	r3, [r4, #12]
 8002f14:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002f18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f1c:	d003      	beq.n	8002f26 <__swsetup_r+0x9a>
 8002f1e:	4621      	mov	r1, r4
 8002f20:	4630      	mov	r0, r6
 8002f22:	f000 f917 	bl	8003154 <__smakebuf_r>
 8002f26:	89a2      	ldrh	r2, [r4, #12]
 8002f28:	f012 0301 	ands.w	r3, r2, #1
 8002f2c:	d00c      	beq.n	8002f48 <__swsetup_r+0xbc>
 8002f2e:	2300      	movs	r3, #0
 8002f30:	60a3      	str	r3, [r4, #8]
 8002f32:	6963      	ldr	r3, [r4, #20]
 8002f34:	425b      	negs	r3, r3
 8002f36:	61a3      	str	r3, [r4, #24]
 8002f38:	6923      	ldr	r3, [r4, #16]
 8002f3a:	b953      	cbnz	r3, 8002f52 <__swsetup_r+0xc6>
 8002f3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f40:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8002f44:	d1ba      	bne.n	8002ebc <__swsetup_r+0x30>
 8002f46:	bd70      	pop	{r4, r5, r6, pc}
 8002f48:	0792      	lsls	r2, r2, #30
 8002f4a:	bf58      	it	pl
 8002f4c:	6963      	ldrpl	r3, [r4, #20]
 8002f4e:	60a3      	str	r3, [r4, #8]
 8002f50:	e7f2      	b.n	8002f38 <__swsetup_r+0xac>
 8002f52:	2000      	movs	r0, #0
 8002f54:	e7f7      	b.n	8002f46 <__swsetup_r+0xba>
 8002f56:	bf00      	nop
 8002f58:	20000010 	.word	0x20000010
 8002f5c:	08003364 	.word	0x08003364
 8002f60:	08003384 	.word	0x08003384
 8002f64:	08003344 	.word	0x08003344

08002f68 <_close_r>:
 8002f68:	b538      	push	{r3, r4, r5, lr}
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	4c05      	ldr	r4, [pc, #20]	; (8002f84 <_close_r+0x1c>)
 8002f6e:	4605      	mov	r5, r0
 8002f70:	4608      	mov	r0, r1
 8002f72:	6023      	str	r3, [r4, #0]
 8002f74:	f7fd fbcd 	bl	8000712 <_close>
 8002f78:	1c43      	adds	r3, r0, #1
 8002f7a:	d102      	bne.n	8002f82 <_close_r+0x1a>
 8002f7c:	6823      	ldr	r3, [r4, #0]
 8002f7e:	b103      	cbz	r3, 8002f82 <_close_r+0x1a>
 8002f80:	602b      	str	r3, [r5, #0]
 8002f82:	bd38      	pop	{r3, r4, r5, pc}
 8002f84:	20000194 	.word	0x20000194

08002f88 <__sflush_r>:
 8002f88:	898a      	ldrh	r2, [r1, #12]
 8002f8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f8e:	4605      	mov	r5, r0
 8002f90:	0710      	lsls	r0, r2, #28
 8002f92:	460c      	mov	r4, r1
 8002f94:	d458      	bmi.n	8003048 <__sflush_r+0xc0>
 8002f96:	684b      	ldr	r3, [r1, #4]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	dc05      	bgt.n	8002fa8 <__sflush_r+0x20>
 8002f9c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	dc02      	bgt.n	8002fa8 <__sflush_r+0x20>
 8002fa2:	2000      	movs	r0, #0
 8002fa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002fa8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002faa:	2e00      	cmp	r6, #0
 8002fac:	d0f9      	beq.n	8002fa2 <__sflush_r+0x1a>
 8002fae:	2300      	movs	r3, #0
 8002fb0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002fb4:	682f      	ldr	r7, [r5, #0]
 8002fb6:	6a21      	ldr	r1, [r4, #32]
 8002fb8:	602b      	str	r3, [r5, #0]
 8002fba:	d032      	beq.n	8003022 <__sflush_r+0x9a>
 8002fbc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002fbe:	89a3      	ldrh	r3, [r4, #12]
 8002fc0:	075a      	lsls	r2, r3, #29
 8002fc2:	d505      	bpl.n	8002fd0 <__sflush_r+0x48>
 8002fc4:	6863      	ldr	r3, [r4, #4]
 8002fc6:	1ac0      	subs	r0, r0, r3
 8002fc8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002fca:	b10b      	cbz	r3, 8002fd0 <__sflush_r+0x48>
 8002fcc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002fce:	1ac0      	subs	r0, r0, r3
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002fd6:	6a21      	ldr	r1, [r4, #32]
 8002fd8:	4628      	mov	r0, r5
 8002fda:	47b0      	blx	r6
 8002fdc:	1c43      	adds	r3, r0, #1
 8002fde:	89a3      	ldrh	r3, [r4, #12]
 8002fe0:	d106      	bne.n	8002ff0 <__sflush_r+0x68>
 8002fe2:	6829      	ldr	r1, [r5, #0]
 8002fe4:	291d      	cmp	r1, #29
 8002fe6:	d848      	bhi.n	800307a <__sflush_r+0xf2>
 8002fe8:	4a29      	ldr	r2, [pc, #164]	; (8003090 <__sflush_r+0x108>)
 8002fea:	40ca      	lsrs	r2, r1
 8002fec:	07d6      	lsls	r6, r2, #31
 8002fee:	d544      	bpl.n	800307a <__sflush_r+0xf2>
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	6062      	str	r2, [r4, #4]
 8002ff4:	6922      	ldr	r2, [r4, #16]
 8002ff6:	04d9      	lsls	r1, r3, #19
 8002ff8:	6022      	str	r2, [r4, #0]
 8002ffa:	d504      	bpl.n	8003006 <__sflush_r+0x7e>
 8002ffc:	1c42      	adds	r2, r0, #1
 8002ffe:	d101      	bne.n	8003004 <__sflush_r+0x7c>
 8003000:	682b      	ldr	r3, [r5, #0]
 8003002:	b903      	cbnz	r3, 8003006 <__sflush_r+0x7e>
 8003004:	6560      	str	r0, [r4, #84]	; 0x54
 8003006:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003008:	602f      	str	r7, [r5, #0]
 800300a:	2900      	cmp	r1, #0
 800300c:	d0c9      	beq.n	8002fa2 <__sflush_r+0x1a>
 800300e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003012:	4299      	cmp	r1, r3
 8003014:	d002      	beq.n	800301c <__sflush_r+0x94>
 8003016:	4628      	mov	r0, r5
 8003018:	f000 f8ec 	bl	80031f4 <_free_r>
 800301c:	2000      	movs	r0, #0
 800301e:	6360      	str	r0, [r4, #52]	; 0x34
 8003020:	e7c0      	b.n	8002fa4 <__sflush_r+0x1c>
 8003022:	2301      	movs	r3, #1
 8003024:	4628      	mov	r0, r5
 8003026:	47b0      	blx	r6
 8003028:	1c41      	adds	r1, r0, #1
 800302a:	d1c8      	bne.n	8002fbe <__sflush_r+0x36>
 800302c:	682b      	ldr	r3, [r5, #0]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d0c5      	beq.n	8002fbe <__sflush_r+0x36>
 8003032:	2b1d      	cmp	r3, #29
 8003034:	d001      	beq.n	800303a <__sflush_r+0xb2>
 8003036:	2b16      	cmp	r3, #22
 8003038:	d101      	bne.n	800303e <__sflush_r+0xb6>
 800303a:	602f      	str	r7, [r5, #0]
 800303c:	e7b1      	b.n	8002fa2 <__sflush_r+0x1a>
 800303e:	89a3      	ldrh	r3, [r4, #12]
 8003040:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003044:	81a3      	strh	r3, [r4, #12]
 8003046:	e7ad      	b.n	8002fa4 <__sflush_r+0x1c>
 8003048:	690f      	ldr	r7, [r1, #16]
 800304a:	2f00      	cmp	r7, #0
 800304c:	d0a9      	beq.n	8002fa2 <__sflush_r+0x1a>
 800304e:	0793      	lsls	r3, r2, #30
 8003050:	bf18      	it	ne
 8003052:	2300      	movne	r3, #0
 8003054:	680e      	ldr	r6, [r1, #0]
 8003056:	bf08      	it	eq
 8003058:	694b      	ldreq	r3, [r1, #20]
 800305a:	eba6 0807 	sub.w	r8, r6, r7
 800305e:	600f      	str	r7, [r1, #0]
 8003060:	608b      	str	r3, [r1, #8]
 8003062:	f1b8 0f00 	cmp.w	r8, #0
 8003066:	dd9c      	ble.n	8002fa2 <__sflush_r+0x1a>
 8003068:	4643      	mov	r3, r8
 800306a:	463a      	mov	r2, r7
 800306c:	6a21      	ldr	r1, [r4, #32]
 800306e:	4628      	mov	r0, r5
 8003070:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003072:	47b0      	blx	r6
 8003074:	2800      	cmp	r0, #0
 8003076:	dc06      	bgt.n	8003086 <__sflush_r+0xfe>
 8003078:	89a3      	ldrh	r3, [r4, #12]
 800307a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800307e:	81a3      	strh	r3, [r4, #12]
 8003080:	f04f 30ff 	mov.w	r0, #4294967295
 8003084:	e78e      	b.n	8002fa4 <__sflush_r+0x1c>
 8003086:	4407      	add	r7, r0
 8003088:	eba8 0800 	sub.w	r8, r8, r0
 800308c:	e7e9      	b.n	8003062 <__sflush_r+0xda>
 800308e:	bf00      	nop
 8003090:	20400001 	.word	0x20400001

08003094 <_fflush_r>:
 8003094:	b538      	push	{r3, r4, r5, lr}
 8003096:	690b      	ldr	r3, [r1, #16]
 8003098:	4605      	mov	r5, r0
 800309a:	460c      	mov	r4, r1
 800309c:	b1db      	cbz	r3, 80030d6 <_fflush_r+0x42>
 800309e:	b118      	cbz	r0, 80030a8 <_fflush_r+0x14>
 80030a0:	6983      	ldr	r3, [r0, #24]
 80030a2:	b90b      	cbnz	r3, 80030a8 <_fflush_r+0x14>
 80030a4:	f7ff fa90 	bl	80025c8 <__sinit>
 80030a8:	4b0c      	ldr	r3, [pc, #48]	; (80030dc <_fflush_r+0x48>)
 80030aa:	429c      	cmp	r4, r3
 80030ac:	d109      	bne.n	80030c2 <_fflush_r+0x2e>
 80030ae:	686c      	ldr	r4, [r5, #4]
 80030b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80030b4:	b17b      	cbz	r3, 80030d6 <_fflush_r+0x42>
 80030b6:	4621      	mov	r1, r4
 80030b8:	4628      	mov	r0, r5
 80030ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80030be:	f7ff bf63 	b.w	8002f88 <__sflush_r>
 80030c2:	4b07      	ldr	r3, [pc, #28]	; (80030e0 <_fflush_r+0x4c>)
 80030c4:	429c      	cmp	r4, r3
 80030c6:	d101      	bne.n	80030cc <_fflush_r+0x38>
 80030c8:	68ac      	ldr	r4, [r5, #8]
 80030ca:	e7f1      	b.n	80030b0 <_fflush_r+0x1c>
 80030cc:	4b05      	ldr	r3, [pc, #20]	; (80030e4 <_fflush_r+0x50>)
 80030ce:	429c      	cmp	r4, r3
 80030d0:	bf08      	it	eq
 80030d2:	68ec      	ldreq	r4, [r5, #12]
 80030d4:	e7ec      	b.n	80030b0 <_fflush_r+0x1c>
 80030d6:	2000      	movs	r0, #0
 80030d8:	bd38      	pop	{r3, r4, r5, pc}
 80030da:	bf00      	nop
 80030dc:	08003364 	.word	0x08003364
 80030e0:	08003384 	.word	0x08003384
 80030e4:	08003344 	.word	0x08003344

080030e8 <_lseek_r>:
 80030e8:	b538      	push	{r3, r4, r5, lr}
 80030ea:	4605      	mov	r5, r0
 80030ec:	4608      	mov	r0, r1
 80030ee:	4611      	mov	r1, r2
 80030f0:	2200      	movs	r2, #0
 80030f2:	4c05      	ldr	r4, [pc, #20]	; (8003108 <_lseek_r+0x20>)
 80030f4:	6022      	str	r2, [r4, #0]
 80030f6:	461a      	mov	r2, r3
 80030f8:	f7fd fb2f 	bl	800075a <_lseek>
 80030fc:	1c43      	adds	r3, r0, #1
 80030fe:	d102      	bne.n	8003106 <_lseek_r+0x1e>
 8003100:	6823      	ldr	r3, [r4, #0]
 8003102:	b103      	cbz	r3, 8003106 <_lseek_r+0x1e>
 8003104:	602b      	str	r3, [r5, #0]
 8003106:	bd38      	pop	{r3, r4, r5, pc}
 8003108:	20000194 	.word	0x20000194

0800310c <__swhatbuf_r>:
 800310c:	b570      	push	{r4, r5, r6, lr}
 800310e:	460e      	mov	r6, r1
 8003110:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003114:	b096      	sub	sp, #88	; 0x58
 8003116:	2900      	cmp	r1, #0
 8003118:	4614      	mov	r4, r2
 800311a:	461d      	mov	r5, r3
 800311c:	da07      	bge.n	800312e <__swhatbuf_r+0x22>
 800311e:	2300      	movs	r3, #0
 8003120:	602b      	str	r3, [r5, #0]
 8003122:	89b3      	ldrh	r3, [r6, #12]
 8003124:	061a      	lsls	r2, r3, #24
 8003126:	d410      	bmi.n	800314a <__swhatbuf_r+0x3e>
 8003128:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800312c:	e00e      	b.n	800314c <__swhatbuf_r+0x40>
 800312e:	466a      	mov	r2, sp
 8003130:	f000 f8be 	bl	80032b0 <_fstat_r>
 8003134:	2800      	cmp	r0, #0
 8003136:	dbf2      	blt.n	800311e <__swhatbuf_r+0x12>
 8003138:	9a01      	ldr	r2, [sp, #4]
 800313a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800313e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003142:	425a      	negs	r2, r3
 8003144:	415a      	adcs	r2, r3
 8003146:	602a      	str	r2, [r5, #0]
 8003148:	e7ee      	b.n	8003128 <__swhatbuf_r+0x1c>
 800314a:	2340      	movs	r3, #64	; 0x40
 800314c:	2000      	movs	r0, #0
 800314e:	6023      	str	r3, [r4, #0]
 8003150:	b016      	add	sp, #88	; 0x58
 8003152:	bd70      	pop	{r4, r5, r6, pc}

08003154 <__smakebuf_r>:
 8003154:	898b      	ldrh	r3, [r1, #12]
 8003156:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003158:	079d      	lsls	r5, r3, #30
 800315a:	4606      	mov	r6, r0
 800315c:	460c      	mov	r4, r1
 800315e:	d507      	bpl.n	8003170 <__smakebuf_r+0x1c>
 8003160:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003164:	6023      	str	r3, [r4, #0]
 8003166:	6123      	str	r3, [r4, #16]
 8003168:	2301      	movs	r3, #1
 800316a:	6163      	str	r3, [r4, #20]
 800316c:	b002      	add	sp, #8
 800316e:	bd70      	pop	{r4, r5, r6, pc}
 8003170:	ab01      	add	r3, sp, #4
 8003172:	466a      	mov	r2, sp
 8003174:	f7ff ffca 	bl	800310c <__swhatbuf_r>
 8003178:	9900      	ldr	r1, [sp, #0]
 800317a:	4605      	mov	r5, r0
 800317c:	4630      	mov	r0, r6
 800317e:	f7ff faad 	bl	80026dc <_malloc_r>
 8003182:	b948      	cbnz	r0, 8003198 <__smakebuf_r+0x44>
 8003184:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003188:	059a      	lsls	r2, r3, #22
 800318a:	d4ef      	bmi.n	800316c <__smakebuf_r+0x18>
 800318c:	f023 0303 	bic.w	r3, r3, #3
 8003190:	f043 0302 	orr.w	r3, r3, #2
 8003194:	81a3      	strh	r3, [r4, #12]
 8003196:	e7e3      	b.n	8003160 <__smakebuf_r+0xc>
 8003198:	4b0d      	ldr	r3, [pc, #52]	; (80031d0 <__smakebuf_r+0x7c>)
 800319a:	62b3      	str	r3, [r6, #40]	; 0x28
 800319c:	89a3      	ldrh	r3, [r4, #12]
 800319e:	6020      	str	r0, [r4, #0]
 80031a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031a4:	81a3      	strh	r3, [r4, #12]
 80031a6:	9b00      	ldr	r3, [sp, #0]
 80031a8:	6120      	str	r0, [r4, #16]
 80031aa:	6163      	str	r3, [r4, #20]
 80031ac:	9b01      	ldr	r3, [sp, #4]
 80031ae:	b15b      	cbz	r3, 80031c8 <__smakebuf_r+0x74>
 80031b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80031b4:	4630      	mov	r0, r6
 80031b6:	f000 f88d 	bl	80032d4 <_isatty_r>
 80031ba:	b128      	cbz	r0, 80031c8 <__smakebuf_r+0x74>
 80031bc:	89a3      	ldrh	r3, [r4, #12]
 80031be:	f023 0303 	bic.w	r3, r3, #3
 80031c2:	f043 0301 	orr.w	r3, r3, #1
 80031c6:	81a3      	strh	r3, [r4, #12]
 80031c8:	89a3      	ldrh	r3, [r4, #12]
 80031ca:	431d      	orrs	r5, r3
 80031cc:	81a5      	strh	r5, [r4, #12]
 80031ce:	e7cd      	b.n	800316c <__smakebuf_r+0x18>
 80031d0:	08002591 	.word	0x08002591

080031d4 <memchr>:
 80031d4:	b510      	push	{r4, lr}
 80031d6:	b2c9      	uxtb	r1, r1
 80031d8:	4402      	add	r2, r0
 80031da:	4290      	cmp	r0, r2
 80031dc:	4603      	mov	r3, r0
 80031de:	d101      	bne.n	80031e4 <memchr+0x10>
 80031e0:	2300      	movs	r3, #0
 80031e2:	e003      	b.n	80031ec <memchr+0x18>
 80031e4:	781c      	ldrb	r4, [r3, #0]
 80031e6:	3001      	adds	r0, #1
 80031e8:	428c      	cmp	r4, r1
 80031ea:	d1f6      	bne.n	80031da <memchr+0x6>
 80031ec:	4618      	mov	r0, r3
 80031ee:	bd10      	pop	{r4, pc}

080031f0 <__malloc_lock>:
 80031f0:	4770      	bx	lr

080031f2 <__malloc_unlock>:
 80031f2:	4770      	bx	lr

080031f4 <_free_r>:
 80031f4:	b538      	push	{r3, r4, r5, lr}
 80031f6:	4605      	mov	r5, r0
 80031f8:	2900      	cmp	r1, #0
 80031fa:	d043      	beq.n	8003284 <_free_r+0x90>
 80031fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003200:	1f0c      	subs	r4, r1, #4
 8003202:	2b00      	cmp	r3, #0
 8003204:	bfb8      	it	lt
 8003206:	18e4      	addlt	r4, r4, r3
 8003208:	f7ff fff2 	bl	80031f0 <__malloc_lock>
 800320c:	4a1e      	ldr	r2, [pc, #120]	; (8003288 <_free_r+0x94>)
 800320e:	6813      	ldr	r3, [r2, #0]
 8003210:	4610      	mov	r0, r2
 8003212:	b933      	cbnz	r3, 8003222 <_free_r+0x2e>
 8003214:	6063      	str	r3, [r4, #4]
 8003216:	6014      	str	r4, [r2, #0]
 8003218:	4628      	mov	r0, r5
 800321a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800321e:	f7ff bfe8 	b.w	80031f2 <__malloc_unlock>
 8003222:	42a3      	cmp	r3, r4
 8003224:	d90b      	bls.n	800323e <_free_r+0x4a>
 8003226:	6821      	ldr	r1, [r4, #0]
 8003228:	1862      	adds	r2, r4, r1
 800322a:	4293      	cmp	r3, r2
 800322c:	bf01      	itttt	eq
 800322e:	681a      	ldreq	r2, [r3, #0]
 8003230:	685b      	ldreq	r3, [r3, #4]
 8003232:	1852      	addeq	r2, r2, r1
 8003234:	6022      	streq	r2, [r4, #0]
 8003236:	6063      	str	r3, [r4, #4]
 8003238:	6004      	str	r4, [r0, #0]
 800323a:	e7ed      	b.n	8003218 <_free_r+0x24>
 800323c:	4613      	mov	r3, r2
 800323e:	685a      	ldr	r2, [r3, #4]
 8003240:	b10a      	cbz	r2, 8003246 <_free_r+0x52>
 8003242:	42a2      	cmp	r2, r4
 8003244:	d9fa      	bls.n	800323c <_free_r+0x48>
 8003246:	6819      	ldr	r1, [r3, #0]
 8003248:	1858      	adds	r0, r3, r1
 800324a:	42a0      	cmp	r0, r4
 800324c:	d10b      	bne.n	8003266 <_free_r+0x72>
 800324e:	6820      	ldr	r0, [r4, #0]
 8003250:	4401      	add	r1, r0
 8003252:	1858      	adds	r0, r3, r1
 8003254:	4282      	cmp	r2, r0
 8003256:	6019      	str	r1, [r3, #0]
 8003258:	d1de      	bne.n	8003218 <_free_r+0x24>
 800325a:	6810      	ldr	r0, [r2, #0]
 800325c:	6852      	ldr	r2, [r2, #4]
 800325e:	4401      	add	r1, r0
 8003260:	6019      	str	r1, [r3, #0]
 8003262:	605a      	str	r2, [r3, #4]
 8003264:	e7d8      	b.n	8003218 <_free_r+0x24>
 8003266:	d902      	bls.n	800326e <_free_r+0x7a>
 8003268:	230c      	movs	r3, #12
 800326a:	602b      	str	r3, [r5, #0]
 800326c:	e7d4      	b.n	8003218 <_free_r+0x24>
 800326e:	6820      	ldr	r0, [r4, #0]
 8003270:	1821      	adds	r1, r4, r0
 8003272:	428a      	cmp	r2, r1
 8003274:	bf01      	itttt	eq
 8003276:	6811      	ldreq	r1, [r2, #0]
 8003278:	6852      	ldreq	r2, [r2, #4]
 800327a:	1809      	addeq	r1, r1, r0
 800327c:	6021      	streq	r1, [r4, #0]
 800327e:	6062      	str	r2, [r4, #4]
 8003280:	605c      	str	r4, [r3, #4]
 8003282:	e7c9      	b.n	8003218 <_free_r+0x24>
 8003284:	bd38      	pop	{r3, r4, r5, pc}
 8003286:	bf00      	nop
 8003288:	20000094 	.word	0x20000094

0800328c <_read_r>:
 800328c:	b538      	push	{r3, r4, r5, lr}
 800328e:	4605      	mov	r5, r0
 8003290:	4608      	mov	r0, r1
 8003292:	4611      	mov	r1, r2
 8003294:	2200      	movs	r2, #0
 8003296:	4c05      	ldr	r4, [pc, #20]	; (80032ac <_read_r+0x20>)
 8003298:	6022      	str	r2, [r4, #0]
 800329a:	461a      	mov	r2, r3
 800329c:	f7fd fa00 	bl	80006a0 <_read>
 80032a0:	1c43      	adds	r3, r0, #1
 80032a2:	d102      	bne.n	80032aa <_read_r+0x1e>
 80032a4:	6823      	ldr	r3, [r4, #0]
 80032a6:	b103      	cbz	r3, 80032aa <_read_r+0x1e>
 80032a8:	602b      	str	r3, [r5, #0]
 80032aa:	bd38      	pop	{r3, r4, r5, pc}
 80032ac:	20000194 	.word	0x20000194

080032b0 <_fstat_r>:
 80032b0:	b538      	push	{r3, r4, r5, lr}
 80032b2:	2300      	movs	r3, #0
 80032b4:	4c06      	ldr	r4, [pc, #24]	; (80032d0 <_fstat_r+0x20>)
 80032b6:	4605      	mov	r5, r0
 80032b8:	4608      	mov	r0, r1
 80032ba:	4611      	mov	r1, r2
 80032bc:	6023      	str	r3, [r4, #0]
 80032be:	f7fd fa33 	bl	8000728 <_fstat>
 80032c2:	1c43      	adds	r3, r0, #1
 80032c4:	d102      	bne.n	80032cc <_fstat_r+0x1c>
 80032c6:	6823      	ldr	r3, [r4, #0]
 80032c8:	b103      	cbz	r3, 80032cc <_fstat_r+0x1c>
 80032ca:	602b      	str	r3, [r5, #0]
 80032cc:	bd38      	pop	{r3, r4, r5, pc}
 80032ce:	bf00      	nop
 80032d0:	20000194 	.word	0x20000194

080032d4 <_isatty_r>:
 80032d4:	b538      	push	{r3, r4, r5, lr}
 80032d6:	2300      	movs	r3, #0
 80032d8:	4c05      	ldr	r4, [pc, #20]	; (80032f0 <_isatty_r+0x1c>)
 80032da:	4605      	mov	r5, r0
 80032dc:	4608      	mov	r0, r1
 80032de:	6023      	str	r3, [r4, #0]
 80032e0:	f7fd fa31 	bl	8000746 <_isatty>
 80032e4:	1c43      	adds	r3, r0, #1
 80032e6:	d102      	bne.n	80032ee <_isatty_r+0x1a>
 80032e8:	6823      	ldr	r3, [r4, #0]
 80032ea:	b103      	cbz	r3, 80032ee <_isatty_r+0x1a>
 80032ec:	602b      	str	r3, [r5, #0]
 80032ee:	bd38      	pop	{r3, r4, r5, pc}
 80032f0:	20000194 	.word	0x20000194

080032f4 <_init>:
 80032f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032f6:	bf00      	nop
 80032f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032fa:	bc08      	pop	{r3}
 80032fc:	469e      	mov	lr, r3
 80032fe:	4770      	bx	lr

08003300 <_fini>:
 8003300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003302:	bf00      	nop
 8003304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003306:	bc08      	pop	{r3}
 8003308:	469e      	mov	lr, r3
 800330a:	4770      	bx	lr
