
DHT11_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a48  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08001c2c  08001c2c  00011c2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001c5c  08001c5c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08001c5c  08001c5c  00011c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001c64  08001c64  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001c64  08001c64  00011c64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001c68  08001c68  00011c68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001c6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  2000000c  08001c78  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  08001c78  00020074  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007150  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000012d7  00000000  00000000  00027185  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000900  00000000  00000000  00028460  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000858  00000000  00000000  00028d60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b0bf  00000000  00000000  000295b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005fa2  00000000  00000000  00044677  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009b642  00000000  00000000  0004a619  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e5c5b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002554  00000000  00000000  000e5cd8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	08001c14 	.word	0x08001c14

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	08001c14 	.word	0x08001c14

08000224 <__aeabi_uldivmod>:
 8000224:	b953      	cbnz	r3, 800023c <__aeabi_uldivmod+0x18>
 8000226:	b94a      	cbnz	r2, 800023c <__aeabi_uldivmod+0x18>
 8000228:	2900      	cmp	r1, #0
 800022a:	bf08      	it	eq
 800022c:	2800      	cmpeq	r0, #0
 800022e:	bf1c      	itt	ne
 8000230:	f04f 31ff 	movne.w	r1, #4294967295
 8000234:	f04f 30ff 	movne.w	r0, #4294967295
 8000238:	f000 b974 	b.w	8000524 <__aeabi_idiv0>
 800023c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000240:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000244:	f000 f806 	bl	8000254 <__udivmoddi4>
 8000248:	f8dd e004 	ldr.w	lr, [sp, #4]
 800024c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000250:	b004      	add	sp, #16
 8000252:	4770      	bx	lr

08000254 <__udivmoddi4>:
 8000254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000258:	468c      	mov	ip, r1
 800025a:	4604      	mov	r4, r0
 800025c:	9e08      	ldr	r6, [sp, #32]
 800025e:	2b00      	cmp	r3, #0
 8000260:	d14b      	bne.n	80002fa <__udivmoddi4+0xa6>
 8000262:	428a      	cmp	r2, r1
 8000264:	4615      	mov	r5, r2
 8000266:	d967      	bls.n	8000338 <__udivmoddi4+0xe4>
 8000268:	fab2 f282 	clz	r2, r2
 800026c:	b14a      	cbz	r2, 8000282 <__udivmoddi4+0x2e>
 800026e:	f1c2 0720 	rsb	r7, r2, #32
 8000272:	fa01 f302 	lsl.w	r3, r1, r2
 8000276:	fa20 f707 	lsr.w	r7, r0, r7
 800027a:	4095      	lsls	r5, r2
 800027c:	ea47 0c03 	orr.w	ip, r7, r3
 8000280:	4094      	lsls	r4, r2
 8000282:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000286:	fbbc f7fe 	udiv	r7, ip, lr
 800028a:	fa1f f885 	uxth.w	r8, r5
 800028e:	fb0e c317 	mls	r3, lr, r7, ip
 8000292:	fb07 f908 	mul.w	r9, r7, r8
 8000296:	0c21      	lsrs	r1, r4, #16
 8000298:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800029c:	4599      	cmp	r9, r3
 800029e:	d909      	bls.n	80002b4 <__udivmoddi4+0x60>
 80002a0:	18eb      	adds	r3, r5, r3
 80002a2:	f107 31ff 	add.w	r1, r7, #4294967295
 80002a6:	f080 811c 	bcs.w	80004e2 <__udivmoddi4+0x28e>
 80002aa:	4599      	cmp	r9, r3
 80002ac:	f240 8119 	bls.w	80004e2 <__udivmoddi4+0x28e>
 80002b0:	3f02      	subs	r7, #2
 80002b2:	442b      	add	r3, r5
 80002b4:	eba3 0309 	sub.w	r3, r3, r9
 80002b8:	fbb3 f0fe 	udiv	r0, r3, lr
 80002bc:	fb0e 3310 	mls	r3, lr, r0, r3
 80002c0:	fb00 f108 	mul.w	r1, r0, r8
 80002c4:	b2a4      	uxth	r4, r4
 80002c6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ca:	42a1      	cmp	r1, r4
 80002cc:	d909      	bls.n	80002e2 <__udivmoddi4+0x8e>
 80002ce:	192c      	adds	r4, r5, r4
 80002d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002d4:	f080 8107 	bcs.w	80004e6 <__udivmoddi4+0x292>
 80002d8:	42a1      	cmp	r1, r4
 80002da:	f240 8104 	bls.w	80004e6 <__udivmoddi4+0x292>
 80002de:	3802      	subs	r0, #2
 80002e0:	442c      	add	r4, r5
 80002e2:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002e6:	2700      	movs	r7, #0
 80002e8:	1a64      	subs	r4, r4, r1
 80002ea:	b11e      	cbz	r6, 80002f4 <__udivmoddi4+0xa0>
 80002ec:	2300      	movs	r3, #0
 80002ee:	40d4      	lsrs	r4, r2
 80002f0:	e9c6 4300 	strd	r4, r3, [r6]
 80002f4:	4639      	mov	r1, r7
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0xbe>
 80002fe:	2e00      	cmp	r6, #0
 8000300:	f000 80ec 	beq.w	80004dc <__udivmoddi4+0x288>
 8000304:	2700      	movs	r7, #0
 8000306:	e9c6 0100 	strd	r0, r1, [r6]
 800030a:	4638      	mov	r0, r7
 800030c:	4639      	mov	r1, r7
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	fab3 f783 	clz	r7, r3
 8000316:	2f00      	cmp	r7, #0
 8000318:	d148      	bne.n	80003ac <__udivmoddi4+0x158>
 800031a:	428b      	cmp	r3, r1
 800031c:	d302      	bcc.n	8000324 <__udivmoddi4+0xd0>
 800031e:	4282      	cmp	r2, r0
 8000320:	f200 80fb 	bhi.w	800051a <__udivmoddi4+0x2c6>
 8000324:	1a84      	subs	r4, r0, r2
 8000326:	eb61 0303 	sbc.w	r3, r1, r3
 800032a:	2001      	movs	r0, #1
 800032c:	469c      	mov	ip, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d0e0      	beq.n	80002f4 <__udivmoddi4+0xa0>
 8000332:	e9c6 4c00 	strd	r4, ip, [r6]
 8000336:	e7dd      	b.n	80002f4 <__udivmoddi4+0xa0>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xe8>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f282 	clz	r2, r2
 8000340:	2a00      	cmp	r2, #0
 8000342:	f040 808f 	bne.w	8000464 <__udivmoddi4+0x210>
 8000346:	2701      	movs	r7, #1
 8000348:	1b49      	subs	r1, r1, r5
 800034a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800034e:	fa1f f985 	uxth.w	r9, r5
 8000352:	fbb1 fef8 	udiv	lr, r1, r8
 8000356:	fb08 111e 	mls	r1, r8, lr, r1
 800035a:	fb09 f00e 	mul.w	r0, r9, lr
 800035e:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8000362:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8000366:	4298      	cmp	r0, r3
 8000368:	d907      	bls.n	800037a <__udivmoddi4+0x126>
 800036a:	18eb      	adds	r3, r5, r3
 800036c:	f10e 31ff 	add.w	r1, lr, #4294967295
 8000370:	d202      	bcs.n	8000378 <__udivmoddi4+0x124>
 8000372:	4298      	cmp	r0, r3
 8000374:	f200 80cd 	bhi.w	8000512 <__udivmoddi4+0x2be>
 8000378:	468e      	mov	lr, r1
 800037a:	1a1b      	subs	r3, r3, r0
 800037c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000380:	fb08 3310 	mls	r3, r8, r0, r3
 8000384:	fb09 f900 	mul.w	r9, r9, r0
 8000388:	b2a4      	uxth	r4, r4
 800038a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800038e:	45a1      	cmp	r9, r4
 8000390:	d907      	bls.n	80003a2 <__udivmoddi4+0x14e>
 8000392:	192c      	adds	r4, r5, r4
 8000394:	f100 33ff 	add.w	r3, r0, #4294967295
 8000398:	d202      	bcs.n	80003a0 <__udivmoddi4+0x14c>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f200 80b6 	bhi.w	800050c <__udivmoddi4+0x2b8>
 80003a0:	4618      	mov	r0, r3
 80003a2:	eba4 0409 	sub.w	r4, r4, r9
 80003a6:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80003aa:	e79e      	b.n	80002ea <__udivmoddi4+0x96>
 80003ac:	f1c7 0520 	rsb	r5, r7, #32
 80003b0:	40bb      	lsls	r3, r7
 80003b2:	fa22 fc05 	lsr.w	ip, r2, r5
 80003b6:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ba:	fa21 f405 	lsr.w	r4, r1, r5
 80003be:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003c2:	fbb4 f9fe 	udiv	r9, r4, lr
 80003c6:	fa1f f88c 	uxth.w	r8, ip
 80003ca:	fb0e 4419 	mls	r4, lr, r9, r4
 80003ce:	fa20 f305 	lsr.w	r3, r0, r5
 80003d2:	40b9      	lsls	r1, r7
 80003d4:	fb09 fa08 	mul.w	sl, r9, r8
 80003d8:	4319      	orrs	r1, r3
 80003da:	0c0b      	lsrs	r3, r1, #16
 80003dc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e0:	45a2      	cmp	sl, r4
 80003e2:	fa02 f207 	lsl.w	r2, r2, r7
 80003e6:	fa00 f307 	lsl.w	r3, r0, r7
 80003ea:	d90b      	bls.n	8000404 <__udivmoddi4+0x1b0>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003f4:	f080 8088 	bcs.w	8000508 <__udivmoddi4+0x2b4>
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	f240 8085 	bls.w	8000508 <__udivmoddi4+0x2b4>
 80003fe:	f1a9 0902 	sub.w	r9, r9, #2
 8000402:	4464      	add	r4, ip
 8000404:	eba4 040a 	sub.w	r4, r4, sl
 8000408:	fbb4 f0fe 	udiv	r0, r4, lr
 800040c:	fb0e 4410 	mls	r4, lr, r0, r4
 8000410:	fb00 fa08 	mul.w	sl, r0, r8
 8000414:	b289      	uxth	r1, r1
 8000416:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 800041a:	45a2      	cmp	sl, r4
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x1dc>
 800041e:	eb1c 0404 	adds.w	r4, ip, r4
 8000422:	f100 31ff 	add.w	r1, r0, #4294967295
 8000426:	d26b      	bcs.n	8000500 <__udivmoddi4+0x2ac>
 8000428:	45a2      	cmp	sl, r4
 800042a:	d969      	bls.n	8000500 <__udivmoddi4+0x2ac>
 800042c:	3802      	subs	r0, #2
 800042e:	4464      	add	r4, ip
 8000430:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000434:	fba0 8902 	umull	r8, r9, r0, r2
 8000438:	eba4 040a 	sub.w	r4, r4, sl
 800043c:	454c      	cmp	r4, r9
 800043e:	4641      	mov	r1, r8
 8000440:	46ce      	mov	lr, r9
 8000442:	d354      	bcc.n	80004ee <__udivmoddi4+0x29a>
 8000444:	d051      	beq.n	80004ea <__udivmoddi4+0x296>
 8000446:	2e00      	cmp	r6, #0
 8000448:	d069      	beq.n	800051e <__udivmoddi4+0x2ca>
 800044a:	1a5a      	subs	r2, r3, r1
 800044c:	eb64 040e 	sbc.w	r4, r4, lr
 8000450:	fa04 f505 	lsl.w	r5, r4, r5
 8000454:	fa22 f307 	lsr.w	r3, r2, r7
 8000458:	40fc      	lsrs	r4, r7
 800045a:	431d      	orrs	r5, r3
 800045c:	e9c6 5400 	strd	r5, r4, [r6]
 8000460:	2700      	movs	r7, #0
 8000462:	e747      	b.n	80002f4 <__udivmoddi4+0xa0>
 8000464:	4095      	lsls	r5, r2
 8000466:	f1c2 0320 	rsb	r3, r2, #32
 800046a:	fa21 f003 	lsr.w	r0, r1, r3
 800046e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000472:	fbb0 f7f8 	udiv	r7, r0, r8
 8000476:	fa1f f985 	uxth.w	r9, r5
 800047a:	fb08 0017 	mls	r0, r8, r7, r0
 800047e:	fa24 f303 	lsr.w	r3, r4, r3
 8000482:	4091      	lsls	r1, r2
 8000484:	fb07 fc09 	mul.w	ip, r7, r9
 8000488:	430b      	orrs	r3, r1
 800048a:	0c19      	lsrs	r1, r3, #16
 800048c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000490:	458c      	cmp	ip, r1
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d907      	bls.n	80004a8 <__udivmoddi4+0x254>
 8000498:	1869      	adds	r1, r5, r1
 800049a:	f107 30ff 	add.w	r0, r7, #4294967295
 800049e:	d231      	bcs.n	8000504 <__udivmoddi4+0x2b0>
 80004a0:	458c      	cmp	ip, r1
 80004a2:	d92f      	bls.n	8000504 <__udivmoddi4+0x2b0>
 80004a4:	3f02      	subs	r7, #2
 80004a6:	4429      	add	r1, r5
 80004a8:	eba1 010c 	sub.w	r1, r1, ip
 80004ac:	fbb1 f0f8 	udiv	r0, r1, r8
 80004b0:	fb08 1c10 	mls	ip, r8, r0, r1
 80004b4:	fb00 fe09 	mul.w	lr, r0, r9
 80004b8:	b299      	uxth	r1, r3
 80004ba:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004be:	458e      	cmp	lr, r1
 80004c0:	d907      	bls.n	80004d2 <__udivmoddi4+0x27e>
 80004c2:	1869      	adds	r1, r5, r1
 80004c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c8:	d218      	bcs.n	80004fc <__udivmoddi4+0x2a8>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d916      	bls.n	80004fc <__udivmoddi4+0x2a8>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4429      	add	r1, r5
 80004d2:	eba1 010e 	sub.w	r1, r1, lr
 80004d6:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004da:	e73a      	b.n	8000352 <__udivmoddi4+0xfe>
 80004dc:	4637      	mov	r7, r6
 80004de:	4630      	mov	r0, r6
 80004e0:	e708      	b.n	80002f4 <__udivmoddi4+0xa0>
 80004e2:	460f      	mov	r7, r1
 80004e4:	e6e6      	b.n	80002b4 <__udivmoddi4+0x60>
 80004e6:	4618      	mov	r0, r3
 80004e8:	e6fb      	b.n	80002e2 <__udivmoddi4+0x8e>
 80004ea:	4543      	cmp	r3, r8
 80004ec:	d2ab      	bcs.n	8000446 <__udivmoddi4+0x1f2>
 80004ee:	ebb8 0102 	subs.w	r1, r8, r2
 80004f2:	eb69 020c 	sbc.w	r2, r9, ip
 80004f6:	3801      	subs	r0, #1
 80004f8:	4696      	mov	lr, r2
 80004fa:	e7a4      	b.n	8000446 <__udivmoddi4+0x1f2>
 80004fc:	4618      	mov	r0, r3
 80004fe:	e7e8      	b.n	80004d2 <__udivmoddi4+0x27e>
 8000500:	4608      	mov	r0, r1
 8000502:	e795      	b.n	8000430 <__udivmoddi4+0x1dc>
 8000504:	4607      	mov	r7, r0
 8000506:	e7cf      	b.n	80004a8 <__udivmoddi4+0x254>
 8000508:	4681      	mov	r9, r0
 800050a:	e77b      	b.n	8000404 <__udivmoddi4+0x1b0>
 800050c:	3802      	subs	r0, #2
 800050e:	442c      	add	r4, r5
 8000510:	e747      	b.n	80003a2 <__udivmoddi4+0x14e>
 8000512:	f1ae 0e02 	sub.w	lr, lr, #2
 8000516:	442b      	add	r3, r5
 8000518:	e72f      	b.n	800037a <__udivmoddi4+0x126>
 800051a:	4638      	mov	r0, r7
 800051c:	e707      	b.n	800032e <__udivmoddi4+0xda>
 800051e:	4637      	mov	r7, r6
 8000520:	e6e8      	b.n	80002f4 <__udivmoddi4+0xa0>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <delay>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint16_t delay (uint16_t time)
	{
 8000528:	b480      	push	{r7}
 800052a:	b083      	sub	sp, #12
 800052c:	af00      	add	r7, sp, #0
 800052e:	4603      	mov	r3, r0
 8000530:	80fb      	strh	r3, [r7, #6]
	 __HAL_TIM_SET_COUNTER(&htim6,0);
 8000532:	4b08      	ldr	r3, [pc, #32]	; (8000554 <delay+0x2c>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	2200      	movs	r2, #0
 8000538:	625a      	str	r2, [r3, #36]	; 0x24
		  			while(__HAL_TIM_GET_COUNTER(&htim6)<time);
 800053a:	bf00      	nop
 800053c:	4b05      	ldr	r3, [pc, #20]	; (8000554 <delay+0x2c>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000542:	88fb      	ldrh	r3, [r7, #6]
 8000544:	429a      	cmp	r2, r3
 8000546:	d3f9      	bcc.n	800053c <delay+0x14>
		}
 8000548:	bf00      	nop
 800054a:	4618      	mov	r0, r3
 800054c:	370c      	adds	r7, #12
 800054e:	46bd      	mov	sp, r7
 8000550:	bc80      	pop	{r7}
 8000552:	4770      	bx	lr
 8000554:	20000030 	.word	0x20000030

08000558 <DHT11_Start>:
void DHT11_Start()
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 800055c:	2200      	movs	r2, #0
 800055e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000562:	4809      	ldr	r0, [pc, #36]	; (8000588 <DHT11_Start+0x30>)
 8000564:	f000 fcf9 	bl	8000f5a <HAL_GPIO_WritePin>
delay(18000);
 8000568:	f244 6050 	movw	r0, #18000	; 0x4650
 800056c:	f7ff ffdc 	bl	8000528 <delay>
HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 8000570:	2201      	movs	r2, #1
 8000572:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000576:	4804      	ldr	r0, [pc, #16]	; (8000588 <DHT11_Start+0x30>)
 8000578:	f000 fcef 	bl	8000f5a <HAL_GPIO_WritePin>
delay(20);
 800057c:	2014      	movs	r0, #20
 800057e:	f7ff ffd3 	bl	8000528 <delay>
}
 8000582:	bf00      	nop
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	40010c00 	.word	0x40010c00

0800058c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000592:	f000 fa09 	bl	80009a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000596:	f000 f849 	bl	800062c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059a:	f000 f8bf 	bl	800071c <MX_GPIO_Init>
  MX_TIM6_Init();
 800059e:	f000 f887 	bl	80006b0 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim6);
 80005a2:	481f      	ldr	r0, [pc, #124]	; (8000620 <main+0x94>)
 80005a4:	f001 fa37 	bl	8001a16 <HAL_TIM_Base_Start>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, SET);
 80005a8:	2201      	movs	r2, #1
 80005aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005ae:	481d      	ldr	r0, [pc, #116]	; (8000624 <main+0x98>)
 80005b0:	f000 fcd3 	bl	8000f5a <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  	  	DHT11_Start();
 80005b4:	f7ff ffd0 	bl	8000558 <DHT11_Start>
	  	  	//uint8_t a = DHT11_check();
	  	  uint8_t response = 0;
 80005b8:	2300      	movs	r3, #0
 80005ba:	71fb      	strb	r3, [r7, #7]
	  	  	 delay(40);
 80005bc:	2028      	movs	r0, #40	; 0x28
 80005be:	f7ff ffb3 	bl	8000528 <delay>
	  	  	 if(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_12))
 80005c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005c6:	4817      	ldr	r0, [pc, #92]	; (8000624 <main+0x98>)
 80005c8:	f000 fcb0 	bl	8000f2c <HAL_GPIO_ReadPin>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d10f      	bne.n	80005f2 <main+0x66>
	  	  	 {
	  	  		 delay(80);
 80005d2:	2050      	movs	r0, #80	; 0x50
 80005d4:	f7ff ffa8 	bl	8000528 <delay>
	  	  		 if(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_12)) response=1;
 80005d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005dc:	4811      	ldr	r0, [pc, #68]	; (8000624 <main+0x98>)
 80005de:	f000 fca5 	bl	8000f2c <HAL_GPIO_ReadPin>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d102      	bne.n	80005ee <main+0x62>
 80005e8:	2301      	movs	r3, #1
 80005ea:	71fb      	strb	r3, [r7, #7]
 80005ec:	e001      	b.n	80005f2 <main+0x66>
	  	  		 else response=-1;
 80005ee:	23ff      	movs	r3, #255	; 0xff
 80005f0:	71fb      	strb	r3, [r7, #7]
	  	  	 }
	  	  	 while (HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_12));
 80005f2:	bf00      	nop
 80005f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005f8:	480a      	ldr	r0, [pc, #40]	; (8000624 <main+0x98>)
 80005fa:	f000 fc97 	bl	8000f2c <HAL_GPIO_ReadPin>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d1f7      	bne.n	80005f4 <main+0x68>
	  	  	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_10);
 8000604:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000608:	4807      	ldr	r0, [pc, #28]	; (8000628 <main+0x9c>)
 800060a:	f000 fcbe 	bl	8000f8a <HAL_GPIO_TogglePin>

	  	  						  	  HAL_Delay(100);
 800060e:	2064      	movs	r0, #100	; 0x64
 8000610:	f000 fa2c 	bl	8000a6c <HAL_Delay>
	  	  	 return response;
 8000614:	79fb      	ldrb	r3, [r7, #7]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8000616:	4618      	mov	r0, r3
 8000618:	3708      	adds	r7, #8
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	20000030 	.word	0x20000030
 8000624:	40010c00 	.word	0x40010c00
 8000628:	40010800 	.word	0x40010800

0800062c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b094      	sub	sp, #80	; 0x50
 8000630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000632:	f107 0318 	add.w	r3, r7, #24
 8000636:	2238      	movs	r2, #56	; 0x38
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f001 fae2 	bl	8001c04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000640:	1d3b      	adds	r3, r7, #4
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
 8000646:	605a      	str	r2, [r3, #4]
 8000648:	609a      	str	r2, [r3, #8]
 800064a:	60da      	str	r2, [r3, #12]
 800064c:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800064e:	2302      	movs	r3, #2
 8000650:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000652:	2301      	movs	r3, #1
 8000654:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000656:	2310      	movs	r3, #16
 8000658:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800065a:	2300      	movs	r3, #0
 800065c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 800065e:	2300      	movs	r3, #0
 8000660:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000662:	f107 0318 	add.w	r3, r7, #24
 8000666:	4618      	mov	r0, r3
 8000668:	f000 fca8 	bl	8000fbc <HAL_RCC_OscConfig>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <SystemClock_Config+0x4a>
  {
    Error_Handler();
 8000672:	f000 f8b5 	bl	80007e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000676:	230f      	movs	r3, #15
 8000678:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800067a:	2300      	movs	r3, #0
 800067c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800067e:	2300      	movs	r3, #0
 8000680:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000682:	2300      	movs	r3, #0
 8000684:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000686:	2300      	movs	r3, #0
 8000688:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800068a:	1d3b      	adds	r3, r7, #4
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f000 ffaa 	bl	80015e8 <HAL_RCC_ClockConfig>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800069a:	f000 f8a1 	bl	80007e0 <Error_Handler>
  }
  /** Configure the Systick interrupt time 
  */
  __HAL_RCC_PLLI2S_ENABLE();
 800069e:	4b03      	ldr	r3, [pc, #12]	; (80006ac <SystemClock_Config+0x80>)
 80006a0:	2201      	movs	r2, #1
 80006a2:	601a      	str	r2, [r3, #0]
}
 80006a4:	bf00      	nop
 80006a6:	3750      	adds	r7, #80	; 0x50
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	42420070 	.word	0x42420070

080006b0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006b6:	463b      	mov	r3, r7
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80006be:	4b15      	ldr	r3, [pc, #84]	; (8000714 <MX_TIM6_Init+0x64>)
 80006c0:	4a15      	ldr	r2, [pc, #84]	; (8000718 <MX_TIM6_Init+0x68>)
 80006c2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7;
 80006c4:	4b13      	ldr	r3, [pc, #76]	; (8000714 <MX_TIM6_Init+0x64>)
 80006c6:	2207      	movs	r2, #7
 80006c8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ca:	4b12      	ldr	r3, [pc, #72]	; (8000714 <MX_TIM6_Init+0x64>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0xffff-1;
 80006d0:	4b10      	ldr	r3, [pc, #64]	; (8000714 <MX_TIM6_Init+0x64>)
 80006d2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80006d6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006d8:	4b0e      	ldr	r3, [pc, #56]	; (8000714 <MX_TIM6_Init+0x64>)
 80006da:	2200      	movs	r2, #0
 80006dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80006de:	480d      	ldr	r0, [pc, #52]	; (8000714 <MX_TIM6_Init+0x64>)
 80006e0:	f001 f96e 	bl	80019c0 <HAL_TIM_Base_Init>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80006ea:	f000 f879 	bl	80007e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006ee:	2300      	movs	r3, #0
 80006f0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006f2:	2300      	movs	r3, #0
 80006f4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80006f6:	463b      	mov	r3, r7
 80006f8:	4619      	mov	r1, r3
 80006fa:	4806      	ldr	r0, [pc, #24]	; (8000714 <MX_TIM6_Init+0x64>)
 80006fc:	f001 fa1a 	bl	8001b34 <HAL_TIMEx_MasterConfigSynchronization>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000706:	f000 f86b 	bl	80007e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800070a:	bf00      	nop
 800070c:	3708      	adds	r7, #8
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	20000030 	.word	0x20000030
 8000718:	40001000 	.word	0x40001000

0800071c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b088      	sub	sp, #32
 8000720:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000722:	f107 0310 	add.w	r3, r7, #16
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000730:	4b28      	ldr	r3, [pc, #160]	; (80007d4 <MX_GPIO_Init+0xb8>)
 8000732:	699b      	ldr	r3, [r3, #24]
 8000734:	4a27      	ldr	r2, [pc, #156]	; (80007d4 <MX_GPIO_Init+0xb8>)
 8000736:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800073a:	6193      	str	r3, [r2, #24]
 800073c:	4b25      	ldr	r3, [pc, #148]	; (80007d4 <MX_GPIO_Init+0xb8>)
 800073e:	699b      	ldr	r3, [r3, #24]
 8000740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000744:	60fb      	str	r3, [r7, #12]
 8000746:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000748:	4b22      	ldr	r3, [pc, #136]	; (80007d4 <MX_GPIO_Init+0xb8>)
 800074a:	699b      	ldr	r3, [r3, #24]
 800074c:	4a21      	ldr	r2, [pc, #132]	; (80007d4 <MX_GPIO_Init+0xb8>)
 800074e:	f043 0308 	orr.w	r3, r3, #8
 8000752:	6193      	str	r3, [r2, #24]
 8000754:	4b1f      	ldr	r3, [pc, #124]	; (80007d4 <MX_GPIO_Init+0xb8>)
 8000756:	699b      	ldr	r3, [r3, #24]
 8000758:	f003 0308 	and.w	r3, r3, #8
 800075c:	60bb      	str	r3, [r7, #8]
 800075e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000760:	4b1c      	ldr	r3, [pc, #112]	; (80007d4 <MX_GPIO_Init+0xb8>)
 8000762:	699b      	ldr	r3, [r3, #24]
 8000764:	4a1b      	ldr	r2, [pc, #108]	; (80007d4 <MX_GPIO_Init+0xb8>)
 8000766:	f043 0304 	orr.w	r3, r3, #4
 800076a:	6193      	str	r3, [r2, #24]
 800076c:	4b19      	ldr	r3, [pc, #100]	; (80007d4 <MX_GPIO_Init+0xb8>)
 800076e:	699b      	ldr	r3, [r3, #24]
 8000770:	f003 0304 	and.w	r3, r3, #4
 8000774:	607b      	str	r3, [r7, #4]
 8000776:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
 8000778:	2201      	movs	r2, #1
 800077a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800077e:	4816      	ldr	r0, [pc, #88]	; (80007d8 <MX_GPIO_Init+0xbc>)
 8000780:	f000 fbeb 	bl	8000f5a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000784:	2201      	movs	r2, #1
 8000786:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800078a:	4814      	ldr	r0, [pc, #80]	; (80007dc <MX_GPIO_Init+0xc0>)
 800078c:	f000 fbe5 	bl	8000f5a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000790:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000794:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000796:	2301      	movs	r3, #1
 8000798:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079a:	2300      	movs	r3, #0
 800079c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079e:	2302      	movs	r3, #2
 80007a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007a2:	f107 0310 	add.w	r3, r7, #16
 80007a6:	4619      	mov	r1, r3
 80007a8:	480b      	ldr	r0, [pc, #44]	; (80007d8 <MX_GPIO_Init+0xbc>)
 80007aa:	f000 fa65 	bl	8000c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80007ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80007b4:	2311      	movs	r3, #17
 80007b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b8:	2300      	movs	r3, #0
 80007ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007bc:	2302      	movs	r3, #2
 80007be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c0:	f107 0310 	add.w	r3, r7, #16
 80007c4:	4619      	mov	r1, r3
 80007c6:	4805      	ldr	r0, [pc, #20]	; (80007dc <MX_GPIO_Init+0xc0>)
 80007c8:	f000 fa56 	bl	8000c78 <HAL_GPIO_Init>

}
 80007cc:	bf00      	nop
 80007ce:	3720      	adds	r7, #32
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	40021000 	.word	0x40021000
 80007d8:	40011800 	.word	0x40011800
 80007dc:	40010c00 	.word	0x40010c00

080007e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80007e4:	bf00      	nop
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bc80      	pop	{r7}
 80007ea:	4770      	bx	lr

080007ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b085      	sub	sp, #20
 80007f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007f2:	4b15      	ldr	r3, [pc, #84]	; (8000848 <HAL_MspInit+0x5c>)
 80007f4:	699b      	ldr	r3, [r3, #24]
 80007f6:	4a14      	ldr	r2, [pc, #80]	; (8000848 <HAL_MspInit+0x5c>)
 80007f8:	f043 0301 	orr.w	r3, r3, #1
 80007fc:	6193      	str	r3, [r2, #24]
 80007fe:	4b12      	ldr	r3, [pc, #72]	; (8000848 <HAL_MspInit+0x5c>)
 8000800:	699b      	ldr	r3, [r3, #24]
 8000802:	f003 0301 	and.w	r3, r3, #1
 8000806:	60bb      	str	r3, [r7, #8]
 8000808:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800080a:	4b0f      	ldr	r3, [pc, #60]	; (8000848 <HAL_MspInit+0x5c>)
 800080c:	69db      	ldr	r3, [r3, #28]
 800080e:	4a0e      	ldr	r2, [pc, #56]	; (8000848 <HAL_MspInit+0x5c>)
 8000810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000814:	61d3      	str	r3, [r2, #28]
 8000816:	4b0c      	ldr	r3, [pc, #48]	; (8000848 <HAL_MspInit+0x5c>)
 8000818:	69db      	ldr	r3, [r3, #28]
 800081a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000822:	4b0a      	ldr	r3, [pc, #40]	; (800084c <HAL_MspInit+0x60>)
 8000824:	685b      	ldr	r3, [r3, #4]
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800082e:	60fb      	str	r3, [r7, #12]
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000836:	60fb      	str	r3, [r7, #12]
 8000838:	4a04      	ldr	r2, [pc, #16]	; (800084c <HAL_MspInit+0x60>)
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800083e:	bf00      	nop
 8000840:	3714      	adds	r7, #20
 8000842:	46bd      	mov	sp, r7
 8000844:	bc80      	pop	{r7}
 8000846:	4770      	bx	lr
 8000848:	40021000 	.word	0x40021000
 800084c:	40010000 	.word	0x40010000

08000850 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000850:	b480      	push	{r7}
 8000852:	b085      	sub	sp, #20
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a09      	ldr	r2, [pc, #36]	; (8000884 <HAL_TIM_Base_MspInit+0x34>)
 800085e:	4293      	cmp	r3, r2
 8000860:	d10b      	bne.n	800087a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000862:	4b09      	ldr	r3, [pc, #36]	; (8000888 <HAL_TIM_Base_MspInit+0x38>)
 8000864:	69db      	ldr	r3, [r3, #28]
 8000866:	4a08      	ldr	r2, [pc, #32]	; (8000888 <HAL_TIM_Base_MspInit+0x38>)
 8000868:	f043 0310 	orr.w	r3, r3, #16
 800086c:	61d3      	str	r3, [r2, #28]
 800086e:	4b06      	ldr	r3, [pc, #24]	; (8000888 <HAL_TIM_Base_MspInit+0x38>)
 8000870:	69db      	ldr	r3, [r3, #28]
 8000872:	f003 0310 	and.w	r3, r3, #16
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800087a:	bf00      	nop
 800087c:	3714      	adds	r7, #20
 800087e:	46bd      	mov	sp, r7
 8000880:	bc80      	pop	{r7}
 8000882:	4770      	bx	lr
 8000884:	40001000 	.word	0x40001000
 8000888:	40021000 	.word	0x40021000

0800088c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000890:	bf00      	nop
 8000892:	46bd      	mov	sp, r7
 8000894:	bc80      	pop	{r7}
 8000896:	4770      	bx	lr

08000898 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800089c:	e7fe      	b.n	800089c <HardFault_Handler+0x4>

0800089e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800089e:	b480      	push	{r7}
 80008a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008a2:	e7fe      	b.n	80008a2 <MemManage_Handler+0x4>

080008a4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008a8:	e7fe      	b.n	80008a8 <BusFault_Handler+0x4>

080008aa <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008aa:	b480      	push	{r7}
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008ae:	e7fe      	b.n	80008ae <UsageFault_Handler+0x4>

080008b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008b4:	bf00      	nop
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bc80      	pop	{r7}
 80008ba:	4770      	bx	lr

080008bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008c0:	bf00      	nop
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bc80      	pop	{r7}
 80008c6:	4770      	bx	lr

080008c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008cc:	bf00      	nop
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bc80      	pop	{r7}
 80008d2:	4770      	bx	lr

080008d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008d8:	f000 f8ac 	bl	8000a34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008dc:	bf00      	nop
 80008de:	bd80      	pop	{r7, pc}

080008e0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80008e4:	4b1a      	ldr	r3, [pc, #104]	; (8000950 <SystemInit+0x70>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a19      	ldr	r2, [pc, #100]	; (8000950 <SystemInit+0x70>)
 80008ea:	f043 0301 	orr.w	r3, r3, #1
 80008ee:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
#else
  RCC->CFGR &= 0xF0FF0000U;
 80008f0:	4b17      	ldr	r3, [pc, #92]	; (8000950 <SystemInit+0x70>)
 80008f2:	685a      	ldr	r2, [r3, #4]
 80008f4:	4916      	ldr	r1, [pc, #88]	; (8000950 <SystemInit+0x70>)
 80008f6:	4b17      	ldr	r3, [pc, #92]	; (8000954 <SystemInit+0x74>)
 80008f8:	4013      	ands	r3, r2
 80008fa:	604b      	str	r3, [r1, #4]
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80008fc:	4b14      	ldr	r3, [pc, #80]	; (8000950 <SystemInit+0x70>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a13      	ldr	r2, [pc, #76]	; (8000950 <SystemInit+0x70>)
 8000902:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000906:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800090a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800090c:	4b10      	ldr	r3, [pc, #64]	; (8000950 <SystemInit+0x70>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a0f      	ldr	r2, [pc, #60]	; (8000950 <SystemInit+0x70>)
 8000912:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000916:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000918:	4b0d      	ldr	r3, [pc, #52]	; (8000950 <SystemInit+0x70>)
 800091a:	685b      	ldr	r3, [r3, #4]
 800091c:	4a0c      	ldr	r2, [pc, #48]	; (8000950 <SystemInit+0x70>)
 800091e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000922:	6053      	str	r3, [r2, #4]

#if defined(STM32F105xC) || defined(STM32F107xC)
  /* Reset PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEBFFFFFFU;
 8000924:	4b0a      	ldr	r3, [pc, #40]	; (8000950 <SystemInit+0x70>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a09      	ldr	r2, [pc, #36]	; (8000950 <SystemInit+0x70>)
 800092a:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 800092e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x00FF0000U;
 8000930:	4b07      	ldr	r3, [pc, #28]	; (8000950 <SystemInit+0x70>)
 8000932:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 8000936:	609a      	str	r2, [r3, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;
 8000938:	4b05      	ldr	r3, [pc, #20]	; (8000950 <SystemInit+0x70>)
 800093a:	2200      	movs	r2, #0
 800093c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800093e:	4b06      	ldr	r3, [pc, #24]	; (8000958 <SystemInit+0x78>)
 8000940:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000944:	609a      	str	r2, [r3, #8]
#endif 
}
 8000946:	bf00      	nop
 8000948:	46bd      	mov	sp, r7
 800094a:	bc80      	pop	{r7}
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	40021000 	.word	0x40021000
 8000954:	f0ff0000 	.word	0xf0ff0000
 8000958:	e000ed00 	.word	0xe000ed00

0800095c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800095c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800095e:	e003      	b.n	8000968 <LoopCopyDataInit>

08000960 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000960:	4b0b      	ldr	r3, [pc, #44]	; (8000990 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000962:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000964:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000966:	3104      	adds	r1, #4

08000968 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000968:	480a      	ldr	r0, [pc, #40]	; (8000994 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800096a:	4b0b      	ldr	r3, [pc, #44]	; (8000998 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800096c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800096e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000970:	d3f6      	bcc.n	8000960 <CopyDataInit>
  ldr r2, =_sbss
 8000972:	4a0a      	ldr	r2, [pc, #40]	; (800099c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000974:	e002      	b.n	800097c <LoopFillZerobss>

08000976 <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000976:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000978:	f842 3b04 	str.w	r3, [r2], #4

0800097c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800097c:	4b08      	ldr	r3, [pc, #32]	; (80009a0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800097e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000980:	d3f9      	bcc.n	8000976 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000982:	f7ff ffad 	bl	80008e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000986:	f001 f919 	bl	8001bbc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800098a:	f7ff fdff 	bl	800058c <main>
  bx lr
 800098e:	4770      	bx	lr
  ldr r3, =_sidata
 8000990:	08001c6c 	.word	0x08001c6c
  ldr r0, =_sdata
 8000994:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000998:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 800099c:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 80009a0:	20000074 	.word	0x20000074

080009a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009a4:	e7fe      	b.n	80009a4 <ADC1_2_IRQHandler>
	...

080009a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009ac:	4b08      	ldr	r3, [pc, #32]	; (80009d0 <HAL_Init+0x28>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a07      	ldr	r2, [pc, #28]	; (80009d0 <HAL_Init+0x28>)
 80009b2:	f043 0310 	orr.w	r3, r3, #16
 80009b6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009b8:	2003      	movs	r0, #3
 80009ba:	f000 f929 	bl	8000c10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009be:	2000      	movs	r0, #0
 80009c0:	f000 f808 	bl	80009d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009c4:	f7ff ff12 	bl	80007ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009c8:	2300      	movs	r3, #0
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40022000 	.word	0x40022000

080009d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009dc:	4b12      	ldr	r3, [pc, #72]	; (8000a28 <HAL_InitTick+0x54>)
 80009de:	681a      	ldr	r2, [r3, #0]
 80009e0:	4b12      	ldr	r3, [pc, #72]	; (8000a2c <HAL_InitTick+0x58>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	4619      	mov	r1, r3
 80009e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80009ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80009f2:	4618      	mov	r0, r3
 80009f4:	f000 f933 	bl	8000c5e <HAL_SYSTICK_Config>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009fe:	2301      	movs	r3, #1
 8000a00:	e00e      	b.n	8000a20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	2b0f      	cmp	r3, #15
 8000a06:	d80a      	bhi.n	8000a1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	6879      	ldr	r1, [r7, #4]
 8000a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a10:	f000 f909 	bl	8000c26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a14:	4a06      	ldr	r2, [pc, #24]	; (8000a30 <HAL_InitTick+0x5c>)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	e000      	b.n	8000a20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a1e:	2301      	movs	r3, #1
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	3708      	adds	r7, #8
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	20000000 	.word	0x20000000
 8000a2c:	20000008 	.word	0x20000008
 8000a30:	20000004 	.word	0x20000004

08000a34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a38:	4b05      	ldr	r3, [pc, #20]	; (8000a50 <HAL_IncTick+0x1c>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	4b05      	ldr	r3, [pc, #20]	; (8000a54 <HAL_IncTick+0x20>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	4413      	add	r3, r2
 8000a44:	4a03      	ldr	r2, [pc, #12]	; (8000a54 <HAL_IncTick+0x20>)
 8000a46:	6013      	str	r3, [r2, #0]
}
 8000a48:	bf00      	nop
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bc80      	pop	{r7}
 8000a4e:	4770      	bx	lr
 8000a50:	20000008 	.word	0x20000008
 8000a54:	20000070 	.word	0x20000070

08000a58 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a5c:	4b02      	ldr	r3, [pc, #8]	; (8000a68 <HAL_GetTick+0x10>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bc80      	pop	{r7}
 8000a66:	4770      	bx	lr
 8000a68:	20000070 	.word	0x20000070

08000a6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b084      	sub	sp, #16
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a74:	f7ff fff0 	bl	8000a58 <HAL_GetTick>
 8000a78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a84:	d005      	beq.n	8000a92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a86:	4b09      	ldr	r3, [pc, #36]	; (8000aac <HAL_Delay+0x40>)
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	4413      	add	r3, r2
 8000a90:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a92:	bf00      	nop
 8000a94:	f7ff ffe0 	bl	8000a58 <HAL_GetTick>
 8000a98:	4602      	mov	r2, r0
 8000a9a:	68bb      	ldr	r3, [r7, #8]
 8000a9c:	1ad3      	subs	r3, r2, r3
 8000a9e:	68fa      	ldr	r2, [r7, #12]
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	d8f7      	bhi.n	8000a94 <HAL_Delay+0x28>
  {
  }
}
 8000aa4:	bf00      	nop
 8000aa6:	3710      	adds	r7, #16
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	20000008 	.word	0x20000008

08000ab0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b085      	sub	sp, #20
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	f003 0307 	and.w	r3, r3, #7
 8000abe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ac0:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ac2:	68db      	ldr	r3, [r3, #12]
 8000ac4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ac6:	68ba      	ldr	r2, [r7, #8]
 8000ac8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000acc:	4013      	ands	r3, r2
 8000ace:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ad8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000adc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ae0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ae2:	4a04      	ldr	r2, [pc, #16]	; (8000af4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	60d3      	str	r3, [r2, #12]
}
 8000ae8:	bf00      	nop
 8000aea:	3714      	adds	r7, #20
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bc80      	pop	{r7}
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	e000ed00 	.word	0xe000ed00

08000af8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000afc:	4b04      	ldr	r3, [pc, #16]	; (8000b10 <__NVIC_GetPriorityGrouping+0x18>)
 8000afe:	68db      	ldr	r3, [r3, #12]
 8000b00:	0a1b      	lsrs	r3, r3, #8
 8000b02:	f003 0307 	and.w	r3, r3, #7
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bc80      	pop	{r7}
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	e000ed00 	.word	0xe000ed00

08000b14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	6039      	str	r1, [r7, #0]
 8000b1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	db0a      	blt.n	8000b3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	b2da      	uxtb	r2, r3
 8000b2c:	490c      	ldr	r1, [pc, #48]	; (8000b60 <__NVIC_SetPriority+0x4c>)
 8000b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b32:	0112      	lsls	r2, r2, #4
 8000b34:	b2d2      	uxtb	r2, r2
 8000b36:	440b      	add	r3, r1
 8000b38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b3c:	e00a      	b.n	8000b54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	b2da      	uxtb	r2, r3
 8000b42:	4908      	ldr	r1, [pc, #32]	; (8000b64 <__NVIC_SetPriority+0x50>)
 8000b44:	79fb      	ldrb	r3, [r7, #7]
 8000b46:	f003 030f 	and.w	r3, r3, #15
 8000b4a:	3b04      	subs	r3, #4
 8000b4c:	0112      	lsls	r2, r2, #4
 8000b4e:	b2d2      	uxtb	r2, r2
 8000b50:	440b      	add	r3, r1
 8000b52:	761a      	strb	r2, [r3, #24]
}
 8000b54:	bf00      	nop
 8000b56:	370c      	adds	r7, #12
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bc80      	pop	{r7}
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	e000e100 	.word	0xe000e100
 8000b64:	e000ed00 	.word	0xe000ed00

08000b68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b089      	sub	sp, #36	; 0x24
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	60f8      	str	r0, [r7, #12]
 8000b70:	60b9      	str	r1, [r7, #8]
 8000b72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	f003 0307 	and.w	r3, r3, #7
 8000b7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b7c:	69fb      	ldr	r3, [r7, #28]
 8000b7e:	f1c3 0307 	rsb	r3, r3, #7
 8000b82:	2b04      	cmp	r3, #4
 8000b84:	bf28      	it	cs
 8000b86:	2304      	movcs	r3, #4
 8000b88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b8a:	69fb      	ldr	r3, [r7, #28]
 8000b8c:	3304      	adds	r3, #4
 8000b8e:	2b06      	cmp	r3, #6
 8000b90:	d902      	bls.n	8000b98 <NVIC_EncodePriority+0x30>
 8000b92:	69fb      	ldr	r3, [r7, #28]
 8000b94:	3b03      	subs	r3, #3
 8000b96:	e000      	b.n	8000b9a <NVIC_EncodePriority+0x32>
 8000b98:	2300      	movs	r3, #0
 8000b9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000ba0:	69bb      	ldr	r3, [r7, #24]
 8000ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba6:	43da      	mvns	r2, r3
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	401a      	ands	r2, r3
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bb0:	f04f 31ff 	mov.w	r1, #4294967295
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bba:	43d9      	mvns	r1, r3
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc0:	4313      	orrs	r3, r2
         );
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3724      	adds	r7, #36	; 0x24
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bc80      	pop	{r7}
 8000bca:	4770      	bx	lr

08000bcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	3b01      	subs	r3, #1
 8000bd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bdc:	d301      	bcc.n	8000be2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bde:	2301      	movs	r3, #1
 8000be0:	e00f      	b.n	8000c02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000be2:	4a0a      	ldr	r2, [pc, #40]	; (8000c0c <SysTick_Config+0x40>)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	3b01      	subs	r3, #1
 8000be8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bea:	210f      	movs	r1, #15
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	f7ff ff90 	bl	8000b14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bf4:	4b05      	ldr	r3, [pc, #20]	; (8000c0c <SysTick_Config+0x40>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bfa:	4b04      	ldr	r3, [pc, #16]	; (8000c0c <SysTick_Config+0x40>)
 8000bfc:	2207      	movs	r2, #7
 8000bfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c00:	2300      	movs	r3, #0
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	e000e010 	.word	0xe000e010

08000c10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c18:	6878      	ldr	r0, [r7, #4]
 8000c1a:	f7ff ff49 	bl	8000ab0 <__NVIC_SetPriorityGrouping>
}
 8000c1e:	bf00      	nop
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c26:	b580      	push	{r7, lr}
 8000c28:	b086      	sub	sp, #24
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	60b9      	str	r1, [r7, #8]
 8000c30:	607a      	str	r2, [r7, #4]
 8000c32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c34:	2300      	movs	r3, #0
 8000c36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c38:	f7ff ff5e 	bl	8000af8 <__NVIC_GetPriorityGrouping>
 8000c3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c3e:	687a      	ldr	r2, [r7, #4]
 8000c40:	68b9      	ldr	r1, [r7, #8]
 8000c42:	6978      	ldr	r0, [r7, #20]
 8000c44:	f7ff ff90 	bl	8000b68 <NVIC_EncodePriority>
 8000c48:	4602      	mov	r2, r0
 8000c4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c4e:	4611      	mov	r1, r2
 8000c50:	4618      	mov	r0, r3
 8000c52:	f7ff ff5f 	bl	8000b14 <__NVIC_SetPriority>
}
 8000c56:	bf00      	nop
 8000c58:	3718      	adds	r7, #24
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}

08000c5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c5e:	b580      	push	{r7, lr}
 8000c60:	b082      	sub	sp, #8
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c66:	6878      	ldr	r0, [r7, #4]
 8000c68:	f7ff ffb0 	bl	8000bcc <SysTick_Config>
 8000c6c:	4603      	mov	r3, r0
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
	...

08000c78 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b08b      	sub	sp, #44	; 0x2c
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
 8000c80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c82:	2300      	movs	r3, #0
 8000c84:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c86:	2300      	movs	r3, #0
 8000c88:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c8a:	e127      	b.n	8000edc <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c90:	fa02 f303 	lsl.w	r3, r2, r3
 8000c94:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	69fa      	ldr	r2, [r7, #28]
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ca0:	69ba      	ldr	r2, [r7, #24]
 8000ca2:	69fb      	ldr	r3, [r7, #28]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	f040 8116 	bne.w	8000ed6 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	2b12      	cmp	r3, #18
 8000cb0:	d034      	beq.n	8000d1c <HAL_GPIO_Init+0xa4>
 8000cb2:	2b12      	cmp	r3, #18
 8000cb4:	d80d      	bhi.n	8000cd2 <HAL_GPIO_Init+0x5a>
 8000cb6:	2b02      	cmp	r3, #2
 8000cb8:	d02b      	beq.n	8000d12 <HAL_GPIO_Init+0x9a>
 8000cba:	2b02      	cmp	r3, #2
 8000cbc:	d804      	bhi.n	8000cc8 <HAL_GPIO_Init+0x50>
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d031      	beq.n	8000d26 <HAL_GPIO_Init+0xae>
 8000cc2:	2b01      	cmp	r3, #1
 8000cc4:	d01c      	beq.n	8000d00 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000cc6:	e048      	b.n	8000d5a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000cc8:	2b03      	cmp	r3, #3
 8000cca:	d043      	beq.n	8000d54 <HAL_GPIO_Init+0xdc>
 8000ccc:	2b11      	cmp	r3, #17
 8000cce:	d01b      	beq.n	8000d08 <HAL_GPIO_Init+0x90>
          break;
 8000cd0:	e043      	b.n	8000d5a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000cd2:	4a89      	ldr	r2, [pc, #548]	; (8000ef8 <HAL_GPIO_Init+0x280>)
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d026      	beq.n	8000d26 <HAL_GPIO_Init+0xae>
 8000cd8:	4a87      	ldr	r2, [pc, #540]	; (8000ef8 <HAL_GPIO_Init+0x280>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d806      	bhi.n	8000cec <HAL_GPIO_Init+0x74>
 8000cde:	4a87      	ldr	r2, [pc, #540]	; (8000efc <HAL_GPIO_Init+0x284>)
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	d020      	beq.n	8000d26 <HAL_GPIO_Init+0xae>
 8000ce4:	4a86      	ldr	r2, [pc, #536]	; (8000f00 <HAL_GPIO_Init+0x288>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d01d      	beq.n	8000d26 <HAL_GPIO_Init+0xae>
          break;
 8000cea:	e036      	b.n	8000d5a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000cec:	4a85      	ldr	r2, [pc, #532]	; (8000f04 <HAL_GPIO_Init+0x28c>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d019      	beq.n	8000d26 <HAL_GPIO_Init+0xae>
 8000cf2:	4a85      	ldr	r2, [pc, #532]	; (8000f08 <HAL_GPIO_Init+0x290>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d016      	beq.n	8000d26 <HAL_GPIO_Init+0xae>
 8000cf8:	4a84      	ldr	r2, [pc, #528]	; (8000f0c <HAL_GPIO_Init+0x294>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d013      	beq.n	8000d26 <HAL_GPIO_Init+0xae>
          break;
 8000cfe:	e02c      	b.n	8000d5a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	68db      	ldr	r3, [r3, #12]
 8000d04:	623b      	str	r3, [r7, #32]
          break;
 8000d06:	e028      	b.n	8000d5a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	68db      	ldr	r3, [r3, #12]
 8000d0c:	3304      	adds	r3, #4
 8000d0e:	623b      	str	r3, [r7, #32]
          break;
 8000d10:	e023      	b.n	8000d5a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	68db      	ldr	r3, [r3, #12]
 8000d16:	3308      	adds	r3, #8
 8000d18:	623b      	str	r3, [r7, #32]
          break;
 8000d1a:	e01e      	b.n	8000d5a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	68db      	ldr	r3, [r3, #12]
 8000d20:	330c      	adds	r3, #12
 8000d22:	623b      	str	r3, [r7, #32]
          break;
 8000d24:	e019      	b.n	8000d5a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	689b      	ldr	r3, [r3, #8]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d102      	bne.n	8000d34 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d2e:	2304      	movs	r3, #4
 8000d30:	623b      	str	r3, [r7, #32]
          break;
 8000d32:	e012      	b.n	8000d5a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	689b      	ldr	r3, [r3, #8]
 8000d38:	2b01      	cmp	r3, #1
 8000d3a:	d105      	bne.n	8000d48 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d3c:	2308      	movs	r3, #8
 8000d3e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	69fa      	ldr	r2, [r7, #28]
 8000d44:	611a      	str	r2, [r3, #16]
          break;
 8000d46:	e008      	b.n	8000d5a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d48:	2308      	movs	r3, #8
 8000d4a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	69fa      	ldr	r2, [r7, #28]
 8000d50:	615a      	str	r2, [r3, #20]
          break;
 8000d52:	e002      	b.n	8000d5a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d54:	2300      	movs	r3, #0
 8000d56:	623b      	str	r3, [r7, #32]
          break;
 8000d58:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d5a:	69bb      	ldr	r3, [r7, #24]
 8000d5c:	2bff      	cmp	r3, #255	; 0xff
 8000d5e:	d801      	bhi.n	8000d64 <HAL_GPIO_Init+0xec>
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	e001      	b.n	8000d68 <HAL_GPIO_Init+0xf0>
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	3304      	adds	r3, #4
 8000d68:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d6a:	69bb      	ldr	r3, [r7, #24]
 8000d6c:	2bff      	cmp	r3, #255	; 0xff
 8000d6e:	d802      	bhi.n	8000d76 <HAL_GPIO_Init+0xfe>
 8000d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d72:	009b      	lsls	r3, r3, #2
 8000d74:	e002      	b.n	8000d7c <HAL_GPIO_Init+0x104>
 8000d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d78:	3b08      	subs	r3, #8
 8000d7a:	009b      	lsls	r3, r3, #2
 8000d7c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	210f      	movs	r1, #15
 8000d84:	693b      	ldr	r3, [r7, #16]
 8000d86:	fa01 f303 	lsl.w	r3, r1, r3
 8000d8a:	43db      	mvns	r3, r3
 8000d8c:	401a      	ands	r2, r3
 8000d8e:	6a39      	ldr	r1, [r7, #32]
 8000d90:	693b      	ldr	r3, [r7, #16]
 8000d92:	fa01 f303 	lsl.w	r3, r1, r3
 8000d96:	431a      	orrs	r2, r3
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	f000 8096 	beq.w	8000ed6 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000daa:	4b59      	ldr	r3, [pc, #356]	; (8000f10 <HAL_GPIO_Init+0x298>)
 8000dac:	699b      	ldr	r3, [r3, #24]
 8000dae:	4a58      	ldr	r2, [pc, #352]	; (8000f10 <HAL_GPIO_Init+0x298>)
 8000db0:	f043 0301 	orr.w	r3, r3, #1
 8000db4:	6193      	str	r3, [r2, #24]
 8000db6:	4b56      	ldr	r3, [pc, #344]	; (8000f10 <HAL_GPIO_Init+0x298>)
 8000db8:	699b      	ldr	r3, [r3, #24]
 8000dba:	f003 0301 	and.w	r3, r3, #1
 8000dbe:	60bb      	str	r3, [r7, #8]
 8000dc0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000dc2:	4a54      	ldr	r2, [pc, #336]	; (8000f14 <HAL_GPIO_Init+0x29c>)
 8000dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dc6:	089b      	lsrs	r3, r3, #2
 8000dc8:	3302      	adds	r3, #2
 8000dca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dce:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd2:	f003 0303 	and.w	r3, r3, #3
 8000dd6:	009b      	lsls	r3, r3, #2
 8000dd8:	220f      	movs	r2, #15
 8000dda:	fa02 f303 	lsl.w	r3, r2, r3
 8000dde:	43db      	mvns	r3, r3
 8000de0:	68fa      	ldr	r2, [r7, #12]
 8000de2:	4013      	ands	r3, r2
 8000de4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4a4b      	ldr	r2, [pc, #300]	; (8000f18 <HAL_GPIO_Init+0x2a0>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d013      	beq.n	8000e16 <HAL_GPIO_Init+0x19e>
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4a4a      	ldr	r2, [pc, #296]	; (8000f1c <HAL_GPIO_Init+0x2a4>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d00d      	beq.n	8000e12 <HAL_GPIO_Init+0x19a>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4a49      	ldr	r2, [pc, #292]	; (8000f20 <HAL_GPIO_Init+0x2a8>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d007      	beq.n	8000e0e <HAL_GPIO_Init+0x196>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4a48      	ldr	r2, [pc, #288]	; (8000f24 <HAL_GPIO_Init+0x2ac>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d101      	bne.n	8000e0a <HAL_GPIO_Init+0x192>
 8000e06:	2303      	movs	r3, #3
 8000e08:	e006      	b.n	8000e18 <HAL_GPIO_Init+0x1a0>
 8000e0a:	2304      	movs	r3, #4
 8000e0c:	e004      	b.n	8000e18 <HAL_GPIO_Init+0x1a0>
 8000e0e:	2302      	movs	r3, #2
 8000e10:	e002      	b.n	8000e18 <HAL_GPIO_Init+0x1a0>
 8000e12:	2301      	movs	r3, #1
 8000e14:	e000      	b.n	8000e18 <HAL_GPIO_Init+0x1a0>
 8000e16:	2300      	movs	r3, #0
 8000e18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e1a:	f002 0203 	and.w	r2, r2, #3
 8000e1e:	0092      	lsls	r2, r2, #2
 8000e20:	4093      	lsls	r3, r2
 8000e22:	68fa      	ldr	r2, [r7, #12]
 8000e24:	4313      	orrs	r3, r2
 8000e26:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e28:	493a      	ldr	r1, [pc, #232]	; (8000f14 <HAL_GPIO_Init+0x29c>)
 8000e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e2c:	089b      	lsrs	r3, r3, #2
 8000e2e:	3302      	adds	r3, #2
 8000e30:	68fa      	ldr	r2, [r7, #12]
 8000e32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d006      	beq.n	8000e50 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e42:	4b39      	ldr	r3, [pc, #228]	; (8000f28 <HAL_GPIO_Init+0x2b0>)
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	4938      	ldr	r1, [pc, #224]	; (8000f28 <HAL_GPIO_Init+0x2b0>)
 8000e48:	69bb      	ldr	r3, [r7, #24]
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	600b      	str	r3, [r1, #0]
 8000e4e:	e006      	b.n	8000e5e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e50:	4b35      	ldr	r3, [pc, #212]	; (8000f28 <HAL_GPIO_Init+0x2b0>)
 8000e52:	681a      	ldr	r2, [r3, #0]
 8000e54:	69bb      	ldr	r3, [r7, #24]
 8000e56:	43db      	mvns	r3, r3
 8000e58:	4933      	ldr	r1, [pc, #204]	; (8000f28 <HAL_GPIO_Init+0x2b0>)
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d006      	beq.n	8000e78 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e6a:	4b2f      	ldr	r3, [pc, #188]	; (8000f28 <HAL_GPIO_Init+0x2b0>)
 8000e6c:	685a      	ldr	r2, [r3, #4]
 8000e6e:	492e      	ldr	r1, [pc, #184]	; (8000f28 <HAL_GPIO_Init+0x2b0>)
 8000e70:	69bb      	ldr	r3, [r7, #24]
 8000e72:	4313      	orrs	r3, r2
 8000e74:	604b      	str	r3, [r1, #4]
 8000e76:	e006      	b.n	8000e86 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e78:	4b2b      	ldr	r3, [pc, #172]	; (8000f28 <HAL_GPIO_Init+0x2b0>)
 8000e7a:	685a      	ldr	r2, [r3, #4]
 8000e7c:	69bb      	ldr	r3, [r7, #24]
 8000e7e:	43db      	mvns	r3, r3
 8000e80:	4929      	ldr	r1, [pc, #164]	; (8000f28 <HAL_GPIO_Init+0x2b0>)
 8000e82:	4013      	ands	r3, r2
 8000e84:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d006      	beq.n	8000ea0 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e92:	4b25      	ldr	r3, [pc, #148]	; (8000f28 <HAL_GPIO_Init+0x2b0>)
 8000e94:	689a      	ldr	r2, [r3, #8]
 8000e96:	4924      	ldr	r1, [pc, #144]	; (8000f28 <HAL_GPIO_Init+0x2b0>)
 8000e98:	69bb      	ldr	r3, [r7, #24]
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	608b      	str	r3, [r1, #8]
 8000e9e:	e006      	b.n	8000eae <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ea0:	4b21      	ldr	r3, [pc, #132]	; (8000f28 <HAL_GPIO_Init+0x2b0>)
 8000ea2:	689a      	ldr	r2, [r3, #8]
 8000ea4:	69bb      	ldr	r3, [r7, #24]
 8000ea6:	43db      	mvns	r3, r3
 8000ea8:	491f      	ldr	r1, [pc, #124]	; (8000f28 <HAL_GPIO_Init+0x2b0>)
 8000eaa:	4013      	ands	r3, r2
 8000eac:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d006      	beq.n	8000ec8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000eba:	4b1b      	ldr	r3, [pc, #108]	; (8000f28 <HAL_GPIO_Init+0x2b0>)
 8000ebc:	68da      	ldr	r2, [r3, #12]
 8000ebe:	491a      	ldr	r1, [pc, #104]	; (8000f28 <HAL_GPIO_Init+0x2b0>)
 8000ec0:	69bb      	ldr	r3, [r7, #24]
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	60cb      	str	r3, [r1, #12]
 8000ec6:	e006      	b.n	8000ed6 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ec8:	4b17      	ldr	r3, [pc, #92]	; (8000f28 <HAL_GPIO_Init+0x2b0>)
 8000eca:	68da      	ldr	r2, [r3, #12]
 8000ecc:	69bb      	ldr	r3, [r7, #24]
 8000ece:	43db      	mvns	r3, r3
 8000ed0:	4915      	ldr	r1, [pc, #84]	; (8000f28 <HAL_GPIO_Init+0x2b0>)
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed8:	3301      	adds	r3, #1
 8000eda:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ee2:	fa22 f303 	lsr.w	r3, r2, r3
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	f47f aed0 	bne.w	8000c8c <HAL_GPIO_Init+0x14>
  }
}
 8000eec:	bf00      	nop
 8000eee:	372c      	adds	r7, #44	; 0x2c
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bc80      	pop	{r7}
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	10210000 	.word	0x10210000
 8000efc:	10110000 	.word	0x10110000
 8000f00:	10120000 	.word	0x10120000
 8000f04:	10310000 	.word	0x10310000
 8000f08:	10320000 	.word	0x10320000
 8000f0c:	10220000 	.word	0x10220000
 8000f10:	40021000 	.word	0x40021000
 8000f14:	40010000 	.word	0x40010000
 8000f18:	40010800 	.word	0x40010800
 8000f1c:	40010c00 	.word	0x40010c00
 8000f20:	40011000 	.word	0x40011000
 8000f24:	40011400 	.word	0x40011400
 8000f28:	40010400 	.word	0x40010400

08000f2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b085      	sub	sp, #20
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	460b      	mov	r3, r1
 8000f36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	689a      	ldr	r2, [r3, #8]
 8000f3c:	887b      	ldrh	r3, [r7, #2]
 8000f3e:	4013      	ands	r3, r2
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d002      	beq.n	8000f4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000f44:	2301      	movs	r3, #1
 8000f46:	73fb      	strb	r3, [r7, #15]
 8000f48:	e001      	b.n	8000f4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000f4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3714      	adds	r7, #20
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bc80      	pop	{r7}
 8000f58:	4770      	bx	lr

08000f5a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	b083      	sub	sp, #12
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	6078      	str	r0, [r7, #4]
 8000f62:	460b      	mov	r3, r1
 8000f64:	807b      	strh	r3, [r7, #2]
 8000f66:	4613      	mov	r3, r2
 8000f68:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f6a:	787b      	ldrb	r3, [r7, #1]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d003      	beq.n	8000f78 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f70:	887a      	ldrh	r2, [r7, #2]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000f76:	e003      	b.n	8000f80 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f78:	887b      	ldrh	r3, [r7, #2]
 8000f7a:	041a      	lsls	r2, r3, #16
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	611a      	str	r2, [r3, #16]
}
 8000f80:	bf00      	nop
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bc80      	pop	{r7}
 8000f88:	4770      	bx	lr

08000f8a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	b083      	sub	sp, #12
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	6078      	str	r0, [r7, #4]
 8000f92:	460b      	mov	r3, r1
 8000f94:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	68da      	ldr	r2, [r3, #12]
 8000f9a:	887b      	ldrh	r3, [r7, #2]
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d003      	beq.n	8000faa <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000fa2:	887a      	ldrh	r2, [r7, #2]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8000fa8:	e002      	b.n	8000fb0 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000faa:	887a      	ldrh	r2, [r7, #2]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	611a      	str	r2, [r3, #16]
}
 8000fb0:	bf00      	nop
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bc80      	pop	{r7}
 8000fb8:	4770      	bx	lr
	...

08000fbc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b086      	sub	sp, #24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d101      	bne.n	8000fce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e304      	b.n	80015d8 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	f000 8087 	beq.w	80010ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000fdc:	4b92      	ldr	r3, [pc, #584]	; (8001228 <HAL_RCC_OscConfig+0x26c>)
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f003 030c 	and.w	r3, r3, #12
 8000fe4:	2b04      	cmp	r3, #4
 8000fe6:	d00c      	beq.n	8001002 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000fe8:	4b8f      	ldr	r3, [pc, #572]	; (8001228 <HAL_RCC_OscConfig+0x26c>)
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f003 030c 	and.w	r3, r3, #12
 8000ff0:	2b08      	cmp	r3, #8
 8000ff2:	d112      	bne.n	800101a <HAL_RCC_OscConfig+0x5e>
 8000ff4:	4b8c      	ldr	r3, [pc, #560]	; (8001228 <HAL_RCC_OscConfig+0x26c>)
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ffc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001000:	d10b      	bne.n	800101a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001002:	4b89      	ldr	r3, [pc, #548]	; (8001228 <HAL_RCC_OscConfig+0x26c>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800100a:	2b00      	cmp	r3, #0
 800100c:	d06c      	beq.n	80010e8 <HAL_RCC_OscConfig+0x12c>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	689b      	ldr	r3, [r3, #8]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d168      	bne.n	80010e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	e2de      	b.n	80015d8 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	689b      	ldr	r3, [r3, #8]
 800101e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001022:	d106      	bne.n	8001032 <HAL_RCC_OscConfig+0x76>
 8001024:	4b80      	ldr	r3, [pc, #512]	; (8001228 <HAL_RCC_OscConfig+0x26c>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a7f      	ldr	r2, [pc, #508]	; (8001228 <HAL_RCC_OscConfig+0x26c>)
 800102a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800102e:	6013      	str	r3, [r2, #0]
 8001030:	e02e      	b.n	8001090 <HAL_RCC_OscConfig+0xd4>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	689b      	ldr	r3, [r3, #8]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d10c      	bne.n	8001054 <HAL_RCC_OscConfig+0x98>
 800103a:	4b7b      	ldr	r3, [pc, #492]	; (8001228 <HAL_RCC_OscConfig+0x26c>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a7a      	ldr	r2, [pc, #488]	; (8001228 <HAL_RCC_OscConfig+0x26c>)
 8001040:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001044:	6013      	str	r3, [r2, #0]
 8001046:	4b78      	ldr	r3, [pc, #480]	; (8001228 <HAL_RCC_OscConfig+0x26c>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a77      	ldr	r2, [pc, #476]	; (8001228 <HAL_RCC_OscConfig+0x26c>)
 800104c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001050:	6013      	str	r3, [r2, #0]
 8001052:	e01d      	b.n	8001090 <HAL_RCC_OscConfig+0xd4>
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800105c:	d10c      	bne.n	8001078 <HAL_RCC_OscConfig+0xbc>
 800105e:	4b72      	ldr	r3, [pc, #456]	; (8001228 <HAL_RCC_OscConfig+0x26c>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a71      	ldr	r2, [pc, #452]	; (8001228 <HAL_RCC_OscConfig+0x26c>)
 8001064:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001068:	6013      	str	r3, [r2, #0]
 800106a:	4b6f      	ldr	r3, [pc, #444]	; (8001228 <HAL_RCC_OscConfig+0x26c>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a6e      	ldr	r2, [pc, #440]	; (8001228 <HAL_RCC_OscConfig+0x26c>)
 8001070:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001074:	6013      	str	r3, [r2, #0]
 8001076:	e00b      	b.n	8001090 <HAL_RCC_OscConfig+0xd4>
 8001078:	4b6b      	ldr	r3, [pc, #428]	; (8001228 <HAL_RCC_OscConfig+0x26c>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a6a      	ldr	r2, [pc, #424]	; (8001228 <HAL_RCC_OscConfig+0x26c>)
 800107e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001082:	6013      	str	r3, [r2, #0]
 8001084:	4b68      	ldr	r3, [pc, #416]	; (8001228 <HAL_RCC_OscConfig+0x26c>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a67      	ldr	r2, [pc, #412]	; (8001228 <HAL_RCC_OscConfig+0x26c>)
 800108a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800108e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	689b      	ldr	r3, [r3, #8]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d013      	beq.n	80010c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001098:	f7ff fcde 	bl	8000a58 <HAL_GetTick>
 800109c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800109e:	e008      	b.n	80010b2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010a0:	f7ff fcda 	bl	8000a58 <HAL_GetTick>
 80010a4:	4602      	mov	r2, r0
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	2b64      	cmp	r3, #100	; 0x64
 80010ac:	d901      	bls.n	80010b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80010ae:	2303      	movs	r3, #3
 80010b0:	e292      	b.n	80015d8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010b2:	4b5d      	ldr	r3, [pc, #372]	; (8001228 <HAL_RCC_OscConfig+0x26c>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d0f0      	beq.n	80010a0 <HAL_RCC_OscConfig+0xe4>
 80010be:	e014      	b.n	80010ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010c0:	f7ff fcca 	bl	8000a58 <HAL_GetTick>
 80010c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010c6:	e008      	b.n	80010da <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010c8:	f7ff fcc6 	bl	8000a58 <HAL_GetTick>
 80010cc:	4602      	mov	r2, r0
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	2b64      	cmp	r3, #100	; 0x64
 80010d4:	d901      	bls.n	80010da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80010d6:	2303      	movs	r3, #3
 80010d8:	e27e      	b.n	80015d8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010da:	4b53      	ldr	r3, [pc, #332]	; (8001228 <HAL_RCC_OscConfig+0x26c>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d1f0      	bne.n	80010c8 <HAL_RCC_OscConfig+0x10c>
 80010e6:	e000      	b.n	80010ea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f003 0302 	and.w	r3, r3, #2
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d063      	beq.n	80011be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80010f6:	4b4c      	ldr	r3, [pc, #304]	; (8001228 <HAL_RCC_OscConfig+0x26c>)
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f003 030c 	and.w	r3, r3, #12
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d00b      	beq.n	800111a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001102:	4b49      	ldr	r3, [pc, #292]	; (8001228 <HAL_RCC_OscConfig+0x26c>)
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f003 030c 	and.w	r3, r3, #12
 800110a:	2b08      	cmp	r3, #8
 800110c:	d11c      	bne.n	8001148 <HAL_RCC_OscConfig+0x18c>
 800110e:	4b46      	ldr	r3, [pc, #280]	; (8001228 <HAL_RCC_OscConfig+0x26c>)
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001116:	2b00      	cmp	r3, #0
 8001118:	d116      	bne.n	8001148 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800111a:	4b43      	ldr	r3, [pc, #268]	; (8001228 <HAL_RCC_OscConfig+0x26c>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f003 0302 	and.w	r3, r3, #2
 8001122:	2b00      	cmp	r3, #0
 8001124:	d005      	beq.n	8001132 <HAL_RCC_OscConfig+0x176>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	695b      	ldr	r3, [r3, #20]
 800112a:	2b01      	cmp	r3, #1
 800112c:	d001      	beq.n	8001132 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	e252      	b.n	80015d8 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001132:	4b3d      	ldr	r3, [pc, #244]	; (8001228 <HAL_RCC_OscConfig+0x26c>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	699b      	ldr	r3, [r3, #24]
 800113e:	00db      	lsls	r3, r3, #3
 8001140:	4939      	ldr	r1, [pc, #228]	; (8001228 <HAL_RCC_OscConfig+0x26c>)
 8001142:	4313      	orrs	r3, r2
 8001144:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001146:	e03a      	b.n	80011be <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	695b      	ldr	r3, [r3, #20]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d020      	beq.n	8001192 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001150:	4b36      	ldr	r3, [pc, #216]	; (800122c <HAL_RCC_OscConfig+0x270>)
 8001152:	2201      	movs	r2, #1
 8001154:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001156:	f7ff fc7f 	bl	8000a58 <HAL_GetTick>
 800115a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800115c:	e008      	b.n	8001170 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800115e:	f7ff fc7b 	bl	8000a58 <HAL_GetTick>
 8001162:	4602      	mov	r2, r0
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	1ad3      	subs	r3, r2, r3
 8001168:	2b02      	cmp	r3, #2
 800116a:	d901      	bls.n	8001170 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800116c:	2303      	movs	r3, #3
 800116e:	e233      	b.n	80015d8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001170:	4b2d      	ldr	r3, [pc, #180]	; (8001228 <HAL_RCC_OscConfig+0x26c>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f003 0302 	and.w	r3, r3, #2
 8001178:	2b00      	cmp	r3, #0
 800117a:	d0f0      	beq.n	800115e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800117c:	4b2a      	ldr	r3, [pc, #168]	; (8001228 <HAL_RCC_OscConfig+0x26c>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	699b      	ldr	r3, [r3, #24]
 8001188:	00db      	lsls	r3, r3, #3
 800118a:	4927      	ldr	r1, [pc, #156]	; (8001228 <HAL_RCC_OscConfig+0x26c>)
 800118c:	4313      	orrs	r3, r2
 800118e:	600b      	str	r3, [r1, #0]
 8001190:	e015      	b.n	80011be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001192:	4b26      	ldr	r3, [pc, #152]	; (800122c <HAL_RCC_OscConfig+0x270>)
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001198:	f7ff fc5e 	bl	8000a58 <HAL_GetTick>
 800119c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800119e:	e008      	b.n	80011b2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011a0:	f7ff fc5a 	bl	8000a58 <HAL_GetTick>
 80011a4:	4602      	mov	r2, r0
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	2b02      	cmp	r3, #2
 80011ac:	d901      	bls.n	80011b2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80011ae:	2303      	movs	r3, #3
 80011b0:	e212      	b.n	80015d8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011b2:	4b1d      	ldr	r3, [pc, #116]	; (8001228 <HAL_RCC_OscConfig+0x26c>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f003 0302 	and.w	r3, r3, #2
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d1f0      	bne.n	80011a0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f003 0308 	and.w	r3, r3, #8
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d03a      	beq.n	8001240 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	69db      	ldr	r3, [r3, #28]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d019      	beq.n	8001206 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011d2:	4b17      	ldr	r3, [pc, #92]	; (8001230 <HAL_RCC_OscConfig+0x274>)
 80011d4:	2201      	movs	r2, #1
 80011d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011d8:	f7ff fc3e 	bl	8000a58 <HAL_GetTick>
 80011dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011de:	e008      	b.n	80011f2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011e0:	f7ff fc3a 	bl	8000a58 <HAL_GetTick>
 80011e4:	4602      	mov	r2, r0
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	2b02      	cmp	r3, #2
 80011ec:	d901      	bls.n	80011f2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80011ee:	2303      	movs	r3, #3
 80011f0:	e1f2      	b.n	80015d8 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011f2:	4b0d      	ldr	r3, [pc, #52]	; (8001228 <HAL_RCC_OscConfig+0x26c>)
 80011f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011f6:	f003 0302 	and.w	r3, r3, #2
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d0f0      	beq.n	80011e0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80011fe:	2001      	movs	r0, #1
 8001200:	f000 fbc0 	bl	8001984 <RCC_Delay>
 8001204:	e01c      	b.n	8001240 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001206:	4b0a      	ldr	r3, [pc, #40]	; (8001230 <HAL_RCC_OscConfig+0x274>)
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800120c:	f7ff fc24 	bl	8000a58 <HAL_GetTick>
 8001210:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001212:	e00f      	b.n	8001234 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001214:	f7ff fc20 	bl	8000a58 <HAL_GetTick>
 8001218:	4602      	mov	r2, r0
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	2b02      	cmp	r3, #2
 8001220:	d908      	bls.n	8001234 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001222:	2303      	movs	r3, #3
 8001224:	e1d8      	b.n	80015d8 <HAL_RCC_OscConfig+0x61c>
 8001226:	bf00      	nop
 8001228:	40021000 	.word	0x40021000
 800122c:	42420000 	.word	0x42420000
 8001230:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001234:	4b9b      	ldr	r3, [pc, #620]	; (80014a4 <HAL_RCC_OscConfig+0x4e8>)
 8001236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001238:	f003 0302 	and.w	r3, r3, #2
 800123c:	2b00      	cmp	r3, #0
 800123e:	d1e9      	bne.n	8001214 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f003 0304 	and.w	r3, r3, #4
 8001248:	2b00      	cmp	r3, #0
 800124a:	f000 80a6 	beq.w	800139a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800124e:	2300      	movs	r3, #0
 8001250:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001252:	4b94      	ldr	r3, [pc, #592]	; (80014a4 <HAL_RCC_OscConfig+0x4e8>)
 8001254:	69db      	ldr	r3, [r3, #28]
 8001256:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d10d      	bne.n	800127a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800125e:	4b91      	ldr	r3, [pc, #580]	; (80014a4 <HAL_RCC_OscConfig+0x4e8>)
 8001260:	69db      	ldr	r3, [r3, #28]
 8001262:	4a90      	ldr	r2, [pc, #576]	; (80014a4 <HAL_RCC_OscConfig+0x4e8>)
 8001264:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001268:	61d3      	str	r3, [r2, #28]
 800126a:	4b8e      	ldr	r3, [pc, #568]	; (80014a4 <HAL_RCC_OscConfig+0x4e8>)
 800126c:	69db      	ldr	r3, [r3, #28]
 800126e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001272:	60bb      	str	r3, [r7, #8]
 8001274:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001276:	2301      	movs	r3, #1
 8001278:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800127a:	4b8b      	ldr	r3, [pc, #556]	; (80014a8 <HAL_RCC_OscConfig+0x4ec>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001282:	2b00      	cmp	r3, #0
 8001284:	d118      	bne.n	80012b8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001286:	4b88      	ldr	r3, [pc, #544]	; (80014a8 <HAL_RCC_OscConfig+0x4ec>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a87      	ldr	r2, [pc, #540]	; (80014a8 <HAL_RCC_OscConfig+0x4ec>)
 800128c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001290:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001292:	f7ff fbe1 	bl	8000a58 <HAL_GetTick>
 8001296:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001298:	e008      	b.n	80012ac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800129a:	f7ff fbdd 	bl	8000a58 <HAL_GetTick>
 800129e:	4602      	mov	r2, r0
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	1ad3      	subs	r3, r2, r3
 80012a4:	2b64      	cmp	r3, #100	; 0x64
 80012a6:	d901      	bls.n	80012ac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80012a8:	2303      	movs	r3, #3
 80012aa:	e195      	b.n	80015d8 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012ac:	4b7e      	ldr	r3, [pc, #504]	; (80014a8 <HAL_RCC_OscConfig+0x4ec>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d0f0      	beq.n	800129a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	691b      	ldr	r3, [r3, #16]
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d106      	bne.n	80012ce <HAL_RCC_OscConfig+0x312>
 80012c0:	4b78      	ldr	r3, [pc, #480]	; (80014a4 <HAL_RCC_OscConfig+0x4e8>)
 80012c2:	6a1b      	ldr	r3, [r3, #32]
 80012c4:	4a77      	ldr	r2, [pc, #476]	; (80014a4 <HAL_RCC_OscConfig+0x4e8>)
 80012c6:	f043 0301 	orr.w	r3, r3, #1
 80012ca:	6213      	str	r3, [r2, #32]
 80012cc:	e02d      	b.n	800132a <HAL_RCC_OscConfig+0x36e>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	691b      	ldr	r3, [r3, #16]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d10c      	bne.n	80012f0 <HAL_RCC_OscConfig+0x334>
 80012d6:	4b73      	ldr	r3, [pc, #460]	; (80014a4 <HAL_RCC_OscConfig+0x4e8>)
 80012d8:	6a1b      	ldr	r3, [r3, #32]
 80012da:	4a72      	ldr	r2, [pc, #456]	; (80014a4 <HAL_RCC_OscConfig+0x4e8>)
 80012dc:	f023 0301 	bic.w	r3, r3, #1
 80012e0:	6213      	str	r3, [r2, #32]
 80012e2:	4b70      	ldr	r3, [pc, #448]	; (80014a4 <HAL_RCC_OscConfig+0x4e8>)
 80012e4:	6a1b      	ldr	r3, [r3, #32]
 80012e6:	4a6f      	ldr	r2, [pc, #444]	; (80014a4 <HAL_RCC_OscConfig+0x4e8>)
 80012e8:	f023 0304 	bic.w	r3, r3, #4
 80012ec:	6213      	str	r3, [r2, #32]
 80012ee:	e01c      	b.n	800132a <HAL_RCC_OscConfig+0x36e>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	691b      	ldr	r3, [r3, #16]
 80012f4:	2b05      	cmp	r3, #5
 80012f6:	d10c      	bne.n	8001312 <HAL_RCC_OscConfig+0x356>
 80012f8:	4b6a      	ldr	r3, [pc, #424]	; (80014a4 <HAL_RCC_OscConfig+0x4e8>)
 80012fa:	6a1b      	ldr	r3, [r3, #32]
 80012fc:	4a69      	ldr	r2, [pc, #420]	; (80014a4 <HAL_RCC_OscConfig+0x4e8>)
 80012fe:	f043 0304 	orr.w	r3, r3, #4
 8001302:	6213      	str	r3, [r2, #32]
 8001304:	4b67      	ldr	r3, [pc, #412]	; (80014a4 <HAL_RCC_OscConfig+0x4e8>)
 8001306:	6a1b      	ldr	r3, [r3, #32]
 8001308:	4a66      	ldr	r2, [pc, #408]	; (80014a4 <HAL_RCC_OscConfig+0x4e8>)
 800130a:	f043 0301 	orr.w	r3, r3, #1
 800130e:	6213      	str	r3, [r2, #32]
 8001310:	e00b      	b.n	800132a <HAL_RCC_OscConfig+0x36e>
 8001312:	4b64      	ldr	r3, [pc, #400]	; (80014a4 <HAL_RCC_OscConfig+0x4e8>)
 8001314:	6a1b      	ldr	r3, [r3, #32]
 8001316:	4a63      	ldr	r2, [pc, #396]	; (80014a4 <HAL_RCC_OscConfig+0x4e8>)
 8001318:	f023 0301 	bic.w	r3, r3, #1
 800131c:	6213      	str	r3, [r2, #32]
 800131e:	4b61      	ldr	r3, [pc, #388]	; (80014a4 <HAL_RCC_OscConfig+0x4e8>)
 8001320:	6a1b      	ldr	r3, [r3, #32]
 8001322:	4a60      	ldr	r2, [pc, #384]	; (80014a4 <HAL_RCC_OscConfig+0x4e8>)
 8001324:	f023 0304 	bic.w	r3, r3, #4
 8001328:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	691b      	ldr	r3, [r3, #16]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d015      	beq.n	800135e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001332:	f7ff fb91 	bl	8000a58 <HAL_GetTick>
 8001336:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001338:	e00a      	b.n	8001350 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800133a:	f7ff fb8d 	bl	8000a58 <HAL_GetTick>
 800133e:	4602      	mov	r2, r0
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	f241 3288 	movw	r2, #5000	; 0x1388
 8001348:	4293      	cmp	r3, r2
 800134a:	d901      	bls.n	8001350 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800134c:	2303      	movs	r3, #3
 800134e:	e143      	b.n	80015d8 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001350:	4b54      	ldr	r3, [pc, #336]	; (80014a4 <HAL_RCC_OscConfig+0x4e8>)
 8001352:	6a1b      	ldr	r3, [r3, #32]
 8001354:	f003 0302 	and.w	r3, r3, #2
 8001358:	2b00      	cmp	r3, #0
 800135a:	d0ee      	beq.n	800133a <HAL_RCC_OscConfig+0x37e>
 800135c:	e014      	b.n	8001388 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800135e:	f7ff fb7b 	bl	8000a58 <HAL_GetTick>
 8001362:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001364:	e00a      	b.n	800137c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001366:	f7ff fb77 	bl	8000a58 <HAL_GetTick>
 800136a:	4602      	mov	r2, r0
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	1ad3      	subs	r3, r2, r3
 8001370:	f241 3288 	movw	r2, #5000	; 0x1388
 8001374:	4293      	cmp	r3, r2
 8001376:	d901      	bls.n	800137c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001378:	2303      	movs	r3, #3
 800137a:	e12d      	b.n	80015d8 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800137c:	4b49      	ldr	r3, [pc, #292]	; (80014a4 <HAL_RCC_OscConfig+0x4e8>)
 800137e:	6a1b      	ldr	r3, [r3, #32]
 8001380:	f003 0302 	and.w	r3, r3, #2
 8001384:	2b00      	cmp	r3, #0
 8001386:	d1ee      	bne.n	8001366 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001388:	7dfb      	ldrb	r3, [r7, #23]
 800138a:	2b01      	cmp	r3, #1
 800138c:	d105      	bne.n	800139a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800138e:	4b45      	ldr	r3, [pc, #276]	; (80014a4 <HAL_RCC_OscConfig+0x4e8>)
 8001390:	69db      	ldr	r3, [r3, #28]
 8001392:	4a44      	ldr	r2, [pc, #272]	; (80014a4 <HAL_RCC_OscConfig+0x4e8>)
 8001394:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001398:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800139e:	2b00      	cmp	r3, #0
 80013a0:	f000 808c 	beq.w	80014bc <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80013a4:	4b3f      	ldr	r3, [pc, #252]	; (80014a4 <HAL_RCC_OscConfig+0x4e8>)
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013b0:	d10e      	bne.n	80013d0 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80013b2:	4b3c      	ldr	r3, [pc, #240]	; (80014a4 <HAL_RCC_OscConfig+0x4e8>)
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80013ba:	2b08      	cmp	r3, #8
 80013bc:	d108      	bne.n	80013d0 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 80013be:	4b39      	ldr	r3, [pc, #228]	; (80014a4 <HAL_RCC_OscConfig+0x4e8>)
 80013c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80013c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013ca:	d101      	bne.n	80013d0 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 80013cc:	2301      	movs	r3, #1
 80013ce:	e103      	b.n	80015d8 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d14e      	bne.n	8001476 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 80013d8:	4b32      	ldr	r3, [pc, #200]	; (80014a4 <HAL_RCC_OscConfig+0x4e8>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d009      	beq.n	80013f8 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 80013e4:	4b2f      	ldr	r3, [pc, #188]	; (80014a4 <HAL_RCC_OscConfig+0x4e8>)
 80013e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013e8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d001      	beq.n	80013f8 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 80013f4:	2301      	movs	r3, #1
 80013f6:	e0ef      	b.n	80015d8 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 80013f8:	4b2c      	ldr	r3, [pc, #176]	; (80014ac <HAL_RCC_OscConfig+0x4f0>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013fe:	f7ff fb2b 	bl	8000a58 <HAL_GetTick>
 8001402:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8001404:	e008      	b.n	8001418 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8001406:	f7ff fb27 	bl	8000a58 <HAL_GetTick>
 800140a:	4602      	mov	r2, r0
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	2b64      	cmp	r3, #100	; 0x64
 8001412:	d901      	bls.n	8001418 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001414:	2303      	movs	r3, #3
 8001416:	e0df      	b.n	80015d8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8001418:	4b22      	ldr	r3, [pc, #136]	; (80014a4 <HAL_RCC_OscConfig+0x4e8>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001420:	2b00      	cmp	r3, #0
 8001422:	d1f0      	bne.n	8001406 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8001424:	4b1f      	ldr	r3, [pc, #124]	; (80014a4 <HAL_RCC_OscConfig+0x4e8>)
 8001426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001428:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001430:	491c      	ldr	r1, [pc, #112]	; (80014a4 <HAL_RCC_OscConfig+0x4e8>)
 8001432:	4313      	orrs	r3, r2
 8001434:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8001436:	4b1b      	ldr	r3, [pc, #108]	; (80014a4 <HAL_RCC_OscConfig+0x4e8>)
 8001438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800143a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	4918      	ldr	r1, [pc, #96]	; (80014a4 <HAL_RCC_OscConfig+0x4e8>)
 8001444:	4313      	orrs	r3, r2
 8001446:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8001448:	4b18      	ldr	r3, [pc, #96]	; (80014ac <HAL_RCC_OscConfig+0x4f0>)
 800144a:	2201      	movs	r2, #1
 800144c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800144e:	f7ff fb03 	bl	8000a58 <HAL_GetTick>
 8001452:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8001454:	e008      	b.n	8001468 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8001456:	f7ff faff 	bl	8000a58 <HAL_GetTick>
 800145a:	4602      	mov	r2, r0
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	2b64      	cmp	r3, #100	; 0x64
 8001462:	d901      	bls.n	8001468 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8001464:	2303      	movs	r3, #3
 8001466:	e0b7      	b.n	80015d8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8001468:	4b0e      	ldr	r3, [pc, #56]	; (80014a4 <HAL_RCC_OscConfig+0x4e8>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001470:	2b00      	cmp	r3, #0
 8001472:	d0f0      	beq.n	8001456 <HAL_RCC_OscConfig+0x49a>
 8001474:	e022      	b.n	80014bc <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8001476:	4b0b      	ldr	r3, [pc, #44]	; (80014a4 <HAL_RCC_OscConfig+0x4e8>)
 8001478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800147a:	4a0a      	ldr	r2, [pc, #40]	; (80014a4 <HAL_RCC_OscConfig+0x4e8>)
 800147c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001480:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8001482:	4b0a      	ldr	r3, [pc, #40]	; (80014ac <HAL_RCC_OscConfig+0x4f0>)
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001488:	f7ff fae6 	bl	8000a58 <HAL_GetTick>
 800148c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 800148e:	e00f      	b.n	80014b0 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8001490:	f7ff fae2 	bl	8000a58 <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	2b64      	cmp	r3, #100	; 0x64
 800149c:	d908      	bls.n	80014b0 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 800149e:	2303      	movs	r3, #3
 80014a0:	e09a      	b.n	80015d8 <HAL_RCC_OscConfig+0x61c>
 80014a2:	bf00      	nop
 80014a4:	40021000 	.word	0x40021000
 80014a8:	40007000 	.word	0x40007000
 80014ac:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 80014b0:	4b4b      	ldr	r3, [pc, #300]	; (80015e0 <HAL_RCC_OscConfig+0x624>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d1e9      	bne.n	8001490 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6a1b      	ldr	r3, [r3, #32]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	f000 8088 	beq.w	80015d6 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014c6:	4b46      	ldr	r3, [pc, #280]	; (80015e0 <HAL_RCC_OscConfig+0x624>)
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f003 030c 	and.w	r3, r3, #12
 80014ce:	2b08      	cmp	r3, #8
 80014d0:	d068      	beq.n	80015a4 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6a1b      	ldr	r3, [r3, #32]
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d14d      	bne.n	8001576 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014da:	4b42      	ldr	r3, [pc, #264]	; (80015e4 <HAL_RCC_OscConfig+0x628>)
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e0:	f7ff faba 	bl	8000a58 <HAL_GetTick>
 80014e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014e6:	e008      	b.n	80014fa <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014e8:	f7ff fab6 	bl	8000a58 <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d901      	bls.n	80014fa <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e06e      	b.n	80015d8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014fa:	4b39      	ldr	r3, [pc, #228]	; (80015e0 <HAL_RCC_OscConfig+0x624>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d1f0      	bne.n	80014e8 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800150a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800150e:	d10f      	bne.n	8001530 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8001510:	4b33      	ldr	r3, [pc, #204]	; (80015e0 <HAL_RCC_OscConfig+0x624>)
 8001512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	4931      	ldr	r1, [pc, #196]	; (80015e0 <HAL_RCC_OscConfig+0x624>)
 800151a:	4313      	orrs	r3, r2
 800151c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800151e:	4b30      	ldr	r3, [pc, #192]	; (80015e0 <HAL_RCC_OscConfig+0x624>)
 8001520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001522:	f023 020f 	bic.w	r2, r3, #15
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	68db      	ldr	r3, [r3, #12]
 800152a:	492d      	ldr	r1, [pc, #180]	; (80015e0 <HAL_RCC_OscConfig+0x624>)
 800152c:	4313      	orrs	r3, r2
 800152e:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001530:	4b2b      	ldr	r3, [pc, #172]	; (80015e0 <HAL_RCC_OscConfig+0x624>)
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001540:	430b      	orrs	r3, r1
 8001542:	4927      	ldr	r1, [pc, #156]	; (80015e0 <HAL_RCC_OscConfig+0x624>)
 8001544:	4313      	orrs	r3, r2
 8001546:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001548:	4b26      	ldr	r3, [pc, #152]	; (80015e4 <HAL_RCC_OscConfig+0x628>)
 800154a:	2201      	movs	r2, #1
 800154c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800154e:	f7ff fa83 	bl	8000a58 <HAL_GetTick>
 8001552:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001554:	e008      	b.n	8001568 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001556:	f7ff fa7f 	bl	8000a58 <HAL_GetTick>
 800155a:	4602      	mov	r2, r0
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	1ad3      	subs	r3, r2, r3
 8001560:	2b02      	cmp	r3, #2
 8001562:	d901      	bls.n	8001568 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8001564:	2303      	movs	r3, #3
 8001566:	e037      	b.n	80015d8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001568:	4b1d      	ldr	r3, [pc, #116]	; (80015e0 <HAL_RCC_OscConfig+0x624>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001570:	2b00      	cmp	r3, #0
 8001572:	d0f0      	beq.n	8001556 <HAL_RCC_OscConfig+0x59a>
 8001574:	e02f      	b.n	80015d6 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001576:	4b1b      	ldr	r3, [pc, #108]	; (80015e4 <HAL_RCC_OscConfig+0x628>)
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800157c:	f7ff fa6c 	bl	8000a58 <HAL_GetTick>
 8001580:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001582:	e008      	b.n	8001596 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001584:	f7ff fa68 	bl	8000a58 <HAL_GetTick>
 8001588:	4602      	mov	r2, r0
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	2b02      	cmp	r3, #2
 8001590:	d901      	bls.n	8001596 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 8001592:	2303      	movs	r3, #3
 8001594:	e020      	b.n	80015d8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001596:	4b12      	ldr	r3, [pc, #72]	; (80015e0 <HAL_RCC_OscConfig+0x624>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d1f0      	bne.n	8001584 <HAL_RCC_OscConfig+0x5c8>
 80015a2:	e018      	b.n	80015d6 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6a1b      	ldr	r3, [r3, #32]
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d101      	bne.n	80015b0 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e013      	b.n	80015d8 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80015b0:	4b0b      	ldr	r3, [pc, #44]	; (80015e0 <HAL_RCC_OscConfig+0x624>)
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d106      	bne.n	80015d2 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015ce:	429a      	cmp	r2, r3
 80015d0:	d001      	beq.n	80015d6 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e000      	b.n	80015d8 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 80015d6:	2300      	movs	r3, #0
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3718      	adds	r7, #24
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	40021000 	.word	0x40021000
 80015e4:	42420060 	.word	0x42420060

080015e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d101      	bne.n	80015fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e0d0      	b.n	800179e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015fc:	4b6a      	ldr	r3, [pc, #424]	; (80017a8 <HAL_RCC_ClockConfig+0x1c0>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 0307 	and.w	r3, r3, #7
 8001604:	683a      	ldr	r2, [r7, #0]
 8001606:	429a      	cmp	r2, r3
 8001608:	d910      	bls.n	800162c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800160a:	4b67      	ldr	r3, [pc, #412]	; (80017a8 <HAL_RCC_ClockConfig+0x1c0>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f023 0207 	bic.w	r2, r3, #7
 8001612:	4965      	ldr	r1, [pc, #404]	; (80017a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	4313      	orrs	r3, r2
 8001618:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800161a:	4b63      	ldr	r3, [pc, #396]	; (80017a8 <HAL_RCC_ClockConfig+0x1c0>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 0307 	and.w	r3, r3, #7
 8001622:	683a      	ldr	r2, [r7, #0]
 8001624:	429a      	cmp	r2, r3
 8001626:	d001      	beq.n	800162c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	e0b8      	b.n	800179e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f003 0302 	and.w	r3, r3, #2
 8001634:	2b00      	cmp	r3, #0
 8001636:	d020      	beq.n	800167a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 0304 	and.w	r3, r3, #4
 8001640:	2b00      	cmp	r3, #0
 8001642:	d005      	beq.n	8001650 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001644:	4b59      	ldr	r3, [pc, #356]	; (80017ac <HAL_RCC_ClockConfig+0x1c4>)
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	4a58      	ldr	r2, [pc, #352]	; (80017ac <HAL_RCC_ClockConfig+0x1c4>)
 800164a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800164e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 0308 	and.w	r3, r3, #8
 8001658:	2b00      	cmp	r3, #0
 800165a:	d005      	beq.n	8001668 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800165c:	4b53      	ldr	r3, [pc, #332]	; (80017ac <HAL_RCC_ClockConfig+0x1c4>)
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	4a52      	ldr	r2, [pc, #328]	; (80017ac <HAL_RCC_ClockConfig+0x1c4>)
 8001662:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001666:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001668:	4b50      	ldr	r3, [pc, #320]	; (80017ac <HAL_RCC_ClockConfig+0x1c4>)
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	494d      	ldr	r1, [pc, #308]	; (80017ac <HAL_RCC_ClockConfig+0x1c4>)
 8001676:	4313      	orrs	r3, r2
 8001678:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	2b00      	cmp	r3, #0
 8001684:	d040      	beq.n	8001708 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	2b01      	cmp	r3, #1
 800168c:	d107      	bne.n	800169e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800168e:	4b47      	ldr	r3, [pc, #284]	; (80017ac <HAL_RCC_ClockConfig+0x1c4>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d115      	bne.n	80016c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e07f      	b.n	800179e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d107      	bne.n	80016b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016a6:	4b41      	ldr	r3, [pc, #260]	; (80017ac <HAL_RCC_ClockConfig+0x1c4>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d109      	bne.n	80016c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e073      	b.n	800179e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016b6:	4b3d      	ldr	r3, [pc, #244]	; (80017ac <HAL_RCC_ClockConfig+0x1c4>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 0302 	and.w	r3, r3, #2
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d101      	bne.n	80016c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e06b      	b.n	800179e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016c6:	4b39      	ldr	r3, [pc, #228]	; (80017ac <HAL_RCC_ClockConfig+0x1c4>)
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f023 0203 	bic.w	r2, r3, #3
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	4936      	ldr	r1, [pc, #216]	; (80017ac <HAL_RCC_ClockConfig+0x1c4>)
 80016d4:	4313      	orrs	r3, r2
 80016d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016d8:	f7ff f9be 	bl	8000a58 <HAL_GetTick>
 80016dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016de:	e00a      	b.n	80016f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016e0:	f7ff f9ba 	bl	8000a58 <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d901      	bls.n	80016f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016f2:	2303      	movs	r3, #3
 80016f4:	e053      	b.n	800179e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016f6:	4b2d      	ldr	r3, [pc, #180]	; (80017ac <HAL_RCC_ClockConfig+0x1c4>)
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	f003 020c 	and.w	r2, r3, #12
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	429a      	cmp	r2, r3
 8001706:	d1eb      	bne.n	80016e0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001708:	4b27      	ldr	r3, [pc, #156]	; (80017a8 <HAL_RCC_ClockConfig+0x1c0>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0307 	and.w	r3, r3, #7
 8001710:	683a      	ldr	r2, [r7, #0]
 8001712:	429a      	cmp	r2, r3
 8001714:	d210      	bcs.n	8001738 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001716:	4b24      	ldr	r3, [pc, #144]	; (80017a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f023 0207 	bic.w	r2, r3, #7
 800171e:	4922      	ldr	r1, [pc, #136]	; (80017a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	4313      	orrs	r3, r2
 8001724:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001726:	4b20      	ldr	r3, [pc, #128]	; (80017a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0307 	and.w	r3, r3, #7
 800172e:	683a      	ldr	r2, [r7, #0]
 8001730:	429a      	cmp	r2, r3
 8001732:	d001      	beq.n	8001738 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e032      	b.n	800179e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0304 	and.w	r3, r3, #4
 8001740:	2b00      	cmp	r3, #0
 8001742:	d008      	beq.n	8001756 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001744:	4b19      	ldr	r3, [pc, #100]	; (80017ac <HAL_RCC_ClockConfig+0x1c4>)
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	4916      	ldr	r1, [pc, #88]	; (80017ac <HAL_RCC_ClockConfig+0x1c4>)
 8001752:	4313      	orrs	r3, r2
 8001754:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0308 	and.w	r3, r3, #8
 800175e:	2b00      	cmp	r3, #0
 8001760:	d009      	beq.n	8001776 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001762:	4b12      	ldr	r3, [pc, #72]	; (80017ac <HAL_RCC_ClockConfig+0x1c4>)
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	691b      	ldr	r3, [r3, #16]
 800176e:	00db      	lsls	r3, r3, #3
 8001770:	490e      	ldr	r1, [pc, #56]	; (80017ac <HAL_RCC_ClockConfig+0x1c4>)
 8001772:	4313      	orrs	r3, r2
 8001774:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001776:	f000 f821 	bl	80017bc <HAL_RCC_GetSysClockFreq>
 800177a:	4601      	mov	r1, r0
 800177c:	4b0b      	ldr	r3, [pc, #44]	; (80017ac <HAL_RCC_ClockConfig+0x1c4>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	091b      	lsrs	r3, r3, #4
 8001782:	f003 030f 	and.w	r3, r3, #15
 8001786:	4a0a      	ldr	r2, [pc, #40]	; (80017b0 <HAL_RCC_ClockConfig+0x1c8>)
 8001788:	5cd3      	ldrb	r3, [r2, r3]
 800178a:	fa21 f303 	lsr.w	r3, r1, r3
 800178e:	4a09      	ldr	r2, [pc, #36]	; (80017b4 <HAL_RCC_ClockConfig+0x1cc>)
 8001790:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001792:	4b09      	ldr	r3, [pc, #36]	; (80017b8 <HAL_RCC_ClockConfig+0x1d0>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff f91c 	bl	80009d4 <HAL_InitTick>

  return HAL_OK;
 800179c:	2300      	movs	r3, #0
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3710      	adds	r7, #16
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	40022000 	.word	0x40022000
 80017ac:	40021000 	.word	0x40021000
 80017b0:	08001c4c 	.word	0x08001c4c
 80017b4:	20000000 	.word	0x20000000
 80017b8:	20000004 	.word	0x20000004

080017bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80017c0:	b091      	sub	sp, #68	; 0x44
 80017c2:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 80017c4:	4b6a      	ldr	r3, [pc, #424]	; (8001970 <HAL_RCC_GetSysClockFreq+0x1b4>)
 80017c6:	f107 0414 	add.w	r4, r7, #20
 80017ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017cc:	c407      	stmia	r4!, {r0, r1, r2}
 80017ce:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 80017d0:	4b68      	ldr	r3, [pc, #416]	; (8001974 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80017d2:	1d3c      	adds	r4, r7, #4
 80017d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017d6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80017da:	2300      	movs	r3, #0
 80017dc:	637b      	str	r3, [r7, #52]	; 0x34
 80017de:	2300      	movs	r3, #0
 80017e0:	633b      	str	r3, [r7, #48]	; 0x30
 80017e2:	2300      	movs	r3, #0
 80017e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80017e6:	2300      	movs	r3, #0
 80017e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t sysclockfreq = 0U;
 80017ea:	2300      	movs	r3, #0
 80017ec:	63bb      	str	r3, [r7, #56]	; 0x38
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 80017ee:	2300      	movs	r3, #0
 80017f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80017f2:	2300      	movs	r3, #0
 80017f4:	627b      	str	r3, [r7, #36]	; 0x24
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80017f6:	4b60      	ldr	r3, [pc, #384]	; (8001978 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	637b      	str	r3, [r7, #52]	; 0x34

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80017fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017fe:	f003 030c 	and.w	r3, r3, #12
 8001802:	2b04      	cmp	r3, #4
 8001804:	d002      	beq.n	800180c <HAL_RCC_GetSysClockFreq+0x50>
 8001806:	2b08      	cmp	r3, #8
 8001808:	d003      	beq.n	8001812 <HAL_RCC_GetSysClockFreq+0x56>
 800180a:	e0a7      	b.n	800195c <HAL_RCC_GetSysClockFreq+0x1a0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800180c:	4b5b      	ldr	r3, [pc, #364]	; (800197c <HAL_RCC_GetSysClockFreq+0x1c0>)
 800180e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001810:	e0a7      	b.n	8001962 <HAL_RCC_GetSysClockFreq+0x1a6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001814:	0c9b      	lsrs	r3, r3, #18
 8001816:	f003 030f 	and.w	r3, r3, #15
 800181a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800181e:	4413      	add	r3, r2
 8001820:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8001824:	62fb      	str	r3, [r7, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001828:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800182c:	2b00      	cmp	r3, #0
 800182e:	f000 808d 	beq.w	800194c <HAL_RCC_GetSysClockFreq+0x190>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8001832:	4b51      	ldr	r3, [pc, #324]	; (8001978 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001836:	f003 030f 	and.w	r3, r3, #15
 800183a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800183e:	4413      	add	r3, r2
 8001840:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8001844:	633b      	str	r3, [r7, #48]	; 0x30
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8001846:	4b4c      	ldr	r3, [pc, #304]	; (8001978 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800184a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d06a      	beq.n	8001928 <HAL_RCC_GetSysClockFreq+0x16c>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8001852:	4b49      	ldr	r3, [pc, #292]	; (8001978 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001856:	091b      	lsrs	r3, r3, #4
 8001858:	f003 030f 	and.w	r3, r3, #15
 800185c:	3301      	adds	r3, #1
 800185e:	62bb      	str	r3, [r7, #40]	; 0x28
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8001860:	4b45      	ldr	r3, [pc, #276]	; (8001978 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001864:	0a1b      	lsrs	r3, r3, #8
 8001866:	f003 030f 	and.w	r3, r3, #15
 800186a:	3302      	adds	r3, #2
 800186c:	627b      	str	r3, [r7, #36]	; 0x24
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 800186e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001870:	4619      	mov	r1, r3
 8001872:	f04f 0200 	mov.w	r2, #0
 8001876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001878:	f04f 0400 	mov.w	r4, #0
 800187c:	fb03 f502 	mul.w	r5, r3, r2
 8001880:	fb01 f004 	mul.w	r0, r1, r4
 8001884:	4428      	add	r0, r5
 8001886:	fba1 5603 	umull	r5, r6, r1, r3
 800188a:	1983      	adds	r3, r0, r6
 800188c:	461e      	mov	r6, r3
 800188e:	4629      	mov	r1, r5
 8001890:	4632      	mov	r2, r6
 8001892:	f04f 0300 	mov.w	r3, #0
 8001896:	f04f 0400 	mov.w	r4, #0
 800189a:	0154      	lsls	r4, r2, #5
 800189c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80018a0:	014b      	lsls	r3, r1, #5
 80018a2:	4619      	mov	r1, r3
 80018a4:	4622      	mov	r2, r4
 80018a6:	1b49      	subs	r1, r1, r5
 80018a8:	eb62 0206 	sbc.w	r2, r2, r6
 80018ac:	f04f 0300 	mov.w	r3, #0
 80018b0:	f04f 0400 	mov.w	r4, #0
 80018b4:	0194      	lsls	r4, r2, #6
 80018b6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80018ba:	018b      	lsls	r3, r1, #6
 80018bc:	1a5b      	subs	r3, r3, r1
 80018be:	eb64 0402 	sbc.w	r4, r4, r2
 80018c2:	f04f 0100 	mov.w	r1, #0
 80018c6:	f04f 0200 	mov.w	r2, #0
 80018ca:	00e2      	lsls	r2, r4, #3
 80018cc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80018d0:	00d9      	lsls	r1, r3, #3
 80018d2:	460b      	mov	r3, r1
 80018d4:	4614      	mov	r4, r2
 80018d6:	195b      	adds	r3, r3, r5
 80018d8:	eb44 0406 	adc.w	r4, r4, r6
 80018dc:	f04f 0100 	mov.w	r1, #0
 80018e0:	f04f 0200 	mov.w	r2, #0
 80018e4:	0262      	lsls	r2, r4, #9
 80018e6:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80018ea:	0259      	lsls	r1, r3, #9
 80018ec:	460b      	mov	r3, r1
 80018ee:	4614      	mov	r4, r2
 80018f0:	4698      	mov	r8, r3
 80018f2:	46a1      	mov	r9, r4
 80018f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018f6:	4619      	mov	r1, r3
 80018f8:	f04f 0200 	mov.w	r2, #0
 80018fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018fe:	f04f 0400 	mov.w	r4, #0
 8001902:	fb03 f502 	mul.w	r5, r3, r2
 8001906:	fb01 f004 	mul.w	r0, r1, r4
 800190a:	4428      	add	r0, r5
 800190c:	fba1 3403 	umull	r3, r4, r1, r3
 8001910:	1902      	adds	r2, r0, r4
 8001912:	4614      	mov	r4, r2
 8001914:	461a      	mov	r2, r3
 8001916:	4623      	mov	r3, r4
 8001918:	4640      	mov	r0, r8
 800191a:	4649      	mov	r1, r9
 800191c:	f7fe fc82 	bl	8000224 <__aeabi_uldivmod>
 8001920:	4603      	mov	r3, r0
 8001922:	460c      	mov	r4, r1
 8001924:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001926:	e007      	b.n	8001938 <HAL_RCC_GetSysClockFreq+0x17c>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8001928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800192a:	4a14      	ldr	r2, [pc, #80]	; (800197c <HAL_RCC_GetSysClockFreq+0x1c0>)
 800192c:	fb02 f203 	mul.w	r2, r2, r3
 8001930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001932:	fbb2 f3f3 	udiv	r3, r2, r3
 8001936:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8001938:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800193c:	461a      	mov	r2, r3
 800193e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001940:	4293      	cmp	r3, r2
 8001942:	d108      	bne.n	8001956 <HAL_RCC_GetSysClockFreq+0x19a>
        {
          pllclk = pllclk / 2;
 8001944:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001946:	085b      	lsrs	r3, r3, #1
 8001948:	63fb      	str	r3, [r7, #60]	; 0x3c
 800194a:	e004      	b.n	8001956 <HAL_RCC_GetSysClockFreq+0x19a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800194c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800194e:	4a0c      	ldr	r2, [pc, #48]	; (8001980 <HAL_RCC_GetSysClockFreq+0x1c4>)
 8001950:	fb02 f303 	mul.w	r3, r2, r3
 8001954:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      sysclockfreq = pllclk;
 8001956:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001958:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800195a:	e002      	b.n	8001962 <HAL_RCC_GetSysClockFreq+0x1a6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800195c:	4b07      	ldr	r3, [pc, #28]	; (800197c <HAL_RCC_GetSysClockFreq+0x1c0>)
 800195e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001960:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001964:	4618      	mov	r0, r3
 8001966:	3744      	adds	r7, #68	; 0x44
 8001968:	46bd      	mov	sp, r7
 800196a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800196e:	bf00      	nop
 8001970:	08001c2c 	.word	0x08001c2c
 8001974:	08001c3c 	.word	0x08001c3c
 8001978:	40021000 	.word	0x40021000
 800197c:	007a1200 	.word	0x007a1200
 8001980:	003d0900 	.word	0x003d0900

08001984 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001984:	b480      	push	{r7}
 8001986:	b085      	sub	sp, #20
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800198c:	4b0a      	ldr	r3, [pc, #40]	; (80019b8 <RCC_Delay+0x34>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a0a      	ldr	r2, [pc, #40]	; (80019bc <RCC_Delay+0x38>)
 8001992:	fba2 2303 	umull	r2, r3, r2, r3
 8001996:	0a5b      	lsrs	r3, r3, #9
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	fb02 f303 	mul.w	r3, r2, r3
 800199e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80019a0:	bf00      	nop
  }
  while (Delay --);
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	1e5a      	subs	r2, r3, #1
 80019a6:	60fa      	str	r2, [r7, #12]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d1f9      	bne.n	80019a0 <RCC_Delay+0x1c>
}
 80019ac:	bf00      	nop
 80019ae:	3714      	adds	r7, #20
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bc80      	pop	{r7}
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	20000000 	.word	0x20000000
 80019bc:	10624dd3 	.word	0x10624dd3

080019c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d101      	bne.n	80019d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e01d      	b.n	8001a0e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d106      	bne.n	80019ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2200      	movs	r2, #0
 80019e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f7fe ff32 	bl	8000850 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2202      	movs	r2, #2
 80019f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	3304      	adds	r3, #4
 80019fc:	4619      	mov	r1, r3
 80019fe:	4610      	mov	r0, r2
 8001a00:	f000 f82c 	bl	8001a5c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2201      	movs	r2, #1
 8001a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a0c:	2300      	movs	r3, #0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001a16:	b480      	push	{r7}
 8001a18:	b085      	sub	sp, #20
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2202      	movs	r2, #2
 8001a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	f003 0307 	and.w	r3, r3, #7
 8001a30:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	2b06      	cmp	r3, #6
 8001a36:	d007      	beq.n	8001a48 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f042 0201 	orr.w	r2, r2, #1
 8001a46:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3714      	adds	r7, #20
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bc80      	pop	{r7}
 8001a5a:	4770      	bx	lr

08001a5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b085      	sub	sp, #20
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	4a2d      	ldr	r2, [pc, #180]	; (8001b24 <TIM_Base_SetConfig+0xc8>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d00f      	beq.n	8001a94 <TIM_Base_SetConfig+0x38>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a7a:	d00b      	beq.n	8001a94 <TIM_Base_SetConfig+0x38>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	4a2a      	ldr	r2, [pc, #168]	; (8001b28 <TIM_Base_SetConfig+0xcc>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d007      	beq.n	8001a94 <TIM_Base_SetConfig+0x38>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	4a29      	ldr	r2, [pc, #164]	; (8001b2c <TIM_Base_SetConfig+0xd0>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d003      	beq.n	8001a94 <TIM_Base_SetConfig+0x38>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	4a28      	ldr	r2, [pc, #160]	; (8001b30 <TIM_Base_SetConfig+0xd4>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d108      	bne.n	8001aa6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	68fa      	ldr	r2, [r7, #12]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4a1e      	ldr	r2, [pc, #120]	; (8001b24 <TIM_Base_SetConfig+0xc8>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d00f      	beq.n	8001ace <TIM_Base_SetConfig+0x72>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ab4:	d00b      	beq.n	8001ace <TIM_Base_SetConfig+0x72>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a1b      	ldr	r2, [pc, #108]	; (8001b28 <TIM_Base_SetConfig+0xcc>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d007      	beq.n	8001ace <TIM_Base_SetConfig+0x72>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a1a      	ldr	r2, [pc, #104]	; (8001b2c <TIM_Base_SetConfig+0xd0>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d003      	beq.n	8001ace <TIM_Base_SetConfig+0x72>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4a19      	ldr	r2, [pc, #100]	; (8001b30 <TIM_Base_SetConfig+0xd4>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d108      	bne.n	8001ae0 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ad4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	68fa      	ldr	r2, [r7, #12]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	695b      	ldr	r3, [r3, #20]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	68fa      	ldr	r2, [r7, #12]
 8001af2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	689a      	ldr	r2, [r3, #8]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	4a07      	ldr	r2, [pc, #28]	; (8001b24 <TIM_Base_SetConfig+0xc8>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d103      	bne.n	8001b14 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	691a      	ldr	r2, [r3, #16]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2201      	movs	r2, #1
 8001b18:	615a      	str	r2, [r3, #20]
}
 8001b1a:	bf00      	nop
 8001b1c:	3714      	adds	r7, #20
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bc80      	pop	{r7}
 8001b22:	4770      	bx	lr
 8001b24:	40012c00 	.word	0x40012c00
 8001b28:	40000400 	.word	0x40000400
 8001b2c:	40000800 	.word	0x40000800
 8001b30:	40000c00 	.word	0x40000c00

08001b34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b085      	sub	sp, #20
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d101      	bne.n	8001b4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001b48:	2302      	movs	r3, #2
 8001b4a:	e032      	b.n	8001bb2 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2202      	movs	r2, #2
 8001b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b72:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	68fa      	ldr	r2, [r7, #12]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001b84:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	68ba      	ldr	r2, [r7, #8]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	68fa      	ldr	r2, [r7, #12]
 8001b96:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	68ba      	ldr	r2, [r7, #8]
 8001b9e:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2200      	movs	r2, #0
 8001bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3714      	adds	r7, #20
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bc80      	pop	{r7}
 8001bba:	4770      	bx	lr

08001bbc <__libc_init_array>:
 8001bbc:	b570      	push	{r4, r5, r6, lr}
 8001bbe:	2500      	movs	r5, #0
 8001bc0:	4e0c      	ldr	r6, [pc, #48]	; (8001bf4 <__libc_init_array+0x38>)
 8001bc2:	4c0d      	ldr	r4, [pc, #52]	; (8001bf8 <__libc_init_array+0x3c>)
 8001bc4:	1ba4      	subs	r4, r4, r6
 8001bc6:	10a4      	asrs	r4, r4, #2
 8001bc8:	42a5      	cmp	r5, r4
 8001bca:	d109      	bne.n	8001be0 <__libc_init_array+0x24>
 8001bcc:	f000 f822 	bl	8001c14 <_init>
 8001bd0:	2500      	movs	r5, #0
 8001bd2:	4e0a      	ldr	r6, [pc, #40]	; (8001bfc <__libc_init_array+0x40>)
 8001bd4:	4c0a      	ldr	r4, [pc, #40]	; (8001c00 <__libc_init_array+0x44>)
 8001bd6:	1ba4      	subs	r4, r4, r6
 8001bd8:	10a4      	asrs	r4, r4, #2
 8001bda:	42a5      	cmp	r5, r4
 8001bdc:	d105      	bne.n	8001bea <__libc_init_array+0x2e>
 8001bde:	bd70      	pop	{r4, r5, r6, pc}
 8001be0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001be4:	4798      	blx	r3
 8001be6:	3501      	adds	r5, #1
 8001be8:	e7ee      	b.n	8001bc8 <__libc_init_array+0xc>
 8001bea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001bee:	4798      	blx	r3
 8001bf0:	3501      	adds	r5, #1
 8001bf2:	e7f2      	b.n	8001bda <__libc_init_array+0x1e>
 8001bf4:	08001c64 	.word	0x08001c64
 8001bf8:	08001c64 	.word	0x08001c64
 8001bfc:	08001c64 	.word	0x08001c64
 8001c00:	08001c68 	.word	0x08001c68

08001c04 <memset>:
 8001c04:	4603      	mov	r3, r0
 8001c06:	4402      	add	r2, r0
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d100      	bne.n	8001c0e <memset+0xa>
 8001c0c:	4770      	bx	lr
 8001c0e:	f803 1b01 	strb.w	r1, [r3], #1
 8001c12:	e7f9      	b.n	8001c08 <memset+0x4>

08001c14 <_init>:
 8001c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c16:	bf00      	nop
 8001c18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c1a:	bc08      	pop	{r3}
 8001c1c:	469e      	mov	lr, r3
 8001c1e:	4770      	bx	lr

08001c20 <_fini>:
 8001c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c22:	bf00      	nop
 8001c24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c26:	bc08      	pop	{r3}
 8001c28:	469e      	mov	lr, r3
 8001c2a:	4770      	bx	lr
