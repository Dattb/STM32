
black_pill_test_SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002418  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002524  08002524  00012524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002548  08002548  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08002548  08002548  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002548  08002548  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002548  08002548  00012548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800254c  0800254c  0001254c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002550  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  20000010  08002560  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000128  08002560  00020128  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005e2f  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001338  00000000  00000000  00025e68  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000668  00000000  00000000  000271a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000005c0  00000000  00000000  00027808  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00012936  00000000  00000000  00027dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000055bd  00000000  00000000  0003a6fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00065c04  00000000  00000000  0003fcbb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000a58bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001888  00000000  00000000  000a593c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	0800250c 	.word	0x0800250c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	0800250c 	.word	0x0800250c

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 facc 	bl	80006ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f82e 	bl	80001b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f8f0 	bl	800033c <MX_GPIO_Init>
  MX_DMA_Init();
 800015c:	f000 f8d0 	bl	8000300 <MX_DMA_Init>
  MX_SPI1_Init();
 8000160:	f000 f864 	bl	800022c <MX_SPI1_Init>
  MX_SPI2_Init();
 8000164:	f000 f898 	bl	8000298 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
HAL_SPI_Receive(&hspi2,&SPI2_Rx_Buff,1,100);
 8000168:	2364      	movs	r3, #100	; 0x64
 800016a:	2201      	movs	r2, #1
 800016c:	490c      	ldr	r1, [pc, #48]	; (80001a0 <main+0x54>)
 800016e:	480d      	ldr	r0, [pc, #52]	; (80001a4 <main+0x58>)
 8000170:	f001 fd15 	bl	8001b9e <HAL_SPI_Receive>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8000174:	2200      	movs	r2, #0
 8000176:	2110      	movs	r1, #16
 8000178:	480b      	ldr	r0, [pc, #44]	; (80001a8 <main+0x5c>)
 800017a:	f000 ff79 	bl	8001070 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi1,&SPI1_Tx_Buff,1, 100);
 800017e:	2364      	movs	r3, #100	; 0x64
 8000180:	2201      	movs	r2, #1
 8000182:	490a      	ldr	r1, [pc, #40]	; (80001ac <main+0x60>)
 8000184:	480a      	ldr	r0, [pc, #40]	; (80001b0 <main+0x64>)
 8000186:	f001 fbd6 	bl	8001936 <HAL_SPI_Transmit>
	  HAL_Delay(1000);
 800018a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800018e:	f000 fb0f 	bl	80007b0 <HAL_Delay>
	  SPI1_Tx_Buff++;
 8000192:	4b06      	ldr	r3, [pc, #24]	; (80001ac <main+0x60>)
 8000194:	781b      	ldrb	r3, [r3, #0]
 8000196:	3301      	adds	r3, #1
 8000198:	b2da      	uxtb	r2, r3
 800019a:	4b04      	ldr	r3, [pc, #16]	; (80001ac <main+0x60>)
 800019c:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800019e:	e7e9      	b.n	8000174 <main+0x28>
 80001a0:	200000c8 	.word	0x200000c8
 80001a4:	2000002c 	.word	0x2000002c
 80001a8:	40010800 	.word	0x40010800
 80001ac:	20000000 	.word	0x20000000
 80001b0:	200000cc 	.word	0x200000cc

080001b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b090      	sub	sp, #64	; 0x40
 80001b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ba:	f107 0318 	add.w	r3, r7, #24
 80001be:	2228      	movs	r2, #40	; 0x28
 80001c0:	2100      	movs	r1, #0
 80001c2:	4618      	mov	r0, r3
 80001c4:	f002 f99a 	bl	80024fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001c8:	1d3b      	adds	r3, r7, #4
 80001ca:	2200      	movs	r2, #0
 80001cc:	601a      	str	r2, [r3, #0]
 80001ce:	605a      	str	r2, [r3, #4]
 80001d0:	609a      	str	r2, [r3, #8]
 80001d2:	60da      	str	r2, [r3, #12]
 80001d4:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001d6:	2302      	movs	r3, #2
 80001d8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001da:	2301      	movs	r3, #1
 80001dc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001de:	2310      	movs	r3, #16
 80001e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001e2:	2300      	movs	r3, #0
 80001e4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001e6:	f107 0318 	add.w	r3, r7, #24
 80001ea:	4618      	mov	r0, r3
 80001ec:	f000 ff58 	bl	80010a0 <HAL_RCC_OscConfig>
 80001f0:	4603      	mov	r3, r0
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	d001      	beq.n	80001fa <SystemClock_Config+0x46>
  {
    Error_Handler();
 80001f6:	f000 f8df 	bl	80003b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001fa:	230f      	movs	r3, #15
 80001fc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80001fe:	2300      	movs	r3, #0
 8000200:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000202:	2300      	movs	r3, #0
 8000204:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000206:	2300      	movs	r3, #0
 8000208:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800020a:	2300      	movs	r3, #0
 800020c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800020e:	1d3b      	adds	r3, r7, #4
 8000210:	2100      	movs	r1, #0
 8000212:	4618      	mov	r0, r3
 8000214:	f001 f9c4 	bl	80015a0 <HAL_RCC_ClockConfig>
 8000218:	4603      	mov	r3, r0
 800021a:	2b00      	cmp	r3, #0
 800021c:	d001      	beq.n	8000222 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800021e:	f000 f8cb 	bl	80003b8 <Error_Handler>
  }
}
 8000222:	bf00      	nop
 8000224:	3740      	adds	r7, #64	; 0x40
 8000226:	46bd      	mov	sp, r7
 8000228:	bd80      	pop	{r7, pc}
	...

0800022c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000230:	4b17      	ldr	r3, [pc, #92]	; (8000290 <MX_SPI1_Init+0x64>)
 8000232:	4a18      	ldr	r2, [pc, #96]	; (8000294 <MX_SPI1_Init+0x68>)
 8000234:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000236:	4b16      	ldr	r3, [pc, #88]	; (8000290 <MX_SPI1_Init+0x64>)
 8000238:	f44f 7282 	mov.w	r2, #260	; 0x104
 800023c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800023e:	4b14      	ldr	r3, [pc, #80]	; (8000290 <MX_SPI1_Init+0x64>)
 8000240:	2200      	movs	r2, #0
 8000242:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000244:	4b12      	ldr	r3, [pc, #72]	; (8000290 <MX_SPI1_Init+0x64>)
 8000246:	2200      	movs	r2, #0
 8000248:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800024a:	4b11      	ldr	r3, [pc, #68]	; (8000290 <MX_SPI1_Init+0x64>)
 800024c:	2200      	movs	r2, #0
 800024e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000250:	4b0f      	ldr	r3, [pc, #60]	; (8000290 <MX_SPI1_Init+0x64>)
 8000252:	2200      	movs	r2, #0
 8000254:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000256:	4b0e      	ldr	r3, [pc, #56]	; (8000290 <MX_SPI1_Init+0x64>)
 8000258:	f44f 7200 	mov.w	r2, #512	; 0x200
 800025c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800025e:	4b0c      	ldr	r3, [pc, #48]	; (8000290 <MX_SPI1_Init+0x64>)
 8000260:	2200      	movs	r2, #0
 8000262:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000264:	4b0a      	ldr	r3, [pc, #40]	; (8000290 <MX_SPI1_Init+0x64>)
 8000266:	2200      	movs	r2, #0
 8000268:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800026a:	4b09      	ldr	r3, [pc, #36]	; (8000290 <MX_SPI1_Init+0x64>)
 800026c:	2200      	movs	r2, #0
 800026e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000270:	4b07      	ldr	r3, [pc, #28]	; (8000290 <MX_SPI1_Init+0x64>)
 8000272:	2200      	movs	r2, #0
 8000274:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000276:	4b06      	ldr	r3, [pc, #24]	; (8000290 <MX_SPI1_Init+0x64>)
 8000278:	220a      	movs	r2, #10
 800027a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800027c:	4804      	ldr	r0, [pc, #16]	; (8000290 <MX_SPI1_Init+0x64>)
 800027e:	f001 faf9 	bl	8001874 <HAL_SPI_Init>
 8000282:	4603      	mov	r3, r0
 8000284:	2b00      	cmp	r3, #0
 8000286:	d001      	beq.n	800028c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000288:	f000 f896 	bl	80003b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800028c:	bf00      	nop
 800028e:	bd80      	pop	{r7, pc}
 8000290:	200000cc 	.word	0x200000cc
 8000294:	40013000 	.word	0x40013000

08000298 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800029c:	4b16      	ldr	r3, [pc, #88]	; (80002f8 <MX_SPI2_Init+0x60>)
 800029e:	4a17      	ldr	r2, [pc, #92]	; (80002fc <MX_SPI2_Init+0x64>)
 80002a0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 80002a2:	4b15      	ldr	r3, [pc, #84]	; (80002f8 <MX_SPI2_Init+0x60>)
 80002a4:	2200      	movs	r2, #0
 80002a6:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80002a8:	4b13      	ldr	r3, [pc, #76]	; (80002f8 <MX_SPI2_Init+0x60>)
 80002aa:	2200      	movs	r2, #0
 80002ac:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80002ae:	4b12      	ldr	r3, [pc, #72]	; (80002f8 <MX_SPI2_Init+0x60>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80002b4:	4b10      	ldr	r3, [pc, #64]	; (80002f8 <MX_SPI2_Init+0x60>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80002ba:	4b0f      	ldr	r3, [pc, #60]	; (80002f8 <MX_SPI2_Init+0x60>)
 80002bc:	2200      	movs	r2, #0
 80002be:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 80002c0:	4b0d      	ldr	r3, [pc, #52]	; (80002f8 <MX_SPI2_Init+0x60>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80002c6:	4b0c      	ldr	r3, [pc, #48]	; (80002f8 <MX_SPI2_Init+0x60>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80002cc:	4b0a      	ldr	r3, [pc, #40]	; (80002f8 <MX_SPI2_Init+0x60>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80002d2:	4b09      	ldr	r3, [pc, #36]	; (80002f8 <MX_SPI2_Init+0x60>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80002d8:	4b07      	ldr	r3, [pc, #28]	; (80002f8 <MX_SPI2_Init+0x60>)
 80002da:	2200      	movs	r2, #0
 80002dc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80002de:	4b06      	ldr	r3, [pc, #24]	; (80002f8 <MX_SPI2_Init+0x60>)
 80002e0:	220a      	movs	r2, #10
 80002e2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80002e4:	4804      	ldr	r0, [pc, #16]	; (80002f8 <MX_SPI2_Init+0x60>)
 80002e6:	f001 fac5 	bl	8001874 <HAL_SPI_Init>
 80002ea:	4603      	mov	r3, r0
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d001      	beq.n	80002f4 <MX_SPI2_Init+0x5c>
  {
    Error_Handler();
 80002f0:	f000 f862 	bl	80003b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80002f4:	bf00      	nop
 80002f6:	bd80      	pop	{r7, pc}
 80002f8:	2000002c 	.word	0x2000002c
 80002fc:	40003800 	.word	0x40003800

08000300 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b082      	sub	sp, #8
 8000304:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000306:	4b0c      	ldr	r3, [pc, #48]	; (8000338 <MX_DMA_Init+0x38>)
 8000308:	695b      	ldr	r3, [r3, #20]
 800030a:	4a0b      	ldr	r2, [pc, #44]	; (8000338 <MX_DMA_Init+0x38>)
 800030c:	f043 0301 	orr.w	r3, r3, #1
 8000310:	6153      	str	r3, [r2, #20]
 8000312:	4b09      	ldr	r3, [pc, #36]	; (8000338 <MX_DMA_Init+0x38>)
 8000314:	695b      	ldr	r3, [r3, #20]
 8000316:	f003 0301 	and.w	r3, r3, #1
 800031a:	607b      	str	r3, [r7, #4]
 800031c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800031e:	2200      	movs	r2, #0
 8000320:	2100      	movs	r1, #0
 8000322:	200e      	movs	r0, #14
 8000324:	f000 fb3d 	bl	80009a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000328:	200e      	movs	r0, #14
 800032a:	f000 fb56 	bl	80009da <HAL_NVIC_EnableIRQ>

}
 800032e:	bf00      	nop
 8000330:	3708      	adds	r7, #8
 8000332:	46bd      	mov	sp, r7
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	40021000 	.word	0x40021000

0800033c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b086      	sub	sp, #24
 8000340:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000342:	f107 0308 	add.w	r3, r7, #8
 8000346:	2200      	movs	r2, #0
 8000348:	601a      	str	r2, [r3, #0]
 800034a:	605a      	str	r2, [r3, #4]
 800034c:	609a      	str	r2, [r3, #8]
 800034e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000350:	4b17      	ldr	r3, [pc, #92]	; (80003b0 <MX_GPIO_Init+0x74>)
 8000352:	699b      	ldr	r3, [r3, #24]
 8000354:	4a16      	ldr	r2, [pc, #88]	; (80003b0 <MX_GPIO_Init+0x74>)
 8000356:	f043 0304 	orr.w	r3, r3, #4
 800035a:	6193      	str	r3, [r2, #24]
 800035c:	4b14      	ldr	r3, [pc, #80]	; (80003b0 <MX_GPIO_Init+0x74>)
 800035e:	699b      	ldr	r3, [r3, #24]
 8000360:	f003 0304 	and.w	r3, r3, #4
 8000364:	607b      	str	r3, [r7, #4]
 8000366:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000368:	4b11      	ldr	r3, [pc, #68]	; (80003b0 <MX_GPIO_Init+0x74>)
 800036a:	699b      	ldr	r3, [r3, #24]
 800036c:	4a10      	ldr	r2, [pc, #64]	; (80003b0 <MX_GPIO_Init+0x74>)
 800036e:	f043 0308 	orr.w	r3, r3, #8
 8000372:	6193      	str	r3, [r2, #24]
 8000374:	4b0e      	ldr	r3, [pc, #56]	; (80003b0 <MX_GPIO_Init+0x74>)
 8000376:	699b      	ldr	r3, [r3, #24]
 8000378:	f003 0308 	and.w	r3, r3, #8
 800037c:	603b      	str	r3, [r7, #0]
 800037e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000380:	2201      	movs	r2, #1
 8000382:	2110      	movs	r1, #16
 8000384:	480b      	ldr	r0, [pc, #44]	; (80003b4 <MX_GPIO_Init+0x78>)
 8000386:	f000 fe73 	bl	8001070 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800038a:	2310      	movs	r3, #16
 800038c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800038e:	2301      	movs	r3, #1
 8000390:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000392:	2300      	movs	r3, #0
 8000394:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000396:	2303      	movs	r3, #3
 8000398:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800039a:	f107 0308 	add.w	r3, r7, #8
 800039e:	4619      	mov	r1, r3
 80003a0:	4804      	ldr	r0, [pc, #16]	; (80003b4 <MX_GPIO_Init+0x78>)
 80003a2:	f000 fd0b 	bl	8000dbc <HAL_GPIO_Init>

}
 80003a6:	bf00      	nop
 80003a8:	3718      	adds	r7, #24
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	40021000 	.word	0x40021000
 80003b4:	40010800 	.word	0x40010800

080003b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003b8:	b480      	push	{r7}
 80003ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80003bc:	bf00      	nop
 80003be:	46bd      	mov	sp, r7
 80003c0:	bc80      	pop	{r7}
 80003c2:	4770      	bx	lr

080003c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003c4:	b480      	push	{r7}
 80003c6:	b085      	sub	sp, #20
 80003c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003ca:	4b15      	ldr	r3, [pc, #84]	; (8000420 <HAL_MspInit+0x5c>)
 80003cc:	699b      	ldr	r3, [r3, #24]
 80003ce:	4a14      	ldr	r2, [pc, #80]	; (8000420 <HAL_MspInit+0x5c>)
 80003d0:	f043 0301 	orr.w	r3, r3, #1
 80003d4:	6193      	str	r3, [r2, #24]
 80003d6:	4b12      	ldr	r3, [pc, #72]	; (8000420 <HAL_MspInit+0x5c>)
 80003d8:	699b      	ldr	r3, [r3, #24]
 80003da:	f003 0301 	and.w	r3, r3, #1
 80003de:	60bb      	str	r3, [r7, #8]
 80003e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003e2:	4b0f      	ldr	r3, [pc, #60]	; (8000420 <HAL_MspInit+0x5c>)
 80003e4:	69db      	ldr	r3, [r3, #28]
 80003e6:	4a0e      	ldr	r2, [pc, #56]	; (8000420 <HAL_MspInit+0x5c>)
 80003e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003ec:	61d3      	str	r3, [r2, #28]
 80003ee:	4b0c      	ldr	r3, [pc, #48]	; (8000420 <HAL_MspInit+0x5c>)
 80003f0:	69db      	ldr	r3, [r3, #28]
 80003f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003f6:	607b      	str	r3, [r7, #4]
 80003f8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled 
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80003fa:	4b0a      	ldr	r3, [pc, #40]	; (8000424 <HAL_MspInit+0x60>)
 80003fc:	685b      	ldr	r3, [r3, #4]
 80003fe:	60fb      	str	r3, [r7, #12]
 8000400:	68fb      	ldr	r3, [r7, #12]
 8000402:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000406:	60fb      	str	r3, [r7, #12]
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800040e:	60fb      	str	r3, [r7, #12]
 8000410:	4a04      	ldr	r2, [pc, #16]	; (8000424 <HAL_MspInit+0x60>)
 8000412:	68fb      	ldr	r3, [r7, #12]
 8000414:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000416:	bf00      	nop
 8000418:	3714      	adds	r7, #20
 800041a:	46bd      	mov	sp, r7
 800041c:	bc80      	pop	{r7}
 800041e:	4770      	bx	lr
 8000420:	40021000 	.word	0x40021000
 8000424:	40010000 	.word	0x40010000

08000428 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b08a      	sub	sp, #40	; 0x28
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000430:	f107 0318 	add.w	r3, r7, #24
 8000434:	2200      	movs	r2, #0
 8000436:	601a      	str	r2, [r3, #0]
 8000438:	605a      	str	r2, [r3, #4]
 800043a:	609a      	str	r2, [r3, #8]
 800043c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	4a52      	ldr	r2, [pc, #328]	; (800058c <HAL_SPI_MspInit+0x164>)
 8000444:	4293      	cmp	r3, r2
 8000446:	d138      	bne.n	80004ba <HAL_SPI_MspInit+0x92>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000448:	4b51      	ldr	r3, [pc, #324]	; (8000590 <HAL_SPI_MspInit+0x168>)
 800044a:	699b      	ldr	r3, [r3, #24]
 800044c:	4a50      	ldr	r2, [pc, #320]	; (8000590 <HAL_SPI_MspInit+0x168>)
 800044e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000452:	6193      	str	r3, [r2, #24]
 8000454:	4b4e      	ldr	r3, [pc, #312]	; (8000590 <HAL_SPI_MspInit+0x168>)
 8000456:	699b      	ldr	r3, [r3, #24]
 8000458:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800045c:	617b      	str	r3, [r7, #20]
 800045e:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000460:	4b4b      	ldr	r3, [pc, #300]	; (8000590 <HAL_SPI_MspInit+0x168>)
 8000462:	699b      	ldr	r3, [r3, #24]
 8000464:	4a4a      	ldr	r2, [pc, #296]	; (8000590 <HAL_SPI_MspInit+0x168>)
 8000466:	f043 0304 	orr.w	r3, r3, #4
 800046a:	6193      	str	r3, [r2, #24]
 800046c:	4b48      	ldr	r3, [pc, #288]	; (8000590 <HAL_SPI_MspInit+0x168>)
 800046e:	699b      	ldr	r3, [r3, #24]
 8000470:	f003 0304 	and.w	r3, r3, #4
 8000474:	613b      	str	r3, [r7, #16]
 8000476:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000478:	23a0      	movs	r3, #160	; 0xa0
 800047a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800047c:	2302      	movs	r3, #2
 800047e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000480:	2303      	movs	r3, #3
 8000482:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000484:	f107 0318 	add.w	r3, r7, #24
 8000488:	4619      	mov	r1, r3
 800048a:	4842      	ldr	r0, [pc, #264]	; (8000594 <HAL_SPI_MspInit+0x16c>)
 800048c:	f000 fc96 	bl	8000dbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000490:	2340      	movs	r3, #64	; 0x40
 8000492:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000494:	2300      	movs	r3, #0
 8000496:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000498:	2300      	movs	r3, #0
 800049a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800049c:	f107 0318 	add.w	r3, r7, #24
 80004a0:	4619      	mov	r1, r3
 80004a2:	483c      	ldr	r0, [pc, #240]	; (8000594 <HAL_SPI_MspInit+0x16c>)
 80004a4:	f000 fc8a 	bl	8000dbc <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80004a8:	2200      	movs	r2, #0
 80004aa:	2100      	movs	r1, #0
 80004ac:	2023      	movs	r0, #35	; 0x23
 80004ae:	f000 fa78 	bl	80009a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80004b2:	2023      	movs	r0, #35	; 0x23
 80004b4:	f000 fa91 	bl	80009da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80004b8:	e064      	b.n	8000584 <HAL_SPI_MspInit+0x15c>
  else if(hspi->Instance==SPI2)
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	4a36      	ldr	r2, [pc, #216]	; (8000598 <HAL_SPI_MspInit+0x170>)
 80004c0:	4293      	cmp	r3, r2
 80004c2:	d15f      	bne.n	8000584 <HAL_SPI_MspInit+0x15c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80004c4:	4b32      	ldr	r3, [pc, #200]	; (8000590 <HAL_SPI_MspInit+0x168>)
 80004c6:	69db      	ldr	r3, [r3, #28]
 80004c8:	4a31      	ldr	r2, [pc, #196]	; (8000590 <HAL_SPI_MspInit+0x168>)
 80004ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004ce:	61d3      	str	r3, [r2, #28]
 80004d0:	4b2f      	ldr	r3, [pc, #188]	; (8000590 <HAL_SPI_MspInit+0x168>)
 80004d2:	69db      	ldr	r3, [r3, #28]
 80004d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004d8:	60fb      	str	r3, [r7, #12]
 80004da:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004dc:	4b2c      	ldr	r3, [pc, #176]	; (8000590 <HAL_SPI_MspInit+0x168>)
 80004de:	699b      	ldr	r3, [r3, #24]
 80004e0:	4a2b      	ldr	r2, [pc, #172]	; (8000590 <HAL_SPI_MspInit+0x168>)
 80004e2:	f043 0308 	orr.w	r3, r3, #8
 80004e6:	6193      	str	r3, [r2, #24]
 80004e8:	4b29      	ldr	r3, [pc, #164]	; (8000590 <HAL_SPI_MspInit+0x168>)
 80004ea:	699b      	ldr	r3, [r3, #24]
 80004ec:	f003 0308 	and.w	r3, r3, #8
 80004f0:	60bb      	str	r3, [r7, #8]
 80004f2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80004f4:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 80004f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004fa:	2300      	movs	r3, #0
 80004fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004fe:	2300      	movs	r3, #0
 8000500:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000502:	f107 0318 	add.w	r3, r7, #24
 8000506:	4619      	mov	r1, r3
 8000508:	4824      	ldr	r0, [pc, #144]	; (800059c <HAL_SPI_MspInit+0x174>)
 800050a:	f000 fc57 	bl	8000dbc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800050e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000512:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000514:	2302      	movs	r3, #2
 8000516:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000518:	2303      	movs	r3, #3
 800051a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800051c:	f107 0318 	add.w	r3, r7, #24
 8000520:	4619      	mov	r1, r3
 8000522:	481e      	ldr	r0, [pc, #120]	; (800059c <HAL_SPI_MspInit+0x174>)
 8000524:	f000 fc4a 	bl	8000dbc <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8000528:	4b1d      	ldr	r3, [pc, #116]	; (80005a0 <HAL_SPI_MspInit+0x178>)
 800052a:	4a1e      	ldr	r2, [pc, #120]	; (80005a4 <HAL_SPI_MspInit+0x17c>)
 800052c:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800052e:	4b1c      	ldr	r3, [pc, #112]	; (80005a0 <HAL_SPI_MspInit+0x178>)
 8000530:	2200      	movs	r2, #0
 8000532:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000534:	4b1a      	ldr	r3, [pc, #104]	; (80005a0 <HAL_SPI_MspInit+0x178>)
 8000536:	2200      	movs	r2, #0
 8000538:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800053a:	4b19      	ldr	r3, [pc, #100]	; (80005a0 <HAL_SPI_MspInit+0x178>)
 800053c:	2280      	movs	r2, #128	; 0x80
 800053e:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000540:	4b17      	ldr	r3, [pc, #92]	; (80005a0 <HAL_SPI_MspInit+0x178>)
 8000542:	2200      	movs	r2, #0
 8000544:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000546:	4b16      	ldr	r3, [pc, #88]	; (80005a0 <HAL_SPI_MspInit+0x178>)
 8000548:	2200      	movs	r2, #0
 800054a:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 800054c:	4b14      	ldr	r3, [pc, #80]	; (80005a0 <HAL_SPI_MspInit+0x178>)
 800054e:	2220      	movs	r2, #32
 8000550:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000552:	4b13      	ldr	r3, [pc, #76]	; (80005a0 <HAL_SPI_MspInit+0x178>)
 8000554:	2200      	movs	r2, #0
 8000556:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8000558:	4811      	ldr	r0, [pc, #68]	; (80005a0 <HAL_SPI_MspInit+0x178>)
 800055a:	f000 fa59 	bl	8000a10 <HAL_DMA_Init>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <HAL_SPI_MspInit+0x140>
      Error_Handler();
 8000564:	f7ff ff28 	bl	80003b8 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	4a0d      	ldr	r2, [pc, #52]	; (80005a0 <HAL_SPI_MspInit+0x178>)
 800056c:	64da      	str	r2, [r3, #76]	; 0x4c
 800056e:	4a0c      	ldr	r2, [pc, #48]	; (80005a0 <HAL_SPI_MspInit+0x178>)
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8000574:	2200      	movs	r2, #0
 8000576:	2100      	movs	r1, #0
 8000578:	2024      	movs	r0, #36	; 0x24
 800057a:	f000 fa12 	bl	80009a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800057e:	2024      	movs	r0, #36	; 0x24
 8000580:	f000 fa2b 	bl	80009da <HAL_NVIC_EnableIRQ>
}
 8000584:	bf00      	nop
 8000586:	3728      	adds	r7, #40	; 0x28
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	40013000 	.word	0x40013000
 8000590:	40021000 	.word	0x40021000
 8000594:	40010800 	.word	0x40010800
 8000598:	40003800 	.word	0x40003800
 800059c:	40010c00 	.word	0x40010c00
 80005a0:	20000084 	.word	0x20000084
 80005a4:	40020044 	.word	0x40020044

080005a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80005ac:	bf00      	nop
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bc80      	pop	{r7}
 80005b2:	4770      	bx	lr

080005b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005b8:	e7fe      	b.n	80005b8 <HardFault_Handler+0x4>

080005ba <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005ba:	b480      	push	{r7}
 80005bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005be:	e7fe      	b.n	80005be <MemManage_Handler+0x4>

080005c0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005c4:	e7fe      	b.n	80005c4 <BusFault_Handler+0x4>

080005c6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005c6:	b480      	push	{r7}
 80005c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005ca:	e7fe      	b.n	80005ca <UsageFault_Handler+0x4>

080005cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005d0:	bf00      	nop
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bc80      	pop	{r7}
 80005d6:	4770      	bx	lr

080005d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005dc:	bf00      	nop
 80005de:	46bd      	mov	sp, r7
 80005e0:	bc80      	pop	{r7}
 80005e2:	4770      	bx	lr

080005e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005e8:	bf00      	nop
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bc80      	pop	{r7}
 80005ee:	4770      	bx	lr

080005f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005f4:	f000 f8c0 	bl	8000778 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005f8:	bf00      	nop
 80005fa:	bd80      	pop	{r7, pc}

080005fc <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8000600:	4802      	ldr	r0, [pc, #8]	; (800060c <DMA1_Channel4_IRQHandler+0x10>)
 8000602:	f000 fad5 	bl	8000bb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000606:	bf00      	nop
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	20000084 	.word	0x20000084

08000610 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000614:	4802      	ldr	r0, [pc, #8]	; (8000620 <SPI1_IRQHandler+0x10>)
 8000616:	f001 fd6d 	bl	80020f4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800061a:	bf00      	nop
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	200000cc 	.word	0x200000cc

08000624 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8000628:	4802      	ldr	r0, [pc, #8]	; (8000634 <SPI2_IRQHandler+0x10>)
 800062a:	f001 fd63 	bl	80020f4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800062e:	bf00      	nop
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	2000002c 	.word	0x2000002c

08000638 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800063c:	4b15      	ldr	r3, [pc, #84]	; (8000694 <SystemInit+0x5c>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a14      	ldr	r2, [pc, #80]	; (8000694 <SystemInit+0x5c>)
 8000642:	f043 0301 	orr.w	r3, r3, #1
 8000646:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000648:	4b12      	ldr	r3, [pc, #72]	; (8000694 <SystemInit+0x5c>)
 800064a:	685a      	ldr	r2, [r3, #4]
 800064c:	4911      	ldr	r1, [pc, #68]	; (8000694 <SystemInit+0x5c>)
 800064e:	4b12      	ldr	r3, [pc, #72]	; (8000698 <SystemInit+0x60>)
 8000650:	4013      	ands	r3, r2
 8000652:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000654:	4b0f      	ldr	r3, [pc, #60]	; (8000694 <SystemInit+0x5c>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a0e      	ldr	r2, [pc, #56]	; (8000694 <SystemInit+0x5c>)
 800065a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800065e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000662:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000664:	4b0b      	ldr	r3, [pc, #44]	; (8000694 <SystemInit+0x5c>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a0a      	ldr	r2, [pc, #40]	; (8000694 <SystemInit+0x5c>)
 800066a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800066e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000670:	4b08      	ldr	r3, [pc, #32]	; (8000694 <SystemInit+0x5c>)
 8000672:	685b      	ldr	r3, [r3, #4]
 8000674:	4a07      	ldr	r2, [pc, #28]	; (8000694 <SystemInit+0x5c>)
 8000676:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800067a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800067c:	4b05      	ldr	r3, [pc, #20]	; (8000694 <SystemInit+0x5c>)
 800067e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000682:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000684:	4b05      	ldr	r3, [pc, #20]	; (800069c <SystemInit+0x64>)
 8000686:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800068a:	609a      	str	r2, [r3, #8]
#endif 
}
 800068c:	bf00      	nop
 800068e:	46bd      	mov	sp, r7
 8000690:	bc80      	pop	{r7}
 8000692:	4770      	bx	lr
 8000694:	40021000 	.word	0x40021000
 8000698:	f8ff0000 	.word	0xf8ff0000
 800069c:	e000ed00 	.word	0xe000ed00

080006a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80006a0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80006a2:	e003      	b.n	80006ac <LoopCopyDataInit>

080006a4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80006a4:	4b0b      	ldr	r3, [pc, #44]	; (80006d4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80006a6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80006a8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80006aa:	3104      	adds	r1, #4

080006ac <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80006ac:	480a      	ldr	r0, [pc, #40]	; (80006d8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80006ae:	4b0b      	ldr	r3, [pc, #44]	; (80006dc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80006b0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80006b2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80006b4:	d3f6      	bcc.n	80006a4 <CopyDataInit>
  ldr r2, =_sbss
 80006b6:	4a0a      	ldr	r2, [pc, #40]	; (80006e0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80006b8:	e002      	b.n	80006c0 <LoopFillZerobss>

080006ba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80006ba:	2300      	movs	r3, #0
  str r3, [r2], #4
 80006bc:	f842 3b04 	str.w	r3, [r2], #4

080006c0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80006c0:	4b08      	ldr	r3, [pc, #32]	; (80006e4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80006c2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80006c4:	d3f9      	bcc.n	80006ba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006c6:	f7ff ffb7 	bl	8000638 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006ca:	f001 fef3 	bl	80024b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006ce:	f7ff fd3d 	bl	800014c <main>
  bx lr
 80006d2:	4770      	bx	lr
  ldr r3, =_sidata
 80006d4:	08002550 	.word	0x08002550
  ldr r0, =_sdata
 80006d8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80006dc:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 80006e0:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 80006e4:	20000128 	.word	0x20000128

080006e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006e8:	e7fe      	b.n	80006e8 <ADC1_2_IRQHandler>
	...

080006ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006f0:	4b08      	ldr	r3, [pc, #32]	; (8000714 <HAL_Init+0x28>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4a07      	ldr	r2, [pc, #28]	; (8000714 <HAL_Init+0x28>)
 80006f6:	f043 0310 	orr.w	r3, r3, #16
 80006fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006fc:	2003      	movs	r0, #3
 80006fe:	f000 f945 	bl	800098c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000702:	2000      	movs	r0, #0
 8000704:	f000 f808 	bl	8000718 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000708:	f7ff fe5c 	bl	80003c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800070c:	2300      	movs	r3, #0
}
 800070e:	4618      	mov	r0, r3
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	40022000 	.word	0x40022000

08000718 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000720:	4b12      	ldr	r3, [pc, #72]	; (800076c <HAL_InitTick+0x54>)
 8000722:	681a      	ldr	r2, [r3, #0]
 8000724:	4b12      	ldr	r3, [pc, #72]	; (8000770 <HAL_InitTick+0x58>)
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	4619      	mov	r1, r3
 800072a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800072e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000732:	fbb2 f3f3 	udiv	r3, r2, r3
 8000736:	4618      	mov	r0, r3
 8000738:	f000 f95d 	bl	80009f6 <HAL_SYSTICK_Config>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000742:	2301      	movs	r3, #1
 8000744:	e00e      	b.n	8000764 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	2b0f      	cmp	r3, #15
 800074a:	d80a      	bhi.n	8000762 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800074c:	2200      	movs	r2, #0
 800074e:	6879      	ldr	r1, [r7, #4]
 8000750:	f04f 30ff 	mov.w	r0, #4294967295
 8000754:	f000 f925 	bl	80009a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000758:	4a06      	ldr	r2, [pc, #24]	; (8000774 <HAL_InitTick+0x5c>)
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800075e:	2300      	movs	r3, #0
 8000760:	e000      	b.n	8000764 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000762:	2301      	movs	r3, #1
}
 8000764:	4618      	mov	r0, r3
 8000766:	3708      	adds	r7, #8
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	20000004 	.word	0x20000004
 8000770:	2000000c 	.word	0x2000000c
 8000774:	20000008 	.word	0x20000008

08000778 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800077c:	4b05      	ldr	r3, [pc, #20]	; (8000794 <HAL_IncTick+0x1c>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	461a      	mov	r2, r3
 8000782:	4b05      	ldr	r3, [pc, #20]	; (8000798 <HAL_IncTick+0x20>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	4413      	add	r3, r2
 8000788:	4a03      	ldr	r2, [pc, #12]	; (8000798 <HAL_IncTick+0x20>)
 800078a:	6013      	str	r3, [r2, #0]
}
 800078c:	bf00      	nop
 800078e:	46bd      	mov	sp, r7
 8000790:	bc80      	pop	{r7}
 8000792:	4770      	bx	lr
 8000794:	2000000c 	.word	0x2000000c
 8000798:	20000124 	.word	0x20000124

0800079c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  return uwTick;
 80007a0:	4b02      	ldr	r3, [pc, #8]	; (80007ac <HAL_GetTick+0x10>)
 80007a2:	681b      	ldr	r3, [r3, #0]
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bc80      	pop	{r7}
 80007aa:	4770      	bx	lr
 80007ac:	20000124 	.word	0x20000124

080007b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b084      	sub	sp, #16
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007b8:	f7ff fff0 	bl	800079c <HAL_GetTick>
 80007bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007c8:	d005      	beq.n	80007d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007ca:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <HAL_Delay+0x40>)
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	461a      	mov	r2, r3
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	4413      	add	r3, r2
 80007d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007d6:	bf00      	nop
 80007d8:	f7ff ffe0 	bl	800079c <HAL_GetTick>
 80007dc:	4602      	mov	r2, r0
 80007de:	68bb      	ldr	r3, [r7, #8]
 80007e0:	1ad3      	subs	r3, r2, r3
 80007e2:	68fa      	ldr	r2, [r7, #12]
 80007e4:	429a      	cmp	r2, r3
 80007e6:	d8f7      	bhi.n	80007d8 <HAL_Delay+0x28>
  {
  }
}
 80007e8:	bf00      	nop
 80007ea:	3710      	adds	r7, #16
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	2000000c 	.word	0x2000000c

080007f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b085      	sub	sp, #20
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	f003 0307 	and.w	r3, r3, #7
 8000802:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000804:	4b0c      	ldr	r3, [pc, #48]	; (8000838 <__NVIC_SetPriorityGrouping+0x44>)
 8000806:	68db      	ldr	r3, [r3, #12]
 8000808:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800080a:	68ba      	ldr	r2, [r7, #8]
 800080c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000810:	4013      	ands	r3, r2
 8000812:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800081c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000820:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000824:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000826:	4a04      	ldr	r2, [pc, #16]	; (8000838 <__NVIC_SetPriorityGrouping+0x44>)
 8000828:	68bb      	ldr	r3, [r7, #8]
 800082a:	60d3      	str	r3, [r2, #12]
}
 800082c:	bf00      	nop
 800082e:	3714      	adds	r7, #20
 8000830:	46bd      	mov	sp, r7
 8000832:	bc80      	pop	{r7}
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	e000ed00 	.word	0xe000ed00

0800083c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000840:	4b04      	ldr	r3, [pc, #16]	; (8000854 <__NVIC_GetPriorityGrouping+0x18>)
 8000842:	68db      	ldr	r3, [r3, #12]
 8000844:	0a1b      	lsrs	r3, r3, #8
 8000846:	f003 0307 	and.w	r3, r3, #7
}
 800084a:	4618      	mov	r0, r3
 800084c:	46bd      	mov	sp, r7
 800084e:	bc80      	pop	{r7}
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	e000ed00 	.word	0xe000ed00

08000858 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000858:	b480      	push	{r7}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0
 800085e:	4603      	mov	r3, r0
 8000860:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000866:	2b00      	cmp	r3, #0
 8000868:	db0b      	blt.n	8000882 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800086a:	79fb      	ldrb	r3, [r7, #7]
 800086c:	f003 021f 	and.w	r2, r3, #31
 8000870:	4906      	ldr	r1, [pc, #24]	; (800088c <__NVIC_EnableIRQ+0x34>)
 8000872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000876:	095b      	lsrs	r3, r3, #5
 8000878:	2001      	movs	r0, #1
 800087a:	fa00 f202 	lsl.w	r2, r0, r2
 800087e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000882:	bf00      	nop
 8000884:	370c      	adds	r7, #12
 8000886:	46bd      	mov	sp, r7
 8000888:	bc80      	pop	{r7}
 800088a:	4770      	bx	lr
 800088c:	e000e100 	.word	0xe000e100

08000890 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000890:	b480      	push	{r7}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
 8000896:	4603      	mov	r3, r0
 8000898:	6039      	str	r1, [r7, #0]
 800089a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800089c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	db0a      	blt.n	80008ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	b2da      	uxtb	r2, r3
 80008a8:	490c      	ldr	r1, [pc, #48]	; (80008dc <__NVIC_SetPriority+0x4c>)
 80008aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ae:	0112      	lsls	r2, r2, #4
 80008b0:	b2d2      	uxtb	r2, r2
 80008b2:	440b      	add	r3, r1
 80008b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008b8:	e00a      	b.n	80008d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	b2da      	uxtb	r2, r3
 80008be:	4908      	ldr	r1, [pc, #32]	; (80008e0 <__NVIC_SetPriority+0x50>)
 80008c0:	79fb      	ldrb	r3, [r7, #7]
 80008c2:	f003 030f 	and.w	r3, r3, #15
 80008c6:	3b04      	subs	r3, #4
 80008c8:	0112      	lsls	r2, r2, #4
 80008ca:	b2d2      	uxtb	r2, r2
 80008cc:	440b      	add	r3, r1
 80008ce:	761a      	strb	r2, [r3, #24]
}
 80008d0:	bf00      	nop
 80008d2:	370c      	adds	r7, #12
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bc80      	pop	{r7}
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	e000e100 	.word	0xe000e100
 80008e0:	e000ed00 	.word	0xe000ed00

080008e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b089      	sub	sp, #36	; 0x24
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	60f8      	str	r0, [r7, #12]
 80008ec:	60b9      	str	r1, [r7, #8]
 80008ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	f003 0307 	and.w	r3, r3, #7
 80008f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008f8:	69fb      	ldr	r3, [r7, #28]
 80008fa:	f1c3 0307 	rsb	r3, r3, #7
 80008fe:	2b04      	cmp	r3, #4
 8000900:	bf28      	it	cs
 8000902:	2304      	movcs	r3, #4
 8000904:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000906:	69fb      	ldr	r3, [r7, #28]
 8000908:	3304      	adds	r3, #4
 800090a:	2b06      	cmp	r3, #6
 800090c:	d902      	bls.n	8000914 <NVIC_EncodePriority+0x30>
 800090e:	69fb      	ldr	r3, [r7, #28]
 8000910:	3b03      	subs	r3, #3
 8000912:	e000      	b.n	8000916 <NVIC_EncodePriority+0x32>
 8000914:	2300      	movs	r3, #0
 8000916:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000918:	f04f 32ff 	mov.w	r2, #4294967295
 800091c:	69bb      	ldr	r3, [r7, #24]
 800091e:	fa02 f303 	lsl.w	r3, r2, r3
 8000922:	43da      	mvns	r2, r3
 8000924:	68bb      	ldr	r3, [r7, #8]
 8000926:	401a      	ands	r2, r3
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800092c:	f04f 31ff 	mov.w	r1, #4294967295
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	fa01 f303 	lsl.w	r3, r1, r3
 8000936:	43d9      	mvns	r1, r3
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800093c:	4313      	orrs	r3, r2
         );
}
 800093e:	4618      	mov	r0, r3
 8000940:	3724      	adds	r7, #36	; 0x24
 8000942:	46bd      	mov	sp, r7
 8000944:	bc80      	pop	{r7}
 8000946:	4770      	bx	lr

08000948 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	3b01      	subs	r3, #1
 8000954:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000958:	d301      	bcc.n	800095e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800095a:	2301      	movs	r3, #1
 800095c:	e00f      	b.n	800097e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800095e:	4a0a      	ldr	r2, [pc, #40]	; (8000988 <SysTick_Config+0x40>)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	3b01      	subs	r3, #1
 8000964:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000966:	210f      	movs	r1, #15
 8000968:	f04f 30ff 	mov.w	r0, #4294967295
 800096c:	f7ff ff90 	bl	8000890 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000970:	4b05      	ldr	r3, [pc, #20]	; (8000988 <SysTick_Config+0x40>)
 8000972:	2200      	movs	r2, #0
 8000974:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000976:	4b04      	ldr	r3, [pc, #16]	; (8000988 <SysTick_Config+0x40>)
 8000978:	2207      	movs	r2, #7
 800097a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800097c:	2300      	movs	r3, #0
}
 800097e:	4618      	mov	r0, r3
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	e000e010 	.word	0xe000e010

0800098c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000994:	6878      	ldr	r0, [r7, #4]
 8000996:	f7ff ff2d 	bl	80007f4 <__NVIC_SetPriorityGrouping>
}
 800099a:	bf00      	nop
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}

080009a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009a2:	b580      	push	{r7, lr}
 80009a4:	b086      	sub	sp, #24
 80009a6:	af00      	add	r7, sp, #0
 80009a8:	4603      	mov	r3, r0
 80009aa:	60b9      	str	r1, [r7, #8]
 80009ac:	607a      	str	r2, [r7, #4]
 80009ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009b0:	2300      	movs	r3, #0
 80009b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009b4:	f7ff ff42 	bl	800083c <__NVIC_GetPriorityGrouping>
 80009b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009ba:	687a      	ldr	r2, [r7, #4]
 80009bc:	68b9      	ldr	r1, [r7, #8]
 80009be:	6978      	ldr	r0, [r7, #20]
 80009c0:	f7ff ff90 	bl	80008e4 <NVIC_EncodePriority>
 80009c4:	4602      	mov	r2, r0
 80009c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009ca:	4611      	mov	r1, r2
 80009cc:	4618      	mov	r0, r3
 80009ce:	f7ff ff5f 	bl	8000890 <__NVIC_SetPriority>
}
 80009d2:	bf00      	nop
 80009d4:	3718      	adds	r7, #24
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}

080009da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009da:	b580      	push	{r7, lr}
 80009dc:	b082      	sub	sp, #8
 80009de:	af00      	add	r7, sp, #0
 80009e0:	4603      	mov	r3, r0
 80009e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e8:	4618      	mov	r0, r3
 80009ea:	f7ff ff35 	bl	8000858 <__NVIC_EnableIRQ>
}
 80009ee:	bf00      	nop
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}

080009f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009f6:	b580      	push	{r7, lr}
 80009f8:	b082      	sub	sp, #8
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009fe:	6878      	ldr	r0, [r7, #4]
 8000a00:	f7ff ffa2 	bl	8000948 <SysTick_Config>
 8000a04:	4603      	mov	r3, r0
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	3708      	adds	r7, #8
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
	...

08000a10 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b085      	sub	sp, #20
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d101      	bne.n	8000a26 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000a22:	2301      	movs	r3, #1
 8000a24:	e043      	b.n	8000aae <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	461a      	mov	r2, r3
 8000a2c:	4b22      	ldr	r3, [pc, #136]	; (8000ab8 <HAL_DMA_Init+0xa8>)
 8000a2e:	4413      	add	r3, r2
 8000a30:	4a22      	ldr	r2, [pc, #136]	; (8000abc <HAL_DMA_Init+0xac>)
 8000a32:	fba2 2303 	umull	r2, r3, r2, r3
 8000a36:	091b      	lsrs	r3, r3, #4
 8000a38:	009a      	lsls	r2, r3, #2
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	4a1f      	ldr	r2, [pc, #124]	; (8000ac0 <HAL_DMA_Init+0xb0>)
 8000a42:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	2202      	movs	r2, #2
 8000a48:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000a5a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000a5e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000a68:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	68db      	ldr	r3, [r3, #12]
 8000a6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	695b      	ldr	r3, [r3, #20]
 8000a7a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	69db      	ldr	r3, [r3, #28]
 8000a86:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000a88:	68fa      	ldr	r2, [r7, #12]
 8000a8a:	4313      	orrs	r3, r2
 8000a8c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	68fa      	ldr	r2, [r7, #12]
 8000a94:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	2200      	movs	r2, #0
 8000a9a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000aac:	2300      	movs	r3, #0
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	3714      	adds	r7, #20
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bc80      	pop	{r7}
 8000ab6:	4770      	bx	lr
 8000ab8:	bffdfff8 	.word	0xbffdfff8
 8000abc:	cccccccd 	.word	0xcccccccd
 8000ac0:	40020000 	.word	0x40020000

08000ac4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b084      	sub	sp, #16
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000acc:	2300      	movs	r3, #0
 8000ace:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ad6:	2b02      	cmp	r3, #2
 8000ad8:	d005      	beq.n	8000ae6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	2204      	movs	r2, #4
 8000ade:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	73fb      	strb	r3, [r7, #15]
 8000ae4:	e051      	b.n	8000b8a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	f022 020e 	bic.w	r2, r2, #14
 8000af4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	f022 0201 	bic.w	r2, r2, #1
 8000b04:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	4a22      	ldr	r2, [pc, #136]	; (8000b94 <HAL_DMA_Abort_IT+0xd0>)
 8000b0c:	4293      	cmp	r3, r2
 8000b0e:	d029      	beq.n	8000b64 <HAL_DMA_Abort_IT+0xa0>
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a20      	ldr	r2, [pc, #128]	; (8000b98 <HAL_DMA_Abort_IT+0xd4>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d022      	beq.n	8000b60 <HAL_DMA_Abort_IT+0x9c>
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4a1f      	ldr	r2, [pc, #124]	; (8000b9c <HAL_DMA_Abort_IT+0xd8>)
 8000b20:	4293      	cmp	r3, r2
 8000b22:	d01a      	beq.n	8000b5a <HAL_DMA_Abort_IT+0x96>
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a1d      	ldr	r2, [pc, #116]	; (8000ba0 <HAL_DMA_Abort_IT+0xdc>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d012      	beq.n	8000b54 <HAL_DMA_Abort_IT+0x90>
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4a1c      	ldr	r2, [pc, #112]	; (8000ba4 <HAL_DMA_Abort_IT+0xe0>)
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d00a      	beq.n	8000b4e <HAL_DMA_Abort_IT+0x8a>
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a1a      	ldr	r2, [pc, #104]	; (8000ba8 <HAL_DMA_Abort_IT+0xe4>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d102      	bne.n	8000b48 <HAL_DMA_Abort_IT+0x84>
 8000b42:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000b46:	e00e      	b.n	8000b66 <HAL_DMA_Abort_IT+0xa2>
 8000b48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000b4c:	e00b      	b.n	8000b66 <HAL_DMA_Abort_IT+0xa2>
 8000b4e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b52:	e008      	b.n	8000b66 <HAL_DMA_Abort_IT+0xa2>
 8000b54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b58:	e005      	b.n	8000b66 <HAL_DMA_Abort_IT+0xa2>
 8000b5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b5e:	e002      	b.n	8000b66 <HAL_DMA_Abort_IT+0xa2>
 8000b60:	2310      	movs	r3, #16
 8000b62:	e000      	b.n	8000b66 <HAL_DMA_Abort_IT+0xa2>
 8000b64:	2301      	movs	r3, #1
 8000b66:	4a11      	ldr	r2, [pc, #68]	; (8000bac <HAL_DMA_Abort_IT+0xe8>)
 8000b68:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	2200      	movs	r2, #0
 8000b76:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d003      	beq.n	8000b8a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b86:	6878      	ldr	r0, [r7, #4]
 8000b88:	4798      	blx	r3
    } 
  }
  return status;
 8000b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	3710      	adds	r7, #16
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	40020008 	.word	0x40020008
 8000b98:	4002001c 	.word	0x4002001c
 8000b9c:	40020030 	.word	0x40020030
 8000ba0:	40020044 	.word	0x40020044
 8000ba4:	40020058 	.word	0x40020058
 8000ba8:	4002006c 	.word	0x4002006c
 8000bac:	40020000 	.word	0x40020000

08000bb0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bcc:	2204      	movs	r2, #4
 8000bce:	409a      	lsls	r2, r3
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	4013      	ands	r3, r2
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d04f      	beq.n	8000c78 <HAL_DMA_IRQHandler+0xc8>
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	f003 0304 	and.w	r3, r3, #4
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d04a      	beq.n	8000c78 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f003 0320 	and.w	r3, r3, #32
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d107      	bne.n	8000c00 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	681a      	ldr	r2, [r3, #0]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f022 0204 	bic.w	r2, r2, #4
 8000bfe:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a66      	ldr	r2, [pc, #408]	; (8000da0 <HAL_DMA_IRQHandler+0x1f0>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d029      	beq.n	8000c5e <HAL_DMA_IRQHandler+0xae>
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a65      	ldr	r2, [pc, #404]	; (8000da4 <HAL_DMA_IRQHandler+0x1f4>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d022      	beq.n	8000c5a <HAL_DMA_IRQHandler+0xaa>
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a63      	ldr	r2, [pc, #396]	; (8000da8 <HAL_DMA_IRQHandler+0x1f8>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d01a      	beq.n	8000c54 <HAL_DMA_IRQHandler+0xa4>
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4a62      	ldr	r2, [pc, #392]	; (8000dac <HAL_DMA_IRQHandler+0x1fc>)
 8000c24:	4293      	cmp	r3, r2
 8000c26:	d012      	beq.n	8000c4e <HAL_DMA_IRQHandler+0x9e>
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a60      	ldr	r2, [pc, #384]	; (8000db0 <HAL_DMA_IRQHandler+0x200>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d00a      	beq.n	8000c48 <HAL_DMA_IRQHandler+0x98>
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4a5f      	ldr	r2, [pc, #380]	; (8000db4 <HAL_DMA_IRQHandler+0x204>)
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d102      	bne.n	8000c42 <HAL_DMA_IRQHandler+0x92>
 8000c3c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c40:	e00e      	b.n	8000c60 <HAL_DMA_IRQHandler+0xb0>
 8000c42:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000c46:	e00b      	b.n	8000c60 <HAL_DMA_IRQHandler+0xb0>
 8000c48:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000c4c:	e008      	b.n	8000c60 <HAL_DMA_IRQHandler+0xb0>
 8000c4e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000c52:	e005      	b.n	8000c60 <HAL_DMA_IRQHandler+0xb0>
 8000c54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c58:	e002      	b.n	8000c60 <HAL_DMA_IRQHandler+0xb0>
 8000c5a:	2340      	movs	r3, #64	; 0x40
 8000c5c:	e000      	b.n	8000c60 <HAL_DMA_IRQHandler+0xb0>
 8000c5e:	2304      	movs	r3, #4
 8000c60:	4a55      	ldr	r2, [pc, #340]	; (8000db8 <HAL_DMA_IRQHandler+0x208>)
 8000c62:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	f000 8094 	beq.w	8000d96 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c72:	6878      	ldr	r0, [r7, #4]
 8000c74:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000c76:	e08e      	b.n	8000d96 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7c:	2202      	movs	r2, #2
 8000c7e:	409a      	lsls	r2, r3
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	4013      	ands	r3, r2
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d056      	beq.n	8000d36 <HAL_DMA_IRQHandler+0x186>
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	f003 0302 	and.w	r3, r3, #2
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d051      	beq.n	8000d36 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f003 0320 	and.w	r3, r3, #32
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d10b      	bne.n	8000cb8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	681a      	ldr	r2, [r3, #0]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f022 020a 	bic.w	r2, r2, #10
 8000cae:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a38      	ldr	r2, [pc, #224]	; (8000da0 <HAL_DMA_IRQHandler+0x1f0>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d029      	beq.n	8000d16 <HAL_DMA_IRQHandler+0x166>
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4a37      	ldr	r2, [pc, #220]	; (8000da4 <HAL_DMA_IRQHandler+0x1f4>)
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d022      	beq.n	8000d12 <HAL_DMA_IRQHandler+0x162>
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a35      	ldr	r2, [pc, #212]	; (8000da8 <HAL_DMA_IRQHandler+0x1f8>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d01a      	beq.n	8000d0c <HAL_DMA_IRQHandler+0x15c>
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4a34      	ldr	r2, [pc, #208]	; (8000dac <HAL_DMA_IRQHandler+0x1fc>)
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	d012      	beq.n	8000d06 <HAL_DMA_IRQHandler+0x156>
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a32      	ldr	r2, [pc, #200]	; (8000db0 <HAL_DMA_IRQHandler+0x200>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d00a      	beq.n	8000d00 <HAL_DMA_IRQHandler+0x150>
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4a31      	ldr	r2, [pc, #196]	; (8000db4 <HAL_DMA_IRQHandler+0x204>)
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	d102      	bne.n	8000cfa <HAL_DMA_IRQHandler+0x14a>
 8000cf4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000cf8:	e00e      	b.n	8000d18 <HAL_DMA_IRQHandler+0x168>
 8000cfa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000cfe:	e00b      	b.n	8000d18 <HAL_DMA_IRQHandler+0x168>
 8000d00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d04:	e008      	b.n	8000d18 <HAL_DMA_IRQHandler+0x168>
 8000d06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d0a:	e005      	b.n	8000d18 <HAL_DMA_IRQHandler+0x168>
 8000d0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d10:	e002      	b.n	8000d18 <HAL_DMA_IRQHandler+0x168>
 8000d12:	2320      	movs	r3, #32
 8000d14:	e000      	b.n	8000d18 <HAL_DMA_IRQHandler+0x168>
 8000d16:	2302      	movs	r3, #2
 8000d18:	4a27      	ldr	r2, [pc, #156]	; (8000db8 <HAL_DMA_IRQHandler+0x208>)
 8000d1a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2200      	movs	r2, #0
 8000d20:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d034      	beq.n	8000d96 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d30:	6878      	ldr	r0, [r7, #4]
 8000d32:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000d34:	e02f      	b.n	8000d96 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3a:	2208      	movs	r2, #8
 8000d3c:	409a      	lsls	r2, r3
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	4013      	ands	r3, r2
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d028      	beq.n	8000d98 <HAL_DMA_IRQHandler+0x1e8>
 8000d46:	68bb      	ldr	r3, [r7, #8]
 8000d48:	f003 0308 	and.w	r3, r3, #8
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d023      	beq.n	8000d98 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f022 020e 	bic.w	r2, r2, #14
 8000d5e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fa01 f202 	lsl.w	r2, r1, r2
 8000d6e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2201      	movs	r2, #1
 8000d74:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2201      	movs	r2, #1
 8000d7a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2200      	movs	r2, #0
 8000d82:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d004      	beq.n	8000d98 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	6878      	ldr	r0, [r7, #4]
 8000d94:	4798      	blx	r3
    }
  }
  return;
 8000d96:	bf00      	nop
 8000d98:	bf00      	nop
}
 8000d9a:	3710      	adds	r7, #16
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	40020008 	.word	0x40020008
 8000da4:	4002001c 	.word	0x4002001c
 8000da8:	40020030 	.word	0x40020030
 8000dac:	40020044 	.word	0x40020044
 8000db0:	40020058 	.word	0x40020058
 8000db4:	4002006c 	.word	0x4002006c
 8000db8:	40020000 	.word	0x40020000

08000dbc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b08b      	sub	sp, #44	; 0x2c
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
 8000dc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dce:	e127      	b.n	8001020 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	69fa      	ldr	r2, [r7, #28]
 8000de0:	4013      	ands	r3, r2
 8000de2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000de4:	69ba      	ldr	r2, [r7, #24]
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	429a      	cmp	r2, r3
 8000dea:	f040 8116 	bne.w	800101a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	2b12      	cmp	r3, #18
 8000df4:	d034      	beq.n	8000e60 <HAL_GPIO_Init+0xa4>
 8000df6:	2b12      	cmp	r3, #18
 8000df8:	d80d      	bhi.n	8000e16 <HAL_GPIO_Init+0x5a>
 8000dfa:	2b02      	cmp	r3, #2
 8000dfc:	d02b      	beq.n	8000e56 <HAL_GPIO_Init+0x9a>
 8000dfe:	2b02      	cmp	r3, #2
 8000e00:	d804      	bhi.n	8000e0c <HAL_GPIO_Init+0x50>
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d031      	beq.n	8000e6a <HAL_GPIO_Init+0xae>
 8000e06:	2b01      	cmp	r3, #1
 8000e08:	d01c      	beq.n	8000e44 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e0a:	e048      	b.n	8000e9e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000e0c:	2b03      	cmp	r3, #3
 8000e0e:	d043      	beq.n	8000e98 <HAL_GPIO_Init+0xdc>
 8000e10:	2b11      	cmp	r3, #17
 8000e12:	d01b      	beq.n	8000e4c <HAL_GPIO_Init+0x90>
          break;
 8000e14:	e043      	b.n	8000e9e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000e16:	4a89      	ldr	r2, [pc, #548]	; (800103c <HAL_GPIO_Init+0x280>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d026      	beq.n	8000e6a <HAL_GPIO_Init+0xae>
 8000e1c:	4a87      	ldr	r2, [pc, #540]	; (800103c <HAL_GPIO_Init+0x280>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d806      	bhi.n	8000e30 <HAL_GPIO_Init+0x74>
 8000e22:	4a87      	ldr	r2, [pc, #540]	; (8001040 <HAL_GPIO_Init+0x284>)
 8000e24:	4293      	cmp	r3, r2
 8000e26:	d020      	beq.n	8000e6a <HAL_GPIO_Init+0xae>
 8000e28:	4a86      	ldr	r2, [pc, #536]	; (8001044 <HAL_GPIO_Init+0x288>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d01d      	beq.n	8000e6a <HAL_GPIO_Init+0xae>
          break;
 8000e2e:	e036      	b.n	8000e9e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000e30:	4a85      	ldr	r2, [pc, #532]	; (8001048 <HAL_GPIO_Init+0x28c>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d019      	beq.n	8000e6a <HAL_GPIO_Init+0xae>
 8000e36:	4a85      	ldr	r2, [pc, #532]	; (800104c <HAL_GPIO_Init+0x290>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d016      	beq.n	8000e6a <HAL_GPIO_Init+0xae>
 8000e3c:	4a84      	ldr	r2, [pc, #528]	; (8001050 <HAL_GPIO_Init+0x294>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d013      	beq.n	8000e6a <HAL_GPIO_Init+0xae>
          break;
 8000e42:	e02c      	b.n	8000e9e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	623b      	str	r3, [r7, #32]
          break;
 8000e4a:	e028      	b.n	8000e9e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	68db      	ldr	r3, [r3, #12]
 8000e50:	3304      	adds	r3, #4
 8000e52:	623b      	str	r3, [r7, #32]
          break;
 8000e54:	e023      	b.n	8000e9e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	68db      	ldr	r3, [r3, #12]
 8000e5a:	3308      	adds	r3, #8
 8000e5c:	623b      	str	r3, [r7, #32]
          break;
 8000e5e:	e01e      	b.n	8000e9e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	68db      	ldr	r3, [r3, #12]
 8000e64:	330c      	adds	r3, #12
 8000e66:	623b      	str	r3, [r7, #32]
          break;
 8000e68:	e019      	b.n	8000e9e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	689b      	ldr	r3, [r3, #8]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d102      	bne.n	8000e78 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e72:	2304      	movs	r3, #4
 8000e74:	623b      	str	r3, [r7, #32]
          break;
 8000e76:	e012      	b.n	8000e9e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	689b      	ldr	r3, [r3, #8]
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	d105      	bne.n	8000e8c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e80:	2308      	movs	r3, #8
 8000e82:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	69fa      	ldr	r2, [r7, #28]
 8000e88:	611a      	str	r2, [r3, #16]
          break;
 8000e8a:	e008      	b.n	8000e9e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e8c:	2308      	movs	r3, #8
 8000e8e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	69fa      	ldr	r2, [r7, #28]
 8000e94:	615a      	str	r2, [r3, #20]
          break;
 8000e96:	e002      	b.n	8000e9e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	623b      	str	r3, [r7, #32]
          break;
 8000e9c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e9e:	69bb      	ldr	r3, [r7, #24]
 8000ea0:	2bff      	cmp	r3, #255	; 0xff
 8000ea2:	d801      	bhi.n	8000ea8 <HAL_GPIO_Init+0xec>
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	e001      	b.n	8000eac <HAL_GPIO_Init+0xf0>
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	3304      	adds	r3, #4
 8000eac:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000eae:	69bb      	ldr	r3, [r7, #24]
 8000eb0:	2bff      	cmp	r3, #255	; 0xff
 8000eb2:	d802      	bhi.n	8000eba <HAL_GPIO_Init+0xfe>
 8000eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	e002      	b.n	8000ec0 <HAL_GPIO_Init+0x104>
 8000eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ebc:	3b08      	subs	r3, #8
 8000ebe:	009b      	lsls	r3, r3, #2
 8000ec0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	210f      	movs	r1, #15
 8000ec8:	693b      	ldr	r3, [r7, #16]
 8000eca:	fa01 f303 	lsl.w	r3, r1, r3
 8000ece:	43db      	mvns	r3, r3
 8000ed0:	401a      	ands	r2, r3
 8000ed2:	6a39      	ldr	r1, [r7, #32]
 8000ed4:	693b      	ldr	r3, [r7, #16]
 8000ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eda:	431a      	orrs	r2, r3
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	f000 8096 	beq.w	800101a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000eee:	4b59      	ldr	r3, [pc, #356]	; (8001054 <HAL_GPIO_Init+0x298>)
 8000ef0:	699b      	ldr	r3, [r3, #24]
 8000ef2:	4a58      	ldr	r2, [pc, #352]	; (8001054 <HAL_GPIO_Init+0x298>)
 8000ef4:	f043 0301 	orr.w	r3, r3, #1
 8000ef8:	6193      	str	r3, [r2, #24]
 8000efa:	4b56      	ldr	r3, [pc, #344]	; (8001054 <HAL_GPIO_Init+0x298>)
 8000efc:	699b      	ldr	r3, [r3, #24]
 8000efe:	f003 0301 	and.w	r3, r3, #1
 8000f02:	60bb      	str	r3, [r7, #8]
 8000f04:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f06:	4a54      	ldr	r2, [pc, #336]	; (8001058 <HAL_GPIO_Init+0x29c>)
 8000f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f0a:	089b      	lsrs	r3, r3, #2
 8000f0c:	3302      	adds	r3, #2
 8000f0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f12:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f16:	f003 0303 	and.w	r3, r3, #3
 8000f1a:	009b      	lsls	r3, r3, #2
 8000f1c:	220f      	movs	r2, #15
 8000f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f22:	43db      	mvns	r3, r3
 8000f24:	68fa      	ldr	r2, [r7, #12]
 8000f26:	4013      	ands	r3, r2
 8000f28:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4a4b      	ldr	r2, [pc, #300]	; (800105c <HAL_GPIO_Init+0x2a0>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d013      	beq.n	8000f5a <HAL_GPIO_Init+0x19e>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4a4a      	ldr	r2, [pc, #296]	; (8001060 <HAL_GPIO_Init+0x2a4>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d00d      	beq.n	8000f56 <HAL_GPIO_Init+0x19a>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4a49      	ldr	r2, [pc, #292]	; (8001064 <HAL_GPIO_Init+0x2a8>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d007      	beq.n	8000f52 <HAL_GPIO_Init+0x196>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4a48      	ldr	r2, [pc, #288]	; (8001068 <HAL_GPIO_Init+0x2ac>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d101      	bne.n	8000f4e <HAL_GPIO_Init+0x192>
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	e006      	b.n	8000f5c <HAL_GPIO_Init+0x1a0>
 8000f4e:	2304      	movs	r3, #4
 8000f50:	e004      	b.n	8000f5c <HAL_GPIO_Init+0x1a0>
 8000f52:	2302      	movs	r3, #2
 8000f54:	e002      	b.n	8000f5c <HAL_GPIO_Init+0x1a0>
 8000f56:	2301      	movs	r3, #1
 8000f58:	e000      	b.n	8000f5c <HAL_GPIO_Init+0x1a0>
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f5e:	f002 0203 	and.w	r2, r2, #3
 8000f62:	0092      	lsls	r2, r2, #2
 8000f64:	4093      	lsls	r3, r2
 8000f66:	68fa      	ldr	r2, [r7, #12]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f6c:	493a      	ldr	r1, [pc, #232]	; (8001058 <HAL_GPIO_Init+0x29c>)
 8000f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f70:	089b      	lsrs	r3, r3, #2
 8000f72:	3302      	adds	r3, #2
 8000f74:	68fa      	ldr	r2, [r7, #12]
 8000f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d006      	beq.n	8000f94 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f86:	4b39      	ldr	r3, [pc, #228]	; (800106c <HAL_GPIO_Init+0x2b0>)
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	4938      	ldr	r1, [pc, #224]	; (800106c <HAL_GPIO_Init+0x2b0>)
 8000f8c:	69bb      	ldr	r3, [r7, #24]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	600b      	str	r3, [r1, #0]
 8000f92:	e006      	b.n	8000fa2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f94:	4b35      	ldr	r3, [pc, #212]	; (800106c <HAL_GPIO_Init+0x2b0>)
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	69bb      	ldr	r3, [r7, #24]
 8000f9a:	43db      	mvns	r3, r3
 8000f9c:	4933      	ldr	r1, [pc, #204]	; (800106c <HAL_GPIO_Init+0x2b0>)
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d006      	beq.n	8000fbc <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000fae:	4b2f      	ldr	r3, [pc, #188]	; (800106c <HAL_GPIO_Init+0x2b0>)
 8000fb0:	685a      	ldr	r2, [r3, #4]
 8000fb2:	492e      	ldr	r1, [pc, #184]	; (800106c <HAL_GPIO_Init+0x2b0>)
 8000fb4:	69bb      	ldr	r3, [r7, #24]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	604b      	str	r3, [r1, #4]
 8000fba:	e006      	b.n	8000fca <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000fbc:	4b2b      	ldr	r3, [pc, #172]	; (800106c <HAL_GPIO_Init+0x2b0>)
 8000fbe:	685a      	ldr	r2, [r3, #4]
 8000fc0:	69bb      	ldr	r3, [r7, #24]
 8000fc2:	43db      	mvns	r3, r3
 8000fc4:	4929      	ldr	r1, [pc, #164]	; (800106c <HAL_GPIO_Init+0x2b0>)
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d006      	beq.n	8000fe4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000fd6:	4b25      	ldr	r3, [pc, #148]	; (800106c <HAL_GPIO_Init+0x2b0>)
 8000fd8:	689a      	ldr	r2, [r3, #8]
 8000fda:	4924      	ldr	r1, [pc, #144]	; (800106c <HAL_GPIO_Init+0x2b0>)
 8000fdc:	69bb      	ldr	r3, [r7, #24]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	608b      	str	r3, [r1, #8]
 8000fe2:	e006      	b.n	8000ff2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000fe4:	4b21      	ldr	r3, [pc, #132]	; (800106c <HAL_GPIO_Init+0x2b0>)
 8000fe6:	689a      	ldr	r2, [r3, #8]
 8000fe8:	69bb      	ldr	r3, [r7, #24]
 8000fea:	43db      	mvns	r3, r3
 8000fec:	491f      	ldr	r1, [pc, #124]	; (800106c <HAL_GPIO_Init+0x2b0>)
 8000fee:	4013      	ands	r3, r2
 8000ff0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d006      	beq.n	800100c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ffe:	4b1b      	ldr	r3, [pc, #108]	; (800106c <HAL_GPIO_Init+0x2b0>)
 8001000:	68da      	ldr	r2, [r3, #12]
 8001002:	491a      	ldr	r1, [pc, #104]	; (800106c <HAL_GPIO_Init+0x2b0>)
 8001004:	69bb      	ldr	r3, [r7, #24]
 8001006:	4313      	orrs	r3, r2
 8001008:	60cb      	str	r3, [r1, #12]
 800100a:	e006      	b.n	800101a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800100c:	4b17      	ldr	r3, [pc, #92]	; (800106c <HAL_GPIO_Init+0x2b0>)
 800100e:	68da      	ldr	r2, [r3, #12]
 8001010:	69bb      	ldr	r3, [r7, #24]
 8001012:	43db      	mvns	r3, r3
 8001014:	4915      	ldr	r1, [pc, #84]	; (800106c <HAL_GPIO_Init+0x2b0>)
 8001016:	4013      	ands	r3, r2
 8001018:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800101a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800101c:	3301      	adds	r3, #1
 800101e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001026:	fa22 f303 	lsr.w	r3, r2, r3
 800102a:	2b00      	cmp	r3, #0
 800102c:	f47f aed0 	bne.w	8000dd0 <HAL_GPIO_Init+0x14>
  }
}
 8001030:	bf00      	nop
 8001032:	372c      	adds	r7, #44	; 0x2c
 8001034:	46bd      	mov	sp, r7
 8001036:	bc80      	pop	{r7}
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	10210000 	.word	0x10210000
 8001040:	10110000 	.word	0x10110000
 8001044:	10120000 	.word	0x10120000
 8001048:	10310000 	.word	0x10310000
 800104c:	10320000 	.word	0x10320000
 8001050:	10220000 	.word	0x10220000
 8001054:	40021000 	.word	0x40021000
 8001058:	40010000 	.word	0x40010000
 800105c:	40010800 	.word	0x40010800
 8001060:	40010c00 	.word	0x40010c00
 8001064:	40011000 	.word	0x40011000
 8001068:	40011400 	.word	0x40011400
 800106c:	40010400 	.word	0x40010400

08001070 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	460b      	mov	r3, r1
 800107a:	807b      	strh	r3, [r7, #2]
 800107c:	4613      	mov	r3, r2
 800107e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001080:	787b      	ldrb	r3, [r7, #1]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d003      	beq.n	800108e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001086:	887a      	ldrh	r2, [r7, #2]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800108c:	e003      	b.n	8001096 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800108e:	887b      	ldrh	r3, [r7, #2]
 8001090:	041a      	lsls	r2, r3, #16
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	611a      	str	r2, [r3, #16]
}
 8001096:	bf00      	nop
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	bc80      	pop	{r7}
 800109e:	4770      	bx	lr

080010a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d101      	bne.n	80010b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
 80010b0:	e26c      	b.n	800158c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	f000 8087 	beq.w	80011ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80010c0:	4b92      	ldr	r3, [pc, #584]	; (800130c <HAL_RCC_OscConfig+0x26c>)
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f003 030c 	and.w	r3, r3, #12
 80010c8:	2b04      	cmp	r3, #4
 80010ca:	d00c      	beq.n	80010e6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010cc:	4b8f      	ldr	r3, [pc, #572]	; (800130c <HAL_RCC_OscConfig+0x26c>)
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f003 030c 	and.w	r3, r3, #12
 80010d4:	2b08      	cmp	r3, #8
 80010d6:	d112      	bne.n	80010fe <HAL_RCC_OscConfig+0x5e>
 80010d8:	4b8c      	ldr	r3, [pc, #560]	; (800130c <HAL_RCC_OscConfig+0x26c>)
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010e4:	d10b      	bne.n	80010fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010e6:	4b89      	ldr	r3, [pc, #548]	; (800130c <HAL_RCC_OscConfig+0x26c>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d06c      	beq.n	80011cc <HAL_RCC_OscConfig+0x12c>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d168      	bne.n	80011cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e246      	b.n	800158c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001106:	d106      	bne.n	8001116 <HAL_RCC_OscConfig+0x76>
 8001108:	4b80      	ldr	r3, [pc, #512]	; (800130c <HAL_RCC_OscConfig+0x26c>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a7f      	ldr	r2, [pc, #508]	; (800130c <HAL_RCC_OscConfig+0x26c>)
 800110e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001112:	6013      	str	r3, [r2, #0]
 8001114:	e02e      	b.n	8001174 <HAL_RCC_OscConfig+0xd4>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d10c      	bne.n	8001138 <HAL_RCC_OscConfig+0x98>
 800111e:	4b7b      	ldr	r3, [pc, #492]	; (800130c <HAL_RCC_OscConfig+0x26c>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a7a      	ldr	r2, [pc, #488]	; (800130c <HAL_RCC_OscConfig+0x26c>)
 8001124:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001128:	6013      	str	r3, [r2, #0]
 800112a:	4b78      	ldr	r3, [pc, #480]	; (800130c <HAL_RCC_OscConfig+0x26c>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a77      	ldr	r2, [pc, #476]	; (800130c <HAL_RCC_OscConfig+0x26c>)
 8001130:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001134:	6013      	str	r3, [r2, #0]
 8001136:	e01d      	b.n	8001174 <HAL_RCC_OscConfig+0xd4>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001140:	d10c      	bne.n	800115c <HAL_RCC_OscConfig+0xbc>
 8001142:	4b72      	ldr	r3, [pc, #456]	; (800130c <HAL_RCC_OscConfig+0x26c>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a71      	ldr	r2, [pc, #452]	; (800130c <HAL_RCC_OscConfig+0x26c>)
 8001148:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800114c:	6013      	str	r3, [r2, #0]
 800114e:	4b6f      	ldr	r3, [pc, #444]	; (800130c <HAL_RCC_OscConfig+0x26c>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a6e      	ldr	r2, [pc, #440]	; (800130c <HAL_RCC_OscConfig+0x26c>)
 8001154:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001158:	6013      	str	r3, [r2, #0]
 800115a:	e00b      	b.n	8001174 <HAL_RCC_OscConfig+0xd4>
 800115c:	4b6b      	ldr	r3, [pc, #428]	; (800130c <HAL_RCC_OscConfig+0x26c>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a6a      	ldr	r2, [pc, #424]	; (800130c <HAL_RCC_OscConfig+0x26c>)
 8001162:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001166:	6013      	str	r3, [r2, #0]
 8001168:	4b68      	ldr	r3, [pc, #416]	; (800130c <HAL_RCC_OscConfig+0x26c>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a67      	ldr	r2, [pc, #412]	; (800130c <HAL_RCC_OscConfig+0x26c>)
 800116e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001172:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d013      	beq.n	80011a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800117c:	f7ff fb0e 	bl	800079c <HAL_GetTick>
 8001180:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001182:	e008      	b.n	8001196 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001184:	f7ff fb0a 	bl	800079c <HAL_GetTick>
 8001188:	4602      	mov	r2, r0
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	2b64      	cmp	r3, #100	; 0x64
 8001190:	d901      	bls.n	8001196 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001192:	2303      	movs	r3, #3
 8001194:	e1fa      	b.n	800158c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001196:	4b5d      	ldr	r3, [pc, #372]	; (800130c <HAL_RCC_OscConfig+0x26c>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d0f0      	beq.n	8001184 <HAL_RCC_OscConfig+0xe4>
 80011a2:	e014      	b.n	80011ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a4:	f7ff fafa 	bl	800079c <HAL_GetTick>
 80011a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011aa:	e008      	b.n	80011be <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011ac:	f7ff faf6 	bl	800079c <HAL_GetTick>
 80011b0:	4602      	mov	r2, r0
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	2b64      	cmp	r3, #100	; 0x64
 80011b8:	d901      	bls.n	80011be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80011ba:	2303      	movs	r3, #3
 80011bc:	e1e6      	b.n	800158c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011be:	4b53      	ldr	r3, [pc, #332]	; (800130c <HAL_RCC_OscConfig+0x26c>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d1f0      	bne.n	80011ac <HAL_RCC_OscConfig+0x10c>
 80011ca:	e000      	b.n	80011ce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f003 0302 	and.w	r3, r3, #2
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d063      	beq.n	80012a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80011da:	4b4c      	ldr	r3, [pc, #304]	; (800130c <HAL_RCC_OscConfig+0x26c>)
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f003 030c 	and.w	r3, r3, #12
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d00b      	beq.n	80011fe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80011e6:	4b49      	ldr	r3, [pc, #292]	; (800130c <HAL_RCC_OscConfig+0x26c>)
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f003 030c 	and.w	r3, r3, #12
 80011ee:	2b08      	cmp	r3, #8
 80011f0:	d11c      	bne.n	800122c <HAL_RCC_OscConfig+0x18c>
 80011f2:	4b46      	ldr	r3, [pc, #280]	; (800130c <HAL_RCC_OscConfig+0x26c>)
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d116      	bne.n	800122c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011fe:	4b43      	ldr	r3, [pc, #268]	; (800130c <HAL_RCC_OscConfig+0x26c>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	2b00      	cmp	r3, #0
 8001208:	d005      	beq.n	8001216 <HAL_RCC_OscConfig+0x176>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	691b      	ldr	r3, [r3, #16]
 800120e:	2b01      	cmp	r3, #1
 8001210:	d001      	beq.n	8001216 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e1ba      	b.n	800158c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001216:	4b3d      	ldr	r3, [pc, #244]	; (800130c <HAL_RCC_OscConfig+0x26c>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	695b      	ldr	r3, [r3, #20]
 8001222:	00db      	lsls	r3, r3, #3
 8001224:	4939      	ldr	r1, [pc, #228]	; (800130c <HAL_RCC_OscConfig+0x26c>)
 8001226:	4313      	orrs	r3, r2
 8001228:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800122a:	e03a      	b.n	80012a2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	691b      	ldr	r3, [r3, #16]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d020      	beq.n	8001276 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001234:	4b36      	ldr	r3, [pc, #216]	; (8001310 <HAL_RCC_OscConfig+0x270>)
 8001236:	2201      	movs	r2, #1
 8001238:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800123a:	f7ff faaf 	bl	800079c <HAL_GetTick>
 800123e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001240:	e008      	b.n	8001254 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001242:	f7ff faab 	bl	800079c <HAL_GetTick>
 8001246:	4602      	mov	r2, r0
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	1ad3      	subs	r3, r2, r3
 800124c:	2b02      	cmp	r3, #2
 800124e:	d901      	bls.n	8001254 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001250:	2303      	movs	r3, #3
 8001252:	e19b      	b.n	800158c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001254:	4b2d      	ldr	r3, [pc, #180]	; (800130c <HAL_RCC_OscConfig+0x26c>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f003 0302 	and.w	r3, r3, #2
 800125c:	2b00      	cmp	r3, #0
 800125e:	d0f0      	beq.n	8001242 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001260:	4b2a      	ldr	r3, [pc, #168]	; (800130c <HAL_RCC_OscConfig+0x26c>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	695b      	ldr	r3, [r3, #20]
 800126c:	00db      	lsls	r3, r3, #3
 800126e:	4927      	ldr	r1, [pc, #156]	; (800130c <HAL_RCC_OscConfig+0x26c>)
 8001270:	4313      	orrs	r3, r2
 8001272:	600b      	str	r3, [r1, #0]
 8001274:	e015      	b.n	80012a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001276:	4b26      	ldr	r3, [pc, #152]	; (8001310 <HAL_RCC_OscConfig+0x270>)
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800127c:	f7ff fa8e 	bl	800079c <HAL_GetTick>
 8001280:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001282:	e008      	b.n	8001296 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001284:	f7ff fa8a 	bl	800079c <HAL_GetTick>
 8001288:	4602      	mov	r2, r0
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	2b02      	cmp	r3, #2
 8001290:	d901      	bls.n	8001296 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001292:	2303      	movs	r3, #3
 8001294:	e17a      	b.n	800158c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001296:	4b1d      	ldr	r3, [pc, #116]	; (800130c <HAL_RCC_OscConfig+0x26c>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 0302 	and.w	r3, r3, #2
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d1f0      	bne.n	8001284 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f003 0308 	and.w	r3, r3, #8
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d03a      	beq.n	8001324 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	699b      	ldr	r3, [r3, #24]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d019      	beq.n	80012ea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012b6:	4b17      	ldr	r3, [pc, #92]	; (8001314 <HAL_RCC_OscConfig+0x274>)
 80012b8:	2201      	movs	r2, #1
 80012ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012bc:	f7ff fa6e 	bl	800079c <HAL_GetTick>
 80012c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012c2:	e008      	b.n	80012d6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012c4:	f7ff fa6a 	bl	800079c <HAL_GetTick>
 80012c8:	4602      	mov	r2, r0
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d901      	bls.n	80012d6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80012d2:	2303      	movs	r3, #3
 80012d4:	e15a      	b.n	800158c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012d6:	4b0d      	ldr	r3, [pc, #52]	; (800130c <HAL_RCC_OscConfig+0x26c>)
 80012d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012da:	f003 0302 	and.w	r3, r3, #2
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d0f0      	beq.n	80012c4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80012e2:	2001      	movs	r0, #1
 80012e4:	f000 faa8 	bl	8001838 <RCC_Delay>
 80012e8:	e01c      	b.n	8001324 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012ea:	4b0a      	ldr	r3, [pc, #40]	; (8001314 <HAL_RCC_OscConfig+0x274>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012f0:	f7ff fa54 	bl	800079c <HAL_GetTick>
 80012f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012f6:	e00f      	b.n	8001318 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012f8:	f7ff fa50 	bl	800079c <HAL_GetTick>
 80012fc:	4602      	mov	r2, r0
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	2b02      	cmp	r3, #2
 8001304:	d908      	bls.n	8001318 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001306:	2303      	movs	r3, #3
 8001308:	e140      	b.n	800158c <HAL_RCC_OscConfig+0x4ec>
 800130a:	bf00      	nop
 800130c:	40021000 	.word	0x40021000
 8001310:	42420000 	.word	0x42420000
 8001314:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001318:	4b9e      	ldr	r3, [pc, #632]	; (8001594 <HAL_RCC_OscConfig+0x4f4>)
 800131a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800131c:	f003 0302 	and.w	r3, r3, #2
 8001320:	2b00      	cmp	r3, #0
 8001322:	d1e9      	bne.n	80012f8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f003 0304 	and.w	r3, r3, #4
 800132c:	2b00      	cmp	r3, #0
 800132e:	f000 80a6 	beq.w	800147e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001332:	2300      	movs	r3, #0
 8001334:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001336:	4b97      	ldr	r3, [pc, #604]	; (8001594 <HAL_RCC_OscConfig+0x4f4>)
 8001338:	69db      	ldr	r3, [r3, #28]
 800133a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d10d      	bne.n	800135e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001342:	4b94      	ldr	r3, [pc, #592]	; (8001594 <HAL_RCC_OscConfig+0x4f4>)
 8001344:	69db      	ldr	r3, [r3, #28]
 8001346:	4a93      	ldr	r2, [pc, #588]	; (8001594 <HAL_RCC_OscConfig+0x4f4>)
 8001348:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800134c:	61d3      	str	r3, [r2, #28]
 800134e:	4b91      	ldr	r3, [pc, #580]	; (8001594 <HAL_RCC_OscConfig+0x4f4>)
 8001350:	69db      	ldr	r3, [r3, #28]
 8001352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001356:	60bb      	str	r3, [r7, #8]
 8001358:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800135a:	2301      	movs	r3, #1
 800135c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800135e:	4b8e      	ldr	r3, [pc, #568]	; (8001598 <HAL_RCC_OscConfig+0x4f8>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001366:	2b00      	cmp	r3, #0
 8001368:	d118      	bne.n	800139c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800136a:	4b8b      	ldr	r3, [pc, #556]	; (8001598 <HAL_RCC_OscConfig+0x4f8>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a8a      	ldr	r2, [pc, #552]	; (8001598 <HAL_RCC_OscConfig+0x4f8>)
 8001370:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001374:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001376:	f7ff fa11 	bl	800079c <HAL_GetTick>
 800137a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800137c:	e008      	b.n	8001390 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800137e:	f7ff fa0d 	bl	800079c <HAL_GetTick>
 8001382:	4602      	mov	r2, r0
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	1ad3      	subs	r3, r2, r3
 8001388:	2b64      	cmp	r3, #100	; 0x64
 800138a:	d901      	bls.n	8001390 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800138c:	2303      	movs	r3, #3
 800138e:	e0fd      	b.n	800158c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001390:	4b81      	ldr	r3, [pc, #516]	; (8001598 <HAL_RCC_OscConfig+0x4f8>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001398:	2b00      	cmp	r3, #0
 800139a:	d0f0      	beq.n	800137e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d106      	bne.n	80013b2 <HAL_RCC_OscConfig+0x312>
 80013a4:	4b7b      	ldr	r3, [pc, #492]	; (8001594 <HAL_RCC_OscConfig+0x4f4>)
 80013a6:	6a1b      	ldr	r3, [r3, #32]
 80013a8:	4a7a      	ldr	r2, [pc, #488]	; (8001594 <HAL_RCC_OscConfig+0x4f4>)
 80013aa:	f043 0301 	orr.w	r3, r3, #1
 80013ae:	6213      	str	r3, [r2, #32]
 80013b0:	e02d      	b.n	800140e <HAL_RCC_OscConfig+0x36e>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	68db      	ldr	r3, [r3, #12]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d10c      	bne.n	80013d4 <HAL_RCC_OscConfig+0x334>
 80013ba:	4b76      	ldr	r3, [pc, #472]	; (8001594 <HAL_RCC_OscConfig+0x4f4>)
 80013bc:	6a1b      	ldr	r3, [r3, #32]
 80013be:	4a75      	ldr	r2, [pc, #468]	; (8001594 <HAL_RCC_OscConfig+0x4f4>)
 80013c0:	f023 0301 	bic.w	r3, r3, #1
 80013c4:	6213      	str	r3, [r2, #32]
 80013c6:	4b73      	ldr	r3, [pc, #460]	; (8001594 <HAL_RCC_OscConfig+0x4f4>)
 80013c8:	6a1b      	ldr	r3, [r3, #32]
 80013ca:	4a72      	ldr	r2, [pc, #456]	; (8001594 <HAL_RCC_OscConfig+0x4f4>)
 80013cc:	f023 0304 	bic.w	r3, r3, #4
 80013d0:	6213      	str	r3, [r2, #32]
 80013d2:	e01c      	b.n	800140e <HAL_RCC_OscConfig+0x36e>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	2b05      	cmp	r3, #5
 80013da:	d10c      	bne.n	80013f6 <HAL_RCC_OscConfig+0x356>
 80013dc:	4b6d      	ldr	r3, [pc, #436]	; (8001594 <HAL_RCC_OscConfig+0x4f4>)
 80013de:	6a1b      	ldr	r3, [r3, #32]
 80013e0:	4a6c      	ldr	r2, [pc, #432]	; (8001594 <HAL_RCC_OscConfig+0x4f4>)
 80013e2:	f043 0304 	orr.w	r3, r3, #4
 80013e6:	6213      	str	r3, [r2, #32]
 80013e8:	4b6a      	ldr	r3, [pc, #424]	; (8001594 <HAL_RCC_OscConfig+0x4f4>)
 80013ea:	6a1b      	ldr	r3, [r3, #32]
 80013ec:	4a69      	ldr	r2, [pc, #420]	; (8001594 <HAL_RCC_OscConfig+0x4f4>)
 80013ee:	f043 0301 	orr.w	r3, r3, #1
 80013f2:	6213      	str	r3, [r2, #32]
 80013f4:	e00b      	b.n	800140e <HAL_RCC_OscConfig+0x36e>
 80013f6:	4b67      	ldr	r3, [pc, #412]	; (8001594 <HAL_RCC_OscConfig+0x4f4>)
 80013f8:	6a1b      	ldr	r3, [r3, #32]
 80013fa:	4a66      	ldr	r2, [pc, #408]	; (8001594 <HAL_RCC_OscConfig+0x4f4>)
 80013fc:	f023 0301 	bic.w	r3, r3, #1
 8001400:	6213      	str	r3, [r2, #32]
 8001402:	4b64      	ldr	r3, [pc, #400]	; (8001594 <HAL_RCC_OscConfig+0x4f4>)
 8001404:	6a1b      	ldr	r3, [r3, #32]
 8001406:	4a63      	ldr	r2, [pc, #396]	; (8001594 <HAL_RCC_OscConfig+0x4f4>)
 8001408:	f023 0304 	bic.w	r3, r3, #4
 800140c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	68db      	ldr	r3, [r3, #12]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d015      	beq.n	8001442 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001416:	f7ff f9c1 	bl	800079c <HAL_GetTick>
 800141a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800141c:	e00a      	b.n	8001434 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800141e:	f7ff f9bd 	bl	800079c <HAL_GetTick>
 8001422:	4602      	mov	r2, r0
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	f241 3288 	movw	r2, #5000	; 0x1388
 800142c:	4293      	cmp	r3, r2
 800142e:	d901      	bls.n	8001434 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001430:	2303      	movs	r3, #3
 8001432:	e0ab      	b.n	800158c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001434:	4b57      	ldr	r3, [pc, #348]	; (8001594 <HAL_RCC_OscConfig+0x4f4>)
 8001436:	6a1b      	ldr	r3, [r3, #32]
 8001438:	f003 0302 	and.w	r3, r3, #2
 800143c:	2b00      	cmp	r3, #0
 800143e:	d0ee      	beq.n	800141e <HAL_RCC_OscConfig+0x37e>
 8001440:	e014      	b.n	800146c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001442:	f7ff f9ab 	bl	800079c <HAL_GetTick>
 8001446:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001448:	e00a      	b.n	8001460 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800144a:	f7ff f9a7 	bl	800079c <HAL_GetTick>
 800144e:	4602      	mov	r2, r0
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	1ad3      	subs	r3, r2, r3
 8001454:	f241 3288 	movw	r2, #5000	; 0x1388
 8001458:	4293      	cmp	r3, r2
 800145a:	d901      	bls.n	8001460 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800145c:	2303      	movs	r3, #3
 800145e:	e095      	b.n	800158c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001460:	4b4c      	ldr	r3, [pc, #304]	; (8001594 <HAL_RCC_OscConfig+0x4f4>)
 8001462:	6a1b      	ldr	r3, [r3, #32]
 8001464:	f003 0302 	and.w	r3, r3, #2
 8001468:	2b00      	cmp	r3, #0
 800146a:	d1ee      	bne.n	800144a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800146c:	7dfb      	ldrb	r3, [r7, #23]
 800146e:	2b01      	cmp	r3, #1
 8001470:	d105      	bne.n	800147e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001472:	4b48      	ldr	r3, [pc, #288]	; (8001594 <HAL_RCC_OscConfig+0x4f4>)
 8001474:	69db      	ldr	r3, [r3, #28]
 8001476:	4a47      	ldr	r2, [pc, #284]	; (8001594 <HAL_RCC_OscConfig+0x4f4>)
 8001478:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800147c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	69db      	ldr	r3, [r3, #28]
 8001482:	2b00      	cmp	r3, #0
 8001484:	f000 8081 	beq.w	800158a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001488:	4b42      	ldr	r3, [pc, #264]	; (8001594 <HAL_RCC_OscConfig+0x4f4>)
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f003 030c 	and.w	r3, r3, #12
 8001490:	2b08      	cmp	r3, #8
 8001492:	d061      	beq.n	8001558 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	69db      	ldr	r3, [r3, #28]
 8001498:	2b02      	cmp	r3, #2
 800149a:	d146      	bne.n	800152a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800149c:	4b3f      	ldr	r3, [pc, #252]	; (800159c <HAL_RCC_OscConfig+0x4fc>)
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a2:	f7ff f97b 	bl	800079c <HAL_GetTick>
 80014a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014a8:	e008      	b.n	80014bc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014aa:	f7ff f977 	bl	800079c <HAL_GetTick>
 80014ae:	4602      	mov	r2, r0
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	d901      	bls.n	80014bc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80014b8:	2303      	movs	r3, #3
 80014ba:	e067      	b.n	800158c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014bc:	4b35      	ldr	r3, [pc, #212]	; (8001594 <HAL_RCC_OscConfig+0x4f4>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d1f0      	bne.n	80014aa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6a1b      	ldr	r3, [r3, #32]
 80014cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014d0:	d108      	bne.n	80014e4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80014d2:	4b30      	ldr	r3, [pc, #192]	; (8001594 <HAL_RCC_OscConfig+0x4f4>)
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	492d      	ldr	r1, [pc, #180]	; (8001594 <HAL_RCC_OscConfig+0x4f4>)
 80014e0:	4313      	orrs	r3, r2
 80014e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014e4:	4b2b      	ldr	r3, [pc, #172]	; (8001594 <HAL_RCC_OscConfig+0x4f4>)
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6a19      	ldr	r1, [r3, #32]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f4:	430b      	orrs	r3, r1
 80014f6:	4927      	ldr	r1, [pc, #156]	; (8001594 <HAL_RCC_OscConfig+0x4f4>)
 80014f8:	4313      	orrs	r3, r2
 80014fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014fc:	4b27      	ldr	r3, [pc, #156]	; (800159c <HAL_RCC_OscConfig+0x4fc>)
 80014fe:	2201      	movs	r2, #1
 8001500:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001502:	f7ff f94b 	bl	800079c <HAL_GetTick>
 8001506:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001508:	e008      	b.n	800151c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800150a:	f7ff f947 	bl	800079c <HAL_GetTick>
 800150e:	4602      	mov	r2, r0
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	2b02      	cmp	r3, #2
 8001516:	d901      	bls.n	800151c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001518:	2303      	movs	r3, #3
 800151a:	e037      	b.n	800158c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800151c:	4b1d      	ldr	r3, [pc, #116]	; (8001594 <HAL_RCC_OscConfig+0x4f4>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001524:	2b00      	cmp	r3, #0
 8001526:	d0f0      	beq.n	800150a <HAL_RCC_OscConfig+0x46a>
 8001528:	e02f      	b.n	800158a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800152a:	4b1c      	ldr	r3, [pc, #112]	; (800159c <HAL_RCC_OscConfig+0x4fc>)
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001530:	f7ff f934 	bl	800079c <HAL_GetTick>
 8001534:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001536:	e008      	b.n	800154a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001538:	f7ff f930 	bl	800079c <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	2b02      	cmp	r3, #2
 8001544:	d901      	bls.n	800154a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	e020      	b.n	800158c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800154a:	4b12      	ldr	r3, [pc, #72]	; (8001594 <HAL_RCC_OscConfig+0x4f4>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d1f0      	bne.n	8001538 <HAL_RCC_OscConfig+0x498>
 8001556:	e018      	b.n	800158a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	69db      	ldr	r3, [r3, #28]
 800155c:	2b01      	cmp	r3, #1
 800155e:	d101      	bne.n	8001564 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	e013      	b.n	800158c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001564:	4b0b      	ldr	r3, [pc, #44]	; (8001594 <HAL_RCC_OscConfig+0x4f4>)
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6a1b      	ldr	r3, [r3, #32]
 8001574:	429a      	cmp	r2, r3
 8001576:	d106      	bne.n	8001586 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001582:	429a      	cmp	r2, r3
 8001584:	d001      	beq.n	800158a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e000      	b.n	800158c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800158a:	2300      	movs	r3, #0
}
 800158c:	4618      	mov	r0, r3
 800158e:	3718      	adds	r7, #24
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	40021000 	.word	0x40021000
 8001598:	40007000 	.word	0x40007000
 800159c:	42420060 	.word	0x42420060

080015a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d101      	bne.n	80015b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e0d0      	b.n	8001756 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015b4:	4b6a      	ldr	r3, [pc, #424]	; (8001760 <HAL_RCC_ClockConfig+0x1c0>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0307 	and.w	r3, r3, #7
 80015bc:	683a      	ldr	r2, [r7, #0]
 80015be:	429a      	cmp	r2, r3
 80015c0:	d910      	bls.n	80015e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015c2:	4b67      	ldr	r3, [pc, #412]	; (8001760 <HAL_RCC_ClockConfig+0x1c0>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f023 0207 	bic.w	r2, r3, #7
 80015ca:	4965      	ldr	r1, [pc, #404]	; (8001760 <HAL_RCC_ClockConfig+0x1c0>)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	4313      	orrs	r3, r2
 80015d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015d2:	4b63      	ldr	r3, [pc, #396]	; (8001760 <HAL_RCC_ClockConfig+0x1c0>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 0307 	and.w	r3, r3, #7
 80015da:	683a      	ldr	r2, [r7, #0]
 80015dc:	429a      	cmp	r2, r3
 80015de:	d001      	beq.n	80015e4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	e0b8      	b.n	8001756 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 0302 	and.w	r3, r3, #2
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d020      	beq.n	8001632 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0304 	and.w	r3, r3, #4
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d005      	beq.n	8001608 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015fc:	4b59      	ldr	r3, [pc, #356]	; (8001764 <HAL_RCC_ClockConfig+0x1c4>)
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	4a58      	ldr	r2, [pc, #352]	; (8001764 <HAL_RCC_ClockConfig+0x1c4>)
 8001602:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001606:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 0308 	and.w	r3, r3, #8
 8001610:	2b00      	cmp	r3, #0
 8001612:	d005      	beq.n	8001620 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001614:	4b53      	ldr	r3, [pc, #332]	; (8001764 <HAL_RCC_ClockConfig+0x1c4>)
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	4a52      	ldr	r2, [pc, #328]	; (8001764 <HAL_RCC_ClockConfig+0x1c4>)
 800161a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800161e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001620:	4b50      	ldr	r3, [pc, #320]	; (8001764 <HAL_RCC_ClockConfig+0x1c4>)
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	494d      	ldr	r1, [pc, #308]	; (8001764 <HAL_RCC_ClockConfig+0x1c4>)
 800162e:	4313      	orrs	r3, r2
 8001630:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	2b00      	cmp	r3, #0
 800163c:	d040      	beq.n	80016c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	2b01      	cmp	r3, #1
 8001644:	d107      	bne.n	8001656 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001646:	4b47      	ldr	r3, [pc, #284]	; (8001764 <HAL_RCC_ClockConfig+0x1c4>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d115      	bne.n	800167e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e07f      	b.n	8001756 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	2b02      	cmp	r3, #2
 800165c:	d107      	bne.n	800166e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800165e:	4b41      	ldr	r3, [pc, #260]	; (8001764 <HAL_RCC_ClockConfig+0x1c4>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d109      	bne.n	800167e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e073      	b.n	8001756 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800166e:	4b3d      	ldr	r3, [pc, #244]	; (8001764 <HAL_RCC_ClockConfig+0x1c4>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0302 	and.w	r3, r3, #2
 8001676:	2b00      	cmp	r3, #0
 8001678:	d101      	bne.n	800167e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e06b      	b.n	8001756 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800167e:	4b39      	ldr	r3, [pc, #228]	; (8001764 <HAL_RCC_ClockConfig+0x1c4>)
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	f023 0203 	bic.w	r2, r3, #3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	4936      	ldr	r1, [pc, #216]	; (8001764 <HAL_RCC_ClockConfig+0x1c4>)
 800168c:	4313      	orrs	r3, r2
 800168e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001690:	f7ff f884 	bl	800079c <HAL_GetTick>
 8001694:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001696:	e00a      	b.n	80016ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001698:	f7ff f880 	bl	800079c <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d901      	bls.n	80016ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e053      	b.n	8001756 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016ae:	4b2d      	ldr	r3, [pc, #180]	; (8001764 <HAL_RCC_ClockConfig+0x1c4>)
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f003 020c 	and.w	r2, r3, #12
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	429a      	cmp	r2, r3
 80016be:	d1eb      	bne.n	8001698 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016c0:	4b27      	ldr	r3, [pc, #156]	; (8001760 <HAL_RCC_ClockConfig+0x1c0>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 0307 	and.w	r3, r3, #7
 80016c8:	683a      	ldr	r2, [r7, #0]
 80016ca:	429a      	cmp	r2, r3
 80016cc:	d210      	bcs.n	80016f0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ce:	4b24      	ldr	r3, [pc, #144]	; (8001760 <HAL_RCC_ClockConfig+0x1c0>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f023 0207 	bic.w	r2, r3, #7
 80016d6:	4922      	ldr	r1, [pc, #136]	; (8001760 <HAL_RCC_ClockConfig+0x1c0>)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	4313      	orrs	r3, r2
 80016dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016de:	4b20      	ldr	r3, [pc, #128]	; (8001760 <HAL_RCC_ClockConfig+0x1c0>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0307 	and.w	r3, r3, #7
 80016e6:	683a      	ldr	r2, [r7, #0]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d001      	beq.n	80016f0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	e032      	b.n	8001756 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 0304 	and.w	r3, r3, #4
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d008      	beq.n	800170e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016fc:	4b19      	ldr	r3, [pc, #100]	; (8001764 <HAL_RCC_ClockConfig+0x1c4>)
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	4916      	ldr	r1, [pc, #88]	; (8001764 <HAL_RCC_ClockConfig+0x1c4>)
 800170a:	4313      	orrs	r3, r2
 800170c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0308 	and.w	r3, r3, #8
 8001716:	2b00      	cmp	r3, #0
 8001718:	d009      	beq.n	800172e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800171a:	4b12      	ldr	r3, [pc, #72]	; (8001764 <HAL_RCC_ClockConfig+0x1c4>)
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	691b      	ldr	r3, [r3, #16]
 8001726:	00db      	lsls	r3, r3, #3
 8001728:	490e      	ldr	r1, [pc, #56]	; (8001764 <HAL_RCC_ClockConfig+0x1c4>)
 800172a:	4313      	orrs	r3, r2
 800172c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800172e:	f000 f821 	bl	8001774 <HAL_RCC_GetSysClockFreq>
 8001732:	4601      	mov	r1, r0
 8001734:	4b0b      	ldr	r3, [pc, #44]	; (8001764 <HAL_RCC_ClockConfig+0x1c4>)
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	091b      	lsrs	r3, r3, #4
 800173a:	f003 030f 	and.w	r3, r3, #15
 800173e:	4a0a      	ldr	r2, [pc, #40]	; (8001768 <HAL_RCC_ClockConfig+0x1c8>)
 8001740:	5cd3      	ldrb	r3, [r2, r3]
 8001742:	fa21 f303 	lsr.w	r3, r1, r3
 8001746:	4a09      	ldr	r2, [pc, #36]	; (800176c <HAL_RCC_ClockConfig+0x1cc>)
 8001748:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800174a:	4b09      	ldr	r3, [pc, #36]	; (8001770 <HAL_RCC_ClockConfig+0x1d0>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4618      	mov	r0, r3
 8001750:	f7fe ffe2 	bl	8000718 <HAL_InitTick>

  return HAL_OK;
 8001754:	2300      	movs	r3, #0
}
 8001756:	4618      	mov	r0, r3
 8001758:	3710      	adds	r7, #16
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	40022000 	.word	0x40022000
 8001764:	40021000 	.word	0x40021000
 8001768:	08002538 	.word	0x08002538
 800176c:	20000004 	.word	0x20000004
 8001770:	20000008 	.word	0x20000008

08001774 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001774:	b490      	push	{r4, r7}
 8001776:	b08a      	sub	sp, #40	; 0x28
 8001778:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800177a:	4b2a      	ldr	r3, [pc, #168]	; (8001824 <HAL_RCC_GetSysClockFreq+0xb0>)
 800177c:	1d3c      	adds	r4, r7, #4
 800177e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001780:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001784:	4b28      	ldr	r3, [pc, #160]	; (8001828 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001786:	881b      	ldrh	r3, [r3, #0]
 8001788:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800178a:	2300      	movs	r3, #0
 800178c:	61fb      	str	r3, [r7, #28]
 800178e:	2300      	movs	r3, #0
 8001790:	61bb      	str	r3, [r7, #24]
 8001792:	2300      	movs	r3, #0
 8001794:	627b      	str	r3, [r7, #36]	; 0x24
 8001796:	2300      	movs	r3, #0
 8001798:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800179a:	2300      	movs	r3, #0
 800179c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800179e:	4b23      	ldr	r3, [pc, #140]	; (800182c <HAL_RCC_GetSysClockFreq+0xb8>)
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	f003 030c 	and.w	r3, r3, #12
 80017aa:	2b04      	cmp	r3, #4
 80017ac:	d002      	beq.n	80017b4 <HAL_RCC_GetSysClockFreq+0x40>
 80017ae:	2b08      	cmp	r3, #8
 80017b0:	d003      	beq.n	80017ba <HAL_RCC_GetSysClockFreq+0x46>
 80017b2:	e02d      	b.n	8001810 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80017b4:	4b1e      	ldr	r3, [pc, #120]	; (8001830 <HAL_RCC_GetSysClockFreq+0xbc>)
 80017b6:	623b      	str	r3, [r7, #32]
      break;
 80017b8:	e02d      	b.n	8001816 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	0c9b      	lsrs	r3, r3, #18
 80017be:	f003 030f 	and.w	r3, r3, #15
 80017c2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80017c6:	4413      	add	r3, r2
 80017c8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80017cc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d013      	beq.n	8001800 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80017d8:	4b14      	ldr	r3, [pc, #80]	; (800182c <HAL_RCC_GetSysClockFreq+0xb8>)
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	0c5b      	lsrs	r3, r3, #17
 80017de:	f003 0301 	and.w	r3, r3, #1
 80017e2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80017e6:	4413      	add	r3, r2
 80017e8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80017ec:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	4a0f      	ldr	r2, [pc, #60]	; (8001830 <HAL_RCC_GetSysClockFreq+0xbc>)
 80017f2:	fb02 f203 	mul.w	r2, r2, r3
 80017f6:	69bb      	ldr	r3, [r7, #24]
 80017f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80017fc:	627b      	str	r3, [r7, #36]	; 0x24
 80017fe:	e004      	b.n	800180a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	4a0c      	ldr	r2, [pc, #48]	; (8001834 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001804:	fb02 f303 	mul.w	r3, r2, r3
 8001808:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800180a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180c:	623b      	str	r3, [r7, #32]
      break;
 800180e:	e002      	b.n	8001816 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001810:	4b07      	ldr	r3, [pc, #28]	; (8001830 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001812:	623b      	str	r3, [r7, #32]
      break;
 8001814:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001816:	6a3b      	ldr	r3, [r7, #32]
}
 8001818:	4618      	mov	r0, r3
 800181a:	3728      	adds	r7, #40	; 0x28
 800181c:	46bd      	mov	sp, r7
 800181e:	bc90      	pop	{r4, r7}
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	08002524 	.word	0x08002524
 8001828:	08002534 	.word	0x08002534
 800182c:	40021000 	.word	0x40021000
 8001830:	007a1200 	.word	0x007a1200
 8001834:	003d0900 	.word	0x003d0900

08001838 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001838:	b480      	push	{r7}
 800183a:	b085      	sub	sp, #20
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001840:	4b0a      	ldr	r3, [pc, #40]	; (800186c <RCC_Delay+0x34>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a0a      	ldr	r2, [pc, #40]	; (8001870 <RCC_Delay+0x38>)
 8001846:	fba2 2303 	umull	r2, r3, r2, r3
 800184a:	0a5b      	lsrs	r3, r3, #9
 800184c:	687a      	ldr	r2, [r7, #4]
 800184e:	fb02 f303 	mul.w	r3, r2, r3
 8001852:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001854:	bf00      	nop
  }
  while (Delay --);
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	1e5a      	subs	r2, r3, #1
 800185a:	60fa      	str	r2, [r7, #12]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d1f9      	bne.n	8001854 <RCC_Delay+0x1c>
}
 8001860:	bf00      	nop
 8001862:	3714      	adds	r7, #20
 8001864:	46bd      	mov	sp, r7
 8001866:	bc80      	pop	{r7}
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	20000004 	.word	0x20000004
 8001870:	10624dd3 	.word	0x10624dd3

08001874 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d101      	bne.n	8001886 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e053      	b.n	800192e <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2200      	movs	r2, #0
 800188a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001892:	b2db      	uxtb	r3, r3
 8001894:	2b00      	cmp	r3, #0
 8001896:	d106      	bne.n	80018a6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2200      	movs	r2, #0
 800189c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	f7fe fdc1 	bl	8000428 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2202      	movs	r2, #2
 80018aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80018bc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685a      	ldr	r2, [r3, #4]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	431a      	orrs	r2, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	431a      	orrs	r2, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	691b      	ldr	r3, [r3, #16]
 80018d2:	431a      	orrs	r2, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	695b      	ldr	r3, [r3, #20]
 80018d8:	431a      	orrs	r2, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	699b      	ldr	r3, [r3, #24]
 80018de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018e2:	431a      	orrs	r2, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	69db      	ldr	r3, [r3, #28]
 80018e8:	431a      	orrs	r2, r3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6a1b      	ldr	r3, [r3, #32]
 80018ee:	ea42 0103 	orr.w	r1, r2, r3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	430a      	orrs	r2, r1
 80018fc:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	699b      	ldr	r3, [r3, #24]
 8001902:	0c1a      	lsrs	r2, r3, #16
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f002 0204 	and.w	r2, r2, #4
 800190c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	69da      	ldr	r2, [r3, #28]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800191c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2200      	movs	r2, #0
 8001922:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2201      	movs	r2, #1
 8001928:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}

08001936 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001936:	b580      	push	{r7, lr}
 8001938:	b088      	sub	sp, #32
 800193a:	af00      	add	r7, sp, #0
 800193c:	60f8      	str	r0, [r7, #12]
 800193e:	60b9      	str	r1, [r7, #8]
 8001940:	603b      	str	r3, [r7, #0]
 8001942:	4613      	mov	r3, r2
 8001944:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001946:	2300      	movs	r3, #0
 8001948:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001950:	2b01      	cmp	r3, #1
 8001952:	d101      	bne.n	8001958 <HAL_SPI_Transmit+0x22>
 8001954:	2302      	movs	r3, #2
 8001956:	e11e      	b.n	8001b96 <HAL_SPI_Transmit+0x260>
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	2201      	movs	r2, #1
 800195c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001960:	f7fe ff1c 	bl	800079c <HAL_GetTick>
 8001964:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001966:	88fb      	ldrh	r3, [r7, #6]
 8001968:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001970:	b2db      	uxtb	r3, r3
 8001972:	2b01      	cmp	r3, #1
 8001974:	d002      	beq.n	800197c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001976:	2302      	movs	r3, #2
 8001978:	77fb      	strb	r3, [r7, #31]
    goto error;
 800197a:	e103      	b.n	8001b84 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d002      	beq.n	8001988 <HAL_SPI_Transmit+0x52>
 8001982:	88fb      	ldrh	r3, [r7, #6]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d102      	bne.n	800198e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800198c:	e0fa      	b.n	8001b84 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	2203      	movs	r2, #3
 8001992:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	2200      	movs	r2, #0
 800199a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	68ba      	ldr	r2, [r7, #8]
 80019a0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	88fa      	ldrh	r2, [r7, #6]
 80019a6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	88fa      	ldrh	r2, [r7, #6]
 80019ac:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	2200      	movs	r2, #0
 80019b2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	2200      	movs	r2, #0
 80019b8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	2200      	movs	r2, #0
 80019be:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2200      	movs	r2, #0
 80019c4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	2200      	movs	r2, #0
 80019ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80019d4:	d107      	bne.n	80019e6 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80019e4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019f0:	2b40      	cmp	r3, #64	; 0x40
 80019f2:	d007      	beq.n	8001a04 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a02:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a0c:	d14b      	bne.n	8001aa6 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d002      	beq.n	8001a1c <HAL_SPI_Transmit+0xe6>
 8001a16:	8afb      	ldrh	r3, [r7, #22]
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d13e      	bne.n	8001a9a <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a20:	881a      	ldrh	r2, [r3, #0]
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2c:	1c9a      	adds	r2, r3, #2
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001a36:	b29b      	uxth	r3, r3
 8001a38:	3b01      	subs	r3, #1
 8001a3a:	b29a      	uxth	r2, r3
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001a40:	e02b      	b.n	8001a9a <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	f003 0302 	and.w	r3, r3, #2
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d112      	bne.n	8001a76 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a54:	881a      	ldrh	r2, [r3, #0]
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a60:	1c9a      	adds	r2, r3, #2
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001a6a:	b29b      	uxth	r3, r3
 8001a6c:	3b01      	subs	r3, #1
 8001a6e:	b29a      	uxth	r2, r3
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	86da      	strh	r2, [r3, #54]	; 0x36
 8001a74:	e011      	b.n	8001a9a <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001a76:	f7fe fe91 	bl	800079c <HAL_GetTick>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	683a      	ldr	r2, [r7, #0]
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d803      	bhi.n	8001a8e <HAL_SPI_Transmit+0x158>
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a8c:	d102      	bne.n	8001a94 <HAL_SPI_Transmit+0x15e>
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d102      	bne.n	8001a9a <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8001a94:	2303      	movs	r3, #3
 8001a96:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001a98:	e074      	b.n	8001b84 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d1ce      	bne.n	8001a42 <HAL_SPI_Transmit+0x10c>
 8001aa4:	e04c      	b.n	8001b40 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d002      	beq.n	8001ab4 <HAL_SPI_Transmit+0x17e>
 8001aae:	8afb      	ldrh	r3, [r7, #22]
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d140      	bne.n	8001b36 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	330c      	adds	r3, #12
 8001abe:	7812      	ldrb	r2, [r2, #0]
 8001ac0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac6:	1c5a      	adds	r2, r3, #1
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	3b01      	subs	r3, #1
 8001ad4:	b29a      	uxth	r2, r3
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001ada:	e02c      	b.n	8001b36 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d113      	bne.n	8001b12 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	330c      	adds	r3, #12
 8001af4:	7812      	ldrb	r2, [r2, #0]
 8001af6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afc:	1c5a      	adds	r2, r3, #1
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	3b01      	subs	r3, #1
 8001b0a:	b29a      	uxth	r2, r3
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	86da      	strh	r2, [r3, #54]	; 0x36
 8001b10:	e011      	b.n	8001b36 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001b12:	f7fe fe43 	bl	800079c <HAL_GetTick>
 8001b16:	4602      	mov	r2, r0
 8001b18:	69bb      	ldr	r3, [r7, #24]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	683a      	ldr	r2, [r7, #0]
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d803      	bhi.n	8001b2a <HAL_SPI_Transmit+0x1f4>
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b28:	d102      	bne.n	8001b30 <HAL_SPI_Transmit+0x1fa>
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d102      	bne.n	8001b36 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001b34:	e026      	b.n	8001b84 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b3a:	b29b      	uxth	r3, r3
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d1cd      	bne.n	8001adc <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	6839      	ldr	r1, [r7, #0]
 8001b44:	68f8      	ldr	r0, [r7, #12]
 8001b46:	f000 fc96 	bl	8002476 <SPI_EndRxTxTransaction>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d002      	beq.n	8001b56 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2220      	movs	r2, #32
 8001b54:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d10a      	bne.n	8001b74 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001b5e:	2300      	movs	r3, #0
 8001b60:	613b      	str	r3, [r7, #16]
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	613b      	str	r3, [r7, #16]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	613b      	str	r3, [r7, #16]
 8001b72:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d002      	beq.n	8001b82 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	77fb      	strb	r3, [r7, #31]
 8001b80:	e000      	b.n	8001b84 <HAL_SPI_Transmit+0x24e>
  }

error:
 8001b82:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2201      	movs	r2, #1
 8001b88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001b94:	7ffb      	ldrb	r3, [r7, #31]
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3720      	adds	r7, #32
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	b088      	sub	sp, #32
 8001ba2:	af02      	add	r7, sp, #8
 8001ba4:	60f8      	str	r0, [r7, #12]
 8001ba6:	60b9      	str	r1, [r7, #8]
 8001ba8:	603b      	str	r3, [r7, #0]
 8001baa:	4613      	mov	r3, r2
 8001bac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001bba:	d112      	bne.n	8001be2 <HAL_SPI_Receive+0x44>
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d10e      	bne.n	8001be2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2204      	movs	r2, #4
 8001bc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001bcc:	88fa      	ldrh	r2, [r7, #6]
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	9300      	str	r3, [sp, #0]
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	68ba      	ldr	r2, [r7, #8]
 8001bd6:	68b9      	ldr	r1, [r7, #8]
 8001bd8:	68f8      	ldr	r0, [r7, #12]
 8001bda:	f000 f8e9 	bl	8001db0 <HAL_SPI_TransmitReceive>
 8001bde:	4603      	mov	r3, r0
 8001be0:	e0e2      	b.n	8001da8 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d101      	bne.n	8001bf0 <HAL_SPI_Receive+0x52>
 8001bec:	2302      	movs	r3, #2
 8001bee:	e0db      	b.n	8001da8 <HAL_SPI_Receive+0x20a>
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001bf8:	f7fe fdd0 	bl	800079c <HAL_GetTick>
 8001bfc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d002      	beq.n	8001c10 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001c0e:	e0c2      	b.n	8001d96 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d002      	beq.n	8001c1c <HAL_SPI_Receive+0x7e>
 8001c16:	88fb      	ldrh	r3, [r7, #6]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d102      	bne.n	8001c22 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001c20:	e0b9      	b.n	8001d96 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2204      	movs	r2, #4
 8001c26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	68ba      	ldr	r2, [r7, #8]
 8001c34:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	88fa      	ldrh	r2, [r7, #6]
 8001c3a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	88fa      	ldrh	r2, [r7, #6]
 8001c40:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2200      	movs	r2, #0
 8001c46:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2200      	movs	r2, #0
 8001c52:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2200      	movs	r2, #0
 8001c58:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c68:	d107      	bne.n	8001c7a <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001c78:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c84:	2b40      	cmp	r3, #64	; 0x40
 8001c86:	d007      	beq.n	8001c98 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c96:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d162      	bne.n	8001d66 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001ca0:	e02e      	b.n	8001d00 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	f003 0301 	and.w	r3, r3, #1
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d115      	bne.n	8001cdc <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f103 020c 	add.w	r2, r3, #12
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cbc:	7812      	ldrb	r2, [r2, #0]
 8001cbe:	b2d2      	uxtb	r2, r2
 8001cc0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cc6:	1c5a      	adds	r2, r3, #1
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	3b01      	subs	r3, #1
 8001cd4:	b29a      	uxth	r2, r3
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001cda:	e011      	b.n	8001d00 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001cdc:	f7fe fd5e 	bl	800079c <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	683a      	ldr	r2, [r7, #0]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d803      	bhi.n	8001cf4 <HAL_SPI_Receive+0x156>
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cf2:	d102      	bne.n	8001cfa <HAL_SPI_Receive+0x15c>
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d102      	bne.n	8001d00 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001cfe:	e04a      	b.n	8001d96 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d1cb      	bne.n	8001ca2 <HAL_SPI_Receive+0x104>
 8001d0a:	e031      	b.n	8001d70 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	f003 0301 	and.w	r3, r3, #1
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d113      	bne.n	8001d42 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	68da      	ldr	r2, [r3, #12]
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d24:	b292      	uxth	r2, r2
 8001d26:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d2c:	1c9a      	adds	r2, r3, #2
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	3b01      	subs	r3, #1
 8001d3a:	b29a      	uxth	r2, r3
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001d40:	e011      	b.n	8001d66 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001d42:	f7fe fd2b 	bl	800079c <HAL_GetTick>
 8001d46:	4602      	mov	r2, r0
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	683a      	ldr	r2, [r7, #0]
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d803      	bhi.n	8001d5a <HAL_SPI_Receive+0x1bc>
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d58:	d102      	bne.n	8001d60 <HAL_SPI_Receive+0x1c2>
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d102      	bne.n	8001d66 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8001d60:	2303      	movs	r3, #3
 8001d62:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001d64:	e017      	b.n	8001d96 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d1cd      	bne.n	8001d0c <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001d70:	693a      	ldr	r2, [r7, #16]
 8001d72:	6839      	ldr	r1, [r7, #0]
 8001d74:	68f8      	ldr	r0, [r7, #12]
 8001d76:	f000 fb2c 	bl	80023d2 <SPI_EndRxTransaction>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d002      	beq.n	8001d86 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2220      	movs	r2, #32
 8001d84:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d002      	beq.n	8001d94 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	75fb      	strb	r3, [r7, #23]
 8001d92:	e000      	b.n	8001d96 <HAL_SPI_Receive+0x1f8>
  }

error :
 8001d94:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2201      	movs	r2, #1
 8001d9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2200      	movs	r2, #0
 8001da2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001da6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3718      	adds	r7, #24
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b08c      	sub	sp, #48	; 0x30
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	60b9      	str	r1, [r7, #8]
 8001dba:	607a      	str	r2, [r7, #4]
 8001dbc:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d101      	bne.n	8001dd6 <HAL_SPI_TransmitReceive+0x26>
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	e18a      	b.n	80020ec <HAL_SPI_TransmitReceive+0x33c>
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2201      	movs	r2, #1
 8001dda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001dde:	f7fe fcdd 	bl	800079c <HAL_GetTick>
 8001de2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001dea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001df4:	887b      	ldrh	r3, [r7, #2]
 8001df6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001df8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d00f      	beq.n	8001e20 <HAL_SPI_TransmitReceive+0x70>
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001e06:	d107      	bne.n	8001e18 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d103      	bne.n	8001e18 <HAL_SPI_TransmitReceive+0x68>
 8001e10:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001e14:	2b04      	cmp	r3, #4
 8001e16:	d003      	beq.n	8001e20 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001e18:	2302      	movs	r3, #2
 8001e1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001e1e:	e15b      	b.n	80020d8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d005      	beq.n	8001e32 <HAL_SPI_TransmitReceive+0x82>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d002      	beq.n	8001e32 <HAL_SPI_TransmitReceive+0x82>
 8001e2c:	887b      	ldrh	r3, [r7, #2]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d103      	bne.n	8001e3a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001e38:	e14e      	b.n	80020d8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	2b04      	cmp	r3, #4
 8001e44:	d003      	beq.n	8001e4e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2205      	movs	r2, #5
 8001e4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2200      	movs	r2, #0
 8001e52:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	887a      	ldrh	r2, [r7, #2]
 8001e5e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	887a      	ldrh	r2, [r7, #2]
 8001e64:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	68ba      	ldr	r2, [r7, #8]
 8001e6a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	887a      	ldrh	r2, [r7, #2]
 8001e70:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	887a      	ldrh	r2, [r7, #2]
 8001e76:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	2200      	movs	r2, #0
 8001e82:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e8e:	2b40      	cmp	r3, #64	; 0x40
 8001e90:	d007      	beq.n	8001ea2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ea0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001eaa:	d178      	bne.n	8001f9e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d002      	beq.n	8001eba <HAL_SPI_TransmitReceive+0x10a>
 8001eb4:	8b7b      	ldrh	r3, [r7, #26]
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d166      	bne.n	8001f88 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ebe:	881a      	ldrh	r2, [r3, #0]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eca:	1c9a      	adds	r2, r3, #2
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	b29a      	uxth	r2, r3
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001ede:	e053      	b.n	8001f88 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f003 0302 	and.w	r3, r3, #2
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d11b      	bne.n	8001f26 <HAL_SPI_TransmitReceive+0x176>
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ef2:	b29b      	uxth	r3, r3
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d016      	beq.n	8001f26 <HAL_SPI_TransmitReceive+0x176>
 8001ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d113      	bne.n	8001f26 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f02:	881a      	ldrh	r2, [r3, #0]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0e:	1c9a      	adds	r2, r3, #2
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	b29a      	uxth	r2, r3
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001f22:	2300      	movs	r3, #0
 8001f24:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	f003 0301 	and.w	r3, r3, #1
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d119      	bne.n	8001f68 <HAL_SPI_TransmitReceive+0x1b8>
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d014      	beq.n	8001f68 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	68da      	ldr	r2, [r3, #12]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f48:	b292      	uxth	r2, r2
 8001f4a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f50:	1c9a      	adds	r2, r3, #2
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	3b01      	subs	r3, #1
 8001f5e:	b29a      	uxth	r2, r3
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001f64:	2301      	movs	r3, #1
 8001f66:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001f68:	f7fe fc18 	bl	800079c <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d807      	bhi.n	8001f88 <HAL_SPI_TransmitReceive+0x1d8>
 8001f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f7e:	d003      	beq.n	8001f88 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8001f80:	2303      	movs	r3, #3
 8001f82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001f86:	e0a7      	b.n	80020d8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d1a6      	bne.n	8001ee0 <HAL_SPI_TransmitReceive+0x130>
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d1a1      	bne.n	8001ee0 <HAL_SPI_TransmitReceive+0x130>
 8001f9c:	e07c      	b.n	8002098 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d002      	beq.n	8001fac <HAL_SPI_TransmitReceive+0x1fc>
 8001fa6:	8b7b      	ldrh	r3, [r7, #26]
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d16b      	bne.n	8002084 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	330c      	adds	r3, #12
 8001fb6:	7812      	ldrb	r2, [r2, #0]
 8001fb8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fbe:	1c5a      	adds	r2, r3, #1
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	3b01      	subs	r3, #1
 8001fcc:	b29a      	uxth	r2, r3
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001fd2:	e057      	b.n	8002084 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d11c      	bne.n	800201c <HAL_SPI_TransmitReceive+0x26c>
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fe6:	b29b      	uxth	r3, r3
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d017      	beq.n	800201c <HAL_SPI_TransmitReceive+0x26c>
 8001fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d114      	bne.n	800201c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	330c      	adds	r3, #12
 8001ffc:	7812      	ldrb	r2, [r2, #0]
 8001ffe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002004:	1c5a      	adds	r2, r3, #1
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800200e:	b29b      	uxth	r3, r3
 8002010:	3b01      	subs	r3, #1
 8002012:	b29a      	uxth	r2, r3
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002018:	2300      	movs	r3, #0
 800201a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	f003 0301 	and.w	r3, r3, #1
 8002026:	2b01      	cmp	r3, #1
 8002028:	d119      	bne.n	800205e <HAL_SPI_TransmitReceive+0x2ae>
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800202e:	b29b      	uxth	r3, r3
 8002030:	2b00      	cmp	r3, #0
 8002032:	d014      	beq.n	800205e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	68da      	ldr	r2, [r3, #12]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800203e:	b2d2      	uxtb	r2, r2
 8002040:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002046:	1c5a      	adds	r2, r3, #1
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002050:	b29b      	uxth	r3, r3
 8002052:	3b01      	subs	r3, #1
 8002054:	b29a      	uxth	r2, r3
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800205a:	2301      	movs	r3, #1
 800205c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800205e:	f7fe fb9d 	bl	800079c <HAL_GetTick>
 8002062:	4602      	mov	r2, r0
 8002064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800206a:	429a      	cmp	r2, r3
 800206c:	d803      	bhi.n	8002076 <HAL_SPI_TransmitReceive+0x2c6>
 800206e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002074:	d102      	bne.n	800207c <HAL_SPI_TransmitReceive+0x2cc>
 8002076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002078:	2b00      	cmp	r3, #0
 800207a:	d103      	bne.n	8002084 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800207c:	2303      	movs	r3, #3
 800207e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002082:	e029      	b.n	80020d8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002088:	b29b      	uxth	r3, r3
 800208a:	2b00      	cmp	r3, #0
 800208c:	d1a2      	bne.n	8001fd4 <HAL_SPI_TransmitReceive+0x224>
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002092:	b29b      	uxth	r3, r3
 8002094:	2b00      	cmp	r3, #0
 8002096:	d19d      	bne.n	8001fd4 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002098:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800209a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800209c:	68f8      	ldr	r0, [r7, #12]
 800209e:	f000 f9ea 	bl	8002476 <SPI_EndRxTxTransaction>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d006      	beq.n	80020b6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2220      	movs	r2, #32
 80020b2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80020b4:	e010      	b.n	80020d8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d10b      	bne.n	80020d6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80020be:	2300      	movs	r3, #0
 80020c0:	617b      	str	r3, [r7, #20]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	617b      	str	r3, [r7, #20]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	617b      	str	r3, [r7, #20]
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	e000      	b.n	80020d8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80020d6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2201      	movs	r2, #1
 80020dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2200      	movs	r2, #0
 80020e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80020e8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3730      	adds	r7, #48	; 0x30
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b088      	sub	sp, #32
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800210c:	69bb      	ldr	r3, [r7, #24]
 800210e:	099b      	lsrs	r3, r3, #6
 8002110:	f003 0301 	and.w	r3, r3, #1
 8002114:	2b00      	cmp	r3, #0
 8002116:	d10f      	bne.n	8002138 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002118:	69bb      	ldr	r3, [r7, #24]
 800211a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800211e:	2b00      	cmp	r3, #0
 8002120:	d00a      	beq.n	8002138 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	099b      	lsrs	r3, r3, #6
 8002126:	f003 0301 	and.w	r3, r3, #1
 800212a:	2b00      	cmp	r3, #0
 800212c:	d004      	beq.n	8002138 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	4798      	blx	r3
    return;
 8002136:	e0bf      	b.n	80022b8 <HAL_SPI_IRQHandler+0x1c4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	085b      	lsrs	r3, r3, #1
 800213c:	f003 0301 	and.w	r3, r3, #1
 8002140:	2b00      	cmp	r3, #0
 8002142:	d00a      	beq.n	800215a <HAL_SPI_IRQHandler+0x66>
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	09db      	lsrs	r3, r3, #7
 8002148:	f003 0301 	and.w	r3, r3, #1
 800214c:	2b00      	cmp	r3, #0
 800214e:	d004      	beq.n	800215a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	4798      	blx	r3
    return;
 8002158:	e0ae      	b.n	80022b8 <HAL_SPI_IRQHandler+0x1c4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	095b      	lsrs	r3, r3, #5
 800215e:	f003 0301 	and.w	r3, r3, #1
 8002162:	2b00      	cmp	r3, #0
 8002164:	d106      	bne.n	8002174 <HAL_SPI_IRQHandler+0x80>
 8002166:	69bb      	ldr	r3, [r7, #24]
 8002168:	099b      	lsrs	r3, r3, #6
 800216a:	f003 0301 	and.w	r3, r3, #1
 800216e:	2b00      	cmp	r3, #0
 8002170:	f000 80a2 	beq.w	80022b8 <HAL_SPI_IRQHandler+0x1c4>
       && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	095b      	lsrs	r3, r3, #5
 8002178:	f003 0301 	and.w	r3, r3, #1
 800217c:	2b00      	cmp	r3, #0
 800217e:	f000 809b 	beq.w	80022b8 <HAL_SPI_IRQHandler+0x1c4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	099b      	lsrs	r3, r3, #6
 8002186:	f003 0301 	and.w	r3, r3, #1
 800218a:	2b00      	cmp	r3, #0
 800218c:	d023      	beq.n	80021d6 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002194:	b2db      	uxtb	r3, r3
 8002196:	2b03      	cmp	r3, #3
 8002198:	d011      	beq.n	80021be <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800219e:	f043 0204 	orr.w	r2, r3, #4
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80021a6:	2300      	movs	r3, #0
 80021a8:	617b      	str	r3, [r7, #20]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	617b      	str	r3, [r7, #20]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	617b      	str	r3, [r7, #20]
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	e00b      	b.n	80021d6 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80021be:	2300      	movs	r3, #0
 80021c0:	613b      	str	r3, [r7, #16]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	613b      	str	r3, [r7, #16]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	613b      	str	r3, [r7, #16]
 80021d2:	693b      	ldr	r3, [r7, #16]
        return;
 80021d4:	e070      	b.n	80022b8 <HAL_SPI_IRQHandler+0x1c4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80021d6:	69bb      	ldr	r3, [r7, #24]
 80021d8:	095b      	lsrs	r3, r3, #5
 80021da:	f003 0301 	and.w	r3, r3, #1
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d014      	beq.n	800220c <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021e6:	f043 0201 	orr.w	r2, r3, #1
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80021ee:	2300      	movs	r3, #0
 80021f0:	60fb      	str	r3, [r7, #12]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	60fb      	str	r3, [r7, #12]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002208:	601a      	str	r2, [r3, #0]
 800220a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002210:	2b00      	cmp	r3, #0
 8002212:	d050      	beq.n	80022b6 <HAL_SPI_IRQHandler+0x1c2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	685a      	ldr	r2, [r3, #4]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002222:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2201      	movs	r2, #1
 8002228:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	f003 0302 	and.w	r3, r3, #2
 8002232:	2b00      	cmp	r3, #0
 8002234:	d104      	bne.n	8002240 <HAL_SPI_IRQHandler+0x14c>
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	f003 0301 	and.w	r3, r3, #1
 800223c:	2b00      	cmp	r3, #0
 800223e:	d034      	beq.n	80022aa <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	685a      	ldr	r2, [r3, #4]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f022 0203 	bic.w	r2, r2, #3
 800224e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002254:	2b00      	cmp	r3, #0
 8002256:	d011      	beq.n	800227c <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800225c:	4a18      	ldr	r2, [pc, #96]	; (80022c0 <HAL_SPI_IRQHandler+0x1cc>)
 800225e:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002264:	4618      	mov	r0, r3
 8002266:	f7fe fc2d 	bl	8000ac4 <HAL_DMA_Abort_IT>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d005      	beq.n	800227c <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002274:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002280:	2b00      	cmp	r3, #0
 8002282:	d016      	beq.n	80022b2 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002288:	4a0d      	ldr	r2, [pc, #52]	; (80022c0 <HAL_SPI_IRQHandler+0x1cc>)
 800228a:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002290:	4618      	mov	r0, r3
 8002292:	f7fe fc17 	bl	8000ac4 <HAL_DMA_Abort_IT>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d00a      	beq.n	80022b2 <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022a0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80022a8:	e003      	b.n	80022b2 <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f000 f80a 	bl	80022c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80022b0:	e000      	b.n	80022b4 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 80022b2:	bf00      	nop
    return;
 80022b4:	bf00      	nop
 80022b6:	bf00      	nop
  }
}
 80022b8:	3720      	adds	r7, #32
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	080022d7 	.word	0x080022d7

080022c4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80022cc:	bf00      	nop
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bc80      	pop	{r7}
 80022d4:	4770      	bx	lr

080022d6 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80022d6:	b580      	push	{r7, lr}
 80022d8:	b084      	sub	sp, #16
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e2:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2200      	movs	r2, #0
 80022e8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2200      	movs	r2, #0
 80022ee:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80022f0:	68f8      	ldr	r0, [r7, #12]
 80022f2:	f7ff ffe7 	bl	80022c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80022f6:	bf00      	nop
 80022f8:	3710      	adds	r7, #16
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80022fe:	b580      	push	{r7, lr}
 8002300:	b084      	sub	sp, #16
 8002302:	af00      	add	r7, sp, #0
 8002304:	60f8      	str	r0, [r7, #12]
 8002306:	60b9      	str	r1, [r7, #8]
 8002308:	603b      	str	r3, [r7, #0]
 800230a:	4613      	mov	r3, r2
 800230c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800230e:	e04c      	b.n	80023aa <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002316:	d048      	beq.n	80023aa <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002318:	f7fe fa40 	bl	800079c <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	683a      	ldr	r2, [r7, #0]
 8002324:	429a      	cmp	r2, r3
 8002326:	d902      	bls.n	800232e <SPI_WaitFlagStateUntilTimeout+0x30>
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d13d      	bne.n	80023aa <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	685a      	ldr	r2, [r3, #4]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800233c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002346:	d111      	bne.n	800236c <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002350:	d004      	beq.n	800235c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800235a:	d107      	bne.n	800236c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800236a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002370:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002374:	d10f      	bne.n	8002396 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002384:	601a      	str	r2, [r3, #0]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002394:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2201      	movs	r2, #1
 800239a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2200      	movs	r2, #0
 80023a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e00f      	b.n	80023ca <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	689a      	ldr	r2, [r3, #8]
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	4013      	ands	r3, r2
 80023b4:	68ba      	ldr	r2, [r7, #8]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	bf0c      	ite	eq
 80023ba:	2301      	moveq	r3, #1
 80023bc:	2300      	movne	r3, #0
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	461a      	mov	r2, r3
 80023c2:	79fb      	ldrb	r3, [r7, #7]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d1a3      	bne.n	8002310 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3710      	adds	r7, #16
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80023d2:	b580      	push	{r7, lr}
 80023d4:	b086      	sub	sp, #24
 80023d6:	af02      	add	r7, sp, #8
 80023d8:	60f8      	str	r0, [r7, #12]
 80023da:	60b9      	str	r1, [r7, #8]
 80023dc:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80023e6:	d111      	bne.n	800240c <SPI_EndRxTransaction+0x3a>
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023f0:	d004      	beq.n	80023fc <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023fa:	d107      	bne.n	800240c <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800240a:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002414:	d117      	bne.n	8002446 <SPI_EndRxTransaction+0x74>
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800241e:	d112      	bne.n	8002446 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	9300      	str	r3, [sp, #0]
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	2200      	movs	r2, #0
 8002428:	2101      	movs	r1, #1
 800242a:	68f8      	ldr	r0, [r7, #12]
 800242c:	f7ff ff67 	bl	80022fe <SPI_WaitFlagStateUntilTimeout>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d01a      	beq.n	800246c <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800243a:	f043 0220 	orr.w	r2, r3, #32
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e013      	b.n	800246e <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	9300      	str	r3, [sp, #0]
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	2200      	movs	r2, #0
 800244e:	2180      	movs	r1, #128	; 0x80
 8002450:	68f8      	ldr	r0, [r7, #12]
 8002452:	f7ff ff54 	bl	80022fe <SPI_WaitFlagStateUntilTimeout>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d007      	beq.n	800246c <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002460:	f043 0220 	orr.w	r2, r3, #32
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	e000      	b.n	800246e <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800246c:	2300      	movs	r3, #0
}
 800246e:	4618      	mov	r0, r3
 8002470:	3710      	adds	r7, #16
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002476:	b580      	push	{r7, lr}
 8002478:	b086      	sub	sp, #24
 800247a:	af02      	add	r7, sp, #8
 800247c:	60f8      	str	r0, [r7, #12]
 800247e:	60b9      	str	r1, [r7, #8]
 8002480:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	9300      	str	r3, [sp, #0]
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	2200      	movs	r2, #0
 800248a:	2180      	movs	r1, #128	; 0x80
 800248c:	68f8      	ldr	r0, [r7, #12]
 800248e:	f7ff ff36 	bl	80022fe <SPI_WaitFlagStateUntilTimeout>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d007      	beq.n	80024a8 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800249c:	f043 0220 	orr.w	r2, r3, #32
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	e000      	b.n	80024aa <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3710      	adds	r7, #16
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
	...

080024b4 <__libc_init_array>:
 80024b4:	b570      	push	{r4, r5, r6, lr}
 80024b6:	2500      	movs	r5, #0
 80024b8:	4e0c      	ldr	r6, [pc, #48]	; (80024ec <__libc_init_array+0x38>)
 80024ba:	4c0d      	ldr	r4, [pc, #52]	; (80024f0 <__libc_init_array+0x3c>)
 80024bc:	1ba4      	subs	r4, r4, r6
 80024be:	10a4      	asrs	r4, r4, #2
 80024c0:	42a5      	cmp	r5, r4
 80024c2:	d109      	bne.n	80024d8 <__libc_init_array+0x24>
 80024c4:	f000 f822 	bl	800250c <_init>
 80024c8:	2500      	movs	r5, #0
 80024ca:	4e0a      	ldr	r6, [pc, #40]	; (80024f4 <__libc_init_array+0x40>)
 80024cc:	4c0a      	ldr	r4, [pc, #40]	; (80024f8 <__libc_init_array+0x44>)
 80024ce:	1ba4      	subs	r4, r4, r6
 80024d0:	10a4      	asrs	r4, r4, #2
 80024d2:	42a5      	cmp	r5, r4
 80024d4:	d105      	bne.n	80024e2 <__libc_init_array+0x2e>
 80024d6:	bd70      	pop	{r4, r5, r6, pc}
 80024d8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80024dc:	4798      	blx	r3
 80024de:	3501      	adds	r5, #1
 80024e0:	e7ee      	b.n	80024c0 <__libc_init_array+0xc>
 80024e2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80024e6:	4798      	blx	r3
 80024e8:	3501      	adds	r5, #1
 80024ea:	e7f2      	b.n	80024d2 <__libc_init_array+0x1e>
 80024ec:	08002548 	.word	0x08002548
 80024f0:	08002548 	.word	0x08002548
 80024f4:	08002548 	.word	0x08002548
 80024f8:	0800254c 	.word	0x0800254c

080024fc <memset>:
 80024fc:	4603      	mov	r3, r0
 80024fe:	4402      	add	r2, r0
 8002500:	4293      	cmp	r3, r2
 8002502:	d100      	bne.n	8002506 <memset+0xa>
 8002504:	4770      	bx	lr
 8002506:	f803 1b01 	strb.w	r1, [r3], #1
 800250a:	e7f9      	b.n	8002500 <memset+0x4>

0800250c <_init>:
 800250c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800250e:	bf00      	nop
 8002510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002512:	bc08      	pop	{r3}
 8002514:	469e      	mov	lr, r3
 8002516:	4770      	bx	lr

08002518 <_fini>:
 8002518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800251a:	bf00      	nop
 800251c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800251e:	bc08      	pop	{r3}
 8002520:	469e      	mov	lr, r3
 8002522:	4770      	bx	lr
