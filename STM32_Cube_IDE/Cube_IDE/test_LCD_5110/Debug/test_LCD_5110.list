
test_LCD_5110.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002af8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000238  08002c08  08002c08  00012c08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e40  08002e40  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002e40  08002e40  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e40  08002e40  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e40  08002e40  00012e40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e44  08002e44  00012e44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002e48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000218  2000000c  08002e54  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000224  08002e54  00020224  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000343b  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000dd6  00000000  00000000  00023470  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000468  00000000  00000000  00024248  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000003e0  00000000  00000000  000246b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00011a99  00000000  00000000  00024a90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00003d94  00000000  00000000  00036529  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000640b0  00000000  00000000  0003a2bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0009e36d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001220  00000000  00000000  0009e3e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000000c 	.word	0x2000000c
 800012c:	00000000 	.word	0x00000000
 8000130:	08002bf0 	.word	0x08002bf0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000010 	.word	0x20000010
 800014c:	08002bf0 	.word	0x08002bf0

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_d2f>:
 80004c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80004cc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80004d0:	bf24      	itt	cs
 80004d2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80004d6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80004da:	d90d      	bls.n	80004f8 <__aeabi_d2f+0x30>
 80004dc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80004e0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80004e4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80004e8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80004ec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80004f0:	bf08      	it	eq
 80004f2:	f020 0001 	biceq.w	r0, r0, #1
 80004f6:	4770      	bx	lr
 80004f8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80004fc:	d121      	bne.n	8000542 <__aeabi_d2f+0x7a>
 80004fe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000502:	bfbc      	itt	lt
 8000504:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000508:	4770      	bxlt	lr
 800050a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800050e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000512:	f1c2 0218 	rsb	r2, r2, #24
 8000516:	f1c2 0c20 	rsb	ip, r2, #32
 800051a:	fa10 f30c 	lsls.w	r3, r0, ip
 800051e:	fa20 f002 	lsr.w	r0, r0, r2
 8000522:	bf18      	it	ne
 8000524:	f040 0001 	orrne.w	r0, r0, #1
 8000528:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800052c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000530:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000534:	ea40 000c 	orr.w	r0, r0, ip
 8000538:	fa23 f302 	lsr.w	r3, r3, r2
 800053c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000540:	e7cc      	b.n	80004dc <__aeabi_d2f+0x14>
 8000542:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000546:	d107      	bne.n	8000558 <__aeabi_d2f+0x90>
 8000548:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800054c:	bf1e      	ittt	ne
 800054e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000552:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000556:	4770      	bxne	lr
 8000558:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800055c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000560:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <__aeabi_frsub>:
 8000568:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800056c:	e002      	b.n	8000574 <__addsf3>
 800056e:	bf00      	nop

08000570 <__aeabi_fsub>:
 8000570:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000574 <__addsf3>:
 8000574:	0042      	lsls	r2, r0, #1
 8000576:	bf1f      	itttt	ne
 8000578:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800057c:	ea92 0f03 	teqne	r2, r3
 8000580:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000584:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000588:	d06a      	beq.n	8000660 <__addsf3+0xec>
 800058a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800058e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000592:	bfc1      	itttt	gt
 8000594:	18d2      	addgt	r2, r2, r3
 8000596:	4041      	eorgt	r1, r0
 8000598:	4048      	eorgt	r0, r1
 800059a:	4041      	eorgt	r1, r0
 800059c:	bfb8      	it	lt
 800059e:	425b      	neglt	r3, r3
 80005a0:	2b19      	cmp	r3, #25
 80005a2:	bf88      	it	hi
 80005a4:	4770      	bxhi	lr
 80005a6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80005aa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005ae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80005b2:	bf18      	it	ne
 80005b4:	4240      	negne	r0, r0
 80005b6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80005ba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80005be:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80005c2:	bf18      	it	ne
 80005c4:	4249      	negne	r1, r1
 80005c6:	ea92 0f03 	teq	r2, r3
 80005ca:	d03f      	beq.n	800064c <__addsf3+0xd8>
 80005cc:	f1a2 0201 	sub.w	r2, r2, #1
 80005d0:	fa41 fc03 	asr.w	ip, r1, r3
 80005d4:	eb10 000c 	adds.w	r0, r0, ip
 80005d8:	f1c3 0320 	rsb	r3, r3, #32
 80005dc:	fa01 f103 	lsl.w	r1, r1, r3
 80005e0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80005e4:	d502      	bpl.n	80005ec <__addsf3+0x78>
 80005e6:	4249      	negs	r1, r1
 80005e8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80005ec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80005f0:	d313      	bcc.n	800061a <__addsf3+0xa6>
 80005f2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80005f6:	d306      	bcc.n	8000606 <__addsf3+0x92>
 80005f8:	0840      	lsrs	r0, r0, #1
 80005fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80005fe:	f102 0201 	add.w	r2, r2, #1
 8000602:	2afe      	cmp	r2, #254	; 0xfe
 8000604:	d251      	bcs.n	80006aa <__addsf3+0x136>
 8000606:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800060a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800060e:	bf08      	it	eq
 8000610:	f020 0001 	biceq.w	r0, r0, #1
 8000614:	ea40 0003 	orr.w	r0, r0, r3
 8000618:	4770      	bx	lr
 800061a:	0049      	lsls	r1, r1, #1
 800061c:	eb40 0000 	adc.w	r0, r0, r0
 8000620:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000624:	f1a2 0201 	sub.w	r2, r2, #1
 8000628:	d1ed      	bne.n	8000606 <__addsf3+0x92>
 800062a:	fab0 fc80 	clz	ip, r0
 800062e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000632:	ebb2 020c 	subs.w	r2, r2, ip
 8000636:	fa00 f00c 	lsl.w	r0, r0, ip
 800063a:	bfaa      	itet	ge
 800063c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000640:	4252      	neglt	r2, r2
 8000642:	4318      	orrge	r0, r3
 8000644:	bfbc      	itt	lt
 8000646:	40d0      	lsrlt	r0, r2
 8000648:	4318      	orrlt	r0, r3
 800064a:	4770      	bx	lr
 800064c:	f092 0f00 	teq	r2, #0
 8000650:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000654:	bf06      	itte	eq
 8000656:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800065a:	3201      	addeq	r2, #1
 800065c:	3b01      	subne	r3, #1
 800065e:	e7b5      	b.n	80005cc <__addsf3+0x58>
 8000660:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000664:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000668:	bf18      	it	ne
 800066a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800066e:	d021      	beq.n	80006b4 <__addsf3+0x140>
 8000670:	ea92 0f03 	teq	r2, r3
 8000674:	d004      	beq.n	8000680 <__addsf3+0x10c>
 8000676:	f092 0f00 	teq	r2, #0
 800067a:	bf08      	it	eq
 800067c:	4608      	moveq	r0, r1
 800067e:	4770      	bx	lr
 8000680:	ea90 0f01 	teq	r0, r1
 8000684:	bf1c      	itt	ne
 8000686:	2000      	movne	r0, #0
 8000688:	4770      	bxne	lr
 800068a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800068e:	d104      	bne.n	800069a <__addsf3+0x126>
 8000690:	0040      	lsls	r0, r0, #1
 8000692:	bf28      	it	cs
 8000694:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000698:	4770      	bx	lr
 800069a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800069e:	bf3c      	itt	cc
 80006a0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80006a4:	4770      	bxcc	lr
 80006a6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006aa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80006ae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006b2:	4770      	bx	lr
 80006b4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80006b8:	bf16      	itet	ne
 80006ba:	4608      	movne	r0, r1
 80006bc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80006c0:	4601      	movne	r1, r0
 80006c2:	0242      	lsls	r2, r0, #9
 80006c4:	bf06      	itte	eq
 80006c6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80006ca:	ea90 0f01 	teqeq	r0, r1
 80006ce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80006d2:	4770      	bx	lr

080006d4 <__aeabi_ui2f>:
 80006d4:	f04f 0300 	mov.w	r3, #0
 80006d8:	e004      	b.n	80006e4 <__aeabi_i2f+0x8>
 80006da:	bf00      	nop

080006dc <__aeabi_i2f>:
 80006dc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80006e0:	bf48      	it	mi
 80006e2:	4240      	negmi	r0, r0
 80006e4:	ea5f 0c00 	movs.w	ip, r0
 80006e8:	bf08      	it	eq
 80006ea:	4770      	bxeq	lr
 80006ec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80006f0:	4601      	mov	r1, r0
 80006f2:	f04f 0000 	mov.w	r0, #0
 80006f6:	e01c      	b.n	8000732 <__aeabi_l2f+0x2a>

080006f8 <__aeabi_ul2f>:
 80006f8:	ea50 0201 	orrs.w	r2, r0, r1
 80006fc:	bf08      	it	eq
 80006fe:	4770      	bxeq	lr
 8000700:	f04f 0300 	mov.w	r3, #0
 8000704:	e00a      	b.n	800071c <__aeabi_l2f+0x14>
 8000706:	bf00      	nop

08000708 <__aeabi_l2f>:
 8000708:	ea50 0201 	orrs.w	r2, r0, r1
 800070c:	bf08      	it	eq
 800070e:	4770      	bxeq	lr
 8000710:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000714:	d502      	bpl.n	800071c <__aeabi_l2f+0x14>
 8000716:	4240      	negs	r0, r0
 8000718:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800071c:	ea5f 0c01 	movs.w	ip, r1
 8000720:	bf02      	ittt	eq
 8000722:	4684      	moveq	ip, r0
 8000724:	4601      	moveq	r1, r0
 8000726:	2000      	moveq	r0, #0
 8000728:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 800072c:	bf08      	it	eq
 800072e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000732:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000736:	fabc f28c 	clz	r2, ip
 800073a:	3a08      	subs	r2, #8
 800073c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000740:	db10      	blt.n	8000764 <__aeabi_l2f+0x5c>
 8000742:	fa01 fc02 	lsl.w	ip, r1, r2
 8000746:	4463      	add	r3, ip
 8000748:	fa00 fc02 	lsl.w	ip, r0, r2
 800074c:	f1c2 0220 	rsb	r2, r2, #32
 8000750:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000754:	fa20 f202 	lsr.w	r2, r0, r2
 8000758:	eb43 0002 	adc.w	r0, r3, r2
 800075c:	bf08      	it	eq
 800075e:	f020 0001 	biceq.w	r0, r0, #1
 8000762:	4770      	bx	lr
 8000764:	f102 0220 	add.w	r2, r2, #32
 8000768:	fa01 fc02 	lsl.w	ip, r1, r2
 800076c:	f1c2 0220 	rsb	r2, r2, #32
 8000770:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000774:	fa21 f202 	lsr.w	r2, r1, r2
 8000778:	eb43 0002 	adc.w	r0, r3, r2
 800077c:	bf08      	it	eq
 800077e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000782:	4770      	bx	lr

08000784 <__aeabi_fmul>:
 8000784:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000788:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800078c:	bf1e      	ittt	ne
 800078e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000792:	ea92 0f0c 	teqne	r2, ip
 8000796:	ea93 0f0c 	teqne	r3, ip
 800079a:	d06f      	beq.n	800087c <__aeabi_fmul+0xf8>
 800079c:	441a      	add	r2, r3
 800079e:	ea80 0c01 	eor.w	ip, r0, r1
 80007a2:	0240      	lsls	r0, r0, #9
 80007a4:	bf18      	it	ne
 80007a6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80007aa:	d01e      	beq.n	80007ea <__aeabi_fmul+0x66>
 80007ac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80007b0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80007b4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80007b8:	fba0 3101 	umull	r3, r1, r0, r1
 80007bc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80007c0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80007c4:	bf3e      	ittt	cc
 80007c6:	0049      	lslcc	r1, r1, #1
 80007c8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80007cc:	005b      	lslcc	r3, r3, #1
 80007ce:	ea40 0001 	orr.w	r0, r0, r1
 80007d2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80007d6:	2afd      	cmp	r2, #253	; 0xfd
 80007d8:	d81d      	bhi.n	8000816 <__aeabi_fmul+0x92>
 80007da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80007de:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80007e2:	bf08      	it	eq
 80007e4:	f020 0001 	biceq.w	r0, r0, #1
 80007e8:	4770      	bx	lr
 80007ea:	f090 0f00 	teq	r0, #0
 80007ee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80007f2:	bf08      	it	eq
 80007f4:	0249      	lsleq	r1, r1, #9
 80007f6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80007fa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80007fe:	3a7f      	subs	r2, #127	; 0x7f
 8000800:	bfc2      	ittt	gt
 8000802:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000806:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800080a:	4770      	bxgt	lr
 800080c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000810:	f04f 0300 	mov.w	r3, #0
 8000814:	3a01      	subs	r2, #1
 8000816:	dc5d      	bgt.n	80008d4 <__aeabi_fmul+0x150>
 8000818:	f112 0f19 	cmn.w	r2, #25
 800081c:	bfdc      	itt	le
 800081e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000822:	4770      	bxle	lr
 8000824:	f1c2 0200 	rsb	r2, r2, #0
 8000828:	0041      	lsls	r1, r0, #1
 800082a:	fa21 f102 	lsr.w	r1, r1, r2
 800082e:	f1c2 0220 	rsb	r2, r2, #32
 8000832:	fa00 fc02 	lsl.w	ip, r0, r2
 8000836:	ea5f 0031 	movs.w	r0, r1, rrx
 800083a:	f140 0000 	adc.w	r0, r0, #0
 800083e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000842:	bf08      	it	eq
 8000844:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000848:	4770      	bx	lr
 800084a:	f092 0f00 	teq	r2, #0
 800084e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000852:	bf02      	ittt	eq
 8000854:	0040      	lsleq	r0, r0, #1
 8000856:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800085a:	3a01      	subeq	r2, #1
 800085c:	d0f9      	beq.n	8000852 <__aeabi_fmul+0xce>
 800085e:	ea40 000c 	orr.w	r0, r0, ip
 8000862:	f093 0f00 	teq	r3, #0
 8000866:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800086a:	bf02      	ittt	eq
 800086c:	0049      	lsleq	r1, r1, #1
 800086e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000872:	3b01      	subeq	r3, #1
 8000874:	d0f9      	beq.n	800086a <__aeabi_fmul+0xe6>
 8000876:	ea41 010c 	orr.w	r1, r1, ip
 800087a:	e78f      	b.n	800079c <__aeabi_fmul+0x18>
 800087c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000880:	ea92 0f0c 	teq	r2, ip
 8000884:	bf18      	it	ne
 8000886:	ea93 0f0c 	teqne	r3, ip
 800088a:	d00a      	beq.n	80008a2 <__aeabi_fmul+0x11e>
 800088c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000890:	bf18      	it	ne
 8000892:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000896:	d1d8      	bne.n	800084a <__aeabi_fmul+0xc6>
 8000898:	ea80 0001 	eor.w	r0, r0, r1
 800089c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80008a0:	4770      	bx	lr
 80008a2:	f090 0f00 	teq	r0, #0
 80008a6:	bf17      	itett	ne
 80008a8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80008ac:	4608      	moveq	r0, r1
 80008ae:	f091 0f00 	teqne	r1, #0
 80008b2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80008b6:	d014      	beq.n	80008e2 <__aeabi_fmul+0x15e>
 80008b8:	ea92 0f0c 	teq	r2, ip
 80008bc:	d101      	bne.n	80008c2 <__aeabi_fmul+0x13e>
 80008be:	0242      	lsls	r2, r0, #9
 80008c0:	d10f      	bne.n	80008e2 <__aeabi_fmul+0x15e>
 80008c2:	ea93 0f0c 	teq	r3, ip
 80008c6:	d103      	bne.n	80008d0 <__aeabi_fmul+0x14c>
 80008c8:	024b      	lsls	r3, r1, #9
 80008ca:	bf18      	it	ne
 80008cc:	4608      	movne	r0, r1
 80008ce:	d108      	bne.n	80008e2 <__aeabi_fmul+0x15e>
 80008d0:	ea80 0001 	eor.w	r0, r0, r1
 80008d4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80008d8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80008dc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008e0:	4770      	bx	lr
 80008e2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80008e6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80008ea:	4770      	bx	lr

080008ec <__aeabi_fdiv>:
 80008ec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008f0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80008f4:	bf1e      	ittt	ne
 80008f6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80008fa:	ea92 0f0c 	teqne	r2, ip
 80008fe:	ea93 0f0c 	teqne	r3, ip
 8000902:	d069      	beq.n	80009d8 <__aeabi_fdiv+0xec>
 8000904:	eba2 0203 	sub.w	r2, r2, r3
 8000908:	ea80 0c01 	eor.w	ip, r0, r1
 800090c:	0249      	lsls	r1, r1, #9
 800090e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000912:	d037      	beq.n	8000984 <__aeabi_fdiv+0x98>
 8000914:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000918:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 800091c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000920:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000924:	428b      	cmp	r3, r1
 8000926:	bf38      	it	cc
 8000928:	005b      	lslcc	r3, r3, #1
 800092a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800092e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000932:	428b      	cmp	r3, r1
 8000934:	bf24      	itt	cs
 8000936:	1a5b      	subcs	r3, r3, r1
 8000938:	ea40 000c 	orrcs.w	r0, r0, ip
 800093c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000940:	bf24      	itt	cs
 8000942:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000946:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800094a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800094e:	bf24      	itt	cs
 8000950:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 800095c:	bf24      	itt	cs
 800095e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000962:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000966:	011b      	lsls	r3, r3, #4
 8000968:	bf18      	it	ne
 800096a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800096e:	d1e0      	bne.n	8000932 <__aeabi_fdiv+0x46>
 8000970:	2afd      	cmp	r2, #253	; 0xfd
 8000972:	f63f af50 	bhi.w	8000816 <__aeabi_fmul+0x92>
 8000976:	428b      	cmp	r3, r1
 8000978:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800097c:	bf08      	it	eq
 800097e:	f020 0001 	biceq.w	r0, r0, #1
 8000982:	4770      	bx	lr
 8000984:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000988:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800098c:	327f      	adds	r2, #127	; 0x7f
 800098e:	bfc2      	ittt	gt
 8000990:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000994:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000998:	4770      	bxgt	lr
 800099a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800099e:	f04f 0300 	mov.w	r3, #0
 80009a2:	3a01      	subs	r2, #1
 80009a4:	e737      	b.n	8000816 <__aeabi_fmul+0x92>
 80009a6:	f092 0f00 	teq	r2, #0
 80009aa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80009ae:	bf02      	ittt	eq
 80009b0:	0040      	lsleq	r0, r0, #1
 80009b2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80009b6:	3a01      	subeq	r2, #1
 80009b8:	d0f9      	beq.n	80009ae <__aeabi_fdiv+0xc2>
 80009ba:	ea40 000c 	orr.w	r0, r0, ip
 80009be:	f093 0f00 	teq	r3, #0
 80009c2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009c6:	bf02      	ittt	eq
 80009c8:	0049      	lsleq	r1, r1, #1
 80009ca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80009ce:	3b01      	subeq	r3, #1
 80009d0:	d0f9      	beq.n	80009c6 <__aeabi_fdiv+0xda>
 80009d2:	ea41 010c 	orr.w	r1, r1, ip
 80009d6:	e795      	b.n	8000904 <__aeabi_fdiv+0x18>
 80009d8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80009dc:	ea92 0f0c 	teq	r2, ip
 80009e0:	d108      	bne.n	80009f4 <__aeabi_fdiv+0x108>
 80009e2:	0242      	lsls	r2, r0, #9
 80009e4:	f47f af7d 	bne.w	80008e2 <__aeabi_fmul+0x15e>
 80009e8:	ea93 0f0c 	teq	r3, ip
 80009ec:	f47f af70 	bne.w	80008d0 <__aeabi_fmul+0x14c>
 80009f0:	4608      	mov	r0, r1
 80009f2:	e776      	b.n	80008e2 <__aeabi_fmul+0x15e>
 80009f4:	ea93 0f0c 	teq	r3, ip
 80009f8:	d104      	bne.n	8000a04 <__aeabi_fdiv+0x118>
 80009fa:	024b      	lsls	r3, r1, #9
 80009fc:	f43f af4c 	beq.w	8000898 <__aeabi_fmul+0x114>
 8000a00:	4608      	mov	r0, r1
 8000a02:	e76e      	b.n	80008e2 <__aeabi_fmul+0x15e>
 8000a04:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000a08:	bf18      	it	ne
 8000a0a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000a0e:	d1ca      	bne.n	80009a6 <__aeabi_fdiv+0xba>
 8000a10:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000a14:	f47f af5c 	bne.w	80008d0 <__aeabi_fmul+0x14c>
 8000a18:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000a1c:	f47f af3c 	bne.w	8000898 <__aeabi_fmul+0x114>
 8000a20:	e75f      	b.n	80008e2 <__aeabi_fmul+0x15e>
 8000a22:	bf00      	nop

08000a24 <__gesf2>:
 8000a24:	f04f 3cff 	mov.w	ip, #4294967295
 8000a28:	e006      	b.n	8000a38 <__cmpsf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__lesf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	e002      	b.n	8000a38 <__cmpsf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__cmpsf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a3c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000a40:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a44:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a48:	bf18      	it	ne
 8000a4a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a4e:	d011      	beq.n	8000a74 <__cmpsf2+0x40>
 8000a50:	b001      	add	sp, #4
 8000a52:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000a56:	bf18      	it	ne
 8000a58:	ea90 0f01 	teqne	r0, r1
 8000a5c:	bf58      	it	pl
 8000a5e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000a62:	bf88      	it	hi
 8000a64:	17c8      	asrhi	r0, r1, #31
 8000a66:	bf38      	it	cc
 8000a68:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000a6c:	bf18      	it	ne
 8000a6e:	f040 0001 	orrne.w	r0, r0, #1
 8000a72:	4770      	bx	lr
 8000a74:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a78:	d102      	bne.n	8000a80 <__cmpsf2+0x4c>
 8000a7a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000a7e:	d105      	bne.n	8000a8c <__cmpsf2+0x58>
 8000a80:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000a84:	d1e4      	bne.n	8000a50 <__cmpsf2+0x1c>
 8000a86:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000a8a:	d0e1      	beq.n	8000a50 <__cmpsf2+0x1c>
 8000a8c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop

08000a94 <__aeabi_cfrcmple>:
 8000a94:	4684      	mov	ip, r0
 8000a96:	4608      	mov	r0, r1
 8000a98:	4661      	mov	r1, ip
 8000a9a:	e7ff      	b.n	8000a9c <__aeabi_cfcmpeq>

08000a9c <__aeabi_cfcmpeq>:
 8000a9c:	b50f      	push	{r0, r1, r2, r3, lr}
 8000a9e:	f7ff ffc9 	bl	8000a34 <__cmpsf2>
 8000aa2:	2800      	cmp	r0, #0
 8000aa4:	bf48      	it	mi
 8000aa6:	f110 0f00 	cmnmi.w	r0, #0
 8000aaa:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000aac <__aeabi_fcmpeq>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff fff4 	bl	8000a9c <__aeabi_cfcmpeq>
 8000ab4:	bf0c      	ite	eq
 8000ab6:	2001      	moveq	r0, #1
 8000ab8:	2000      	movne	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_fcmplt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffea 	bl	8000a9c <__aeabi_cfcmpeq>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_fcmple>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffe0 	bl	8000a9c <__aeabi_cfcmpeq>
 8000adc:	bf94      	ite	ls
 8000ade:	2001      	movls	r0, #1
 8000ae0:	2000      	movhi	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_fcmpge>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffd2 	bl	8000a94 <__aeabi_cfrcmple>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_fcmpgt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffc8 	bl	8000a94 <__aeabi_cfrcmple>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_f2iz>:
 8000b10:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b14:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b18:	d30f      	bcc.n	8000b3a <__aeabi_f2iz+0x2a>
 8000b1a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b1e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b22:	d90d      	bls.n	8000b40 <__aeabi_f2iz+0x30>
 8000b24:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b28:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b30:	fa23 f002 	lsr.w	r0, r3, r2
 8000b34:	bf18      	it	ne
 8000b36:	4240      	negne	r0, r0
 8000b38:	4770      	bx	lr
 8000b3a:	f04f 0000 	mov.w	r0, #0
 8000b3e:	4770      	bx	lr
 8000b40:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000b44:	d101      	bne.n	8000b4a <__aeabi_f2iz+0x3a>
 8000b46:	0242      	lsls	r2, r0, #9
 8000b48:	d105      	bne.n	8000b56 <__aeabi_f2iz+0x46>
 8000b4a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000b4e:	bf08      	it	eq
 8000b50:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b54:	4770      	bx	lr
 8000b56:	f04f 0000 	mov.w	r0, #0
 8000b5a:	4770      	bx	lr
 8000b5c:	0000      	movs	r0, r0
	...

08000b60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b60:	b590      	push	{r4, r7, lr}
 8000b62:	b08d      	sub	sp, #52	; 0x34
 8000b64:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b66:	f001 f953 	bl	8001e10 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b6a:	f000 f8ed 	bl	8000d48 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b6e:	f000 f92f 	bl	8000dd0 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  unsigned char g = 0;
 8000b72:	2300      	movs	r3, #0
 8000b74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
     const unsigned char txt1[11] = {"MicroArena"};
 8000b78:	4a6d      	ldr	r2, [pc, #436]	; (8000d30 <main+0x1d0>)
 8000b7a:	f107 0310 	add.w	r3, r7, #16
 8000b7e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b80:	c303      	stmia	r3!, {r0, r1}
 8000b82:	801a      	strh	r2, [r3, #0]
 8000b84:	3302      	adds	r3, #2
 8000b86:	0c12      	lsrs	r2, r2, #16
 8000b88:	701a      	strb	r2, [r3, #0]
     const unsigned char txt2[11] = {"SSHAHRYIAR"};
 8000b8a:	4a6a      	ldr	r2, [pc, #424]	; (8000d34 <main+0x1d4>)
 8000b8c:	1d3b      	adds	r3, r7, #4
 8000b8e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b90:	c303      	stmia	r3!, {r0, r1}
 8000b92:	801a      	strh	r2, [r3, #0]
 8000b94:	3302      	adds	r3, #2
 8000b96:	0c12      	lsrs	r2, r2, #16
 8000b98:	701a      	strb	r2, [r3, #0]

     signed char c = -9;
 8000b9a:	23f7      	movs	r3, #247	; 0xf7
 8000b9c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
     signed int i = -66;
 8000ba0:	f06f 0341 	mvn.w	r3, #65	; 0x41
 8000ba4:	623b      	str	r3, [r7, #32]
     float f = -0.04;
 8000ba6:	4b64      	ldr	r3, [pc, #400]	; (8000d38 <main+0x1d8>)
 8000ba8:	61fb      	str	r3, [r7, #28]

     setup();
 8000baa:	f001 f86b 	bl	8001c84 <setup>

     PCD8544_backlight_state(ON);
 8000bae:	2001      	movs	r0, #1
 8000bb0:	f000 f9fe 	bl	8000fb0 <PCD8544_backlight_state>
     //PCD8544_print_image(mikro_bmp);
     HAL_Delay(2000);
 8000bb4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000bb8:	f001 f98c 	bl	8001ed4 <HAL_Delay>

     PCD8544_backlight_state(OFF);
 8000bbc:	2000      	movs	r0, #0
 8000bbe:	f000 f9f7 	bl	8000fb0 <PCD8544_backlight_state>
     HAL_Delay(2000);
 8000bc2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000bc6:	f001 f985 	bl	8001ed4 <HAL_Delay>

     PCD8544_clear_screen(WHITE);
 8000bca:	2001      	movs	r0, #1
 8000bcc:	f000 fa9e 	bl	800110c <PCD8544_clear_screen>

     PCD8544_backlight_state(ON);
 8000bd0:	2001      	movs	r0, #1
 8000bd2:	f000 f9ed 	bl	8000fb0 <PCD8544_backlight_state>
//     Draw_Line(2, 36, 10, 36, BLACK);
//     Draw_Line(73, 36, 81, 36, BLACK);
//     HAL_Delay(200);
//     Draw_Line(11, 45, 11, 2, BLACK);
//     Draw_Line(72, 45, 72, 2, BLACK);
     HAL_Delay(200);
 8000bd6:	20c8      	movs	r0, #200	; 0xc8
 8000bd8:	f001 f97c 	bl	8001ed4 <HAL_Delay>

     PCD8544_backlight_state(OFF);
 8000bdc:	2000      	movs	r0, #0
 8000bde:	f000 f9e7 	bl	8000fb0 <PCD8544_backlight_state>
     HAL_Delay(400);
 8000be2:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000be6:	f001 f975 	bl	8001ed4 <HAL_Delay>

     PCD8544_backlight_state(ON);
 8000bea:	2001      	movs	r0, #1
 8000bec:	f000 f9e0 	bl	8000fb0 <PCD8544_backlight_state>

     for(g = 0; g <= 9; g++)
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000bf6:	e01e      	b.n	8000c36 <main+0xd6>
     {
         PCD8544_set_cursor((18 + (g * 5)), 2);
 8000bf8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	0092      	lsls	r2, r2, #2
 8000c00:	4413      	add	r3, r2
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	3312      	adds	r3, #18
 8000c06:	b2db      	uxtb	r3, r3
 8000c08:	2102      	movs	r1, #2
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f000 fa08 	bl	8001020 <PCD8544_set_cursor>
         PCD8544_print_char(txt1[g], WHITE);
 8000c10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000c14:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000c18:	4413      	add	r3, r2
 8000c1a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000c1e:	2101      	movs	r1, #1
 8000c20:	4618      	mov	r0, r3
 8000c22:	f000 fa19 	bl	8001058 <PCD8544_print_char>
         HAL_Delay(90);
 8000c26:	205a      	movs	r0, #90	; 0x5a
 8000c28:	f001 f954 	bl	8001ed4 <HAL_Delay>
     for(g = 0; g <= 9; g++)
 8000c2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000c30:	3301      	adds	r3, #1
 8000c32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000c36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000c3a:	2b09      	cmp	r3, #9
 8000c3c:	d9dc      	bls.n	8000bf8 <main+0x98>
     }

     for(g = 0; g <= 9; g++)
 8000c3e:	2300      	movs	r3, #0
 8000c40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000c44:	e01e      	b.n	8000c84 <main+0x124>
     {
         PCD8544_set_cursor((18 + (g * 5)), 3);
 8000c46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	0092      	lsls	r2, r2, #2
 8000c4e:	4413      	add	r3, r2
 8000c50:	b2db      	uxtb	r3, r3
 8000c52:	3312      	adds	r3, #18
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	2103      	movs	r1, #3
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f000 f9e1 	bl	8001020 <PCD8544_set_cursor>
         PCD8544_print_char(txt2[g], WHITE);
 8000c5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000c62:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000c66:	4413      	add	r3, r2
 8000c68:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000c6c:	2101      	movs	r1, #1
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f000 f9f2 	bl	8001058 <PCD8544_print_char>
         HAL_Delay(90);
 8000c74:	205a      	movs	r0, #90	; 0x5a
 8000c76:	f001 f92d 	bl	8001ed4 <HAL_Delay>
     for(g = 0; g <= 9; g++)
 8000c7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000c7e:	3301      	adds	r3, #1
 8000c80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000c84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000c88:	2b09      	cmp	r3, #9
 8000c8a:	d9dc      	bls.n	8000c46 <main+0xe6>
     }
        HAL_Delay(4000);
 8000c8c:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000c90:	f001 f920 	bl	8001ed4 <HAL_Delay>

     PCD8544_clear_screen(WHITE);
 8000c94:	2001      	movs	r0, #1
 8000c96:	f000 fa39 	bl	800110c <PCD8544_clear_screen>

     PCD8544_print_string(1, 2, "CHR:", WHITE);
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	4a27      	ldr	r2, [pc, #156]	; (8000d3c <main+0x1dc>)
 8000c9e:	2102      	movs	r1, #2
 8000ca0:	2001      	movs	r0, #1
 8000ca2:	f000 fa5b 	bl	800115c <PCD8544_print_string>
     PCD8544_print_string(1, 3, "INT:", WHITE);
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	4a25      	ldr	r2, [pc, #148]	; (8000d40 <main+0x1e0>)
 8000caa:	2103      	movs	r1, #3
 8000cac:	2001      	movs	r0, #1
 8000cae:	f000 fa55 	bl	800115c <PCD8544_print_string>
     PCD8544_print_string(1, 4, "FLT:", WHITE);
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	4a23      	ldr	r2, [pc, #140]	; (8000d44 <main+0x1e4>)
 8000cb6:	2104      	movs	r1, #4
 8000cb8:	2001      	movs	r0, #1
 8000cba:	f000 fa4f 	bl	800115c <PCD8544_print_string>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1)
  {
	  print_chr(26, 2, c, WHITE);
 8000cbe:	f997 2026 	ldrsb.w	r2, [r7, #38]	; 0x26
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	2102      	movs	r1, #2
 8000cc6:	201a      	movs	r0, #26
 8000cc8:	f000 fa70 	bl	80011ac <print_chr>
	          print_int(26, 3, i, WHITE);
 8000ccc:	2301      	movs	r3, #1
 8000cce:	6a3a      	ldr	r2, [r7, #32]
 8000cd0:	2103      	movs	r1, #3
 8000cd2:	201a      	movs	r0, #26
 8000cd4:	f000 fb90 	bl	80013f8 <print_int>
	          print_float(26, 4, f, 2, WHITE);
 8000cd8:	2301      	movs	r3, #1
 8000cda:	9300      	str	r3, [sp, #0]
 8000cdc:	2302      	movs	r3, #2
 8000cde:	69fa      	ldr	r2, [r7, #28]
 8000ce0:	2104      	movs	r1, #4
 8000ce2:	201a      	movs	r0, #26
 8000ce4:	f000 feea 	bl	8001abc <print_float>
	          c++;
 8000ce8:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	3301      	adds	r3, #1
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	          i++;
 8000cf6:	6a3b      	ldr	r3, [r7, #32]
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	623b      	str	r3, [r7, #32]
	          f += 0.01;
 8000cfc:	69f8      	ldr	r0, [r7, #28]
 8000cfe:	f7ff fb8b 	bl	8000418 <__aeabi_f2d>
 8000d02:	a309      	add	r3, pc, #36	; (adr r3, 8000d28 <main+0x1c8>)
 8000d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d08:	f7ff fa28 	bl	800015c <__adddf3>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	460c      	mov	r4, r1
 8000d10:	4618      	mov	r0, r3
 8000d12:	4621      	mov	r1, r4
 8000d14:	f7ff fbd8 	bl	80004c8 <__aeabi_d2f>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	61fb      	str	r3, [r7, #28]
	          HAL_Delay(400);
 8000d1c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000d20:	f001 f8d8 	bl	8001ed4 <HAL_Delay>
	  print_chr(26, 2, c, WHITE);
 8000d24:	e7cb      	b.n	8000cbe <main+0x15e>
 8000d26:	bf00      	nop
 8000d28:	47ae147b 	.word	0x47ae147b
 8000d2c:	3f847ae1 	.word	0x3f847ae1
 8000d30:	08002c20 	.word	0x08002c20
 8000d34:	08002c2c 	.word	0x08002c2c
 8000d38:	bd23d70a 	.word	0xbd23d70a
 8000d3c:	08002c08 	.word	0x08002c08
 8000d40:	08002c10 	.word	0x08002c10
 8000d44:	08002c18 	.word	0x08002c18

08000d48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b090      	sub	sp, #64	; 0x40
 8000d4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d4e:	f107 0318 	add.w	r3, r7, #24
 8000d52:	2228      	movs	r2, #40	; 0x28
 8000d54:	2100      	movs	r1, #0
 8000d56:	4618      	mov	r0, r3
 8000d58:	f001 ff42 	bl	8002be0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d5c:	1d3b      	adds	r3, r7, #4
 8000d5e:	2200      	movs	r2, #0
 8000d60:	601a      	str	r2, [r3, #0]
 8000d62:	605a      	str	r2, [r3, #4]
 8000d64:	609a      	str	r2, [r3, #8]
 8000d66:	60da      	str	r2, [r3, #12]
 8000d68:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d6e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d72:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000d74:	2300      	movs	r3, #0
 8000d76:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d84:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000d86:	2300      	movs	r3, #0
 8000d88:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d8a:	f107 0318 	add.w	r3, r7, #24
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f001 fb18 	bl	80023c4 <HAL_RCC_OscConfig>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <SystemClock_Config+0x56>
  {
    Error_Handler();
 8000d9a:	f000 ff7c 	bl	8001c96 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d9e:	230f      	movs	r3, #15
 8000da0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000da2:	2302      	movs	r3, #2
 8000da4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000da6:	2380      	movs	r3, #128	; 0x80
 8000da8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000daa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000db0:	2300      	movs	r3, #0
 8000db2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000db4:	1d3b      	adds	r3, r7, #4
 8000db6:	2100      	movs	r1, #0
 8000db8:	4618      	mov	r0, r3
 8000dba:	f001 fd83 	bl	80028c4 <HAL_RCC_ClockConfig>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000dc4:	f000 ff67 	bl	8001c96 <Error_Handler>
  }
}
 8000dc8:	bf00      	nop
 8000dca:	3740      	adds	r7, #64	; 0x40
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b086      	sub	sp, #24
 8000dd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd6:	f107 0308 	add.w	r3, r7, #8
 8000dda:	2200      	movs	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]
 8000dde:	605a      	str	r2, [r3, #4]
 8000de0:	609a      	str	r2, [r3, #8]
 8000de2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000de4:	4b17      	ldr	r3, [pc, #92]	; (8000e44 <MX_GPIO_Init+0x74>)
 8000de6:	699b      	ldr	r3, [r3, #24]
 8000de8:	4a16      	ldr	r2, [pc, #88]	; (8000e44 <MX_GPIO_Init+0x74>)
 8000dea:	f043 0320 	orr.w	r3, r3, #32
 8000dee:	6193      	str	r3, [r2, #24]
 8000df0:	4b14      	ldr	r3, [pc, #80]	; (8000e44 <MX_GPIO_Init+0x74>)
 8000df2:	699b      	ldr	r3, [r3, #24]
 8000df4:	f003 0320 	and.w	r3, r3, #32
 8000df8:	607b      	str	r3, [r7, #4]
 8000dfa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfc:	4b11      	ldr	r3, [pc, #68]	; (8000e44 <MX_GPIO_Init+0x74>)
 8000dfe:	699b      	ldr	r3, [r3, #24]
 8000e00:	4a10      	ldr	r2, [pc, #64]	; (8000e44 <MX_GPIO_Init+0x74>)
 8000e02:	f043 0304 	orr.w	r3, r3, #4
 8000e06:	6193      	str	r3, [r2, #24]
 8000e08:	4b0e      	ldr	r3, [pc, #56]	; (8000e44 <MX_GPIO_Init+0x74>)
 8000e0a:	699b      	ldr	r3, [r3, #24]
 8000e0c:	f003 0304 	and.w	r3, r3, #4
 8000e10:	603b      	str	r3, [r7, #0]
 8000e12:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RST_Pin|DC_Pin|LIGHT_Pin|CS_Pin 
 8000e14:	2200      	movs	r2, #0
 8000e16:	21b7      	movs	r1, #183	; 0xb7
 8000e18:	480b      	ldr	r0, [pc, #44]	; (8000e48 <MX_GPIO_Init+0x78>)
 8000e1a:	f001 fabb 	bl	8002394 <HAL_GPIO_WritePin>
                          |SCLK_Pin|MOSI_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : RST_Pin DC_Pin LIGHT_Pin CS_Pin 
                           SCLK_Pin MOSI_Pin */
  GPIO_InitStruct.Pin = RST_Pin|DC_Pin|LIGHT_Pin|CS_Pin 
 8000e1e:	23b7      	movs	r3, #183	; 0xb7
 8000e20:	60bb      	str	r3, [r7, #8]
                          |SCLK_Pin|MOSI_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e22:	2301      	movs	r3, #1
 8000e24:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e2e:	f107 0308 	add.w	r3, r7, #8
 8000e32:	4619      	mov	r1, r3
 8000e34:	4804      	ldr	r0, [pc, #16]	; (8000e48 <MX_GPIO_Init+0x78>)
 8000e36:	f001 f953 	bl	80020e0 <HAL_GPIO_Init>

}
 8000e3a:	bf00      	nop
 8000e3c:	3718      	adds	r7, #24
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	40021000 	.word	0x40021000
 8000e48:	40010800 	.word	0x40010800

08000e4c <setup_LCD_GPIOs>:

/* USER CODE BEGIN 4 */
void setup_LCD_GPIOs()
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
//     GPIOB_pin_high(CE_pin);
//     GPIOB_pin_high(DC_pin);
//     GPIOB_pin_low(RST_pin);
//     GPIOB_pin_low(SDO_pin);
//     GPIOB_pin_low(SCK_pin);
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_2,1);
 8000e50:	2201      	movs	r2, #1
 8000e52:	2104      	movs	r1, #4
 8000e54:	4810      	ldr	r0, [pc, #64]	; (8000e98 <setup_LCD_GPIOs+0x4c>)
 8000e56:	f001 fa9d 	bl	8002394 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,1);
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	2110      	movs	r1, #16
 8000e5e:	480e      	ldr	r0, [pc, #56]	; (8000e98 <setup_LCD_GPIOs+0x4c>)
 8000e60:	f001 fa98 	bl	8002394 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,1);
 8000e64:	2201      	movs	r2, #1
 8000e66:	2102      	movs	r1, #2
 8000e68:	480b      	ldr	r0, [pc, #44]	; (8000e98 <setup_LCD_GPIOs+0x4c>)
 8000e6a:	f001 fa93 	bl	8002394 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,0);
 8000e6e:	2200      	movs	r2, #0
 8000e70:	2101      	movs	r1, #1
 8000e72:	4809      	ldr	r0, [pc, #36]	; (8000e98 <setup_LCD_GPIOs+0x4c>)
 8000e74:	f001 fa8e 	bl	8002394 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,0);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	2180      	movs	r1, #128	; 0x80
 8000e7c:	4806      	ldr	r0, [pc, #24]	; (8000e98 <setup_LCD_GPIOs+0x4c>)
 8000e7e:	f001 fa89 	bl	8002394 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,0);
 8000e82:	2200      	movs	r2, #0
 8000e84:	2120      	movs	r1, #32
 8000e86:	4804      	ldr	r0, [pc, #16]	; (8000e98 <setup_LCD_GPIOs+0x4c>)
 8000e88:	f001 fa84 	bl	8002394 <HAL_GPIO_WritePin>
			HAL_Delay(10);
 8000e8c:	200a      	movs	r0, #10
 8000e8e:	f001 f821 	bl	8001ed4 <HAL_Delay>
}
 8000e92:	bf00      	nop
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	40010800 	.word	0x40010800

08000e9c <PCD8544_write>:


void PCD8544_write(unsigned char type, unsigned char value)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	460a      	mov	r2, r1
 8000ea6:	71fb      	strb	r3, [r7, #7]
 8000ea8:	4613      	mov	r3, r2
 8000eaa:	71bb      	strb	r3, [r7, #6]
     unsigned char s = 0x08;
 8000eac:	2308      	movs	r3, #8
 8000eae:	73fb      	strb	r3, [r7, #15]

     if(type != 0)
 8000eb0:	79fb      	ldrb	r3, [r7, #7]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d005      	beq.n	8000ec2 <PCD8544_write+0x26>
     {
        // GPIOB_pin_high(DC_pin);
			 HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,1);
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	2102      	movs	r1, #2
 8000eba:	481d      	ldr	r0, [pc, #116]	; (8000f30 <PCD8544_write+0x94>)
 8000ebc:	f001 fa6a 	bl	8002394 <HAL_GPIO_WritePin>
 8000ec0:	e004      	b.n	8000ecc <PCD8544_write+0x30>
     }
     else
     {
        //GPIOB_pin_low(DC_pin);
			 HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,0);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	2102      	movs	r1, #2
 8000ec6:	481a      	ldr	r0, [pc, #104]	; (8000f30 <PCD8544_write+0x94>)
 8000ec8:	f001 fa64 	bl	8002394 <HAL_GPIO_WritePin>
     }

          //GPIOB_pin_low(CE_pin);
		 HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,0);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	2110      	movs	r1, #16
 8000ed0:	4817      	ldr	r0, [pc, #92]	; (8000f30 <PCD8544_write+0x94>)
 8000ed2:	f001 fa5f 	bl	8002394 <HAL_GPIO_WritePin>

     while(s > 0)
 8000ed6:	e01e      	b.n	8000f16 <PCD8544_write+0x7a>
     {
         //GPIOB_pin_low(SCK_pin);
			     HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,0);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	2120      	movs	r1, #32
 8000edc:	4814      	ldr	r0, [pc, #80]	; (8000f30 <PCD8544_write+0x94>)
 8000ede:	f001 fa59 	bl	8002394 <HAL_GPIO_WritePin>

         if((value & 0x80) == 0)
 8000ee2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	db05      	blt.n	8000ef6 <PCD8544_write+0x5a>
         {
             //GPIOB_pin_low(SDO_pin);
					 HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,0);
 8000eea:	2200      	movs	r2, #0
 8000eec:	2180      	movs	r1, #128	; 0x80
 8000eee:	4810      	ldr	r0, [pc, #64]	; (8000f30 <PCD8544_write+0x94>)
 8000ef0:	f001 fa50 	bl	8002394 <HAL_GPIO_WritePin>
 8000ef4:	e004      	b.n	8000f00 <PCD8544_write+0x64>
         }
         else
         {
             //GPIOB_pin_high(SDO_pin);
					  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,1);
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	2180      	movs	r1, #128	; 0x80
 8000efa:	480d      	ldr	r0, [pc, #52]	; (8000f30 <PCD8544_write+0x94>)
 8000efc:	f001 fa4a 	bl	8002394 <HAL_GPIO_WritePin>
         }

         value <<= 1;
 8000f00:	79bb      	ldrb	r3, [r7, #6]
 8000f02:	005b      	lsls	r3, r3, #1
 8000f04:	71bb      	strb	r3, [r7, #6]
         //GPIOB_pin_high(SCK_pin);
				 HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,1);
 8000f06:	2201      	movs	r2, #1
 8000f08:	2120      	movs	r1, #32
 8000f0a:	4809      	ldr	r0, [pc, #36]	; (8000f30 <PCD8544_write+0x94>)
 8000f0c:	f001 fa42 	bl	8002394 <HAL_GPIO_WritePin>
         s--;
 8000f10:	7bfb      	ldrb	r3, [r7, #15]
 8000f12:	3b01      	subs	r3, #1
 8000f14:	73fb      	strb	r3, [r7, #15]
     while(s > 0)
 8000f16:	7bfb      	ldrb	r3, [r7, #15]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d1dd      	bne.n	8000ed8 <PCD8544_write+0x3c>
     };

     //GPIOB_pin_high(CE_pin);
		 HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,1);
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	2110      	movs	r1, #16
 8000f20:	4803      	ldr	r0, [pc, #12]	; (8000f30 <PCD8544_write+0x94>)
 8000f22:	f001 fa37 	bl	8002394 <HAL_GPIO_WritePin>
}
 8000f26:	bf00      	nop
 8000f28:	3710      	adds	r7, #16
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40010800 	.word	0x40010800

08000f34 <PCD8544_reset>:


void PCD8544_reset()
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
//     GPIOB_pin_low(RST_pin);
//     delay_us(100);
//     GPIOB_pin_high(RST_pin);
				HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,0);
 8000f38:	2200      	movs	r2, #0
 8000f3a:	2101      	movs	r1, #1
 8000f3c:	4806      	ldr	r0, [pc, #24]	; (8000f58 <PCD8544_reset+0x24>)
 8000f3e:	f001 fa29 	bl	8002394 <HAL_GPIO_WritePin>
				HAL_Delay(100);
 8000f42:	2064      	movs	r0, #100	; 0x64
 8000f44:	f000 ffc6 	bl	8001ed4 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,1);
 8000f48:	2201      	movs	r2, #1
 8000f4a:	2101      	movs	r1, #1
 8000f4c:	4802      	ldr	r0, [pc, #8]	; (8000f58 <PCD8544_reset+0x24>)
 8000f4e:	f001 fa21 	bl	8002394 <HAL_GPIO_WritePin>
}
 8000f52:	bf00      	nop
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40010800 	.word	0x40010800

08000f5c <PCD8544_init>:


void PCD8544_init()
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
    setup_LCD_GPIOs();
 8000f60:	f7ff ff74 	bl	8000e4c <setup_LCD_GPIOs>
    PCD8544_reset();
 8000f64:	f7ff ffe6 	bl	8000f34 <PCD8544_reset>
    PCD8544_write(CMD, (PCD8544_extended_instruction | PCD8544_function_set));
 8000f68:	2121      	movs	r1, #33	; 0x21
 8000f6a:	2000      	movs	r0, #0
 8000f6c:	f7ff ff96 	bl	8000e9c <PCD8544_write>
    PCD8544_write(CMD, (PCD8544_set_bias | 0x02));
 8000f70:	2112      	movs	r1, #18
 8000f72:	2000      	movs	r0, #0
 8000f74:	f7ff ff92 	bl	8000e9c <PCD8544_write>
    PCD8544_set_contrast(0x39);
 8000f78:	2039      	movs	r0, #57	; 0x39
 8000f7a:	f000 f833 	bl	8000fe4 <PCD8544_set_contrast>
    PCD8544_write(CMD, PCD8544_set_temp);
 8000f7e:	2104      	movs	r1, #4
 8000f80:	2000      	movs	r0, #0
 8000f82:	f7ff ff8b 	bl	8000e9c <PCD8544_write>
    PCD8544_write(CMD, (PCD8544_display_normal | PCD8544_display_control));
 8000f86:	210c      	movs	r1, #12
 8000f88:	2000      	movs	r0, #0
 8000f8a:	f7ff ff87 	bl	8000e9c <PCD8544_write>
    PCD8544_write(CMD, PCD8544_function_set);
 8000f8e:	2120      	movs	r1, #32
 8000f90:	2000      	movs	r0, #0
 8000f92:	f7ff ff83 	bl	8000e9c <PCD8544_write>
    PCD8544_write(CMD, PCD8544_display_all_on);
 8000f96:	2101      	movs	r1, #1
 8000f98:	2000      	movs	r0, #0
 8000f9a:	f7ff ff7f 	bl	8000e9c <PCD8544_write>
    PCD8544_write(CMD, PCD8544_display_normal);
 8000f9e:	2104      	movs	r1, #4
 8000fa0:	2000      	movs	r0, #0
 8000fa2:	f7ff ff7b 	bl	8000e9c <PCD8544_write>
    PCD8544_clear_buffer(OFF);
 8000fa6:	2000      	movs	r0, #0
 8000fa8:	f000 f888 	bl	80010bc <PCD8544_clear_buffer>
}
 8000fac:	bf00      	nop
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <PCD8544_backlight_state>:


void PCD8544_backlight_state(unsigned char value)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	71fb      	strb	r3, [r7, #7]
     if(value != 0)
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d005      	beq.n	8000fcc <PCD8544_backlight_state+0x1c>
     {
         //GPIOB_pin_low(BL_pin);
			  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_2,0);
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	2104      	movs	r1, #4
 8000fc4:	4806      	ldr	r0, [pc, #24]	; (8000fe0 <PCD8544_backlight_state+0x30>)
 8000fc6:	f001 f9e5 	bl	8002394 <HAL_GPIO_WritePin>
     else
     {
        // GPIOB_pin_high(BL_pin);
			 HAL_GPIO_WritePin(GPIOA,GPIO_PIN_2,1);
     }
}
 8000fca:	e004      	b.n	8000fd6 <PCD8544_backlight_state+0x26>
			 HAL_GPIO_WritePin(GPIOA,GPIO_PIN_2,1);
 8000fcc:	2201      	movs	r2, #1
 8000fce:	2104      	movs	r1, #4
 8000fd0:	4803      	ldr	r0, [pc, #12]	; (8000fe0 <PCD8544_backlight_state+0x30>)
 8000fd2:	f001 f9df 	bl	8002394 <HAL_GPIO_WritePin>
}
 8000fd6:	bf00      	nop
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40010800 	.word	0x40010800

08000fe4 <PCD8544_set_contrast>:


void PCD8544_set_contrast(unsigned char value)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	71fb      	strb	r3, [r7, #7]
    if(value >= 0x7F)
 8000fee:	79fb      	ldrb	r3, [r7, #7]
 8000ff0:	2b7e      	cmp	r3, #126	; 0x7e
 8000ff2:	d901      	bls.n	8000ff8 <PCD8544_set_contrast+0x14>
    {
       value = 0x7F;
 8000ff4:	237f      	movs	r3, #127	; 0x7f
 8000ff6:	71fb      	strb	r3, [r7, #7]
    }

    PCD8544_write(CMD, (PCD8544_extended_instruction | PCD8544_function_set));
 8000ff8:	2121      	movs	r1, #33	; 0x21
 8000ffa:	2000      	movs	r0, #0
 8000ffc:	f7ff ff4e 	bl	8000e9c <PCD8544_write>
    PCD8544_write(CMD, (PCD8544_set_VOP | value));
 8001000:	79fb      	ldrb	r3, [r7, #7]
 8001002:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001006:	b2db      	uxtb	r3, r3
 8001008:	4619      	mov	r1, r3
 800100a:	2000      	movs	r0, #0
 800100c:	f7ff ff46 	bl	8000e9c <PCD8544_write>
    PCD8544_write(CMD, PCD8544_function_set);
 8001010:	2120      	movs	r1, #32
 8001012:	2000      	movs	r0, #0
 8001014:	f7ff ff42 	bl	8000e9c <PCD8544_write>
}
 8001018:	bf00      	nop
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <PCD8544_set_cursor>:


void PCD8544_set_cursor(unsigned char x_pos, unsigned char y_pos)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	460a      	mov	r2, r1
 800102a:	71fb      	strb	r3, [r7, #7]
 800102c:	4613      	mov	r3, r2
 800102e:	71bb      	strb	r3, [r7, #6]
    PCD8544_write(CMD, (PCD8544_set_X_addr | x_pos));
 8001030:	79fb      	ldrb	r3, [r7, #7]
 8001032:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001036:	b2db      	uxtb	r3, r3
 8001038:	4619      	mov	r1, r3
 800103a:	2000      	movs	r0, #0
 800103c:	f7ff ff2e 	bl	8000e9c <PCD8544_write>
    PCD8544_write(CMD, (PCD8544_set_Y_addr | y_pos));
 8001040:	79bb      	ldrb	r3, [r7, #6]
 8001042:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001046:	b2db      	uxtb	r3, r3
 8001048:	4619      	mov	r1, r3
 800104a:	2000      	movs	r0, #0
 800104c:	f7ff ff26 	bl	8000e9c <PCD8544_write>
}
 8001050:	bf00      	nop
 8001052:	3708      	adds	r7, #8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}

08001058 <PCD8544_print_char>:


void PCD8544_print_char(unsigned char ch, unsigned char colour)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	460a      	mov	r2, r1
 8001062:	71fb      	strb	r3, [r7, #7]
 8001064:	4613      	mov	r3, r2
 8001066:	71bb      	strb	r3, [r7, #6]
     unsigned char s = 0;
 8001068:	2300      	movs	r3, #0
 800106a:	73fb      	strb	r3, [r7, #15]
     unsigned char chr = 0;
 800106c:	2300      	movs	r3, #0
 800106e:	73bb      	strb	r3, [r7, #14]

     for(s = 0; s <= 4; s++)
 8001070:	2300      	movs	r3, #0
 8001072:	73fb      	strb	r3, [r7, #15]
 8001074:	e019      	b.n	80010aa <PCD8544_print_char+0x52>
     {
           chr = font[(ch - 0x20)][s];
 8001076:	79fb      	ldrb	r3, [r7, #7]
 8001078:	f1a3 0220 	sub.w	r2, r3, #32
 800107c:	7bf9      	ldrb	r1, [r7, #15]
 800107e:	480e      	ldr	r0, [pc, #56]	; (80010b8 <PCD8544_print_char+0x60>)
 8001080:	4613      	mov	r3, r2
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	4413      	add	r3, r2
 8001086:	4403      	add	r3, r0
 8001088:	440b      	add	r3, r1
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	73bb      	strb	r3, [r7, #14]
           if(colour == BLACK)
 800108e:	79bb      	ldrb	r3, [r7, #6]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d102      	bne.n	800109a <PCD8544_print_char+0x42>
           {
               chr = ~chr;
 8001094:	7bbb      	ldrb	r3, [r7, #14]
 8001096:	43db      	mvns	r3, r3
 8001098:	73bb      	strb	r3, [r7, #14]
           }
           PCD8544_write(DAT, chr);
 800109a:	7bbb      	ldrb	r3, [r7, #14]
 800109c:	4619      	mov	r1, r3
 800109e:	2001      	movs	r0, #1
 80010a0:	f7ff fefc 	bl	8000e9c <PCD8544_write>
     for(s = 0; s <= 4; s++)
 80010a4:	7bfb      	ldrb	r3, [r7, #15]
 80010a6:	3301      	adds	r3, #1
 80010a8:	73fb      	strb	r3, [r7, #15]
 80010aa:	7bfb      	ldrb	r3, [r7, #15]
 80010ac:	2b04      	cmp	r3, #4
 80010ae:	d9e2      	bls.n	8001076 <PCD8544_print_char+0x1e>
     }
}
 80010b0:	bf00      	nop
 80010b2:	3710      	adds	r7, #16
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	08002c50 	.word	0x08002c50

080010bc <PCD8544_clear_buffer>:
    }
}


void PCD8544_clear_buffer(unsigned char colour)
{
 80010bc:	b480      	push	{r7}
 80010be:	b085      	sub	sp, #20
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	71fb      	strb	r3, [r7, #7]
    unsigned char x_pos = 0;
 80010c6:	2300      	movs	r3, #0
 80010c8:	73fb      	strb	r3, [r7, #15]
    unsigned char y_pos = 0;
 80010ca:	2300      	movs	r3, #0
 80010cc:	73bb      	strb	r3, [r7, #14]

    for(x_pos; x_pos < X_max; x_pos++)
 80010ce:	e013      	b.n	80010f8 <PCD8544_clear_buffer+0x3c>
    {
        for(y_pos; y_pos < Rows; y_pos++)
        {
            PCD8544_buffer[x_pos][y_pos] = colour;
 80010d0:	7bfa      	ldrb	r2, [r7, #15]
 80010d2:	7bb9      	ldrb	r1, [r7, #14]
 80010d4:	480c      	ldr	r0, [pc, #48]	; (8001108 <PCD8544_clear_buffer+0x4c>)
 80010d6:	4613      	mov	r3, r2
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	4413      	add	r3, r2
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	4403      	add	r3, r0
 80010e0:	440b      	add	r3, r1
 80010e2:	79fa      	ldrb	r2, [r7, #7]
 80010e4:	701a      	strb	r2, [r3, #0]
        for(y_pos; y_pos < Rows; y_pos++)
 80010e6:	7bbb      	ldrb	r3, [r7, #14]
 80010e8:	3301      	adds	r3, #1
 80010ea:	73bb      	strb	r3, [r7, #14]
 80010ec:	7bbb      	ldrb	r3, [r7, #14]
 80010ee:	2b05      	cmp	r3, #5
 80010f0:	d9ee      	bls.n	80010d0 <PCD8544_clear_buffer+0x14>
    for(x_pos; x_pos < X_max; x_pos++)
 80010f2:	7bfb      	ldrb	r3, [r7, #15]
 80010f4:	3301      	adds	r3, #1
 80010f6:	73fb      	strb	r3, [r7, #15]
 80010f8:	7bfb      	ldrb	r3, [r7, #15]
 80010fa:	2b53      	cmp	r3, #83	; 0x53
 80010fc:	d9f6      	bls.n	80010ec <PCD8544_clear_buffer+0x30>
        }
    }
}
 80010fe:	bf00      	nop
 8001100:	3714      	adds	r7, #20
 8001102:	46bd      	mov	sp, r7
 8001104:	bc80      	pop	{r7}
 8001106:	4770      	bx	lr
 8001108:	20000028 	.word	0x20000028

0800110c <PCD8544_clear_screen>:


void PCD8544_clear_screen(unsigned char colour)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	71fb      	strb	r3, [r7, #7]
    unsigned char x_pos = 0;
 8001116:	2300      	movs	r3, #0
 8001118:	73fb      	strb	r3, [r7, #15]
    unsigned char y_pos = 0;
 800111a:	2300      	movs	r3, #0
 800111c:	73bb      	strb	r3, [r7, #14]

    for(y_pos = 0; y_pos < Rows; y_pos++)
 800111e:	2300      	movs	r3, #0
 8001120:	73bb      	strb	r3, [r7, #14]
 8001122:	e011      	b.n	8001148 <PCD8544_clear_screen+0x3c>
    {
        for(x_pos = 0; x_pos < X_max; x_pos++)
 8001124:	2300      	movs	r3, #0
 8001126:	73fb      	strb	r3, [r7, #15]
 8001128:	e008      	b.n	800113c <PCD8544_clear_screen+0x30>
        {
            PCD8544_print_string(x_pos, y_pos, " ", colour);
 800112a:	79fb      	ldrb	r3, [r7, #7]
 800112c:	7bb9      	ldrb	r1, [r7, #14]
 800112e:	7bf8      	ldrb	r0, [r7, #15]
 8001130:	4a09      	ldr	r2, [pc, #36]	; (8001158 <PCD8544_clear_screen+0x4c>)
 8001132:	f000 f813 	bl	800115c <PCD8544_print_string>
        for(x_pos = 0; x_pos < X_max; x_pos++)
 8001136:	7bfb      	ldrb	r3, [r7, #15]
 8001138:	3301      	adds	r3, #1
 800113a:	73fb      	strb	r3, [r7, #15]
 800113c:	7bfb      	ldrb	r3, [r7, #15]
 800113e:	2b53      	cmp	r3, #83	; 0x53
 8001140:	d9f3      	bls.n	800112a <PCD8544_clear_screen+0x1e>
    for(y_pos = 0; y_pos < Rows; y_pos++)
 8001142:	7bbb      	ldrb	r3, [r7, #14]
 8001144:	3301      	adds	r3, #1
 8001146:	73bb      	strb	r3, [r7, #14]
 8001148:	7bbb      	ldrb	r3, [r7, #14]
 800114a:	2b05      	cmp	r3, #5
 800114c:	d9ea      	bls.n	8001124 <PCD8544_clear_screen+0x18>
        }
    }
}
 800114e:	bf00      	nop
 8001150:	3710      	adds	r7, #16
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	08002c38 	.word	0x08002c38

0800115c <PCD8544_print_string>:

void PCD8544_print_string(unsigned char x_pos, unsigned char y_pos, unsigned char *ch, unsigned char colour)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	603a      	str	r2, [r7, #0]
 8001164:	461a      	mov	r2, r3
 8001166:	4603      	mov	r3, r0
 8001168:	71fb      	strb	r3, [r7, #7]
 800116a:	460b      	mov	r3, r1
 800116c:	71bb      	strb	r3, [r7, #6]
 800116e:	4613      	mov	r3, r2
 8001170:	717b      	strb	r3, [r7, #5]
    PCD8544_set_cursor(x_pos, y_pos);
 8001172:	79ba      	ldrb	r2, [r7, #6]
 8001174:	79fb      	ldrb	r3, [r7, #7]
 8001176:	4611      	mov	r1, r2
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff ff51 	bl	8001020 <PCD8544_set_cursor>

    do
    {
       PCD8544_print_char(*ch++, colour);
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	1c5a      	adds	r2, r3, #1
 8001182:	603a      	str	r2, [r7, #0]
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	797a      	ldrb	r2, [r7, #5]
 8001188:	4611      	mov	r1, r2
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff ff64 	bl	8001058 <PCD8544_print_char>
    }while((*ch >= 0x20) && (*ch <= 0x7F));
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b1f      	cmp	r3, #31
 8001196:	d904      	bls.n	80011a2 <PCD8544_print_string+0x46>
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	b25b      	sxtb	r3, r3
 800119e:	2b00      	cmp	r3, #0
 80011a0:	daed      	bge.n	800117e <PCD8544_print_string+0x22>
}
 80011a2:	bf00      	nop
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
	...

080011ac <print_chr>:


void print_chr(unsigned char x_pos, unsigned char y_pos, signed int value, unsigned char colour)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	603a      	str	r2, [r7, #0]
 80011b4:	461a      	mov	r2, r3
 80011b6:	4603      	mov	r3, r0
 80011b8:	71fb      	strb	r3, [r7, #7]
 80011ba:	460b      	mov	r3, r1
 80011bc:	71bb      	strb	r3, [r7, #6]
 80011be:	4613      	mov	r3, r2
 80011c0:	717b      	strb	r3, [r7, #5]
    unsigned char ch = 0x00;
 80011c2:	2300      	movs	r3, #0
 80011c4:	73fb      	strb	r3, [r7, #15]

    if(value < 0)
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	da0e      	bge.n	80011ea <print_chr+0x3e>
    {
        PCD8544_set_cursor(x_pos, y_pos);
 80011cc:	79ba      	ldrb	r2, [r7, #6]
 80011ce:	79fb      	ldrb	r3, [r7, #7]
 80011d0:	4611      	mov	r1, r2
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff ff24 	bl	8001020 <PCD8544_set_cursor>
        PCD8544_print_char(0x2D, colour);
 80011d8:	797b      	ldrb	r3, [r7, #5]
 80011da:	4619      	mov	r1, r3
 80011dc:	202d      	movs	r0, #45	; 0x2d
 80011de:	f7ff ff3b 	bl	8001058 <PCD8544_print_char>
        value = -value;
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	425b      	negs	r3, r3
 80011e6:	603b      	str	r3, [r7, #0]
 80011e8:	e00a      	b.n	8001200 <print_chr+0x54>
    }
    else
    {
        PCD8544_set_cursor(x_pos, y_pos);
 80011ea:	79ba      	ldrb	r2, [r7, #6]
 80011ec:	79fb      	ldrb	r3, [r7, #7]
 80011ee:	4611      	mov	r1, r2
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff ff15 	bl	8001020 <PCD8544_set_cursor>
        PCD8544_print_char(0x20, colour);
 80011f6:	797b      	ldrb	r3, [r7, #5]
 80011f8:	4619      	mov	r1, r3
 80011fa:	2020      	movs	r0, #32
 80011fc:	f7ff ff2c 	bl	8001058 <PCD8544_print_char>
    }

     if((value > 99) && (value <= 999))
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	2b63      	cmp	r3, #99	; 0x63
 8001204:	dd5c      	ble.n	80012c0 <print_chr+0x114>
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800120c:	da58      	bge.n	80012c0 <print_chr+0x114>
     {
         ch = (value / 100);
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	4a77      	ldr	r2, [pc, #476]	; (80013f0 <print_chr+0x244>)
 8001212:	fb82 1203 	smull	r1, r2, r2, r3
 8001216:	1152      	asrs	r2, r2, #5
 8001218:	17db      	asrs	r3, r3, #31
 800121a:	1ad3      	subs	r3, r2, r3
 800121c:	73fb      	strb	r3, [r7, #15]
         PCD8544_set_cursor((x_pos + 6), y_pos);
 800121e:	79fb      	ldrb	r3, [r7, #7]
 8001220:	3306      	adds	r3, #6
 8001222:	b2db      	uxtb	r3, r3
 8001224:	79ba      	ldrb	r2, [r7, #6]
 8001226:	4611      	mov	r1, r2
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff fef9 	bl	8001020 <PCD8544_set_cursor>
         PCD8544_print_char((48 + ch), colour);
 800122e:	7bfb      	ldrb	r3, [r7, #15]
 8001230:	3330      	adds	r3, #48	; 0x30
 8001232:	b2db      	uxtb	r3, r3
 8001234:	797a      	ldrb	r2, [r7, #5]
 8001236:	4611      	mov	r1, r2
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff ff0d 	bl	8001058 <PCD8544_print_char>

         ch = ((value % 100) / 10);
 800123e:	683a      	ldr	r2, [r7, #0]
 8001240:	4b6b      	ldr	r3, [pc, #428]	; (80013f0 <print_chr+0x244>)
 8001242:	fb83 1302 	smull	r1, r3, r3, r2
 8001246:	1159      	asrs	r1, r3, #5
 8001248:	17d3      	asrs	r3, r2, #31
 800124a:	1acb      	subs	r3, r1, r3
 800124c:	2164      	movs	r1, #100	; 0x64
 800124e:	fb01 f303 	mul.w	r3, r1, r3
 8001252:	1ad3      	subs	r3, r2, r3
 8001254:	4a67      	ldr	r2, [pc, #412]	; (80013f4 <print_chr+0x248>)
 8001256:	fb82 1203 	smull	r1, r2, r2, r3
 800125a:	1092      	asrs	r2, r2, #2
 800125c:	17db      	asrs	r3, r3, #31
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	73fb      	strb	r3, [r7, #15]
         PCD8544_set_cursor((x_pos + 12), y_pos);
 8001262:	79fb      	ldrb	r3, [r7, #7]
 8001264:	330c      	adds	r3, #12
 8001266:	b2db      	uxtb	r3, r3
 8001268:	79ba      	ldrb	r2, [r7, #6]
 800126a:	4611      	mov	r1, r2
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff fed7 	bl	8001020 <PCD8544_set_cursor>
         PCD8544_print_char((48 + ch), colour);
 8001272:	7bfb      	ldrb	r3, [r7, #15]
 8001274:	3330      	adds	r3, #48	; 0x30
 8001276:	b2db      	uxtb	r3, r3
 8001278:	797a      	ldrb	r2, [r7, #5]
 800127a:	4611      	mov	r1, r2
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff feeb 	bl	8001058 <PCD8544_print_char>

         ch = (value % 10);
 8001282:	683a      	ldr	r2, [r7, #0]
 8001284:	4b5b      	ldr	r3, [pc, #364]	; (80013f4 <print_chr+0x248>)
 8001286:	fb83 1302 	smull	r1, r3, r3, r2
 800128a:	1099      	asrs	r1, r3, #2
 800128c:	17d3      	asrs	r3, r2, #31
 800128e:	1ac9      	subs	r1, r1, r3
 8001290:	460b      	mov	r3, r1
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	440b      	add	r3, r1
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	1ad1      	subs	r1, r2, r3
 800129a:	460b      	mov	r3, r1
 800129c:	73fb      	strb	r3, [r7, #15]
         PCD8544_set_cursor((x_pos + 18), y_pos);
 800129e:	79fb      	ldrb	r3, [r7, #7]
 80012a0:	3312      	adds	r3, #18
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	79ba      	ldrb	r2, [r7, #6]
 80012a6:	4611      	mov	r1, r2
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff feb9 	bl	8001020 <PCD8544_set_cursor>
         PCD8544_print_char((48 + ch), colour);
 80012ae:	7bfb      	ldrb	r3, [r7, #15]
 80012b0:	3330      	adds	r3, #48	; 0x30
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	797a      	ldrb	r2, [r7, #5]
 80012b6:	4611      	mov	r1, r2
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff fecd 	bl	8001058 <PCD8544_print_char>
 80012be:	e092      	b.n	80013e6 <print_chr+0x23a>
     }
     else if((value > 9) && (value <= 99))
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	2b09      	cmp	r3, #9
 80012c4:	dd50      	ble.n	8001368 <print_chr+0x1bc>
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	2b63      	cmp	r3, #99	; 0x63
 80012ca:	dc4d      	bgt.n	8001368 <print_chr+0x1bc>
     {
         ch = ((value % 100) / 10);
 80012cc:	683a      	ldr	r2, [r7, #0]
 80012ce:	4b48      	ldr	r3, [pc, #288]	; (80013f0 <print_chr+0x244>)
 80012d0:	fb83 1302 	smull	r1, r3, r3, r2
 80012d4:	1159      	asrs	r1, r3, #5
 80012d6:	17d3      	asrs	r3, r2, #31
 80012d8:	1acb      	subs	r3, r1, r3
 80012da:	2164      	movs	r1, #100	; 0x64
 80012dc:	fb01 f303 	mul.w	r3, r1, r3
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	4a44      	ldr	r2, [pc, #272]	; (80013f4 <print_chr+0x248>)
 80012e4:	fb82 1203 	smull	r1, r2, r2, r3
 80012e8:	1092      	asrs	r2, r2, #2
 80012ea:	17db      	asrs	r3, r3, #31
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	73fb      	strb	r3, [r7, #15]
         PCD8544_set_cursor((x_pos + 6), y_pos);
 80012f0:	79fb      	ldrb	r3, [r7, #7]
 80012f2:	3306      	adds	r3, #6
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	79ba      	ldrb	r2, [r7, #6]
 80012f8:	4611      	mov	r1, r2
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff fe90 	bl	8001020 <PCD8544_set_cursor>
         PCD8544_print_char((48 + ch), colour);
 8001300:	7bfb      	ldrb	r3, [r7, #15]
 8001302:	3330      	adds	r3, #48	; 0x30
 8001304:	b2db      	uxtb	r3, r3
 8001306:	797a      	ldrb	r2, [r7, #5]
 8001308:	4611      	mov	r1, r2
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff fea4 	bl	8001058 <PCD8544_print_char>

         ch = (value % 10);
 8001310:	683a      	ldr	r2, [r7, #0]
 8001312:	4b38      	ldr	r3, [pc, #224]	; (80013f4 <print_chr+0x248>)
 8001314:	fb83 1302 	smull	r1, r3, r3, r2
 8001318:	1099      	asrs	r1, r3, #2
 800131a:	17d3      	asrs	r3, r2, #31
 800131c:	1ac9      	subs	r1, r1, r3
 800131e:	460b      	mov	r3, r1
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	440b      	add	r3, r1
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	1ad1      	subs	r1, r2, r3
 8001328:	460b      	mov	r3, r1
 800132a:	73fb      	strb	r3, [r7, #15]
         PCD8544_set_cursor((x_pos + 12), y_pos);
 800132c:	79fb      	ldrb	r3, [r7, #7]
 800132e:	330c      	adds	r3, #12
 8001330:	b2db      	uxtb	r3, r3
 8001332:	79ba      	ldrb	r2, [r7, #6]
 8001334:	4611      	mov	r1, r2
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff fe72 	bl	8001020 <PCD8544_set_cursor>
         PCD8544_print_char((48 + ch), colour);
 800133c:	7bfb      	ldrb	r3, [r7, #15]
 800133e:	3330      	adds	r3, #48	; 0x30
 8001340:	b2db      	uxtb	r3, r3
 8001342:	797a      	ldrb	r2, [r7, #5]
 8001344:	4611      	mov	r1, r2
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff fe86 	bl	8001058 <PCD8544_print_char>

         PCD8544_set_cursor((x_pos + 18), y_pos);
 800134c:	79fb      	ldrb	r3, [r7, #7]
 800134e:	3312      	adds	r3, #18
 8001350:	b2db      	uxtb	r3, r3
 8001352:	79ba      	ldrb	r2, [r7, #6]
 8001354:	4611      	mov	r1, r2
 8001356:	4618      	mov	r0, r3
 8001358:	f7ff fe62 	bl	8001020 <PCD8544_set_cursor>
         PCD8544_print_char(0x20, colour);
 800135c:	797b      	ldrb	r3, [r7, #5]
 800135e:	4619      	mov	r1, r3
 8001360:	2020      	movs	r0, #32
 8001362:	f7ff fe79 	bl	8001058 <PCD8544_print_char>
 8001366:	e03e      	b.n	80013e6 <print_chr+0x23a>
     }
     else if((value >= 0) && (value <= 9))
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	2b00      	cmp	r3, #0
 800136c:	db3b      	blt.n	80013e6 <print_chr+0x23a>
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	2b09      	cmp	r3, #9
 8001372:	dc38      	bgt.n	80013e6 <print_chr+0x23a>
     {
         ch = (value % 10);
 8001374:	683a      	ldr	r2, [r7, #0]
 8001376:	4b1f      	ldr	r3, [pc, #124]	; (80013f4 <print_chr+0x248>)
 8001378:	fb83 1302 	smull	r1, r3, r3, r2
 800137c:	1099      	asrs	r1, r3, #2
 800137e:	17d3      	asrs	r3, r2, #31
 8001380:	1ac9      	subs	r1, r1, r3
 8001382:	460b      	mov	r3, r1
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	440b      	add	r3, r1
 8001388:	005b      	lsls	r3, r3, #1
 800138a:	1ad1      	subs	r1, r2, r3
 800138c:	460b      	mov	r3, r1
 800138e:	73fb      	strb	r3, [r7, #15]
         PCD8544_set_cursor((x_pos + 6), y_pos);
 8001390:	79fb      	ldrb	r3, [r7, #7]
 8001392:	3306      	adds	r3, #6
 8001394:	b2db      	uxtb	r3, r3
 8001396:	79ba      	ldrb	r2, [r7, #6]
 8001398:	4611      	mov	r1, r2
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff fe40 	bl	8001020 <PCD8544_set_cursor>
         PCD8544_print_char((48 + ch), colour);
 80013a0:	7bfb      	ldrb	r3, [r7, #15]
 80013a2:	3330      	adds	r3, #48	; 0x30
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	797a      	ldrb	r2, [r7, #5]
 80013a8:	4611      	mov	r1, r2
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7ff fe54 	bl	8001058 <PCD8544_print_char>

         PCD8544_set_cursor((x_pos + 12), y_pos);
 80013b0:	79fb      	ldrb	r3, [r7, #7]
 80013b2:	330c      	adds	r3, #12
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	79ba      	ldrb	r2, [r7, #6]
 80013b8:	4611      	mov	r1, r2
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff fe30 	bl	8001020 <PCD8544_set_cursor>
         PCD8544_print_char(0x20, colour);
 80013c0:	797b      	ldrb	r3, [r7, #5]
 80013c2:	4619      	mov	r1, r3
 80013c4:	2020      	movs	r0, #32
 80013c6:	f7ff fe47 	bl	8001058 <PCD8544_print_char>

         PCD8544_set_cursor((x_pos + 18), y_pos);
 80013ca:	79fb      	ldrb	r3, [r7, #7]
 80013cc:	3312      	adds	r3, #18
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	79ba      	ldrb	r2, [r7, #6]
 80013d2:	4611      	mov	r1, r2
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff fe23 	bl	8001020 <PCD8544_set_cursor>
         PCD8544_print_char(0x20, colour);
 80013da:	797b      	ldrb	r3, [r7, #5]
 80013dc:	4619      	mov	r1, r3
 80013de:	2020      	movs	r0, #32
 80013e0:	f7ff fe3a 	bl	8001058 <PCD8544_print_char>
     }
}
 80013e4:	e7ff      	b.n	80013e6 <print_chr+0x23a>
 80013e6:	bf00      	nop
 80013e8:	3710      	adds	r7, #16
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	51eb851f 	.word	0x51eb851f
 80013f4:	66666667 	.word	0x66666667

080013f8 <print_int>:


void print_int(unsigned char x_pos, unsigned char y_pos, signed long value, unsigned char colour)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	603a      	str	r2, [r7, #0]
 8001400:	461a      	mov	r2, r3
 8001402:	4603      	mov	r3, r0
 8001404:	71fb      	strb	r3, [r7, #7]
 8001406:	460b      	mov	r3, r1
 8001408:	71bb      	strb	r3, [r7, #6]
 800140a:	4613      	mov	r3, r2
 800140c:	717b      	strb	r3, [r7, #5]
    unsigned char ch = 0x00;
 800140e:	2300      	movs	r3, #0
 8001410:	73fb      	strb	r3, [r7, #15]

    if(value < 0)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	2b00      	cmp	r3, #0
 8001416:	da0e      	bge.n	8001436 <print_int+0x3e>
    {
        PCD8544_set_cursor(x_pos, y_pos);
 8001418:	79ba      	ldrb	r2, [r7, #6]
 800141a:	79fb      	ldrb	r3, [r7, #7]
 800141c:	4611      	mov	r1, r2
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff fdfe 	bl	8001020 <PCD8544_set_cursor>
        PCD8544_print_char(0x2D, colour);
 8001424:	797b      	ldrb	r3, [r7, #5]
 8001426:	4619      	mov	r1, r3
 8001428:	202d      	movs	r0, #45	; 0x2d
 800142a:	f7ff fe15 	bl	8001058 <PCD8544_print_char>
        value = -value;
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	425b      	negs	r3, r3
 8001432:	603b      	str	r3, [r7, #0]
 8001434:	e00a      	b.n	800144c <print_int+0x54>
    }
    else
    {
        PCD8544_set_cursor(x_pos, y_pos);
 8001436:	79ba      	ldrb	r2, [r7, #6]
 8001438:	79fb      	ldrb	r3, [r7, #7]
 800143a:	4611      	mov	r1, r2
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff fdef 	bl	8001020 <PCD8544_set_cursor>
        PCD8544_print_char(0x20, colour);
 8001442:	797b      	ldrb	r3, [r7, #5]
 8001444:	4619      	mov	r1, r3
 8001446:	2020      	movs	r0, #32
 8001448:	f7ff fe06 	bl	8001058 <PCD8544_print_char>
    }

    if(value > 9999)
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	f242 720f 	movw	r2, #9999	; 0x270f
 8001452:	4293      	cmp	r3, r2
 8001454:	f340 809f 	ble.w	8001596 <print_int+0x19e>
    {
        ch = (value / 10000);
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	4a9e      	ldr	r2, [pc, #632]	; (80016d4 <print_int+0x2dc>)
 800145c:	fb82 1203 	smull	r1, r2, r2, r3
 8001460:	1312      	asrs	r2, r2, #12
 8001462:	17db      	asrs	r3, r3, #31
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	73fb      	strb	r3, [r7, #15]
        PCD8544_set_cursor((x_pos + 6), y_pos);
 8001468:	79fb      	ldrb	r3, [r7, #7]
 800146a:	3306      	adds	r3, #6
 800146c:	b2db      	uxtb	r3, r3
 800146e:	79ba      	ldrb	r2, [r7, #6]
 8001470:	4611      	mov	r1, r2
 8001472:	4618      	mov	r0, r3
 8001474:	f7ff fdd4 	bl	8001020 <PCD8544_set_cursor>
        PCD8544_print_char((48 + ch), colour);
 8001478:	7bfb      	ldrb	r3, [r7, #15]
 800147a:	3330      	adds	r3, #48	; 0x30
 800147c:	b2db      	uxtb	r3, r3
 800147e:	797a      	ldrb	r2, [r7, #5]
 8001480:	4611      	mov	r1, r2
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff fde8 	bl	8001058 <PCD8544_print_char>

        ch = ((value % 10000)/ 1000);
 8001488:	683a      	ldr	r2, [r7, #0]
 800148a:	4b92      	ldr	r3, [pc, #584]	; (80016d4 <print_int+0x2dc>)
 800148c:	fb83 1302 	smull	r1, r3, r3, r2
 8001490:	1319      	asrs	r1, r3, #12
 8001492:	17d3      	asrs	r3, r2, #31
 8001494:	1acb      	subs	r3, r1, r3
 8001496:	f242 7110 	movw	r1, #10000	; 0x2710
 800149a:	fb01 f303 	mul.w	r3, r1, r3
 800149e:	1ad3      	subs	r3, r2, r3
 80014a0:	4a8d      	ldr	r2, [pc, #564]	; (80016d8 <print_int+0x2e0>)
 80014a2:	fb82 1203 	smull	r1, r2, r2, r3
 80014a6:	1192      	asrs	r2, r2, #6
 80014a8:	17db      	asrs	r3, r3, #31
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	73fb      	strb	r3, [r7, #15]
        PCD8544_set_cursor((x_pos + 12), y_pos);
 80014ae:	79fb      	ldrb	r3, [r7, #7]
 80014b0:	330c      	adds	r3, #12
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	79ba      	ldrb	r2, [r7, #6]
 80014b6:	4611      	mov	r1, r2
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff fdb1 	bl	8001020 <PCD8544_set_cursor>
        PCD8544_print_char((48 + ch), colour);
 80014be:	7bfb      	ldrb	r3, [r7, #15]
 80014c0:	3330      	adds	r3, #48	; 0x30
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	797a      	ldrb	r2, [r7, #5]
 80014c6:	4611      	mov	r1, r2
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff fdc5 	bl	8001058 <PCD8544_print_char>

        ch = ((value % 1000) / 100);
 80014ce:	683a      	ldr	r2, [r7, #0]
 80014d0:	4b81      	ldr	r3, [pc, #516]	; (80016d8 <print_int+0x2e0>)
 80014d2:	fb83 1302 	smull	r1, r3, r3, r2
 80014d6:	1199      	asrs	r1, r3, #6
 80014d8:	17d3      	asrs	r3, r2, #31
 80014da:	1acb      	subs	r3, r1, r3
 80014dc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80014e0:	fb01 f303 	mul.w	r3, r1, r3
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	4a7d      	ldr	r2, [pc, #500]	; (80016dc <print_int+0x2e4>)
 80014e8:	fb82 1203 	smull	r1, r2, r2, r3
 80014ec:	1152      	asrs	r2, r2, #5
 80014ee:	17db      	asrs	r3, r3, #31
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	73fb      	strb	r3, [r7, #15]
        PCD8544_set_cursor((x_pos + 18), y_pos);
 80014f4:	79fb      	ldrb	r3, [r7, #7]
 80014f6:	3312      	adds	r3, #18
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	79ba      	ldrb	r2, [r7, #6]
 80014fc:	4611      	mov	r1, r2
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff fd8e 	bl	8001020 <PCD8544_set_cursor>
        PCD8544_print_char((48 + ch), colour);
 8001504:	7bfb      	ldrb	r3, [r7, #15]
 8001506:	3330      	adds	r3, #48	; 0x30
 8001508:	b2db      	uxtb	r3, r3
 800150a:	797a      	ldrb	r2, [r7, #5]
 800150c:	4611      	mov	r1, r2
 800150e:	4618      	mov	r0, r3
 8001510:	f7ff fda2 	bl	8001058 <PCD8544_print_char>

        ch = ((value % 100) / 10);
 8001514:	683a      	ldr	r2, [r7, #0]
 8001516:	4b71      	ldr	r3, [pc, #452]	; (80016dc <print_int+0x2e4>)
 8001518:	fb83 1302 	smull	r1, r3, r3, r2
 800151c:	1159      	asrs	r1, r3, #5
 800151e:	17d3      	asrs	r3, r2, #31
 8001520:	1acb      	subs	r3, r1, r3
 8001522:	2164      	movs	r1, #100	; 0x64
 8001524:	fb01 f303 	mul.w	r3, r1, r3
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	4a6d      	ldr	r2, [pc, #436]	; (80016e0 <print_int+0x2e8>)
 800152c:	fb82 1203 	smull	r1, r2, r2, r3
 8001530:	1092      	asrs	r2, r2, #2
 8001532:	17db      	asrs	r3, r3, #31
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	73fb      	strb	r3, [r7, #15]
        PCD8544_set_cursor((x_pos + 24), y_pos);
 8001538:	79fb      	ldrb	r3, [r7, #7]
 800153a:	3318      	adds	r3, #24
 800153c:	b2db      	uxtb	r3, r3
 800153e:	79ba      	ldrb	r2, [r7, #6]
 8001540:	4611      	mov	r1, r2
 8001542:	4618      	mov	r0, r3
 8001544:	f7ff fd6c 	bl	8001020 <PCD8544_set_cursor>
        PCD8544_print_char((48 + ch), colour);
 8001548:	7bfb      	ldrb	r3, [r7, #15]
 800154a:	3330      	adds	r3, #48	; 0x30
 800154c:	b2db      	uxtb	r3, r3
 800154e:	797a      	ldrb	r2, [r7, #5]
 8001550:	4611      	mov	r1, r2
 8001552:	4618      	mov	r0, r3
 8001554:	f7ff fd80 	bl	8001058 <PCD8544_print_char>

        ch = (value % 10);
 8001558:	683a      	ldr	r2, [r7, #0]
 800155a:	4b61      	ldr	r3, [pc, #388]	; (80016e0 <print_int+0x2e8>)
 800155c:	fb83 1302 	smull	r1, r3, r3, r2
 8001560:	1099      	asrs	r1, r3, #2
 8001562:	17d3      	asrs	r3, r2, #31
 8001564:	1ac9      	subs	r1, r1, r3
 8001566:	460b      	mov	r3, r1
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	440b      	add	r3, r1
 800156c:	005b      	lsls	r3, r3, #1
 800156e:	1ad1      	subs	r1, r2, r3
 8001570:	460b      	mov	r3, r1
 8001572:	73fb      	strb	r3, [r7, #15]
        PCD8544_set_cursor((x_pos + 30), y_pos);
 8001574:	79fb      	ldrb	r3, [r7, #7]
 8001576:	331e      	adds	r3, #30
 8001578:	b2db      	uxtb	r3, r3
 800157a:	79ba      	ldrb	r2, [r7, #6]
 800157c:	4611      	mov	r1, r2
 800157e:	4618      	mov	r0, r3
 8001580:	f7ff fd4e 	bl	8001020 <PCD8544_set_cursor>
        PCD8544_print_char((48 + ch), colour);
 8001584:	7bfb      	ldrb	r3, [r7, #15]
 8001586:	3330      	adds	r3, #48	; 0x30
 8001588:	b2db      	uxtb	r3, r3
 800158a:	797a      	ldrb	r2, [r7, #5]
 800158c:	4611      	mov	r1, r2
 800158e:	4618      	mov	r0, r3
 8001590:	f7ff fd62 	bl	8001058 <PCD8544_print_char>
        PCD8544_print_char(0x20, colour);

        PCD8544_set_cursor((x_pos + 30), y_pos);
        PCD8544_print_char(0x20, colour);
    }
}
 8001594:	e1ed      	b.n	8001972 <print_int+0x57a>
    else if((value > 999) && (value <= 9999))
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800159c:	f2c0 80a2 	blt.w	80016e4 <print_int+0x2ec>
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	f242 720f 	movw	r2, #9999	; 0x270f
 80015a6:	4293      	cmp	r3, r2
 80015a8:	f300 809c 	bgt.w	80016e4 <print_int+0x2ec>
        ch = ((value % 10000)/ 1000);
 80015ac:	683a      	ldr	r2, [r7, #0]
 80015ae:	4b49      	ldr	r3, [pc, #292]	; (80016d4 <print_int+0x2dc>)
 80015b0:	fb83 1302 	smull	r1, r3, r3, r2
 80015b4:	1319      	asrs	r1, r3, #12
 80015b6:	17d3      	asrs	r3, r2, #31
 80015b8:	1acb      	subs	r3, r1, r3
 80015ba:	f242 7110 	movw	r1, #10000	; 0x2710
 80015be:	fb01 f303 	mul.w	r3, r1, r3
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	4a44      	ldr	r2, [pc, #272]	; (80016d8 <print_int+0x2e0>)
 80015c6:	fb82 1203 	smull	r1, r2, r2, r3
 80015ca:	1192      	asrs	r2, r2, #6
 80015cc:	17db      	asrs	r3, r3, #31
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	73fb      	strb	r3, [r7, #15]
        PCD8544_set_cursor((x_pos + 6), y_pos);
 80015d2:	79fb      	ldrb	r3, [r7, #7]
 80015d4:	3306      	adds	r3, #6
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	79ba      	ldrb	r2, [r7, #6]
 80015da:	4611      	mov	r1, r2
 80015dc:	4618      	mov	r0, r3
 80015de:	f7ff fd1f 	bl	8001020 <PCD8544_set_cursor>
        PCD8544_print_char((48 + ch), colour);
 80015e2:	7bfb      	ldrb	r3, [r7, #15]
 80015e4:	3330      	adds	r3, #48	; 0x30
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	797a      	ldrb	r2, [r7, #5]
 80015ea:	4611      	mov	r1, r2
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7ff fd33 	bl	8001058 <PCD8544_print_char>
        ch = ((value % 1000) / 100);
 80015f2:	683a      	ldr	r2, [r7, #0]
 80015f4:	4b38      	ldr	r3, [pc, #224]	; (80016d8 <print_int+0x2e0>)
 80015f6:	fb83 1302 	smull	r1, r3, r3, r2
 80015fa:	1199      	asrs	r1, r3, #6
 80015fc:	17d3      	asrs	r3, r2, #31
 80015fe:	1acb      	subs	r3, r1, r3
 8001600:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001604:	fb01 f303 	mul.w	r3, r1, r3
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	4a34      	ldr	r2, [pc, #208]	; (80016dc <print_int+0x2e4>)
 800160c:	fb82 1203 	smull	r1, r2, r2, r3
 8001610:	1152      	asrs	r2, r2, #5
 8001612:	17db      	asrs	r3, r3, #31
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	73fb      	strb	r3, [r7, #15]
        PCD8544_set_cursor((x_pos + 12), y_pos);
 8001618:	79fb      	ldrb	r3, [r7, #7]
 800161a:	330c      	adds	r3, #12
 800161c:	b2db      	uxtb	r3, r3
 800161e:	79ba      	ldrb	r2, [r7, #6]
 8001620:	4611      	mov	r1, r2
 8001622:	4618      	mov	r0, r3
 8001624:	f7ff fcfc 	bl	8001020 <PCD8544_set_cursor>
        PCD8544_print_char((48 + ch), colour);
 8001628:	7bfb      	ldrb	r3, [r7, #15]
 800162a:	3330      	adds	r3, #48	; 0x30
 800162c:	b2db      	uxtb	r3, r3
 800162e:	797a      	ldrb	r2, [r7, #5]
 8001630:	4611      	mov	r1, r2
 8001632:	4618      	mov	r0, r3
 8001634:	f7ff fd10 	bl	8001058 <PCD8544_print_char>
        ch = ((value % 100) / 10);
 8001638:	683a      	ldr	r2, [r7, #0]
 800163a:	4b28      	ldr	r3, [pc, #160]	; (80016dc <print_int+0x2e4>)
 800163c:	fb83 1302 	smull	r1, r3, r3, r2
 8001640:	1159      	asrs	r1, r3, #5
 8001642:	17d3      	asrs	r3, r2, #31
 8001644:	1acb      	subs	r3, r1, r3
 8001646:	2164      	movs	r1, #100	; 0x64
 8001648:	fb01 f303 	mul.w	r3, r1, r3
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	4a24      	ldr	r2, [pc, #144]	; (80016e0 <print_int+0x2e8>)
 8001650:	fb82 1203 	smull	r1, r2, r2, r3
 8001654:	1092      	asrs	r2, r2, #2
 8001656:	17db      	asrs	r3, r3, #31
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	73fb      	strb	r3, [r7, #15]
        PCD8544_set_cursor((x_pos + 18), y_pos);
 800165c:	79fb      	ldrb	r3, [r7, #7]
 800165e:	3312      	adds	r3, #18
 8001660:	b2db      	uxtb	r3, r3
 8001662:	79ba      	ldrb	r2, [r7, #6]
 8001664:	4611      	mov	r1, r2
 8001666:	4618      	mov	r0, r3
 8001668:	f7ff fcda 	bl	8001020 <PCD8544_set_cursor>
        PCD8544_print_char((48 + ch), colour);
 800166c:	7bfb      	ldrb	r3, [r7, #15]
 800166e:	3330      	adds	r3, #48	; 0x30
 8001670:	b2db      	uxtb	r3, r3
 8001672:	797a      	ldrb	r2, [r7, #5]
 8001674:	4611      	mov	r1, r2
 8001676:	4618      	mov	r0, r3
 8001678:	f7ff fcee 	bl	8001058 <PCD8544_print_char>
        ch = (value % 10);
 800167c:	683a      	ldr	r2, [r7, #0]
 800167e:	4b18      	ldr	r3, [pc, #96]	; (80016e0 <print_int+0x2e8>)
 8001680:	fb83 1302 	smull	r1, r3, r3, r2
 8001684:	1099      	asrs	r1, r3, #2
 8001686:	17d3      	asrs	r3, r2, #31
 8001688:	1ac9      	subs	r1, r1, r3
 800168a:	460b      	mov	r3, r1
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	440b      	add	r3, r1
 8001690:	005b      	lsls	r3, r3, #1
 8001692:	1ad1      	subs	r1, r2, r3
 8001694:	460b      	mov	r3, r1
 8001696:	73fb      	strb	r3, [r7, #15]
        PCD8544_set_cursor((x_pos + 24), y_pos);
 8001698:	79fb      	ldrb	r3, [r7, #7]
 800169a:	3318      	adds	r3, #24
 800169c:	b2db      	uxtb	r3, r3
 800169e:	79ba      	ldrb	r2, [r7, #6]
 80016a0:	4611      	mov	r1, r2
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7ff fcbc 	bl	8001020 <PCD8544_set_cursor>
        PCD8544_print_char((48 + ch), colour);
 80016a8:	7bfb      	ldrb	r3, [r7, #15]
 80016aa:	3330      	adds	r3, #48	; 0x30
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	797a      	ldrb	r2, [r7, #5]
 80016b0:	4611      	mov	r1, r2
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7ff fcd0 	bl	8001058 <PCD8544_print_char>
        PCD8544_set_cursor((x_pos + 30), y_pos);
 80016b8:	79fb      	ldrb	r3, [r7, #7]
 80016ba:	331e      	adds	r3, #30
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	79ba      	ldrb	r2, [r7, #6]
 80016c0:	4611      	mov	r1, r2
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7ff fcac 	bl	8001020 <PCD8544_set_cursor>
        PCD8544_print_char(0x20, colour);
 80016c8:	797b      	ldrb	r3, [r7, #5]
 80016ca:	4619      	mov	r1, r3
 80016cc:	2020      	movs	r0, #32
 80016ce:	f7ff fcc3 	bl	8001058 <PCD8544_print_char>
 80016d2:	e14e      	b.n	8001972 <print_int+0x57a>
 80016d4:	68db8bad 	.word	0x68db8bad
 80016d8:	10624dd3 	.word	0x10624dd3
 80016dc:	51eb851f 	.word	0x51eb851f
 80016e0:	66666667 	.word	0x66666667
    else if((value > 99) && (value <= 999))
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	2b63      	cmp	r3, #99	; 0x63
 80016e8:	f340 8082 	ble.w	80017f0 <print_int+0x3f8>
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80016f2:	da7d      	bge.n	80017f0 <print_int+0x3f8>
        ch = ((value % 1000) / 100);
 80016f4:	683a      	ldr	r2, [r7, #0]
 80016f6:	4ba1      	ldr	r3, [pc, #644]	; (800197c <print_int+0x584>)
 80016f8:	fb83 1302 	smull	r1, r3, r3, r2
 80016fc:	1199      	asrs	r1, r3, #6
 80016fe:	17d3      	asrs	r3, r2, #31
 8001700:	1acb      	subs	r3, r1, r3
 8001702:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001706:	fb01 f303 	mul.w	r3, r1, r3
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	4a9c      	ldr	r2, [pc, #624]	; (8001980 <print_int+0x588>)
 800170e:	fb82 1203 	smull	r1, r2, r2, r3
 8001712:	1152      	asrs	r2, r2, #5
 8001714:	17db      	asrs	r3, r3, #31
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	73fb      	strb	r3, [r7, #15]
        PCD8544_set_cursor((x_pos + 6), y_pos);
 800171a:	79fb      	ldrb	r3, [r7, #7]
 800171c:	3306      	adds	r3, #6
 800171e:	b2db      	uxtb	r3, r3
 8001720:	79ba      	ldrb	r2, [r7, #6]
 8001722:	4611      	mov	r1, r2
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff fc7b 	bl	8001020 <PCD8544_set_cursor>
        PCD8544_print_char((48 + ch), colour);
 800172a:	7bfb      	ldrb	r3, [r7, #15]
 800172c:	3330      	adds	r3, #48	; 0x30
 800172e:	b2db      	uxtb	r3, r3
 8001730:	797a      	ldrb	r2, [r7, #5]
 8001732:	4611      	mov	r1, r2
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff fc8f 	bl	8001058 <PCD8544_print_char>
        ch = ((value % 100) / 10);
 800173a:	683a      	ldr	r2, [r7, #0]
 800173c:	4b90      	ldr	r3, [pc, #576]	; (8001980 <print_int+0x588>)
 800173e:	fb83 1302 	smull	r1, r3, r3, r2
 8001742:	1159      	asrs	r1, r3, #5
 8001744:	17d3      	asrs	r3, r2, #31
 8001746:	1acb      	subs	r3, r1, r3
 8001748:	2164      	movs	r1, #100	; 0x64
 800174a:	fb01 f303 	mul.w	r3, r1, r3
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	4a8c      	ldr	r2, [pc, #560]	; (8001984 <print_int+0x58c>)
 8001752:	fb82 1203 	smull	r1, r2, r2, r3
 8001756:	1092      	asrs	r2, r2, #2
 8001758:	17db      	asrs	r3, r3, #31
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	73fb      	strb	r3, [r7, #15]
        PCD8544_set_cursor((x_pos + 12), y_pos);
 800175e:	79fb      	ldrb	r3, [r7, #7]
 8001760:	330c      	adds	r3, #12
 8001762:	b2db      	uxtb	r3, r3
 8001764:	79ba      	ldrb	r2, [r7, #6]
 8001766:	4611      	mov	r1, r2
 8001768:	4618      	mov	r0, r3
 800176a:	f7ff fc59 	bl	8001020 <PCD8544_set_cursor>
        PCD8544_print_char((48 + ch), colour);
 800176e:	7bfb      	ldrb	r3, [r7, #15]
 8001770:	3330      	adds	r3, #48	; 0x30
 8001772:	b2db      	uxtb	r3, r3
 8001774:	797a      	ldrb	r2, [r7, #5]
 8001776:	4611      	mov	r1, r2
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff fc6d 	bl	8001058 <PCD8544_print_char>
        ch = (value % 10);
 800177e:	683a      	ldr	r2, [r7, #0]
 8001780:	4b80      	ldr	r3, [pc, #512]	; (8001984 <print_int+0x58c>)
 8001782:	fb83 1302 	smull	r1, r3, r3, r2
 8001786:	1099      	asrs	r1, r3, #2
 8001788:	17d3      	asrs	r3, r2, #31
 800178a:	1ac9      	subs	r1, r1, r3
 800178c:	460b      	mov	r3, r1
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	440b      	add	r3, r1
 8001792:	005b      	lsls	r3, r3, #1
 8001794:	1ad1      	subs	r1, r2, r3
 8001796:	460b      	mov	r3, r1
 8001798:	73fb      	strb	r3, [r7, #15]
        PCD8544_set_cursor((x_pos + 18), y_pos);
 800179a:	79fb      	ldrb	r3, [r7, #7]
 800179c:	3312      	adds	r3, #18
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	79ba      	ldrb	r2, [r7, #6]
 80017a2:	4611      	mov	r1, r2
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7ff fc3b 	bl	8001020 <PCD8544_set_cursor>
        PCD8544_print_char((48 + ch), colour);
 80017aa:	7bfb      	ldrb	r3, [r7, #15]
 80017ac:	3330      	adds	r3, #48	; 0x30
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	797a      	ldrb	r2, [r7, #5]
 80017b2:	4611      	mov	r1, r2
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7ff fc4f 	bl	8001058 <PCD8544_print_char>
        PCD8544_set_cursor((x_pos + 24), y_pos);
 80017ba:	79fb      	ldrb	r3, [r7, #7]
 80017bc:	3318      	adds	r3, #24
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	79ba      	ldrb	r2, [r7, #6]
 80017c2:	4611      	mov	r1, r2
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7ff fc2b 	bl	8001020 <PCD8544_set_cursor>
        PCD8544_print_char(0x20, colour);
 80017ca:	797b      	ldrb	r3, [r7, #5]
 80017cc:	4619      	mov	r1, r3
 80017ce:	2020      	movs	r0, #32
 80017d0:	f7ff fc42 	bl	8001058 <PCD8544_print_char>
        PCD8544_set_cursor((x_pos + 30), y_pos);
 80017d4:	79fb      	ldrb	r3, [r7, #7]
 80017d6:	331e      	adds	r3, #30
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	79ba      	ldrb	r2, [r7, #6]
 80017dc:	4611      	mov	r1, r2
 80017de:	4618      	mov	r0, r3
 80017e0:	f7ff fc1e 	bl	8001020 <PCD8544_set_cursor>
        PCD8544_print_char(0x20, colour);
 80017e4:	797b      	ldrb	r3, [r7, #5]
 80017e6:	4619      	mov	r1, r3
 80017e8:	2020      	movs	r0, #32
 80017ea:	f7ff fc35 	bl	8001058 <PCD8544_print_char>
 80017ee:	e0c0      	b.n	8001972 <print_int+0x57a>
    else if((value > 9) && (value <= 99))
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	2b09      	cmp	r3, #9
 80017f4:	dd6a      	ble.n	80018cc <print_int+0x4d4>
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	2b63      	cmp	r3, #99	; 0x63
 80017fa:	dc67      	bgt.n	80018cc <print_int+0x4d4>
        ch = ((value % 100) / 10);
 80017fc:	683a      	ldr	r2, [r7, #0]
 80017fe:	4b60      	ldr	r3, [pc, #384]	; (8001980 <print_int+0x588>)
 8001800:	fb83 1302 	smull	r1, r3, r3, r2
 8001804:	1159      	asrs	r1, r3, #5
 8001806:	17d3      	asrs	r3, r2, #31
 8001808:	1acb      	subs	r3, r1, r3
 800180a:	2164      	movs	r1, #100	; 0x64
 800180c:	fb01 f303 	mul.w	r3, r1, r3
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	4a5c      	ldr	r2, [pc, #368]	; (8001984 <print_int+0x58c>)
 8001814:	fb82 1203 	smull	r1, r2, r2, r3
 8001818:	1092      	asrs	r2, r2, #2
 800181a:	17db      	asrs	r3, r3, #31
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	73fb      	strb	r3, [r7, #15]
        PCD8544_set_cursor((x_pos + 6), y_pos);
 8001820:	79fb      	ldrb	r3, [r7, #7]
 8001822:	3306      	adds	r3, #6
 8001824:	b2db      	uxtb	r3, r3
 8001826:	79ba      	ldrb	r2, [r7, #6]
 8001828:	4611      	mov	r1, r2
 800182a:	4618      	mov	r0, r3
 800182c:	f7ff fbf8 	bl	8001020 <PCD8544_set_cursor>
        PCD8544_print_char((48 + ch), colour);
 8001830:	7bfb      	ldrb	r3, [r7, #15]
 8001832:	3330      	adds	r3, #48	; 0x30
 8001834:	b2db      	uxtb	r3, r3
 8001836:	797a      	ldrb	r2, [r7, #5]
 8001838:	4611      	mov	r1, r2
 800183a:	4618      	mov	r0, r3
 800183c:	f7ff fc0c 	bl	8001058 <PCD8544_print_char>
        ch = (value % 10);
 8001840:	683a      	ldr	r2, [r7, #0]
 8001842:	4b50      	ldr	r3, [pc, #320]	; (8001984 <print_int+0x58c>)
 8001844:	fb83 1302 	smull	r1, r3, r3, r2
 8001848:	1099      	asrs	r1, r3, #2
 800184a:	17d3      	asrs	r3, r2, #31
 800184c:	1ac9      	subs	r1, r1, r3
 800184e:	460b      	mov	r3, r1
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	440b      	add	r3, r1
 8001854:	005b      	lsls	r3, r3, #1
 8001856:	1ad1      	subs	r1, r2, r3
 8001858:	460b      	mov	r3, r1
 800185a:	73fb      	strb	r3, [r7, #15]
        PCD8544_set_cursor((x_pos + 12), y_pos);
 800185c:	79fb      	ldrb	r3, [r7, #7]
 800185e:	330c      	adds	r3, #12
 8001860:	b2db      	uxtb	r3, r3
 8001862:	79ba      	ldrb	r2, [r7, #6]
 8001864:	4611      	mov	r1, r2
 8001866:	4618      	mov	r0, r3
 8001868:	f7ff fbda 	bl	8001020 <PCD8544_set_cursor>
        PCD8544_print_char((48 + ch), colour);
 800186c:	7bfb      	ldrb	r3, [r7, #15]
 800186e:	3330      	adds	r3, #48	; 0x30
 8001870:	b2db      	uxtb	r3, r3
 8001872:	797a      	ldrb	r2, [r7, #5]
 8001874:	4611      	mov	r1, r2
 8001876:	4618      	mov	r0, r3
 8001878:	f7ff fbee 	bl	8001058 <PCD8544_print_char>
        PCD8544_set_cursor((x_pos + 18), y_pos);
 800187c:	79fb      	ldrb	r3, [r7, #7]
 800187e:	3312      	adds	r3, #18
 8001880:	b2db      	uxtb	r3, r3
 8001882:	79ba      	ldrb	r2, [r7, #6]
 8001884:	4611      	mov	r1, r2
 8001886:	4618      	mov	r0, r3
 8001888:	f7ff fbca 	bl	8001020 <PCD8544_set_cursor>
        PCD8544_print_char(0x20, colour);
 800188c:	797b      	ldrb	r3, [r7, #5]
 800188e:	4619      	mov	r1, r3
 8001890:	2020      	movs	r0, #32
 8001892:	f7ff fbe1 	bl	8001058 <PCD8544_print_char>
        PCD8544_set_cursor((x_pos + 24), y_pos);
 8001896:	79fb      	ldrb	r3, [r7, #7]
 8001898:	3318      	adds	r3, #24
 800189a:	b2db      	uxtb	r3, r3
 800189c:	79ba      	ldrb	r2, [r7, #6]
 800189e:	4611      	mov	r1, r2
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7ff fbbd 	bl	8001020 <PCD8544_set_cursor>
        PCD8544_print_char(0x20, colour);
 80018a6:	797b      	ldrb	r3, [r7, #5]
 80018a8:	4619      	mov	r1, r3
 80018aa:	2020      	movs	r0, #32
 80018ac:	f7ff fbd4 	bl	8001058 <PCD8544_print_char>
        PCD8544_set_cursor((x_pos + 30), y_pos);
 80018b0:	79fb      	ldrb	r3, [r7, #7]
 80018b2:	331e      	adds	r3, #30
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	79ba      	ldrb	r2, [r7, #6]
 80018b8:	4611      	mov	r1, r2
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7ff fbb0 	bl	8001020 <PCD8544_set_cursor>
        PCD8544_print_char(0x20, colour);
 80018c0:	797b      	ldrb	r3, [r7, #5]
 80018c2:	4619      	mov	r1, r3
 80018c4:	2020      	movs	r0, #32
 80018c6:	f7ff fbc7 	bl	8001058 <PCD8544_print_char>
 80018ca:	e052      	b.n	8001972 <print_int+0x57a>
        ch = (value % 10);
 80018cc:	683a      	ldr	r2, [r7, #0]
 80018ce:	4b2d      	ldr	r3, [pc, #180]	; (8001984 <print_int+0x58c>)
 80018d0:	fb83 1302 	smull	r1, r3, r3, r2
 80018d4:	1099      	asrs	r1, r3, #2
 80018d6:	17d3      	asrs	r3, r2, #31
 80018d8:	1ac9      	subs	r1, r1, r3
 80018da:	460b      	mov	r3, r1
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	440b      	add	r3, r1
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	1ad1      	subs	r1, r2, r3
 80018e4:	460b      	mov	r3, r1
 80018e6:	73fb      	strb	r3, [r7, #15]
        PCD8544_set_cursor((x_pos + 6), y_pos);
 80018e8:	79fb      	ldrb	r3, [r7, #7]
 80018ea:	3306      	adds	r3, #6
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	79ba      	ldrb	r2, [r7, #6]
 80018f0:	4611      	mov	r1, r2
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff fb94 	bl	8001020 <PCD8544_set_cursor>
        PCD8544_print_char((48 + ch), colour);
 80018f8:	7bfb      	ldrb	r3, [r7, #15]
 80018fa:	3330      	adds	r3, #48	; 0x30
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	797a      	ldrb	r2, [r7, #5]
 8001900:	4611      	mov	r1, r2
 8001902:	4618      	mov	r0, r3
 8001904:	f7ff fba8 	bl	8001058 <PCD8544_print_char>
        PCD8544_set_cursor((x_pos + 12), y_pos);
 8001908:	79fb      	ldrb	r3, [r7, #7]
 800190a:	330c      	adds	r3, #12
 800190c:	b2db      	uxtb	r3, r3
 800190e:	79ba      	ldrb	r2, [r7, #6]
 8001910:	4611      	mov	r1, r2
 8001912:	4618      	mov	r0, r3
 8001914:	f7ff fb84 	bl	8001020 <PCD8544_set_cursor>
        PCD8544_print_char(0x20, colour);
 8001918:	797b      	ldrb	r3, [r7, #5]
 800191a:	4619      	mov	r1, r3
 800191c:	2020      	movs	r0, #32
 800191e:	f7ff fb9b 	bl	8001058 <PCD8544_print_char>
        PCD8544_set_cursor((x_pos + 18), y_pos);
 8001922:	79fb      	ldrb	r3, [r7, #7]
 8001924:	3312      	adds	r3, #18
 8001926:	b2db      	uxtb	r3, r3
 8001928:	79ba      	ldrb	r2, [r7, #6]
 800192a:	4611      	mov	r1, r2
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff fb77 	bl	8001020 <PCD8544_set_cursor>
        PCD8544_print_char(0x20, colour);
 8001932:	797b      	ldrb	r3, [r7, #5]
 8001934:	4619      	mov	r1, r3
 8001936:	2020      	movs	r0, #32
 8001938:	f7ff fb8e 	bl	8001058 <PCD8544_print_char>
        PCD8544_set_cursor((x_pos + 24), y_pos);
 800193c:	79fb      	ldrb	r3, [r7, #7]
 800193e:	3318      	adds	r3, #24
 8001940:	b2db      	uxtb	r3, r3
 8001942:	79ba      	ldrb	r2, [r7, #6]
 8001944:	4611      	mov	r1, r2
 8001946:	4618      	mov	r0, r3
 8001948:	f7ff fb6a 	bl	8001020 <PCD8544_set_cursor>
        PCD8544_print_char(0x20, colour);
 800194c:	797b      	ldrb	r3, [r7, #5]
 800194e:	4619      	mov	r1, r3
 8001950:	2020      	movs	r0, #32
 8001952:	f7ff fb81 	bl	8001058 <PCD8544_print_char>
        PCD8544_set_cursor((x_pos + 30), y_pos);
 8001956:	79fb      	ldrb	r3, [r7, #7]
 8001958:	331e      	adds	r3, #30
 800195a:	b2db      	uxtb	r3, r3
 800195c:	79ba      	ldrb	r2, [r7, #6]
 800195e:	4611      	mov	r1, r2
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff fb5d 	bl	8001020 <PCD8544_set_cursor>
        PCD8544_print_char(0x20, colour);
 8001966:	797b      	ldrb	r3, [r7, #5]
 8001968:	4619      	mov	r1, r3
 800196a:	2020      	movs	r0, #32
 800196c:	f7ff fb74 	bl	8001058 <PCD8544_print_char>
}
 8001970:	e7ff      	b.n	8001972 <print_int+0x57a>
 8001972:	bf00      	nop
 8001974:	3710      	adds	r7, #16
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	10624dd3 	.word	0x10624dd3
 8001980:	51eb851f 	.word	0x51eb851f
 8001984:	66666667 	.word	0x66666667

08001988 <print_decimal>:

void print_decimal(unsigned char x_pos, unsigned char y_pos, unsigned int value, unsigned char points, unsigned char colour)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	603a      	str	r2, [r7, #0]
 8001990:	461a      	mov	r2, r3
 8001992:	4603      	mov	r3, r0
 8001994:	71fb      	strb	r3, [r7, #7]
 8001996:	460b      	mov	r3, r1
 8001998:	71bb      	strb	r3, [r7, #6]
 800199a:	4613      	mov	r3, r2
 800199c:	717b      	strb	r3, [r7, #5]
    unsigned char ch = 0x00;
 800199e:	2300      	movs	r3, #0
 80019a0:	73fb      	strb	r3, [r7, #15]

    PCD8544_set_cursor(x_pos, y_pos);
 80019a2:	79ba      	ldrb	r2, [r7, #6]
 80019a4:	79fb      	ldrb	r3, [r7, #7]
 80019a6:	4611      	mov	r1, r2
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff fb39 	bl	8001020 <PCD8544_set_cursor>
    PCD8544_print_char(0x2E, colour);
 80019ae:	7e3b      	ldrb	r3, [r7, #24]
 80019b0:	4619      	mov	r1, r3
 80019b2:	202e      	movs	r0, #46	; 0x2e
 80019b4:	f7ff fb50 	bl	8001058 <PCD8544_print_char>

    ch = (value / 1000);
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	4a3d      	ldr	r2, [pc, #244]	; (8001ab0 <print_decimal+0x128>)
 80019bc:	fba2 2303 	umull	r2, r3, r2, r3
 80019c0:	099b      	lsrs	r3, r3, #6
 80019c2:	73fb      	strb	r3, [r7, #15]
    PCD8544_set_cursor((x_pos + 6), y_pos);
 80019c4:	79fb      	ldrb	r3, [r7, #7]
 80019c6:	3306      	adds	r3, #6
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	79ba      	ldrb	r2, [r7, #6]
 80019cc:	4611      	mov	r1, r2
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7ff fb26 	bl	8001020 <PCD8544_set_cursor>
    PCD8544_print_char((48 + ch), colour);
 80019d4:	7bfb      	ldrb	r3, [r7, #15]
 80019d6:	3330      	adds	r3, #48	; 0x30
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	7e3a      	ldrb	r2, [r7, #24]
 80019dc:	4611      	mov	r1, r2
 80019de:	4618      	mov	r0, r3
 80019e0:	f7ff fb3a 	bl	8001058 <PCD8544_print_char>

    if(points > 1)
 80019e4:	797b      	ldrb	r3, [r7, #5]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d95e      	bls.n	8001aa8 <print_decimal+0x120>
    {
        ch = ((value % 1000) / 100);
 80019ea:	683a      	ldr	r2, [r7, #0]
 80019ec:	4b30      	ldr	r3, [pc, #192]	; (8001ab0 <print_decimal+0x128>)
 80019ee:	fba3 1302 	umull	r1, r3, r3, r2
 80019f2:	099b      	lsrs	r3, r3, #6
 80019f4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80019f8:	fb01 f303 	mul.w	r3, r1, r3
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	4a2d      	ldr	r2, [pc, #180]	; (8001ab4 <print_decimal+0x12c>)
 8001a00:	fba2 2303 	umull	r2, r3, r2, r3
 8001a04:	095b      	lsrs	r3, r3, #5
 8001a06:	73fb      	strb	r3, [r7, #15]
        PCD8544_set_cursor((x_pos + 12), y_pos);
 8001a08:	79fb      	ldrb	r3, [r7, #7]
 8001a0a:	330c      	adds	r3, #12
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	79ba      	ldrb	r2, [r7, #6]
 8001a10:	4611      	mov	r1, r2
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7ff fb04 	bl	8001020 <PCD8544_set_cursor>
        PCD8544_print_char((48 + ch), colour);
 8001a18:	7bfb      	ldrb	r3, [r7, #15]
 8001a1a:	3330      	adds	r3, #48	; 0x30
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	7e3a      	ldrb	r2, [r7, #24]
 8001a20:	4611      	mov	r1, r2
 8001a22:	4618      	mov	r0, r3
 8001a24:	f7ff fb18 	bl	8001058 <PCD8544_print_char>


        if(points > 2)
 8001a28:	797b      	ldrb	r3, [r7, #5]
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d93c      	bls.n	8001aa8 <print_decimal+0x120>
        {
            ch = ((value % 100) / 10);
 8001a2e:	683a      	ldr	r2, [r7, #0]
 8001a30:	4b20      	ldr	r3, [pc, #128]	; (8001ab4 <print_decimal+0x12c>)
 8001a32:	fba3 1302 	umull	r1, r3, r3, r2
 8001a36:	095b      	lsrs	r3, r3, #5
 8001a38:	2164      	movs	r1, #100	; 0x64
 8001a3a:	fb01 f303 	mul.w	r3, r1, r3
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	4a1d      	ldr	r2, [pc, #116]	; (8001ab8 <print_decimal+0x130>)
 8001a42:	fba2 2303 	umull	r2, r3, r2, r3
 8001a46:	08db      	lsrs	r3, r3, #3
 8001a48:	73fb      	strb	r3, [r7, #15]
            PCD8544_set_cursor((x_pos + 18), y_pos);
 8001a4a:	79fb      	ldrb	r3, [r7, #7]
 8001a4c:	3312      	adds	r3, #18
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	79ba      	ldrb	r2, [r7, #6]
 8001a52:	4611      	mov	r1, r2
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff fae3 	bl	8001020 <PCD8544_set_cursor>
            PCD8544_print_char((48 + ch), colour);
 8001a5a:	7bfb      	ldrb	r3, [r7, #15]
 8001a5c:	3330      	adds	r3, #48	; 0x30
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	7e3a      	ldrb	r2, [r7, #24]
 8001a62:	4611      	mov	r1, r2
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7ff faf7 	bl	8001058 <PCD8544_print_char>

            if(points > 3)
 8001a6a:	797b      	ldrb	r3, [r7, #5]
 8001a6c:	2b03      	cmp	r3, #3
 8001a6e:	d91b      	bls.n	8001aa8 <print_decimal+0x120>
            {
                ch = (value % 10);
 8001a70:	6839      	ldr	r1, [r7, #0]
 8001a72:	4b11      	ldr	r3, [pc, #68]	; (8001ab8 <print_decimal+0x130>)
 8001a74:	fba3 2301 	umull	r2, r3, r3, r1
 8001a78:	08da      	lsrs	r2, r3, #3
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	4413      	add	r3, r2
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	1aca      	subs	r2, r1, r3
 8001a84:	4613      	mov	r3, r2
 8001a86:	73fb      	strb	r3, [r7, #15]
                PCD8544_set_cursor((x_pos + 24), y_pos);
 8001a88:	79fb      	ldrb	r3, [r7, #7]
 8001a8a:	3318      	adds	r3, #24
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	79ba      	ldrb	r2, [r7, #6]
 8001a90:	4611      	mov	r1, r2
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7ff fac4 	bl	8001020 <PCD8544_set_cursor>
                PCD8544_print_char((48 + ch), colour);;
 8001a98:	7bfb      	ldrb	r3, [r7, #15]
 8001a9a:	3330      	adds	r3, #48	; 0x30
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	7e3a      	ldrb	r2, [r7, #24]
 8001aa0:	4611      	mov	r1, r2
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7ff fad8 	bl	8001058 <PCD8544_print_char>
            }
        }
    }
}
 8001aa8:	bf00      	nop
 8001aaa:	3710      	adds	r7, #16
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	10624dd3 	.word	0x10624dd3
 8001ab4:	51eb851f 	.word	0x51eb851f
 8001ab8:	cccccccd 	.word	0xcccccccd

08001abc <print_float>:


void print_float(unsigned char x_pos, unsigned char y_pos, float value, unsigned char points, unsigned char colour)
{
 8001abc:	b590      	push	{r4, r7, lr}
 8001abe:	b087      	sub	sp, #28
 8001ac0:	af02      	add	r7, sp, #8
 8001ac2:	603a      	str	r2, [r7, #0]
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	71fb      	strb	r3, [r7, #7]
 8001aca:	460b      	mov	r3, r1
 8001acc:	71bb      	strb	r3, [r7, #6]
 8001ace:	4613      	mov	r3, r2
 8001ad0:	717b      	strb	r3, [r7, #5]
    signed long tmp = 0x00;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	60fb      	str	r3, [r7, #12]

    tmp = ((signed long)value);
 8001ad6:	6838      	ldr	r0, [r7, #0]
 8001ad8:	f7ff f81a 	bl	8000b10 <__aeabi_f2iz>
 8001adc:	4603      	mov	r3, r0
 8001ade:	60fb      	str	r3, [r7, #12]
    print_int(x_pos, y_pos, tmp, colour);
 8001ae0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001ae4:	79b9      	ldrb	r1, [r7, #6]
 8001ae6:	79f8      	ldrb	r0, [r7, #7]
 8001ae8:	68fa      	ldr	r2, [r7, #12]
 8001aea:	f7ff fc85 	bl	80013f8 <print_int>
    tmp = ((value - tmp) * 10000);
 8001aee:	68f8      	ldr	r0, [r7, #12]
 8001af0:	f7fe fdf4 	bl	80006dc <__aeabi_i2f>
 8001af4:	4603      	mov	r3, r0
 8001af6:	4619      	mov	r1, r3
 8001af8:	6838      	ldr	r0, [r7, #0]
 8001afa:	f7fe fd39 	bl	8000570 <__aeabi_fsub>
 8001afe:	4603      	mov	r3, r0
 8001b00:	495a      	ldr	r1, [pc, #360]	; (8001c6c <print_float+0x1b0>)
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7fe fe3e 	bl	8000784 <__aeabi_fmul>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7ff f800 	bl	8000b10 <__aeabi_f2iz>
 8001b10:	4603      	mov	r3, r0
 8001b12:	60fb      	str	r3, [r7, #12]

    if(tmp < 0)
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	da02      	bge.n	8001b20 <print_float+0x64>
    {
       tmp = -tmp;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	425b      	negs	r3, r3
 8001b1e:	60fb      	str	r3, [r7, #12]
    }

    if((value >= 9999) && (value < 99999))
 8001b20:	4953      	ldr	r1, [pc, #332]	; (8001c70 <print_float+0x1b4>)
 8001b22:	6838      	ldr	r0, [r7, #0]
 8001b24:	f7fe ffe0 	bl	8000ae8 <__aeabi_fcmpge>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d013      	beq.n	8001b56 <print_float+0x9a>
 8001b2e:	4951      	ldr	r1, [pc, #324]	; (8001c74 <print_float+0x1b8>)
 8001b30:	6838      	ldr	r0, [r7, #0]
 8001b32:	f7fe ffc5 	bl	8000ac0 <__aeabi_fcmplt>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d00c      	beq.n	8001b56 <print_float+0x9a>
    {
        print_decimal((x_pos + 36), y_pos, tmp, points, colour);
 8001b3c:	79fb      	ldrb	r3, [r7, #7]
 8001b3e:	3324      	adds	r3, #36	; 0x24
 8001b40:	b2d8      	uxtb	r0, r3
 8001b42:	68fa      	ldr	r2, [r7, #12]
 8001b44:	797c      	ldrb	r4, [r7, #5]
 8001b46:	79b9      	ldrb	r1, [r7, #6]
 8001b48:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001b4c:	9300      	str	r3, [sp, #0]
 8001b4e:	4623      	mov	r3, r4
 8001b50:	f7ff ff1a 	bl	8001988 <print_decimal>
 8001b54:	e086      	b.n	8001c64 <print_float+0x1a8>
    }
    else if((value >= 999) && (value < 9999))
 8001b56:	4948      	ldr	r1, [pc, #288]	; (8001c78 <print_float+0x1bc>)
 8001b58:	6838      	ldr	r0, [r7, #0]
 8001b5a:	f7fe ffc5 	bl	8000ae8 <__aeabi_fcmpge>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d013      	beq.n	8001b8c <print_float+0xd0>
 8001b64:	4942      	ldr	r1, [pc, #264]	; (8001c70 <print_float+0x1b4>)
 8001b66:	6838      	ldr	r0, [r7, #0]
 8001b68:	f7fe ffaa 	bl	8000ac0 <__aeabi_fcmplt>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d00c      	beq.n	8001b8c <print_float+0xd0>
    {
        print_decimal((x_pos + 30), y_pos, tmp, points, colour);
 8001b72:	79fb      	ldrb	r3, [r7, #7]
 8001b74:	331e      	adds	r3, #30
 8001b76:	b2d8      	uxtb	r0, r3
 8001b78:	68fa      	ldr	r2, [r7, #12]
 8001b7a:	797c      	ldrb	r4, [r7, #5]
 8001b7c:	79b9      	ldrb	r1, [r7, #6]
 8001b7e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001b82:	9300      	str	r3, [sp, #0]
 8001b84:	4623      	mov	r3, r4
 8001b86:	f7ff feff 	bl	8001988 <print_decimal>
 8001b8a:	e06b      	b.n	8001c64 <print_float+0x1a8>
    }
    else if((value >= 99) && (value < 999))
 8001b8c:	493b      	ldr	r1, [pc, #236]	; (8001c7c <print_float+0x1c0>)
 8001b8e:	6838      	ldr	r0, [r7, #0]
 8001b90:	f7fe ffaa 	bl	8000ae8 <__aeabi_fcmpge>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d013      	beq.n	8001bc2 <print_float+0x106>
 8001b9a:	4937      	ldr	r1, [pc, #220]	; (8001c78 <print_float+0x1bc>)
 8001b9c:	6838      	ldr	r0, [r7, #0]
 8001b9e:	f7fe ff8f 	bl	8000ac0 <__aeabi_fcmplt>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d00c      	beq.n	8001bc2 <print_float+0x106>
    {
        print_decimal((x_pos + 24), y_pos, tmp, points, colour);
 8001ba8:	79fb      	ldrb	r3, [r7, #7]
 8001baa:	3318      	adds	r3, #24
 8001bac:	b2d8      	uxtb	r0, r3
 8001bae:	68fa      	ldr	r2, [r7, #12]
 8001bb0:	797c      	ldrb	r4, [r7, #5]
 8001bb2:	79b9      	ldrb	r1, [r7, #6]
 8001bb4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001bb8:	9300      	str	r3, [sp, #0]
 8001bba:	4623      	mov	r3, r4
 8001bbc:	f7ff fee4 	bl	8001988 <print_decimal>
 8001bc0:	e050      	b.n	8001c64 <print_float+0x1a8>
    }
    else if((value >= 9) && (value < 99))
 8001bc2:	492f      	ldr	r1, [pc, #188]	; (8001c80 <print_float+0x1c4>)
 8001bc4:	6838      	ldr	r0, [r7, #0]
 8001bc6:	f7fe ff8f 	bl	8000ae8 <__aeabi_fcmpge>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d013      	beq.n	8001bf8 <print_float+0x13c>
 8001bd0:	492a      	ldr	r1, [pc, #168]	; (8001c7c <print_float+0x1c0>)
 8001bd2:	6838      	ldr	r0, [r7, #0]
 8001bd4:	f7fe ff74 	bl	8000ac0 <__aeabi_fcmplt>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d00c      	beq.n	8001bf8 <print_float+0x13c>
    {
        print_decimal((x_pos + 18), y_pos, tmp, points, colour);
 8001bde:	79fb      	ldrb	r3, [r7, #7]
 8001be0:	3312      	adds	r3, #18
 8001be2:	b2d8      	uxtb	r0, r3
 8001be4:	68fa      	ldr	r2, [r7, #12]
 8001be6:	797c      	ldrb	r4, [r7, #5]
 8001be8:	79b9      	ldrb	r1, [r7, #6]
 8001bea:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001bee:	9300      	str	r3, [sp, #0]
 8001bf0:	4623      	mov	r3, r4
 8001bf2:	f7ff fec9 	bl	8001988 <print_decimal>
 8001bf6:	e035      	b.n	8001c64 <print_float+0x1a8>
    }
    else if(value < 9)
 8001bf8:	4921      	ldr	r1, [pc, #132]	; (8001c80 <print_float+0x1c4>)
 8001bfa:	6838      	ldr	r0, [r7, #0]
 8001bfc:	f7fe ff60 	bl	8000ac0 <__aeabi_fcmplt>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d100      	bne.n	8001c08 <print_float+0x14c>
        {
            PCD8544_set_cursor(x_pos, y_pos);
            PCD8544_print_char(0x20, colour);
        }
    }
}
 8001c06:	e02d      	b.n	8001c64 <print_float+0x1a8>
        print_decimal((x_pos + 12), y_pos, tmp, points, colour);
 8001c08:	79fb      	ldrb	r3, [r7, #7]
 8001c0a:	330c      	adds	r3, #12
 8001c0c:	b2d8      	uxtb	r0, r3
 8001c0e:	68fa      	ldr	r2, [r7, #12]
 8001c10:	797c      	ldrb	r4, [r7, #5]
 8001c12:	79b9      	ldrb	r1, [r7, #6]
 8001c14:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001c18:	9300      	str	r3, [sp, #0]
 8001c1a:	4623      	mov	r3, r4
 8001c1c:	f7ff feb4 	bl	8001988 <print_decimal>
        if((value) < 0)
 8001c20:	f04f 0100 	mov.w	r1, #0
 8001c24:	6838      	ldr	r0, [r7, #0]
 8001c26:	f7fe ff4b 	bl	8000ac0 <__aeabi_fcmplt>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d00c      	beq.n	8001c4a <print_float+0x18e>
            PCD8544_set_cursor(x_pos, y_pos);
 8001c30:	79ba      	ldrb	r2, [r7, #6]
 8001c32:	79fb      	ldrb	r3, [r7, #7]
 8001c34:	4611      	mov	r1, r2
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7ff f9f2 	bl	8001020 <PCD8544_set_cursor>
            PCD8544_print_char(0x2D, colour);
 8001c3c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001c40:	4619      	mov	r1, r3
 8001c42:	202d      	movs	r0, #45	; 0x2d
 8001c44:	f7ff fa08 	bl	8001058 <PCD8544_print_char>
}
 8001c48:	e00c      	b.n	8001c64 <print_float+0x1a8>
            PCD8544_set_cursor(x_pos, y_pos);
 8001c4a:	79ba      	ldrb	r2, [r7, #6]
 8001c4c:	79fb      	ldrb	r3, [r7, #7]
 8001c4e:	4611      	mov	r1, r2
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff f9e5 	bl	8001020 <PCD8544_set_cursor>
            PCD8544_print_char(0x20, colour);
 8001c56:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	2020      	movs	r0, #32
 8001c5e:	f7ff f9fb 	bl	8001058 <PCD8544_print_char>
}
 8001c62:	e7ff      	b.n	8001c64 <print_float+0x1a8>
 8001c64:	bf00      	nop
 8001c66:	3714      	adds	r7, #20
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd90      	pop	{r4, r7, pc}
 8001c6c:	461c4000 	.word	0x461c4000
 8001c70:	461c3c00 	.word	0x461c3c00
 8001c74:	47c34f80 	.word	0x47c34f80
 8001c78:	4479c000 	.word	0x4479c000
 8001c7c:	42c60000 	.word	0x42c60000
 8001c80:	41100000 	.word	0x41100000

08001c84 <setup>:

    PCD8544_set_cursor(x_pos, row);
    PCD8544_write(DAT, value);
}
void setup()
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
    PCD8544_init();
 8001c88:	f7ff f968 	bl	8000f5c <PCD8544_init>
    PCD8544_clear_screen(WHITE);
 8001c8c:	2001      	movs	r0, #1
 8001c8e:	f7ff fa3d 	bl	800110c <PCD8544_clear_screen>
}
 8001c92:	bf00      	nop
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c96:	b480      	push	{r7}
 8001c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8001c9a:	bf00      	nop
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bc80      	pop	{r7}
 8001ca0:	4770      	bx	lr
	...

08001ca4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b085      	sub	sp, #20
 8001ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001caa:	4b15      	ldr	r3, [pc, #84]	; (8001d00 <HAL_MspInit+0x5c>)
 8001cac:	699b      	ldr	r3, [r3, #24]
 8001cae:	4a14      	ldr	r2, [pc, #80]	; (8001d00 <HAL_MspInit+0x5c>)
 8001cb0:	f043 0301 	orr.w	r3, r3, #1
 8001cb4:	6193      	str	r3, [r2, #24]
 8001cb6:	4b12      	ldr	r3, [pc, #72]	; (8001d00 <HAL_MspInit+0x5c>)
 8001cb8:	699b      	ldr	r3, [r3, #24]
 8001cba:	f003 0301 	and.w	r3, r3, #1
 8001cbe:	60bb      	str	r3, [r7, #8]
 8001cc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cc2:	4b0f      	ldr	r3, [pc, #60]	; (8001d00 <HAL_MspInit+0x5c>)
 8001cc4:	69db      	ldr	r3, [r3, #28]
 8001cc6:	4a0e      	ldr	r2, [pc, #56]	; (8001d00 <HAL_MspInit+0x5c>)
 8001cc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ccc:	61d3      	str	r3, [r2, #28]
 8001cce:	4b0c      	ldr	r3, [pc, #48]	; (8001d00 <HAL_MspInit+0x5c>)
 8001cd0:	69db      	ldr	r3, [r3, #28]
 8001cd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cd6:	607b      	str	r3, [r7, #4]
 8001cd8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001cda:	4b0a      	ldr	r3, [pc, #40]	; (8001d04 <HAL_MspInit+0x60>)
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	60fb      	str	r3, [r7, #12]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001ce6:	60fb      	str	r3, [r7, #12]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001cee:	60fb      	str	r3, [r7, #12]
 8001cf0:	4a04      	ldr	r2, [pc, #16]	; (8001d04 <HAL_MspInit+0x60>)
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cf6:	bf00      	nop
 8001cf8:	3714      	adds	r7, #20
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bc80      	pop	{r7}
 8001cfe:	4770      	bx	lr
 8001d00:	40021000 	.word	0x40021000
 8001d04:	40010000 	.word	0x40010000

08001d08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001d0c:	bf00      	nop
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bc80      	pop	{r7}
 8001d12:	4770      	bx	lr

08001d14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d18:	e7fe      	b.n	8001d18 <HardFault_Handler+0x4>

08001d1a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d1e:	e7fe      	b.n	8001d1e <MemManage_Handler+0x4>

08001d20 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d24:	e7fe      	b.n	8001d24 <BusFault_Handler+0x4>

08001d26 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d26:	b480      	push	{r7}
 8001d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d2a:	e7fe      	b.n	8001d2a <UsageFault_Handler+0x4>

08001d2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d30:	bf00      	nop
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bc80      	pop	{r7}
 8001d36:	4770      	bx	lr

08001d38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d3c:	bf00      	nop
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bc80      	pop	{r7}
 8001d42:	4770      	bx	lr

08001d44 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d48:	bf00      	nop
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bc80      	pop	{r7}
 8001d4e:	4770      	bx	lr

08001d50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d54:	f000 f8a2 	bl	8001e9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d58:	bf00      	nop
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001d60:	4b15      	ldr	r3, [pc, #84]	; (8001db8 <SystemInit+0x5c>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a14      	ldr	r2, [pc, #80]	; (8001db8 <SystemInit+0x5c>)
 8001d66:	f043 0301 	orr.w	r3, r3, #1
 8001d6a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001d6c:	4b12      	ldr	r3, [pc, #72]	; (8001db8 <SystemInit+0x5c>)
 8001d6e:	685a      	ldr	r2, [r3, #4]
 8001d70:	4911      	ldr	r1, [pc, #68]	; (8001db8 <SystemInit+0x5c>)
 8001d72:	4b12      	ldr	r3, [pc, #72]	; (8001dbc <SystemInit+0x60>)
 8001d74:	4013      	ands	r3, r2
 8001d76:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001d78:	4b0f      	ldr	r3, [pc, #60]	; (8001db8 <SystemInit+0x5c>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a0e      	ldr	r2, [pc, #56]	; (8001db8 <SystemInit+0x5c>)
 8001d7e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001d82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d86:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001d88:	4b0b      	ldr	r3, [pc, #44]	; (8001db8 <SystemInit+0x5c>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a0a      	ldr	r2, [pc, #40]	; (8001db8 <SystemInit+0x5c>)
 8001d8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d92:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001d94:	4b08      	ldr	r3, [pc, #32]	; (8001db8 <SystemInit+0x5c>)
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	4a07      	ldr	r2, [pc, #28]	; (8001db8 <SystemInit+0x5c>)
 8001d9a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001d9e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001da0:	4b05      	ldr	r3, [pc, #20]	; (8001db8 <SystemInit+0x5c>)
 8001da2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001da6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001da8:	4b05      	ldr	r3, [pc, #20]	; (8001dc0 <SystemInit+0x64>)
 8001daa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001dae:	609a      	str	r2, [r3, #8]
#endif 
}
 8001db0:	bf00      	nop
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bc80      	pop	{r7}
 8001db6:	4770      	bx	lr
 8001db8:	40021000 	.word	0x40021000
 8001dbc:	f8ff0000 	.word	0xf8ff0000
 8001dc0:	e000ed00 	.word	0xe000ed00

08001dc4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001dc4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001dc6:	e003      	b.n	8001dd0 <LoopCopyDataInit>

08001dc8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001dc8:	4b0b      	ldr	r3, [pc, #44]	; (8001df8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001dca:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001dcc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001dce:	3104      	adds	r1, #4

08001dd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001dd0:	480a      	ldr	r0, [pc, #40]	; (8001dfc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001dd2:	4b0b      	ldr	r3, [pc, #44]	; (8001e00 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001dd4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001dd6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001dd8:	d3f6      	bcc.n	8001dc8 <CopyDataInit>
  ldr r2, =_sbss
 8001dda:	4a0a      	ldr	r2, [pc, #40]	; (8001e04 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001ddc:	e002      	b.n	8001de4 <LoopFillZerobss>

08001dde <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001dde:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001de0:	f842 3b04 	str.w	r3, [r2], #4

08001de4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001de4:	4b08      	ldr	r3, [pc, #32]	; (8001e08 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001de6:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001de8:	d3f9      	bcc.n	8001dde <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001dea:	f7ff ffb7 	bl	8001d5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001dee:	f000 fed3 	bl	8002b98 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001df2:	f7fe feb5 	bl	8000b60 <main>
  bx lr
 8001df6:	4770      	bx	lr
  ldr r3, =_sidata
 8001df8:	08002e48 	.word	0x08002e48
  ldr r0, =_sdata
 8001dfc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001e00:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8001e04:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8001e08:	20000224 	.word	0x20000224

08001e0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e0c:	e7fe      	b.n	8001e0c <ADC1_2_IRQHandler>
	...

08001e10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e14:	4b08      	ldr	r3, [pc, #32]	; (8001e38 <HAL_Init+0x28>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a07      	ldr	r2, [pc, #28]	; (8001e38 <HAL_Init+0x28>)
 8001e1a:	f043 0310 	orr.w	r3, r3, #16
 8001e1e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e20:	2003      	movs	r0, #3
 8001e22:	f000 f929 	bl	8002078 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e26:	2000      	movs	r0, #0
 8001e28:	f000 f808 	bl	8001e3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e2c:	f7ff ff3a 	bl	8001ca4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	40022000 	.word	0x40022000

08001e3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e44:	4b12      	ldr	r3, [pc, #72]	; (8001e90 <HAL_InitTick+0x54>)
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	4b12      	ldr	r3, [pc, #72]	; (8001e94 <HAL_InitTick+0x58>)
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e52:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f000 f933 	bl	80020c6 <HAL_SYSTICK_Config>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e00e      	b.n	8001e88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2b0f      	cmp	r3, #15
 8001e6e:	d80a      	bhi.n	8001e86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e70:	2200      	movs	r2, #0
 8001e72:	6879      	ldr	r1, [r7, #4]
 8001e74:	f04f 30ff 	mov.w	r0, #4294967295
 8001e78:	f000 f909 	bl	800208e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e7c:	4a06      	ldr	r2, [pc, #24]	; (8001e98 <HAL_InitTick+0x5c>)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e82:	2300      	movs	r3, #0
 8001e84:	e000      	b.n	8001e88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3708      	adds	r7, #8
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	20000000 	.word	0x20000000
 8001e94:	20000008 	.word	0x20000008
 8001e98:	20000004 	.word	0x20000004

08001e9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ea0:	4b05      	ldr	r3, [pc, #20]	; (8001eb8 <HAL_IncTick+0x1c>)
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	4b05      	ldr	r3, [pc, #20]	; (8001ebc <HAL_IncTick+0x20>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4413      	add	r3, r2
 8001eac:	4a03      	ldr	r2, [pc, #12]	; (8001ebc <HAL_IncTick+0x20>)
 8001eae:	6013      	str	r3, [r2, #0]
}
 8001eb0:	bf00      	nop
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bc80      	pop	{r7}
 8001eb6:	4770      	bx	lr
 8001eb8:	20000008 	.word	0x20000008
 8001ebc:	20000220 	.word	0x20000220

08001ec0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ec4:	4b02      	ldr	r3, [pc, #8]	; (8001ed0 <HAL_GetTick+0x10>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bc80      	pop	{r7}
 8001ece:	4770      	bx	lr
 8001ed0:	20000220 	.word	0x20000220

08001ed4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001edc:	f7ff fff0 	bl	8001ec0 <HAL_GetTick>
 8001ee0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eec:	d005      	beq.n	8001efa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001eee:	4b09      	ldr	r3, [pc, #36]	; (8001f14 <HAL_Delay+0x40>)
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001efa:	bf00      	nop
 8001efc:	f7ff ffe0 	bl	8001ec0 <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	68fa      	ldr	r2, [r7, #12]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d8f7      	bhi.n	8001efc <HAL_Delay+0x28>
  {
  }
}
 8001f0c:	bf00      	nop
 8001f0e:	3710      	adds	r7, #16
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	20000008 	.word	0x20000008

08001f18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b085      	sub	sp, #20
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f003 0307 	and.w	r3, r3, #7
 8001f26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f28:	4b0c      	ldr	r3, [pc, #48]	; (8001f5c <__NVIC_SetPriorityGrouping+0x44>)
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f2e:	68ba      	ldr	r2, [r7, #8]
 8001f30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f34:	4013      	ands	r3, r2
 8001f36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f4a:	4a04      	ldr	r2, [pc, #16]	; (8001f5c <__NVIC_SetPriorityGrouping+0x44>)
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	60d3      	str	r3, [r2, #12]
}
 8001f50:	bf00      	nop
 8001f52:	3714      	adds	r7, #20
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bc80      	pop	{r7}
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	e000ed00 	.word	0xe000ed00

08001f60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f64:	4b04      	ldr	r3, [pc, #16]	; (8001f78 <__NVIC_GetPriorityGrouping+0x18>)
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	0a1b      	lsrs	r3, r3, #8
 8001f6a:	f003 0307 	and.w	r3, r3, #7
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bc80      	pop	{r7}
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	e000ed00 	.word	0xe000ed00

08001f7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	4603      	mov	r3, r0
 8001f84:	6039      	str	r1, [r7, #0]
 8001f86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	db0a      	blt.n	8001fa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	b2da      	uxtb	r2, r3
 8001f94:	490c      	ldr	r1, [pc, #48]	; (8001fc8 <__NVIC_SetPriority+0x4c>)
 8001f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9a:	0112      	lsls	r2, r2, #4
 8001f9c:	b2d2      	uxtb	r2, r2
 8001f9e:	440b      	add	r3, r1
 8001fa0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fa4:	e00a      	b.n	8001fbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	b2da      	uxtb	r2, r3
 8001faa:	4908      	ldr	r1, [pc, #32]	; (8001fcc <__NVIC_SetPriority+0x50>)
 8001fac:	79fb      	ldrb	r3, [r7, #7]
 8001fae:	f003 030f 	and.w	r3, r3, #15
 8001fb2:	3b04      	subs	r3, #4
 8001fb4:	0112      	lsls	r2, r2, #4
 8001fb6:	b2d2      	uxtb	r2, r2
 8001fb8:	440b      	add	r3, r1
 8001fba:	761a      	strb	r2, [r3, #24]
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bc80      	pop	{r7}
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	e000e100 	.word	0xe000e100
 8001fcc:	e000ed00 	.word	0xe000ed00

08001fd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b089      	sub	sp, #36	; 0x24
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	60b9      	str	r1, [r7, #8]
 8001fda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	f003 0307 	and.w	r3, r3, #7
 8001fe2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	f1c3 0307 	rsb	r3, r3, #7
 8001fea:	2b04      	cmp	r3, #4
 8001fec:	bf28      	it	cs
 8001fee:	2304      	movcs	r3, #4
 8001ff0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	3304      	adds	r3, #4
 8001ff6:	2b06      	cmp	r3, #6
 8001ff8:	d902      	bls.n	8002000 <NVIC_EncodePriority+0x30>
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	3b03      	subs	r3, #3
 8001ffe:	e000      	b.n	8002002 <NVIC_EncodePriority+0x32>
 8002000:	2300      	movs	r3, #0
 8002002:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002004:	f04f 32ff 	mov.w	r2, #4294967295
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	fa02 f303 	lsl.w	r3, r2, r3
 800200e:	43da      	mvns	r2, r3
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	401a      	ands	r2, r3
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002018:	f04f 31ff 	mov.w	r1, #4294967295
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	fa01 f303 	lsl.w	r3, r1, r3
 8002022:	43d9      	mvns	r1, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002028:	4313      	orrs	r3, r2
         );
}
 800202a:	4618      	mov	r0, r3
 800202c:	3724      	adds	r7, #36	; 0x24
 800202e:	46bd      	mov	sp, r7
 8002030:	bc80      	pop	{r7}
 8002032:	4770      	bx	lr

08002034 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	3b01      	subs	r3, #1
 8002040:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002044:	d301      	bcc.n	800204a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002046:	2301      	movs	r3, #1
 8002048:	e00f      	b.n	800206a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800204a:	4a0a      	ldr	r2, [pc, #40]	; (8002074 <SysTick_Config+0x40>)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	3b01      	subs	r3, #1
 8002050:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002052:	210f      	movs	r1, #15
 8002054:	f04f 30ff 	mov.w	r0, #4294967295
 8002058:	f7ff ff90 	bl	8001f7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800205c:	4b05      	ldr	r3, [pc, #20]	; (8002074 <SysTick_Config+0x40>)
 800205e:	2200      	movs	r2, #0
 8002060:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002062:	4b04      	ldr	r3, [pc, #16]	; (8002074 <SysTick_Config+0x40>)
 8002064:	2207      	movs	r2, #7
 8002066:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002068:	2300      	movs	r3, #0
}
 800206a:	4618      	mov	r0, r3
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	e000e010 	.word	0xe000e010

08002078 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f7ff ff49 	bl	8001f18 <__NVIC_SetPriorityGrouping>
}
 8002086:	bf00      	nop
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}

0800208e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800208e:	b580      	push	{r7, lr}
 8002090:	b086      	sub	sp, #24
 8002092:	af00      	add	r7, sp, #0
 8002094:	4603      	mov	r3, r0
 8002096:	60b9      	str	r1, [r7, #8]
 8002098:	607a      	str	r2, [r7, #4]
 800209a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800209c:	2300      	movs	r3, #0
 800209e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020a0:	f7ff ff5e 	bl	8001f60 <__NVIC_GetPriorityGrouping>
 80020a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	68b9      	ldr	r1, [r7, #8]
 80020aa:	6978      	ldr	r0, [r7, #20]
 80020ac:	f7ff ff90 	bl	8001fd0 <NVIC_EncodePriority>
 80020b0:	4602      	mov	r2, r0
 80020b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020b6:	4611      	mov	r1, r2
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7ff ff5f 	bl	8001f7c <__NVIC_SetPriority>
}
 80020be:	bf00      	nop
 80020c0:	3718      	adds	r7, #24
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b082      	sub	sp, #8
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f7ff ffb0 	bl	8002034 <SysTick_Config>
 80020d4:	4603      	mov	r3, r0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
	...

080020e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b08b      	sub	sp, #44	; 0x2c
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020ea:	2300      	movs	r3, #0
 80020ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80020ee:	2300      	movs	r3, #0
 80020f0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020f2:	e127      	b.n	8002344 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80020f4:	2201      	movs	r2, #1
 80020f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	69fa      	ldr	r2, [r7, #28]
 8002104:	4013      	ands	r3, r2
 8002106:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	429a      	cmp	r2, r3
 800210e:	f040 8116 	bne.w	800233e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	2b12      	cmp	r3, #18
 8002118:	d034      	beq.n	8002184 <HAL_GPIO_Init+0xa4>
 800211a:	2b12      	cmp	r3, #18
 800211c:	d80d      	bhi.n	800213a <HAL_GPIO_Init+0x5a>
 800211e:	2b02      	cmp	r3, #2
 8002120:	d02b      	beq.n	800217a <HAL_GPIO_Init+0x9a>
 8002122:	2b02      	cmp	r3, #2
 8002124:	d804      	bhi.n	8002130 <HAL_GPIO_Init+0x50>
 8002126:	2b00      	cmp	r3, #0
 8002128:	d031      	beq.n	800218e <HAL_GPIO_Init+0xae>
 800212a:	2b01      	cmp	r3, #1
 800212c:	d01c      	beq.n	8002168 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800212e:	e048      	b.n	80021c2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002130:	2b03      	cmp	r3, #3
 8002132:	d043      	beq.n	80021bc <HAL_GPIO_Init+0xdc>
 8002134:	2b11      	cmp	r3, #17
 8002136:	d01b      	beq.n	8002170 <HAL_GPIO_Init+0x90>
          break;
 8002138:	e043      	b.n	80021c2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800213a:	4a89      	ldr	r2, [pc, #548]	; (8002360 <HAL_GPIO_Init+0x280>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d026      	beq.n	800218e <HAL_GPIO_Init+0xae>
 8002140:	4a87      	ldr	r2, [pc, #540]	; (8002360 <HAL_GPIO_Init+0x280>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d806      	bhi.n	8002154 <HAL_GPIO_Init+0x74>
 8002146:	4a87      	ldr	r2, [pc, #540]	; (8002364 <HAL_GPIO_Init+0x284>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d020      	beq.n	800218e <HAL_GPIO_Init+0xae>
 800214c:	4a86      	ldr	r2, [pc, #536]	; (8002368 <HAL_GPIO_Init+0x288>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d01d      	beq.n	800218e <HAL_GPIO_Init+0xae>
          break;
 8002152:	e036      	b.n	80021c2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002154:	4a85      	ldr	r2, [pc, #532]	; (800236c <HAL_GPIO_Init+0x28c>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d019      	beq.n	800218e <HAL_GPIO_Init+0xae>
 800215a:	4a85      	ldr	r2, [pc, #532]	; (8002370 <HAL_GPIO_Init+0x290>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d016      	beq.n	800218e <HAL_GPIO_Init+0xae>
 8002160:	4a84      	ldr	r2, [pc, #528]	; (8002374 <HAL_GPIO_Init+0x294>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d013      	beq.n	800218e <HAL_GPIO_Init+0xae>
          break;
 8002166:	e02c      	b.n	80021c2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	623b      	str	r3, [r7, #32]
          break;
 800216e:	e028      	b.n	80021c2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	3304      	adds	r3, #4
 8002176:	623b      	str	r3, [r7, #32]
          break;
 8002178:	e023      	b.n	80021c2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	3308      	adds	r3, #8
 8002180:	623b      	str	r3, [r7, #32]
          break;
 8002182:	e01e      	b.n	80021c2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	330c      	adds	r3, #12
 800218a:	623b      	str	r3, [r7, #32]
          break;
 800218c:	e019      	b.n	80021c2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d102      	bne.n	800219c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002196:	2304      	movs	r3, #4
 8002198:	623b      	str	r3, [r7, #32]
          break;
 800219a:	e012      	b.n	80021c2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d105      	bne.n	80021b0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021a4:	2308      	movs	r3, #8
 80021a6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	69fa      	ldr	r2, [r7, #28]
 80021ac:	611a      	str	r2, [r3, #16]
          break;
 80021ae:	e008      	b.n	80021c2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021b0:	2308      	movs	r3, #8
 80021b2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	69fa      	ldr	r2, [r7, #28]
 80021b8:	615a      	str	r2, [r3, #20]
          break;
 80021ba:	e002      	b.n	80021c2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80021bc:	2300      	movs	r3, #0
 80021be:	623b      	str	r3, [r7, #32]
          break;
 80021c0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	2bff      	cmp	r3, #255	; 0xff
 80021c6:	d801      	bhi.n	80021cc <HAL_GPIO_Init+0xec>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	e001      	b.n	80021d0 <HAL_GPIO_Init+0xf0>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	3304      	adds	r3, #4
 80021d0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	2bff      	cmp	r3, #255	; 0xff
 80021d6:	d802      	bhi.n	80021de <HAL_GPIO_Init+0xfe>
 80021d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	e002      	b.n	80021e4 <HAL_GPIO_Init+0x104>
 80021de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e0:	3b08      	subs	r3, #8
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	210f      	movs	r1, #15
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	fa01 f303 	lsl.w	r3, r1, r3
 80021f2:	43db      	mvns	r3, r3
 80021f4:	401a      	ands	r2, r3
 80021f6:	6a39      	ldr	r1, [r7, #32]
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	fa01 f303 	lsl.w	r3, r1, r3
 80021fe:	431a      	orrs	r2, r3
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800220c:	2b00      	cmp	r3, #0
 800220e:	f000 8096 	beq.w	800233e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002212:	4b59      	ldr	r3, [pc, #356]	; (8002378 <HAL_GPIO_Init+0x298>)
 8002214:	699b      	ldr	r3, [r3, #24]
 8002216:	4a58      	ldr	r2, [pc, #352]	; (8002378 <HAL_GPIO_Init+0x298>)
 8002218:	f043 0301 	orr.w	r3, r3, #1
 800221c:	6193      	str	r3, [r2, #24]
 800221e:	4b56      	ldr	r3, [pc, #344]	; (8002378 <HAL_GPIO_Init+0x298>)
 8002220:	699b      	ldr	r3, [r3, #24]
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	60bb      	str	r3, [r7, #8]
 8002228:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800222a:	4a54      	ldr	r2, [pc, #336]	; (800237c <HAL_GPIO_Init+0x29c>)
 800222c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222e:	089b      	lsrs	r3, r3, #2
 8002230:	3302      	adds	r3, #2
 8002232:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002236:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223a:	f003 0303 	and.w	r3, r3, #3
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	220f      	movs	r2, #15
 8002242:	fa02 f303 	lsl.w	r3, r2, r3
 8002246:	43db      	mvns	r3, r3
 8002248:	68fa      	ldr	r2, [r7, #12]
 800224a:	4013      	ands	r3, r2
 800224c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a4b      	ldr	r2, [pc, #300]	; (8002380 <HAL_GPIO_Init+0x2a0>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d013      	beq.n	800227e <HAL_GPIO_Init+0x19e>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a4a      	ldr	r2, [pc, #296]	; (8002384 <HAL_GPIO_Init+0x2a4>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d00d      	beq.n	800227a <HAL_GPIO_Init+0x19a>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a49      	ldr	r2, [pc, #292]	; (8002388 <HAL_GPIO_Init+0x2a8>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d007      	beq.n	8002276 <HAL_GPIO_Init+0x196>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a48      	ldr	r2, [pc, #288]	; (800238c <HAL_GPIO_Init+0x2ac>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d101      	bne.n	8002272 <HAL_GPIO_Init+0x192>
 800226e:	2303      	movs	r3, #3
 8002270:	e006      	b.n	8002280 <HAL_GPIO_Init+0x1a0>
 8002272:	2304      	movs	r3, #4
 8002274:	e004      	b.n	8002280 <HAL_GPIO_Init+0x1a0>
 8002276:	2302      	movs	r3, #2
 8002278:	e002      	b.n	8002280 <HAL_GPIO_Init+0x1a0>
 800227a:	2301      	movs	r3, #1
 800227c:	e000      	b.n	8002280 <HAL_GPIO_Init+0x1a0>
 800227e:	2300      	movs	r3, #0
 8002280:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002282:	f002 0203 	and.w	r2, r2, #3
 8002286:	0092      	lsls	r2, r2, #2
 8002288:	4093      	lsls	r3, r2
 800228a:	68fa      	ldr	r2, [r7, #12]
 800228c:	4313      	orrs	r3, r2
 800228e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002290:	493a      	ldr	r1, [pc, #232]	; (800237c <HAL_GPIO_Init+0x29c>)
 8002292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002294:	089b      	lsrs	r3, r3, #2
 8002296:	3302      	adds	r3, #2
 8002298:	68fa      	ldr	r2, [r7, #12]
 800229a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d006      	beq.n	80022b8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80022aa:	4b39      	ldr	r3, [pc, #228]	; (8002390 <HAL_GPIO_Init+0x2b0>)
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	4938      	ldr	r1, [pc, #224]	; (8002390 <HAL_GPIO_Init+0x2b0>)
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	600b      	str	r3, [r1, #0]
 80022b6:	e006      	b.n	80022c6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80022b8:	4b35      	ldr	r3, [pc, #212]	; (8002390 <HAL_GPIO_Init+0x2b0>)
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	69bb      	ldr	r3, [r7, #24]
 80022be:	43db      	mvns	r3, r3
 80022c0:	4933      	ldr	r1, [pc, #204]	; (8002390 <HAL_GPIO_Init+0x2b0>)
 80022c2:	4013      	ands	r3, r2
 80022c4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d006      	beq.n	80022e0 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80022d2:	4b2f      	ldr	r3, [pc, #188]	; (8002390 <HAL_GPIO_Init+0x2b0>)
 80022d4:	685a      	ldr	r2, [r3, #4]
 80022d6:	492e      	ldr	r1, [pc, #184]	; (8002390 <HAL_GPIO_Init+0x2b0>)
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	4313      	orrs	r3, r2
 80022dc:	604b      	str	r3, [r1, #4]
 80022de:	e006      	b.n	80022ee <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80022e0:	4b2b      	ldr	r3, [pc, #172]	; (8002390 <HAL_GPIO_Init+0x2b0>)
 80022e2:	685a      	ldr	r2, [r3, #4]
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	43db      	mvns	r3, r3
 80022e8:	4929      	ldr	r1, [pc, #164]	; (8002390 <HAL_GPIO_Init+0x2b0>)
 80022ea:	4013      	ands	r3, r2
 80022ec:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d006      	beq.n	8002308 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80022fa:	4b25      	ldr	r3, [pc, #148]	; (8002390 <HAL_GPIO_Init+0x2b0>)
 80022fc:	689a      	ldr	r2, [r3, #8]
 80022fe:	4924      	ldr	r1, [pc, #144]	; (8002390 <HAL_GPIO_Init+0x2b0>)
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	4313      	orrs	r3, r2
 8002304:	608b      	str	r3, [r1, #8]
 8002306:	e006      	b.n	8002316 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002308:	4b21      	ldr	r3, [pc, #132]	; (8002390 <HAL_GPIO_Init+0x2b0>)
 800230a:	689a      	ldr	r2, [r3, #8]
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	43db      	mvns	r3, r3
 8002310:	491f      	ldr	r1, [pc, #124]	; (8002390 <HAL_GPIO_Init+0x2b0>)
 8002312:	4013      	ands	r3, r2
 8002314:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d006      	beq.n	8002330 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002322:	4b1b      	ldr	r3, [pc, #108]	; (8002390 <HAL_GPIO_Init+0x2b0>)
 8002324:	68da      	ldr	r2, [r3, #12]
 8002326:	491a      	ldr	r1, [pc, #104]	; (8002390 <HAL_GPIO_Init+0x2b0>)
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	4313      	orrs	r3, r2
 800232c:	60cb      	str	r3, [r1, #12]
 800232e:	e006      	b.n	800233e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002330:	4b17      	ldr	r3, [pc, #92]	; (8002390 <HAL_GPIO_Init+0x2b0>)
 8002332:	68da      	ldr	r2, [r3, #12]
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	43db      	mvns	r3, r3
 8002338:	4915      	ldr	r1, [pc, #84]	; (8002390 <HAL_GPIO_Init+0x2b0>)
 800233a:	4013      	ands	r3, r2
 800233c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800233e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002340:	3301      	adds	r3, #1
 8002342:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234a:	fa22 f303 	lsr.w	r3, r2, r3
 800234e:	2b00      	cmp	r3, #0
 8002350:	f47f aed0 	bne.w	80020f4 <HAL_GPIO_Init+0x14>
  }
}
 8002354:	bf00      	nop
 8002356:	372c      	adds	r7, #44	; 0x2c
 8002358:	46bd      	mov	sp, r7
 800235a:	bc80      	pop	{r7}
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	10210000 	.word	0x10210000
 8002364:	10110000 	.word	0x10110000
 8002368:	10120000 	.word	0x10120000
 800236c:	10310000 	.word	0x10310000
 8002370:	10320000 	.word	0x10320000
 8002374:	10220000 	.word	0x10220000
 8002378:	40021000 	.word	0x40021000
 800237c:	40010000 	.word	0x40010000
 8002380:	40010800 	.word	0x40010800
 8002384:	40010c00 	.word	0x40010c00
 8002388:	40011000 	.word	0x40011000
 800238c:	40011400 	.word	0x40011400
 8002390:	40010400 	.word	0x40010400

08002394 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	460b      	mov	r3, r1
 800239e:	807b      	strh	r3, [r7, #2]
 80023a0:	4613      	mov	r3, r2
 80023a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023a4:	787b      	ldrb	r3, [r7, #1]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d003      	beq.n	80023b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023aa:	887a      	ldrh	r2, [r7, #2]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80023b0:	e003      	b.n	80023ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80023b2:	887b      	ldrh	r3, [r7, #2]
 80023b4:	041a      	lsls	r2, r3, #16
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	611a      	str	r2, [r3, #16]
}
 80023ba:	bf00      	nop
 80023bc:	370c      	adds	r7, #12
 80023be:	46bd      	mov	sp, r7
 80023c0:	bc80      	pop	{r7}
 80023c2:	4770      	bx	lr

080023c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b086      	sub	sp, #24
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d101      	bne.n	80023d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e26c      	b.n	80028b0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0301 	and.w	r3, r3, #1
 80023de:	2b00      	cmp	r3, #0
 80023e0:	f000 8087 	beq.w	80024f2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023e4:	4b92      	ldr	r3, [pc, #584]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f003 030c 	and.w	r3, r3, #12
 80023ec:	2b04      	cmp	r3, #4
 80023ee:	d00c      	beq.n	800240a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023f0:	4b8f      	ldr	r3, [pc, #572]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f003 030c 	and.w	r3, r3, #12
 80023f8:	2b08      	cmp	r3, #8
 80023fa:	d112      	bne.n	8002422 <HAL_RCC_OscConfig+0x5e>
 80023fc:	4b8c      	ldr	r3, [pc, #560]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002404:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002408:	d10b      	bne.n	8002422 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800240a:	4b89      	ldr	r3, [pc, #548]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d06c      	beq.n	80024f0 <HAL_RCC_OscConfig+0x12c>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d168      	bne.n	80024f0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e246      	b.n	80028b0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800242a:	d106      	bne.n	800243a <HAL_RCC_OscConfig+0x76>
 800242c:	4b80      	ldr	r3, [pc, #512]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a7f      	ldr	r2, [pc, #508]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 8002432:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002436:	6013      	str	r3, [r2, #0]
 8002438:	e02e      	b.n	8002498 <HAL_RCC_OscConfig+0xd4>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d10c      	bne.n	800245c <HAL_RCC_OscConfig+0x98>
 8002442:	4b7b      	ldr	r3, [pc, #492]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a7a      	ldr	r2, [pc, #488]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 8002448:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800244c:	6013      	str	r3, [r2, #0]
 800244e:	4b78      	ldr	r3, [pc, #480]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a77      	ldr	r2, [pc, #476]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 8002454:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002458:	6013      	str	r3, [r2, #0]
 800245a:	e01d      	b.n	8002498 <HAL_RCC_OscConfig+0xd4>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002464:	d10c      	bne.n	8002480 <HAL_RCC_OscConfig+0xbc>
 8002466:	4b72      	ldr	r3, [pc, #456]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a71      	ldr	r2, [pc, #452]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 800246c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002470:	6013      	str	r3, [r2, #0]
 8002472:	4b6f      	ldr	r3, [pc, #444]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a6e      	ldr	r2, [pc, #440]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 8002478:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800247c:	6013      	str	r3, [r2, #0]
 800247e:	e00b      	b.n	8002498 <HAL_RCC_OscConfig+0xd4>
 8002480:	4b6b      	ldr	r3, [pc, #428]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a6a      	ldr	r2, [pc, #424]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 8002486:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800248a:	6013      	str	r3, [r2, #0]
 800248c:	4b68      	ldr	r3, [pc, #416]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a67      	ldr	r2, [pc, #412]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 8002492:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002496:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d013      	beq.n	80024c8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a0:	f7ff fd0e 	bl	8001ec0 <HAL_GetTick>
 80024a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024a6:	e008      	b.n	80024ba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024a8:	f7ff fd0a 	bl	8001ec0 <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	2b64      	cmp	r3, #100	; 0x64
 80024b4:	d901      	bls.n	80024ba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e1fa      	b.n	80028b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ba:	4b5d      	ldr	r3, [pc, #372]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d0f0      	beq.n	80024a8 <HAL_RCC_OscConfig+0xe4>
 80024c6:	e014      	b.n	80024f2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c8:	f7ff fcfa 	bl	8001ec0 <HAL_GetTick>
 80024cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ce:	e008      	b.n	80024e2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024d0:	f7ff fcf6 	bl	8001ec0 <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	2b64      	cmp	r3, #100	; 0x64
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e1e6      	b.n	80028b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024e2:	4b53      	ldr	r3, [pc, #332]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d1f0      	bne.n	80024d0 <HAL_RCC_OscConfig+0x10c>
 80024ee:	e000      	b.n	80024f2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d063      	beq.n	80025c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024fe:	4b4c      	ldr	r3, [pc, #304]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f003 030c 	and.w	r3, r3, #12
 8002506:	2b00      	cmp	r3, #0
 8002508:	d00b      	beq.n	8002522 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800250a:	4b49      	ldr	r3, [pc, #292]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f003 030c 	and.w	r3, r3, #12
 8002512:	2b08      	cmp	r3, #8
 8002514:	d11c      	bne.n	8002550 <HAL_RCC_OscConfig+0x18c>
 8002516:	4b46      	ldr	r3, [pc, #280]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d116      	bne.n	8002550 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002522:	4b43      	ldr	r3, [pc, #268]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0302 	and.w	r3, r3, #2
 800252a:	2b00      	cmp	r3, #0
 800252c:	d005      	beq.n	800253a <HAL_RCC_OscConfig+0x176>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	691b      	ldr	r3, [r3, #16]
 8002532:	2b01      	cmp	r3, #1
 8002534:	d001      	beq.n	800253a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e1ba      	b.n	80028b0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800253a:	4b3d      	ldr	r3, [pc, #244]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	695b      	ldr	r3, [r3, #20]
 8002546:	00db      	lsls	r3, r3, #3
 8002548:	4939      	ldr	r1, [pc, #228]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 800254a:	4313      	orrs	r3, r2
 800254c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800254e:	e03a      	b.n	80025c6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	691b      	ldr	r3, [r3, #16]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d020      	beq.n	800259a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002558:	4b36      	ldr	r3, [pc, #216]	; (8002634 <HAL_RCC_OscConfig+0x270>)
 800255a:	2201      	movs	r2, #1
 800255c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800255e:	f7ff fcaf 	bl	8001ec0 <HAL_GetTick>
 8002562:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002564:	e008      	b.n	8002578 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002566:	f7ff fcab 	bl	8001ec0 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	2b02      	cmp	r3, #2
 8002572:	d901      	bls.n	8002578 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e19b      	b.n	80028b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002578:	4b2d      	ldr	r3, [pc, #180]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0302 	and.w	r3, r3, #2
 8002580:	2b00      	cmp	r3, #0
 8002582:	d0f0      	beq.n	8002566 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002584:	4b2a      	ldr	r3, [pc, #168]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	695b      	ldr	r3, [r3, #20]
 8002590:	00db      	lsls	r3, r3, #3
 8002592:	4927      	ldr	r1, [pc, #156]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 8002594:	4313      	orrs	r3, r2
 8002596:	600b      	str	r3, [r1, #0]
 8002598:	e015      	b.n	80025c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800259a:	4b26      	ldr	r3, [pc, #152]	; (8002634 <HAL_RCC_OscConfig+0x270>)
 800259c:	2200      	movs	r2, #0
 800259e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a0:	f7ff fc8e 	bl	8001ec0 <HAL_GetTick>
 80025a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025a6:	e008      	b.n	80025ba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025a8:	f7ff fc8a 	bl	8001ec0 <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d901      	bls.n	80025ba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e17a      	b.n	80028b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ba:	4b1d      	ldr	r3, [pc, #116]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0302 	and.w	r3, r3, #2
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d1f0      	bne.n	80025a8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0308 	and.w	r3, r3, #8
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d03a      	beq.n	8002648 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	699b      	ldr	r3, [r3, #24]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d019      	beq.n	800260e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025da:	4b17      	ldr	r3, [pc, #92]	; (8002638 <HAL_RCC_OscConfig+0x274>)
 80025dc:	2201      	movs	r2, #1
 80025de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025e0:	f7ff fc6e 	bl	8001ec0 <HAL_GetTick>
 80025e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025e6:	e008      	b.n	80025fa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025e8:	f7ff fc6a 	bl	8001ec0 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d901      	bls.n	80025fa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e15a      	b.n	80028b0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025fa:	4b0d      	ldr	r3, [pc, #52]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 80025fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fe:	f003 0302 	and.w	r3, r3, #2
 8002602:	2b00      	cmp	r3, #0
 8002604:	d0f0      	beq.n	80025e8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002606:	2001      	movs	r0, #1
 8002608:	f000 faa8 	bl	8002b5c <RCC_Delay>
 800260c:	e01c      	b.n	8002648 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800260e:	4b0a      	ldr	r3, [pc, #40]	; (8002638 <HAL_RCC_OscConfig+0x274>)
 8002610:	2200      	movs	r2, #0
 8002612:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002614:	f7ff fc54 	bl	8001ec0 <HAL_GetTick>
 8002618:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800261a:	e00f      	b.n	800263c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800261c:	f7ff fc50 	bl	8001ec0 <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	2b02      	cmp	r3, #2
 8002628:	d908      	bls.n	800263c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e140      	b.n	80028b0 <HAL_RCC_OscConfig+0x4ec>
 800262e:	bf00      	nop
 8002630:	40021000 	.word	0x40021000
 8002634:	42420000 	.word	0x42420000
 8002638:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800263c:	4b9e      	ldr	r3, [pc, #632]	; (80028b8 <HAL_RCC_OscConfig+0x4f4>)
 800263e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002640:	f003 0302 	and.w	r3, r3, #2
 8002644:	2b00      	cmp	r3, #0
 8002646:	d1e9      	bne.n	800261c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0304 	and.w	r3, r3, #4
 8002650:	2b00      	cmp	r3, #0
 8002652:	f000 80a6 	beq.w	80027a2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002656:	2300      	movs	r3, #0
 8002658:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800265a:	4b97      	ldr	r3, [pc, #604]	; (80028b8 <HAL_RCC_OscConfig+0x4f4>)
 800265c:	69db      	ldr	r3, [r3, #28]
 800265e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d10d      	bne.n	8002682 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002666:	4b94      	ldr	r3, [pc, #592]	; (80028b8 <HAL_RCC_OscConfig+0x4f4>)
 8002668:	69db      	ldr	r3, [r3, #28]
 800266a:	4a93      	ldr	r2, [pc, #588]	; (80028b8 <HAL_RCC_OscConfig+0x4f4>)
 800266c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002670:	61d3      	str	r3, [r2, #28]
 8002672:	4b91      	ldr	r3, [pc, #580]	; (80028b8 <HAL_RCC_OscConfig+0x4f4>)
 8002674:	69db      	ldr	r3, [r3, #28]
 8002676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800267a:	60bb      	str	r3, [r7, #8]
 800267c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800267e:	2301      	movs	r3, #1
 8002680:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002682:	4b8e      	ldr	r3, [pc, #568]	; (80028bc <HAL_RCC_OscConfig+0x4f8>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800268a:	2b00      	cmp	r3, #0
 800268c:	d118      	bne.n	80026c0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800268e:	4b8b      	ldr	r3, [pc, #556]	; (80028bc <HAL_RCC_OscConfig+0x4f8>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a8a      	ldr	r2, [pc, #552]	; (80028bc <HAL_RCC_OscConfig+0x4f8>)
 8002694:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002698:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800269a:	f7ff fc11 	bl	8001ec0 <HAL_GetTick>
 800269e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026a0:	e008      	b.n	80026b4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026a2:	f7ff fc0d 	bl	8001ec0 <HAL_GetTick>
 80026a6:	4602      	mov	r2, r0
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	2b64      	cmp	r3, #100	; 0x64
 80026ae:	d901      	bls.n	80026b4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e0fd      	b.n	80028b0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026b4:	4b81      	ldr	r3, [pc, #516]	; (80028bc <HAL_RCC_OscConfig+0x4f8>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d0f0      	beq.n	80026a2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d106      	bne.n	80026d6 <HAL_RCC_OscConfig+0x312>
 80026c8:	4b7b      	ldr	r3, [pc, #492]	; (80028b8 <HAL_RCC_OscConfig+0x4f4>)
 80026ca:	6a1b      	ldr	r3, [r3, #32]
 80026cc:	4a7a      	ldr	r2, [pc, #488]	; (80028b8 <HAL_RCC_OscConfig+0x4f4>)
 80026ce:	f043 0301 	orr.w	r3, r3, #1
 80026d2:	6213      	str	r3, [r2, #32]
 80026d4:	e02d      	b.n	8002732 <HAL_RCC_OscConfig+0x36e>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d10c      	bne.n	80026f8 <HAL_RCC_OscConfig+0x334>
 80026de:	4b76      	ldr	r3, [pc, #472]	; (80028b8 <HAL_RCC_OscConfig+0x4f4>)
 80026e0:	6a1b      	ldr	r3, [r3, #32]
 80026e2:	4a75      	ldr	r2, [pc, #468]	; (80028b8 <HAL_RCC_OscConfig+0x4f4>)
 80026e4:	f023 0301 	bic.w	r3, r3, #1
 80026e8:	6213      	str	r3, [r2, #32]
 80026ea:	4b73      	ldr	r3, [pc, #460]	; (80028b8 <HAL_RCC_OscConfig+0x4f4>)
 80026ec:	6a1b      	ldr	r3, [r3, #32]
 80026ee:	4a72      	ldr	r2, [pc, #456]	; (80028b8 <HAL_RCC_OscConfig+0x4f4>)
 80026f0:	f023 0304 	bic.w	r3, r3, #4
 80026f4:	6213      	str	r3, [r2, #32]
 80026f6:	e01c      	b.n	8002732 <HAL_RCC_OscConfig+0x36e>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	2b05      	cmp	r3, #5
 80026fe:	d10c      	bne.n	800271a <HAL_RCC_OscConfig+0x356>
 8002700:	4b6d      	ldr	r3, [pc, #436]	; (80028b8 <HAL_RCC_OscConfig+0x4f4>)
 8002702:	6a1b      	ldr	r3, [r3, #32]
 8002704:	4a6c      	ldr	r2, [pc, #432]	; (80028b8 <HAL_RCC_OscConfig+0x4f4>)
 8002706:	f043 0304 	orr.w	r3, r3, #4
 800270a:	6213      	str	r3, [r2, #32]
 800270c:	4b6a      	ldr	r3, [pc, #424]	; (80028b8 <HAL_RCC_OscConfig+0x4f4>)
 800270e:	6a1b      	ldr	r3, [r3, #32]
 8002710:	4a69      	ldr	r2, [pc, #420]	; (80028b8 <HAL_RCC_OscConfig+0x4f4>)
 8002712:	f043 0301 	orr.w	r3, r3, #1
 8002716:	6213      	str	r3, [r2, #32]
 8002718:	e00b      	b.n	8002732 <HAL_RCC_OscConfig+0x36e>
 800271a:	4b67      	ldr	r3, [pc, #412]	; (80028b8 <HAL_RCC_OscConfig+0x4f4>)
 800271c:	6a1b      	ldr	r3, [r3, #32]
 800271e:	4a66      	ldr	r2, [pc, #408]	; (80028b8 <HAL_RCC_OscConfig+0x4f4>)
 8002720:	f023 0301 	bic.w	r3, r3, #1
 8002724:	6213      	str	r3, [r2, #32]
 8002726:	4b64      	ldr	r3, [pc, #400]	; (80028b8 <HAL_RCC_OscConfig+0x4f4>)
 8002728:	6a1b      	ldr	r3, [r3, #32]
 800272a:	4a63      	ldr	r2, [pc, #396]	; (80028b8 <HAL_RCC_OscConfig+0x4f4>)
 800272c:	f023 0304 	bic.w	r3, r3, #4
 8002730:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d015      	beq.n	8002766 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800273a:	f7ff fbc1 	bl	8001ec0 <HAL_GetTick>
 800273e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002740:	e00a      	b.n	8002758 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002742:	f7ff fbbd 	bl	8001ec0 <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002750:	4293      	cmp	r3, r2
 8002752:	d901      	bls.n	8002758 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	e0ab      	b.n	80028b0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002758:	4b57      	ldr	r3, [pc, #348]	; (80028b8 <HAL_RCC_OscConfig+0x4f4>)
 800275a:	6a1b      	ldr	r3, [r3, #32]
 800275c:	f003 0302 	and.w	r3, r3, #2
 8002760:	2b00      	cmp	r3, #0
 8002762:	d0ee      	beq.n	8002742 <HAL_RCC_OscConfig+0x37e>
 8002764:	e014      	b.n	8002790 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002766:	f7ff fbab 	bl	8001ec0 <HAL_GetTick>
 800276a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800276c:	e00a      	b.n	8002784 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800276e:	f7ff fba7 	bl	8001ec0 <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	f241 3288 	movw	r2, #5000	; 0x1388
 800277c:	4293      	cmp	r3, r2
 800277e:	d901      	bls.n	8002784 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e095      	b.n	80028b0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002784:	4b4c      	ldr	r3, [pc, #304]	; (80028b8 <HAL_RCC_OscConfig+0x4f4>)
 8002786:	6a1b      	ldr	r3, [r3, #32]
 8002788:	f003 0302 	and.w	r3, r3, #2
 800278c:	2b00      	cmp	r3, #0
 800278e:	d1ee      	bne.n	800276e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002790:	7dfb      	ldrb	r3, [r7, #23]
 8002792:	2b01      	cmp	r3, #1
 8002794:	d105      	bne.n	80027a2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002796:	4b48      	ldr	r3, [pc, #288]	; (80028b8 <HAL_RCC_OscConfig+0x4f4>)
 8002798:	69db      	ldr	r3, [r3, #28]
 800279a:	4a47      	ldr	r2, [pc, #284]	; (80028b8 <HAL_RCC_OscConfig+0x4f4>)
 800279c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027a0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	69db      	ldr	r3, [r3, #28]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	f000 8081 	beq.w	80028ae <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027ac:	4b42      	ldr	r3, [pc, #264]	; (80028b8 <HAL_RCC_OscConfig+0x4f4>)
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f003 030c 	and.w	r3, r3, #12
 80027b4:	2b08      	cmp	r3, #8
 80027b6:	d061      	beq.n	800287c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	69db      	ldr	r3, [r3, #28]
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d146      	bne.n	800284e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027c0:	4b3f      	ldr	r3, [pc, #252]	; (80028c0 <HAL_RCC_OscConfig+0x4fc>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c6:	f7ff fb7b 	bl	8001ec0 <HAL_GetTick>
 80027ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027cc:	e008      	b.n	80027e0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027ce:	f7ff fb77 	bl	8001ec0 <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d901      	bls.n	80027e0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	e067      	b.n	80028b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027e0:	4b35      	ldr	r3, [pc, #212]	; (80028b8 <HAL_RCC_OscConfig+0x4f4>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d1f0      	bne.n	80027ce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6a1b      	ldr	r3, [r3, #32]
 80027f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027f4:	d108      	bne.n	8002808 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80027f6:	4b30      	ldr	r3, [pc, #192]	; (80028b8 <HAL_RCC_OscConfig+0x4f4>)
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	492d      	ldr	r1, [pc, #180]	; (80028b8 <HAL_RCC_OscConfig+0x4f4>)
 8002804:	4313      	orrs	r3, r2
 8002806:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002808:	4b2b      	ldr	r3, [pc, #172]	; (80028b8 <HAL_RCC_OscConfig+0x4f4>)
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6a19      	ldr	r1, [r3, #32]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002818:	430b      	orrs	r3, r1
 800281a:	4927      	ldr	r1, [pc, #156]	; (80028b8 <HAL_RCC_OscConfig+0x4f4>)
 800281c:	4313      	orrs	r3, r2
 800281e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002820:	4b27      	ldr	r3, [pc, #156]	; (80028c0 <HAL_RCC_OscConfig+0x4fc>)
 8002822:	2201      	movs	r2, #1
 8002824:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002826:	f7ff fb4b 	bl	8001ec0 <HAL_GetTick>
 800282a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800282c:	e008      	b.n	8002840 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800282e:	f7ff fb47 	bl	8001ec0 <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	2b02      	cmp	r3, #2
 800283a:	d901      	bls.n	8002840 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	e037      	b.n	80028b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002840:	4b1d      	ldr	r3, [pc, #116]	; (80028b8 <HAL_RCC_OscConfig+0x4f4>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d0f0      	beq.n	800282e <HAL_RCC_OscConfig+0x46a>
 800284c:	e02f      	b.n	80028ae <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800284e:	4b1c      	ldr	r3, [pc, #112]	; (80028c0 <HAL_RCC_OscConfig+0x4fc>)
 8002850:	2200      	movs	r2, #0
 8002852:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002854:	f7ff fb34 	bl	8001ec0 <HAL_GetTick>
 8002858:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800285a:	e008      	b.n	800286e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800285c:	f7ff fb30 	bl	8001ec0 <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	2b02      	cmp	r3, #2
 8002868:	d901      	bls.n	800286e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e020      	b.n	80028b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800286e:	4b12      	ldr	r3, [pc, #72]	; (80028b8 <HAL_RCC_OscConfig+0x4f4>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d1f0      	bne.n	800285c <HAL_RCC_OscConfig+0x498>
 800287a:	e018      	b.n	80028ae <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	69db      	ldr	r3, [r3, #28]
 8002880:	2b01      	cmp	r3, #1
 8002882:	d101      	bne.n	8002888 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e013      	b.n	80028b0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002888:	4b0b      	ldr	r3, [pc, #44]	; (80028b8 <HAL_RCC_OscConfig+0x4f4>)
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6a1b      	ldr	r3, [r3, #32]
 8002898:	429a      	cmp	r2, r3
 800289a:	d106      	bne.n	80028aa <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d001      	beq.n	80028ae <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e000      	b.n	80028b0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80028ae:	2300      	movs	r3, #0
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3718      	adds	r7, #24
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	40021000 	.word	0x40021000
 80028bc:	40007000 	.word	0x40007000
 80028c0:	42420060 	.word	0x42420060

080028c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d101      	bne.n	80028d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e0d0      	b.n	8002a7a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028d8:	4b6a      	ldr	r3, [pc, #424]	; (8002a84 <HAL_RCC_ClockConfig+0x1c0>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0307 	and.w	r3, r3, #7
 80028e0:	683a      	ldr	r2, [r7, #0]
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d910      	bls.n	8002908 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028e6:	4b67      	ldr	r3, [pc, #412]	; (8002a84 <HAL_RCC_ClockConfig+0x1c0>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f023 0207 	bic.w	r2, r3, #7
 80028ee:	4965      	ldr	r1, [pc, #404]	; (8002a84 <HAL_RCC_ClockConfig+0x1c0>)
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028f6:	4b63      	ldr	r3, [pc, #396]	; (8002a84 <HAL_RCC_ClockConfig+0x1c0>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0307 	and.w	r3, r3, #7
 80028fe:	683a      	ldr	r2, [r7, #0]
 8002900:	429a      	cmp	r2, r3
 8002902:	d001      	beq.n	8002908 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e0b8      	b.n	8002a7a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0302 	and.w	r3, r3, #2
 8002910:	2b00      	cmp	r3, #0
 8002912:	d020      	beq.n	8002956 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0304 	and.w	r3, r3, #4
 800291c:	2b00      	cmp	r3, #0
 800291e:	d005      	beq.n	800292c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002920:	4b59      	ldr	r3, [pc, #356]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	4a58      	ldr	r2, [pc, #352]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 8002926:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800292a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0308 	and.w	r3, r3, #8
 8002934:	2b00      	cmp	r3, #0
 8002936:	d005      	beq.n	8002944 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002938:	4b53      	ldr	r3, [pc, #332]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	4a52      	ldr	r2, [pc, #328]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 800293e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002942:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002944:	4b50      	ldr	r3, [pc, #320]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	494d      	ldr	r1, [pc, #308]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 8002952:	4313      	orrs	r3, r2
 8002954:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0301 	and.w	r3, r3, #1
 800295e:	2b00      	cmp	r3, #0
 8002960:	d040      	beq.n	80029e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	2b01      	cmp	r3, #1
 8002968:	d107      	bne.n	800297a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800296a:	4b47      	ldr	r3, [pc, #284]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d115      	bne.n	80029a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e07f      	b.n	8002a7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	2b02      	cmp	r3, #2
 8002980:	d107      	bne.n	8002992 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002982:	4b41      	ldr	r3, [pc, #260]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d109      	bne.n	80029a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e073      	b.n	8002a7a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002992:	4b3d      	ldr	r3, [pc, #244]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	2b00      	cmp	r3, #0
 800299c:	d101      	bne.n	80029a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e06b      	b.n	8002a7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029a2:	4b39      	ldr	r3, [pc, #228]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f023 0203 	bic.w	r2, r3, #3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	4936      	ldr	r1, [pc, #216]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 80029b0:	4313      	orrs	r3, r2
 80029b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029b4:	f7ff fa84 	bl	8001ec0 <HAL_GetTick>
 80029b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ba:	e00a      	b.n	80029d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029bc:	f7ff fa80 	bl	8001ec0 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d901      	bls.n	80029d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e053      	b.n	8002a7a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029d2:	4b2d      	ldr	r3, [pc, #180]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f003 020c 	and.w	r2, r3, #12
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d1eb      	bne.n	80029bc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029e4:	4b27      	ldr	r3, [pc, #156]	; (8002a84 <HAL_RCC_ClockConfig+0x1c0>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0307 	and.w	r3, r3, #7
 80029ec:	683a      	ldr	r2, [r7, #0]
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d210      	bcs.n	8002a14 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029f2:	4b24      	ldr	r3, [pc, #144]	; (8002a84 <HAL_RCC_ClockConfig+0x1c0>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f023 0207 	bic.w	r2, r3, #7
 80029fa:	4922      	ldr	r1, [pc, #136]	; (8002a84 <HAL_RCC_ClockConfig+0x1c0>)
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a02:	4b20      	ldr	r3, [pc, #128]	; (8002a84 <HAL_RCC_ClockConfig+0x1c0>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0307 	and.w	r3, r3, #7
 8002a0a:	683a      	ldr	r2, [r7, #0]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d001      	beq.n	8002a14 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e032      	b.n	8002a7a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0304 	and.w	r3, r3, #4
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d008      	beq.n	8002a32 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a20:	4b19      	ldr	r3, [pc, #100]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	4916      	ldr	r1, [pc, #88]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0308 	and.w	r3, r3, #8
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d009      	beq.n	8002a52 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a3e:	4b12      	ldr	r3, [pc, #72]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	00db      	lsls	r3, r3, #3
 8002a4c:	490e      	ldr	r1, [pc, #56]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a52:	f000 f821 	bl	8002a98 <HAL_RCC_GetSysClockFreq>
 8002a56:	4601      	mov	r1, r0
 8002a58:	4b0b      	ldr	r3, [pc, #44]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	091b      	lsrs	r3, r3, #4
 8002a5e:	f003 030f 	and.w	r3, r3, #15
 8002a62:	4a0a      	ldr	r2, [pc, #40]	; (8002a8c <HAL_RCC_ClockConfig+0x1c8>)
 8002a64:	5cd3      	ldrb	r3, [r2, r3]
 8002a66:	fa21 f303 	lsr.w	r3, r1, r3
 8002a6a:	4a09      	ldr	r2, [pc, #36]	; (8002a90 <HAL_RCC_ClockConfig+0x1cc>)
 8002a6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a6e:	4b09      	ldr	r3, [pc, #36]	; (8002a94 <HAL_RCC_ClockConfig+0x1d0>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7ff f9e2 	bl	8001e3c <HAL_InitTick>

  return HAL_OK;
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3710      	adds	r7, #16
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	40022000 	.word	0x40022000
 8002a88:	40021000 	.word	0x40021000
 8002a8c:	08002e30 	.word	0x08002e30
 8002a90:	20000000 	.word	0x20000000
 8002a94:	20000004 	.word	0x20000004

08002a98 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a98:	b490      	push	{r4, r7}
 8002a9a:	b08a      	sub	sp, #40	; 0x28
 8002a9c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002a9e:	4b2a      	ldr	r3, [pc, #168]	; (8002b48 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002aa0:	1d3c      	adds	r4, r7, #4
 8002aa2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002aa4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002aa8:	4b28      	ldr	r3, [pc, #160]	; (8002b4c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002aaa:	881b      	ldrh	r3, [r3, #0]
 8002aac:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	61fb      	str	r3, [r7, #28]
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	61bb      	str	r3, [r7, #24]
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	627b      	str	r3, [r7, #36]	; 0x24
 8002aba:	2300      	movs	r3, #0
 8002abc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002ac2:	4b23      	ldr	r3, [pc, #140]	; (8002b50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	f003 030c 	and.w	r3, r3, #12
 8002ace:	2b04      	cmp	r3, #4
 8002ad0:	d002      	beq.n	8002ad8 <HAL_RCC_GetSysClockFreq+0x40>
 8002ad2:	2b08      	cmp	r3, #8
 8002ad4:	d003      	beq.n	8002ade <HAL_RCC_GetSysClockFreq+0x46>
 8002ad6:	e02d      	b.n	8002b34 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ad8:	4b1e      	ldr	r3, [pc, #120]	; (8002b54 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002ada:	623b      	str	r3, [r7, #32]
      break;
 8002adc:	e02d      	b.n	8002b3a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	0c9b      	lsrs	r3, r3, #18
 8002ae2:	f003 030f 	and.w	r3, r3, #15
 8002ae6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002aea:	4413      	add	r3, r2
 8002aec:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002af0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d013      	beq.n	8002b24 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002afc:	4b14      	ldr	r3, [pc, #80]	; (8002b50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	0c5b      	lsrs	r3, r3, #17
 8002b02:	f003 0301 	and.w	r3, r3, #1
 8002b06:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002b0a:	4413      	add	r3, r2
 8002b0c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002b10:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	4a0f      	ldr	r2, [pc, #60]	; (8002b54 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b16:	fb02 f203 	mul.w	r2, r2, r3
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b20:	627b      	str	r3, [r7, #36]	; 0x24
 8002b22:	e004      	b.n	8002b2e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	4a0c      	ldr	r2, [pc, #48]	; (8002b58 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b28:	fb02 f303 	mul.w	r3, r2, r3
 8002b2c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b30:	623b      	str	r3, [r7, #32]
      break;
 8002b32:	e002      	b.n	8002b3a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b34:	4b07      	ldr	r3, [pc, #28]	; (8002b54 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b36:	623b      	str	r3, [r7, #32]
      break;
 8002b38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b3a:	6a3b      	ldr	r3, [r7, #32]
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3728      	adds	r7, #40	; 0x28
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bc90      	pop	{r4, r7}
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop
 8002b48:	08002c3c 	.word	0x08002c3c
 8002b4c:	08002c4c 	.word	0x08002c4c
 8002b50:	40021000 	.word	0x40021000
 8002b54:	007a1200 	.word	0x007a1200
 8002b58:	003d0900 	.word	0x003d0900

08002b5c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b085      	sub	sp, #20
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002b64:	4b0a      	ldr	r3, [pc, #40]	; (8002b90 <RCC_Delay+0x34>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a0a      	ldr	r2, [pc, #40]	; (8002b94 <RCC_Delay+0x38>)
 8002b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b6e:	0a5b      	lsrs	r3, r3, #9
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	fb02 f303 	mul.w	r3, r2, r3
 8002b76:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002b78:	bf00      	nop
  }
  while (Delay --);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	1e5a      	subs	r2, r3, #1
 8002b7e:	60fa      	str	r2, [r7, #12]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d1f9      	bne.n	8002b78 <RCC_Delay+0x1c>
}
 8002b84:	bf00      	nop
 8002b86:	3714      	adds	r7, #20
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bc80      	pop	{r7}
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	20000000 	.word	0x20000000
 8002b94:	10624dd3 	.word	0x10624dd3

08002b98 <__libc_init_array>:
 8002b98:	b570      	push	{r4, r5, r6, lr}
 8002b9a:	2500      	movs	r5, #0
 8002b9c:	4e0c      	ldr	r6, [pc, #48]	; (8002bd0 <__libc_init_array+0x38>)
 8002b9e:	4c0d      	ldr	r4, [pc, #52]	; (8002bd4 <__libc_init_array+0x3c>)
 8002ba0:	1ba4      	subs	r4, r4, r6
 8002ba2:	10a4      	asrs	r4, r4, #2
 8002ba4:	42a5      	cmp	r5, r4
 8002ba6:	d109      	bne.n	8002bbc <__libc_init_array+0x24>
 8002ba8:	f000 f822 	bl	8002bf0 <_init>
 8002bac:	2500      	movs	r5, #0
 8002bae:	4e0a      	ldr	r6, [pc, #40]	; (8002bd8 <__libc_init_array+0x40>)
 8002bb0:	4c0a      	ldr	r4, [pc, #40]	; (8002bdc <__libc_init_array+0x44>)
 8002bb2:	1ba4      	subs	r4, r4, r6
 8002bb4:	10a4      	asrs	r4, r4, #2
 8002bb6:	42a5      	cmp	r5, r4
 8002bb8:	d105      	bne.n	8002bc6 <__libc_init_array+0x2e>
 8002bba:	bd70      	pop	{r4, r5, r6, pc}
 8002bbc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002bc0:	4798      	blx	r3
 8002bc2:	3501      	adds	r5, #1
 8002bc4:	e7ee      	b.n	8002ba4 <__libc_init_array+0xc>
 8002bc6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002bca:	4798      	blx	r3
 8002bcc:	3501      	adds	r5, #1
 8002bce:	e7f2      	b.n	8002bb6 <__libc_init_array+0x1e>
 8002bd0:	08002e40 	.word	0x08002e40
 8002bd4:	08002e40 	.word	0x08002e40
 8002bd8:	08002e40 	.word	0x08002e40
 8002bdc:	08002e44 	.word	0x08002e44

08002be0 <memset>:
 8002be0:	4603      	mov	r3, r0
 8002be2:	4402      	add	r2, r0
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d100      	bne.n	8002bea <memset+0xa>
 8002be8:	4770      	bx	lr
 8002bea:	f803 1b01 	strb.w	r1, [r3], #1
 8002bee:	e7f9      	b.n	8002be4 <memset+0x4>

08002bf0 <_init>:
 8002bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bf2:	bf00      	nop
 8002bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bf6:	bc08      	pop	{r3}
 8002bf8:	469e      	mov	lr, r3
 8002bfa:	4770      	bx	lr

08002bfc <_fini>:
 8002bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bfe:	bf00      	nop
 8002c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c02:	bc08      	pop	{r3}
 8002c04:	469e      	mov	lr, r3
 8002c06:	4770      	bx	lr
