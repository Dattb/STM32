
test_LCD_f107.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031a8  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c8  0800338c  0800338c  0001338c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003754  08003754  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08003754  08003754  00013754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800375c  0800375c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800375c  0800375c  0001375c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003760  08003760  00013760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08003764  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000234  20000078  080037dc  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ac  080037dc  000202ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005144  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001362  00000000  00000000  000251e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000548  00000000  00000000  00026548  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000490  00000000  00000000  00026a90  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001bf62  00000000  00000000  00026f20  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000513c  00000000  00000000  00042e82  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000995fa  00000000  00000000  00047fbe  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e15b8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000018d0  00000000  00000000  000e1634  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000078 	.word	0x20000078
 8000200:	00000000 	.word	0x00000000
 8000204:	08003374 	.word	0x08003374

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	2000007c 	.word	0x2000007c
 8000220:	08003374 	.word	0x08003374

08000224 <__aeabi_uldivmod>:
 8000224:	b953      	cbnz	r3, 800023c <__aeabi_uldivmod+0x18>
 8000226:	b94a      	cbnz	r2, 800023c <__aeabi_uldivmod+0x18>
 8000228:	2900      	cmp	r1, #0
 800022a:	bf08      	it	eq
 800022c:	2800      	cmpeq	r0, #0
 800022e:	bf1c      	itt	ne
 8000230:	f04f 31ff 	movne.w	r1, #4294967295
 8000234:	f04f 30ff 	movne.w	r0, #4294967295
 8000238:	f000 b974 	b.w	8000524 <__aeabi_idiv0>
 800023c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000240:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000244:	f000 f806 	bl	8000254 <__udivmoddi4>
 8000248:	f8dd e004 	ldr.w	lr, [sp, #4]
 800024c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000250:	b004      	add	sp, #16
 8000252:	4770      	bx	lr

08000254 <__udivmoddi4>:
 8000254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000258:	468c      	mov	ip, r1
 800025a:	4604      	mov	r4, r0
 800025c:	9e08      	ldr	r6, [sp, #32]
 800025e:	2b00      	cmp	r3, #0
 8000260:	d14b      	bne.n	80002fa <__udivmoddi4+0xa6>
 8000262:	428a      	cmp	r2, r1
 8000264:	4615      	mov	r5, r2
 8000266:	d967      	bls.n	8000338 <__udivmoddi4+0xe4>
 8000268:	fab2 f282 	clz	r2, r2
 800026c:	b14a      	cbz	r2, 8000282 <__udivmoddi4+0x2e>
 800026e:	f1c2 0720 	rsb	r7, r2, #32
 8000272:	fa01 f302 	lsl.w	r3, r1, r2
 8000276:	fa20 f707 	lsr.w	r7, r0, r7
 800027a:	4095      	lsls	r5, r2
 800027c:	ea47 0c03 	orr.w	ip, r7, r3
 8000280:	4094      	lsls	r4, r2
 8000282:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000286:	fbbc f7fe 	udiv	r7, ip, lr
 800028a:	fa1f f885 	uxth.w	r8, r5
 800028e:	fb0e c317 	mls	r3, lr, r7, ip
 8000292:	fb07 f908 	mul.w	r9, r7, r8
 8000296:	0c21      	lsrs	r1, r4, #16
 8000298:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800029c:	4599      	cmp	r9, r3
 800029e:	d909      	bls.n	80002b4 <__udivmoddi4+0x60>
 80002a0:	18eb      	adds	r3, r5, r3
 80002a2:	f107 31ff 	add.w	r1, r7, #4294967295
 80002a6:	f080 811c 	bcs.w	80004e2 <__udivmoddi4+0x28e>
 80002aa:	4599      	cmp	r9, r3
 80002ac:	f240 8119 	bls.w	80004e2 <__udivmoddi4+0x28e>
 80002b0:	3f02      	subs	r7, #2
 80002b2:	442b      	add	r3, r5
 80002b4:	eba3 0309 	sub.w	r3, r3, r9
 80002b8:	fbb3 f0fe 	udiv	r0, r3, lr
 80002bc:	fb0e 3310 	mls	r3, lr, r0, r3
 80002c0:	fb00 f108 	mul.w	r1, r0, r8
 80002c4:	b2a4      	uxth	r4, r4
 80002c6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ca:	42a1      	cmp	r1, r4
 80002cc:	d909      	bls.n	80002e2 <__udivmoddi4+0x8e>
 80002ce:	192c      	adds	r4, r5, r4
 80002d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002d4:	f080 8107 	bcs.w	80004e6 <__udivmoddi4+0x292>
 80002d8:	42a1      	cmp	r1, r4
 80002da:	f240 8104 	bls.w	80004e6 <__udivmoddi4+0x292>
 80002de:	3802      	subs	r0, #2
 80002e0:	442c      	add	r4, r5
 80002e2:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002e6:	2700      	movs	r7, #0
 80002e8:	1a64      	subs	r4, r4, r1
 80002ea:	b11e      	cbz	r6, 80002f4 <__udivmoddi4+0xa0>
 80002ec:	2300      	movs	r3, #0
 80002ee:	40d4      	lsrs	r4, r2
 80002f0:	e9c6 4300 	strd	r4, r3, [r6]
 80002f4:	4639      	mov	r1, r7
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0xbe>
 80002fe:	2e00      	cmp	r6, #0
 8000300:	f000 80ec 	beq.w	80004dc <__udivmoddi4+0x288>
 8000304:	2700      	movs	r7, #0
 8000306:	e9c6 0100 	strd	r0, r1, [r6]
 800030a:	4638      	mov	r0, r7
 800030c:	4639      	mov	r1, r7
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	fab3 f783 	clz	r7, r3
 8000316:	2f00      	cmp	r7, #0
 8000318:	d148      	bne.n	80003ac <__udivmoddi4+0x158>
 800031a:	428b      	cmp	r3, r1
 800031c:	d302      	bcc.n	8000324 <__udivmoddi4+0xd0>
 800031e:	4282      	cmp	r2, r0
 8000320:	f200 80fb 	bhi.w	800051a <__udivmoddi4+0x2c6>
 8000324:	1a84      	subs	r4, r0, r2
 8000326:	eb61 0303 	sbc.w	r3, r1, r3
 800032a:	2001      	movs	r0, #1
 800032c:	469c      	mov	ip, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d0e0      	beq.n	80002f4 <__udivmoddi4+0xa0>
 8000332:	e9c6 4c00 	strd	r4, ip, [r6]
 8000336:	e7dd      	b.n	80002f4 <__udivmoddi4+0xa0>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xe8>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f282 	clz	r2, r2
 8000340:	2a00      	cmp	r2, #0
 8000342:	f040 808f 	bne.w	8000464 <__udivmoddi4+0x210>
 8000346:	2701      	movs	r7, #1
 8000348:	1b49      	subs	r1, r1, r5
 800034a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800034e:	fa1f f985 	uxth.w	r9, r5
 8000352:	fbb1 fef8 	udiv	lr, r1, r8
 8000356:	fb08 111e 	mls	r1, r8, lr, r1
 800035a:	fb09 f00e 	mul.w	r0, r9, lr
 800035e:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8000362:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8000366:	4298      	cmp	r0, r3
 8000368:	d907      	bls.n	800037a <__udivmoddi4+0x126>
 800036a:	18eb      	adds	r3, r5, r3
 800036c:	f10e 31ff 	add.w	r1, lr, #4294967295
 8000370:	d202      	bcs.n	8000378 <__udivmoddi4+0x124>
 8000372:	4298      	cmp	r0, r3
 8000374:	f200 80cd 	bhi.w	8000512 <__udivmoddi4+0x2be>
 8000378:	468e      	mov	lr, r1
 800037a:	1a1b      	subs	r3, r3, r0
 800037c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000380:	fb08 3310 	mls	r3, r8, r0, r3
 8000384:	fb09 f900 	mul.w	r9, r9, r0
 8000388:	b2a4      	uxth	r4, r4
 800038a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800038e:	45a1      	cmp	r9, r4
 8000390:	d907      	bls.n	80003a2 <__udivmoddi4+0x14e>
 8000392:	192c      	adds	r4, r5, r4
 8000394:	f100 33ff 	add.w	r3, r0, #4294967295
 8000398:	d202      	bcs.n	80003a0 <__udivmoddi4+0x14c>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f200 80b6 	bhi.w	800050c <__udivmoddi4+0x2b8>
 80003a0:	4618      	mov	r0, r3
 80003a2:	eba4 0409 	sub.w	r4, r4, r9
 80003a6:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80003aa:	e79e      	b.n	80002ea <__udivmoddi4+0x96>
 80003ac:	f1c7 0520 	rsb	r5, r7, #32
 80003b0:	40bb      	lsls	r3, r7
 80003b2:	fa22 fc05 	lsr.w	ip, r2, r5
 80003b6:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ba:	fa21 f405 	lsr.w	r4, r1, r5
 80003be:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003c2:	fbb4 f9fe 	udiv	r9, r4, lr
 80003c6:	fa1f f88c 	uxth.w	r8, ip
 80003ca:	fb0e 4419 	mls	r4, lr, r9, r4
 80003ce:	fa20 f305 	lsr.w	r3, r0, r5
 80003d2:	40b9      	lsls	r1, r7
 80003d4:	fb09 fa08 	mul.w	sl, r9, r8
 80003d8:	4319      	orrs	r1, r3
 80003da:	0c0b      	lsrs	r3, r1, #16
 80003dc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e0:	45a2      	cmp	sl, r4
 80003e2:	fa02 f207 	lsl.w	r2, r2, r7
 80003e6:	fa00 f307 	lsl.w	r3, r0, r7
 80003ea:	d90b      	bls.n	8000404 <__udivmoddi4+0x1b0>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003f4:	f080 8088 	bcs.w	8000508 <__udivmoddi4+0x2b4>
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	f240 8085 	bls.w	8000508 <__udivmoddi4+0x2b4>
 80003fe:	f1a9 0902 	sub.w	r9, r9, #2
 8000402:	4464      	add	r4, ip
 8000404:	eba4 040a 	sub.w	r4, r4, sl
 8000408:	fbb4 f0fe 	udiv	r0, r4, lr
 800040c:	fb0e 4410 	mls	r4, lr, r0, r4
 8000410:	fb00 fa08 	mul.w	sl, r0, r8
 8000414:	b289      	uxth	r1, r1
 8000416:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 800041a:	45a2      	cmp	sl, r4
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x1dc>
 800041e:	eb1c 0404 	adds.w	r4, ip, r4
 8000422:	f100 31ff 	add.w	r1, r0, #4294967295
 8000426:	d26b      	bcs.n	8000500 <__udivmoddi4+0x2ac>
 8000428:	45a2      	cmp	sl, r4
 800042a:	d969      	bls.n	8000500 <__udivmoddi4+0x2ac>
 800042c:	3802      	subs	r0, #2
 800042e:	4464      	add	r4, ip
 8000430:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000434:	fba0 8902 	umull	r8, r9, r0, r2
 8000438:	eba4 040a 	sub.w	r4, r4, sl
 800043c:	454c      	cmp	r4, r9
 800043e:	4641      	mov	r1, r8
 8000440:	46ce      	mov	lr, r9
 8000442:	d354      	bcc.n	80004ee <__udivmoddi4+0x29a>
 8000444:	d051      	beq.n	80004ea <__udivmoddi4+0x296>
 8000446:	2e00      	cmp	r6, #0
 8000448:	d069      	beq.n	800051e <__udivmoddi4+0x2ca>
 800044a:	1a5a      	subs	r2, r3, r1
 800044c:	eb64 040e 	sbc.w	r4, r4, lr
 8000450:	fa04 f505 	lsl.w	r5, r4, r5
 8000454:	fa22 f307 	lsr.w	r3, r2, r7
 8000458:	40fc      	lsrs	r4, r7
 800045a:	431d      	orrs	r5, r3
 800045c:	e9c6 5400 	strd	r5, r4, [r6]
 8000460:	2700      	movs	r7, #0
 8000462:	e747      	b.n	80002f4 <__udivmoddi4+0xa0>
 8000464:	4095      	lsls	r5, r2
 8000466:	f1c2 0320 	rsb	r3, r2, #32
 800046a:	fa21 f003 	lsr.w	r0, r1, r3
 800046e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000472:	fbb0 f7f8 	udiv	r7, r0, r8
 8000476:	fa1f f985 	uxth.w	r9, r5
 800047a:	fb08 0017 	mls	r0, r8, r7, r0
 800047e:	fa24 f303 	lsr.w	r3, r4, r3
 8000482:	4091      	lsls	r1, r2
 8000484:	fb07 fc09 	mul.w	ip, r7, r9
 8000488:	430b      	orrs	r3, r1
 800048a:	0c19      	lsrs	r1, r3, #16
 800048c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000490:	458c      	cmp	ip, r1
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d907      	bls.n	80004a8 <__udivmoddi4+0x254>
 8000498:	1869      	adds	r1, r5, r1
 800049a:	f107 30ff 	add.w	r0, r7, #4294967295
 800049e:	d231      	bcs.n	8000504 <__udivmoddi4+0x2b0>
 80004a0:	458c      	cmp	ip, r1
 80004a2:	d92f      	bls.n	8000504 <__udivmoddi4+0x2b0>
 80004a4:	3f02      	subs	r7, #2
 80004a6:	4429      	add	r1, r5
 80004a8:	eba1 010c 	sub.w	r1, r1, ip
 80004ac:	fbb1 f0f8 	udiv	r0, r1, r8
 80004b0:	fb08 1c10 	mls	ip, r8, r0, r1
 80004b4:	fb00 fe09 	mul.w	lr, r0, r9
 80004b8:	b299      	uxth	r1, r3
 80004ba:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004be:	458e      	cmp	lr, r1
 80004c0:	d907      	bls.n	80004d2 <__udivmoddi4+0x27e>
 80004c2:	1869      	adds	r1, r5, r1
 80004c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c8:	d218      	bcs.n	80004fc <__udivmoddi4+0x2a8>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d916      	bls.n	80004fc <__udivmoddi4+0x2a8>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4429      	add	r1, r5
 80004d2:	eba1 010e 	sub.w	r1, r1, lr
 80004d6:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004da:	e73a      	b.n	8000352 <__udivmoddi4+0xfe>
 80004dc:	4637      	mov	r7, r6
 80004de:	4630      	mov	r0, r6
 80004e0:	e708      	b.n	80002f4 <__udivmoddi4+0xa0>
 80004e2:	460f      	mov	r7, r1
 80004e4:	e6e6      	b.n	80002b4 <__udivmoddi4+0x60>
 80004e6:	4618      	mov	r0, r3
 80004e8:	e6fb      	b.n	80002e2 <__udivmoddi4+0x8e>
 80004ea:	4543      	cmp	r3, r8
 80004ec:	d2ab      	bcs.n	8000446 <__udivmoddi4+0x1f2>
 80004ee:	ebb8 0102 	subs.w	r1, r8, r2
 80004f2:	eb69 020c 	sbc.w	r2, r9, ip
 80004f6:	3801      	subs	r0, #1
 80004f8:	4696      	mov	lr, r2
 80004fa:	e7a4      	b.n	8000446 <__udivmoddi4+0x1f2>
 80004fc:	4618      	mov	r0, r3
 80004fe:	e7e8      	b.n	80004d2 <__udivmoddi4+0x27e>
 8000500:	4608      	mov	r0, r1
 8000502:	e795      	b.n	8000430 <__udivmoddi4+0x1dc>
 8000504:	4607      	mov	r7, r0
 8000506:	e7cf      	b.n	80004a8 <__udivmoddi4+0x254>
 8000508:	4681      	mov	r9, r0
 800050a:	e77b      	b.n	8000404 <__udivmoddi4+0x1b0>
 800050c:	3802      	subs	r0, #2
 800050e:	442c      	add	r4, r5
 8000510:	e747      	b.n	80003a2 <__udivmoddi4+0x14e>
 8000512:	f1ae 0e02 	sub.w	lr, lr, #2
 8000516:	442b      	add	r3, r5
 8000518:	e72f      	b.n	800037a <__udivmoddi4+0x126>
 800051a:	4638      	mov	r0, r7
 800051c:	e707      	b.n	800032e <__udivmoddi4+0xda>
 800051e:	4637      	mov	r7, r6
 8000520:	e6e8      	b.n	80002f4 <__udivmoddi4+0xa0>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <setup_LCD_GPIOs>:
#include "5110.h"
#include "main.h"


void setup_LCD_GPIOs()
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_2,1); // Back Light
 800052c:	2201      	movs	r2, #1
 800052e:	2104      	movs	r1, #4
 8000530:	4810      	ldr	r0, [pc, #64]	; (8000574 <setup_LCD_GPIOs+0x4c>)
 8000532:	f001 fd94 	bl	800205e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,1); // CE(SS)
 8000536:	2201      	movs	r2, #1
 8000538:	2110      	movs	r1, #16
 800053a:	480e      	ldr	r0, [pc, #56]	; (8000574 <setup_LCD_GPIOs+0x4c>)
 800053c:	f001 fd8f 	bl	800205e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,1); // D/C
 8000540:	2201      	movs	r2, #1
 8000542:	2102      	movs	r1, #2
 8000544:	480b      	ldr	r0, [pc, #44]	; (8000574 <setup_LCD_GPIOs+0x4c>)
 8000546:	f001 fd8a 	bl	800205e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,0); // Reset
 800054a:	2200      	movs	r2, #0
 800054c:	2101      	movs	r1, #1
 800054e:	4809      	ldr	r0, [pc, #36]	; (8000574 <setup_LCD_GPIOs+0x4c>)
 8000550:	f001 fd85 	bl	800205e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,0); // MOSI
 8000554:	2200      	movs	r2, #0
 8000556:	2180      	movs	r1, #128	; 0x80
 8000558:	4806      	ldr	r0, [pc, #24]	; (8000574 <setup_LCD_GPIOs+0x4c>)
 800055a:	f001 fd80 	bl	800205e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,0); // SCLK
 800055e:	2200      	movs	r2, #0
 8000560:	2120      	movs	r1, #32
 8000562:	4804      	ldr	r0, [pc, #16]	; (8000574 <setup_LCD_GPIOs+0x4c>)
 8000564:	f001 fd7b 	bl	800205e <HAL_GPIO_WritePin>
			HAL_Delay(10);
 8000568:	200a      	movs	r0, #10
 800056a:	f001 fb01 	bl	8001b70 <HAL_Delay>
}
 800056e:	bf00      	nop
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	40010800 	.word	0x40010800

08000578 <PCD8544_write>:


void PCD8544_write(unsigned char type, unsigned char value)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af00      	add	r7, sp, #0
 800057e:	4603      	mov	r3, r0
 8000580:	460a      	mov	r2, r1
 8000582:	71fb      	strb	r3, [r7, #7]
 8000584:	4613      	mov	r3, r2
 8000586:	71bb      	strb	r3, [r7, #6]
     unsigned char s = 0x08;
 8000588:	2308      	movs	r3, #8
 800058a:	73fb      	strb	r3, [r7, #15]

     if(type != 0)
 800058c:	79fb      	ldrb	r3, [r7, #7]
 800058e:	2b00      	cmp	r3, #0
 8000590:	d005      	beq.n	800059e <PCD8544_write+0x26>
     {
          // GPIOB_pin_high(DC_pin);
			 HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,1);
 8000592:	2201      	movs	r2, #1
 8000594:	2102      	movs	r1, #2
 8000596:	481d      	ldr	r0, [pc, #116]	; (800060c <PCD8544_write+0x94>)
 8000598:	f001 fd61 	bl	800205e <HAL_GPIO_WritePin>
 800059c:	e004      	b.n	80005a8 <PCD8544_write+0x30>
     }
     else
     {
           //GPIOB_pin_low(DC_pin);
			 HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,0);
 800059e:	2200      	movs	r2, #0
 80005a0:	2102      	movs	r1, #2
 80005a2:	481a      	ldr	r0, [pc, #104]	; (800060c <PCD8544_write+0x94>)
 80005a4:	f001 fd5b 	bl	800205e <HAL_GPIO_WritePin>
     }

          //GPIOB_pin_low(CE_pin);
		 HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,0);
 80005a8:	2200      	movs	r2, #0
 80005aa:	2110      	movs	r1, #16
 80005ac:	4817      	ldr	r0, [pc, #92]	; (800060c <PCD8544_write+0x94>)
 80005ae:	f001 fd56 	bl	800205e <HAL_GPIO_WritePin>

     while(s > 0)
 80005b2:	e01e      	b.n	80005f2 <PCD8544_write+0x7a>
     {
               //GPIOB_pin_low(SCK_pin);
			     HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,0);
 80005b4:	2200      	movs	r2, #0
 80005b6:	2120      	movs	r1, #32
 80005b8:	4814      	ldr	r0, [pc, #80]	; (800060c <PCD8544_write+0x94>)
 80005ba:	f001 fd50 	bl	800205e <HAL_GPIO_WritePin>

         if((value & 0x80) == 0)
 80005be:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	db05      	blt.n	80005d2 <PCD8544_write+0x5a>
         {
                   //GPIOB_pin_low(SDO_pin);
					 HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,0);
 80005c6:	2200      	movs	r2, #0
 80005c8:	2180      	movs	r1, #128	; 0x80
 80005ca:	4810      	ldr	r0, [pc, #64]	; (800060c <PCD8544_write+0x94>)
 80005cc:	f001 fd47 	bl	800205e <HAL_GPIO_WritePin>
 80005d0:	e004      	b.n	80005dc <PCD8544_write+0x64>
         }
         else
         {
                    //GPIOB_pin_high(SDO_pin);
					  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,1);
 80005d2:	2201      	movs	r2, #1
 80005d4:	2180      	movs	r1, #128	; 0x80
 80005d6:	480d      	ldr	r0, [pc, #52]	; (800060c <PCD8544_write+0x94>)
 80005d8:	f001 fd41 	bl	800205e <HAL_GPIO_WritePin>
         }

         value <<= 1;
 80005dc:	79bb      	ldrb	r3, [r7, #6]
 80005de:	005b      	lsls	r3, r3, #1
 80005e0:	71bb      	strb	r3, [r7, #6]
               //GPIOB_pin_high(SCK_pin);
				 HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,1);
 80005e2:	2201      	movs	r2, #1
 80005e4:	2120      	movs	r1, #32
 80005e6:	4809      	ldr	r0, [pc, #36]	; (800060c <PCD8544_write+0x94>)
 80005e8:	f001 fd39 	bl	800205e <HAL_GPIO_WritePin>
         s--;
 80005ec:	7bfb      	ldrb	r3, [r7, #15]
 80005ee:	3b01      	subs	r3, #1
 80005f0:	73fb      	strb	r3, [r7, #15]
     while(s > 0)
 80005f2:	7bfb      	ldrb	r3, [r7, #15]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d1dd      	bne.n	80005b4 <PCD8544_write+0x3c>
     };

       //GPIOB_pin_high(CE_pin);
		 HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,1);
 80005f8:	2201      	movs	r2, #1
 80005fa:	2110      	movs	r1, #16
 80005fc:	4803      	ldr	r0, [pc, #12]	; (800060c <PCD8544_write+0x94>)
 80005fe:	f001 fd2e 	bl	800205e <HAL_GPIO_WritePin>
}
 8000602:	bf00      	nop
 8000604:	3710      	adds	r7, #16
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	40010800 	.word	0x40010800

08000610 <PCD8544_reset>:


void PCD8544_reset()
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
//     GPIOB_pin_low(RST_pin);
//     delay_us(100);
//     GPIOB_pin_high(RST_pin);
				HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,0);
 8000614:	2200      	movs	r2, #0
 8000616:	2101      	movs	r1, #1
 8000618:	4806      	ldr	r0, [pc, #24]	; (8000634 <PCD8544_reset+0x24>)
 800061a:	f001 fd20 	bl	800205e <HAL_GPIO_WritePin>
				HAL_Delay(100);
 800061e:	2064      	movs	r0, #100	; 0x64
 8000620:	f001 faa6 	bl	8001b70 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,1);
 8000624:	2201      	movs	r2, #1
 8000626:	2101      	movs	r1, #1
 8000628:	4802      	ldr	r0, [pc, #8]	; (8000634 <PCD8544_reset+0x24>)
 800062a:	f001 fd18 	bl	800205e <HAL_GPIO_WritePin>
}
 800062e:	bf00      	nop
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	40010800 	.word	0x40010800

08000638 <PCD8544_init>:


void PCD8544_init()
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
    setup_LCD_GPIOs();
 800063c:	f7ff ff74 	bl	8000528 <setup_LCD_GPIOs>
    PCD8544_reset();
 8000640:	f7ff ffe6 	bl	8000610 <PCD8544_reset>
    PCD8544_write(CMD, (PCD8544_extended_instruction | PCD8544_function_set));
 8000644:	2121      	movs	r1, #33	; 0x21
 8000646:	2000      	movs	r0, #0
 8000648:	f7ff ff96 	bl	8000578 <PCD8544_write>
    PCD8544_write(CMD, (PCD8544_set_bias | 0x02));
 800064c:	2112      	movs	r1, #18
 800064e:	2000      	movs	r0, #0
 8000650:	f7ff ff92 	bl	8000578 <PCD8544_write>
    PCD8544_set_contrast(0x39);
 8000654:	2039      	movs	r0, #57	; 0x39
 8000656:	f000 f833 	bl	80006c0 <PCD8544_set_contrast>
    PCD8544_write(CMD, PCD8544_set_temp);
 800065a:	2104      	movs	r1, #4
 800065c:	2000      	movs	r0, #0
 800065e:	f7ff ff8b 	bl	8000578 <PCD8544_write>
    PCD8544_write(CMD, (PCD8544_display_normal | PCD8544_display_control));
 8000662:	210c      	movs	r1, #12
 8000664:	2000      	movs	r0, #0
 8000666:	f7ff ff87 	bl	8000578 <PCD8544_write>
    PCD8544_write(CMD, PCD8544_function_set);
 800066a:	2120      	movs	r1, #32
 800066c:	2000      	movs	r0, #0
 800066e:	f7ff ff83 	bl	8000578 <PCD8544_write>
    PCD8544_write(CMD, PCD8544_display_all_on);
 8000672:	2101      	movs	r1, #1
 8000674:	2000      	movs	r0, #0
 8000676:	f7ff ff7f 	bl	8000578 <PCD8544_write>
    PCD8544_write(CMD, PCD8544_display_normal);
 800067a:	2104      	movs	r1, #4
 800067c:	2000      	movs	r0, #0
 800067e:	f7ff ff7b 	bl	8000578 <PCD8544_write>
    PCD8544_clear_buffer(OFF);
 8000682:	2000      	movs	r0, #0
 8000684:	f000 f888 	bl	8000798 <PCD8544_clear_buffer>
}
 8000688:	bf00      	nop
 800068a:	bd80      	pop	{r7, pc}

0800068c <PCD8544_backlight_state>:


void PCD8544_backlight_state(unsigned char value)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	4603      	mov	r3, r0
 8000694:	71fb      	strb	r3, [r7, #7]
     if(value != 0)
 8000696:	79fb      	ldrb	r3, [r7, #7]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d005      	beq.n	80006a8 <PCD8544_backlight_state+0x1c>
     {
         //GPIOB_pin_low(BL_pin);
			  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_2,0);
 800069c:	2200      	movs	r2, #0
 800069e:	2104      	movs	r1, #4
 80006a0:	4806      	ldr	r0, [pc, #24]	; (80006bc <PCD8544_backlight_state+0x30>)
 80006a2:	f001 fcdc 	bl	800205e <HAL_GPIO_WritePin>
     else
     {
        // GPIOB_pin_high(BL_pin);
			 HAL_GPIO_WritePin(GPIOA,GPIO_PIN_2,1);
     }
}
 80006a6:	e004      	b.n	80006b2 <PCD8544_backlight_state+0x26>
			 HAL_GPIO_WritePin(GPIOA,GPIO_PIN_2,1);
 80006a8:	2201      	movs	r2, #1
 80006aa:	2104      	movs	r1, #4
 80006ac:	4803      	ldr	r0, [pc, #12]	; (80006bc <PCD8544_backlight_state+0x30>)
 80006ae:	f001 fcd6 	bl	800205e <HAL_GPIO_WritePin>
}
 80006b2:	bf00      	nop
 80006b4:	3708      	adds	r7, #8
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40010800 	.word	0x40010800

080006c0 <PCD8544_set_contrast>:


void PCD8544_set_contrast(unsigned char value)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	4603      	mov	r3, r0
 80006c8:	71fb      	strb	r3, [r7, #7]
    if(value >= 0x7F)
 80006ca:	79fb      	ldrb	r3, [r7, #7]
 80006cc:	2b7e      	cmp	r3, #126	; 0x7e
 80006ce:	d901      	bls.n	80006d4 <PCD8544_set_contrast+0x14>
    {
       value = 0x7F;
 80006d0:	237f      	movs	r3, #127	; 0x7f
 80006d2:	71fb      	strb	r3, [r7, #7]
    }

    PCD8544_write(CMD, (PCD8544_extended_instruction | PCD8544_function_set));
 80006d4:	2121      	movs	r1, #33	; 0x21
 80006d6:	2000      	movs	r0, #0
 80006d8:	f7ff ff4e 	bl	8000578 <PCD8544_write>
    PCD8544_write(CMD, (PCD8544_set_VOP | value));
 80006dc:	79fb      	ldrb	r3, [r7, #7]
 80006de:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	4619      	mov	r1, r3
 80006e6:	2000      	movs	r0, #0
 80006e8:	f7ff ff46 	bl	8000578 <PCD8544_write>
    PCD8544_write(CMD, PCD8544_function_set);
 80006ec:	2120      	movs	r1, #32
 80006ee:	2000      	movs	r0, #0
 80006f0:	f7ff ff42 	bl	8000578 <PCD8544_write>
}
 80006f4:	bf00      	nop
 80006f6:	3708      	adds	r7, #8
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}

080006fc <PCD8544_set_cursor>:


void PCD8544_set_cursor(unsigned char x_pos, unsigned char y_pos)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	4603      	mov	r3, r0
 8000704:	460a      	mov	r2, r1
 8000706:	71fb      	strb	r3, [r7, #7]
 8000708:	4613      	mov	r3, r2
 800070a:	71bb      	strb	r3, [r7, #6]
    PCD8544_write(CMD, (PCD8544_set_X_addr | x_pos));
 800070c:	79fb      	ldrb	r3, [r7, #7]
 800070e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000712:	b2db      	uxtb	r3, r3
 8000714:	4619      	mov	r1, r3
 8000716:	2000      	movs	r0, #0
 8000718:	f7ff ff2e 	bl	8000578 <PCD8544_write>
    PCD8544_write(CMD, (PCD8544_set_Y_addr | y_pos));
 800071c:	79bb      	ldrb	r3, [r7, #6]
 800071e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000722:	b2db      	uxtb	r3, r3
 8000724:	4619      	mov	r1, r3
 8000726:	2000      	movs	r0, #0
 8000728:	f7ff ff26 	bl	8000578 <PCD8544_write>
}
 800072c:	bf00      	nop
 800072e:	3708      	adds	r7, #8
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}

08000734 <PCD8544_print_char>:


void PCD8544_print_char(unsigned char ch, unsigned char colour)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b084      	sub	sp, #16
 8000738:	af00      	add	r7, sp, #0
 800073a:	4603      	mov	r3, r0
 800073c:	460a      	mov	r2, r1
 800073e:	71fb      	strb	r3, [r7, #7]
 8000740:	4613      	mov	r3, r2
 8000742:	71bb      	strb	r3, [r7, #6]
     unsigned char s = 0;
 8000744:	2300      	movs	r3, #0
 8000746:	73fb      	strb	r3, [r7, #15]
     unsigned char chr = 0;
 8000748:	2300      	movs	r3, #0
 800074a:	73bb      	strb	r3, [r7, #14]

     for(s = 0; s <= 4; s++)
 800074c:	2300      	movs	r3, #0
 800074e:	73fb      	strb	r3, [r7, #15]
 8000750:	e019      	b.n	8000786 <PCD8544_print_char+0x52>
     {
           chr = font[(ch - 0x20)][s];
 8000752:	79fb      	ldrb	r3, [r7, #7]
 8000754:	f1a3 0220 	sub.w	r2, r3, #32
 8000758:	7bf9      	ldrb	r1, [r7, #15]
 800075a:	480e      	ldr	r0, [pc, #56]	; (8000794 <PCD8544_print_char+0x60>)
 800075c:	4613      	mov	r3, r2
 800075e:	009b      	lsls	r3, r3, #2
 8000760:	4413      	add	r3, r2
 8000762:	4403      	add	r3, r0
 8000764:	440b      	add	r3, r1
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	73bb      	strb	r3, [r7, #14]
           if(colour == BLACK)
 800076a:	79bb      	ldrb	r3, [r7, #6]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d102      	bne.n	8000776 <PCD8544_print_char+0x42>
           {
               chr = ~chr;
 8000770:	7bbb      	ldrb	r3, [r7, #14]
 8000772:	43db      	mvns	r3, r3
 8000774:	73bb      	strb	r3, [r7, #14]
           }
           PCD8544_write(DAT, chr);
 8000776:	7bbb      	ldrb	r3, [r7, #14]
 8000778:	4619      	mov	r1, r3
 800077a:	2001      	movs	r0, #1
 800077c:	f7ff fefc 	bl	8000578 <PCD8544_write>
     for(s = 0; s <= 4; s++)
 8000780:	7bfb      	ldrb	r3, [r7, #15]
 8000782:	3301      	adds	r3, #1
 8000784:	73fb      	strb	r3, [r7, #15]
 8000786:	7bfb      	ldrb	r3, [r7, #15]
 8000788:	2b04      	cmp	r3, #4
 800078a:	d9e2      	bls.n	8000752 <PCD8544_print_char+0x1e>
     }
}
 800078c:	bf00      	nop
 800078e:	3710      	adds	r7, #16
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	08003500 	.word	0x08003500

08000798 <PCD8544_clear_buffer>:
    }
}


void PCD8544_clear_buffer(unsigned char colour)
{
 8000798:	b480      	push	{r7}
 800079a:	b085      	sub	sp, #20
 800079c:	af00      	add	r7, sp, #0
 800079e:	4603      	mov	r3, r0
 80007a0:	71fb      	strb	r3, [r7, #7]
    unsigned char x_pos = 0;
 80007a2:	2300      	movs	r3, #0
 80007a4:	73fb      	strb	r3, [r7, #15]
    unsigned char y_pos = 0;
 80007a6:	2300      	movs	r3, #0
 80007a8:	73bb      	strb	r3, [r7, #14]

    for(x_pos; x_pos < X_max; x_pos++)
 80007aa:	e013      	b.n	80007d4 <PCD8544_clear_buffer+0x3c>
    {
        for(y_pos; y_pos < Rows; y_pos++)
        {
            PCD8544_buffer[x_pos][y_pos] = colour;
 80007ac:	7bfa      	ldrb	r2, [r7, #15]
 80007ae:	7bb9      	ldrb	r1, [r7, #14]
 80007b0:	480c      	ldr	r0, [pc, #48]	; (80007e4 <PCD8544_clear_buffer+0x4c>)
 80007b2:	4613      	mov	r3, r2
 80007b4:	005b      	lsls	r3, r3, #1
 80007b6:	4413      	add	r3, r2
 80007b8:	005b      	lsls	r3, r3, #1
 80007ba:	4403      	add	r3, r0
 80007bc:	440b      	add	r3, r1
 80007be:	79fa      	ldrb	r2, [r7, #7]
 80007c0:	701a      	strb	r2, [r3, #0]
        for(y_pos; y_pos < Rows; y_pos++)
 80007c2:	7bbb      	ldrb	r3, [r7, #14]
 80007c4:	3301      	adds	r3, #1
 80007c6:	73bb      	strb	r3, [r7, #14]
 80007c8:	7bbb      	ldrb	r3, [r7, #14]
 80007ca:	2b05      	cmp	r3, #5
 80007cc:	d9ee      	bls.n	80007ac <PCD8544_clear_buffer+0x14>
    for(x_pos; x_pos < X_max; x_pos++)
 80007ce:	7bfb      	ldrb	r3, [r7, #15]
 80007d0:	3301      	adds	r3, #1
 80007d2:	73fb      	strb	r3, [r7, #15]
 80007d4:	7bfb      	ldrb	r3, [r7, #15]
 80007d6:	2b53      	cmp	r3, #83	; 0x53
 80007d8:	d9f6      	bls.n	80007c8 <PCD8544_clear_buffer+0x30>
        }
    }
}
 80007da:	bf00      	nop
 80007dc:	3714      	adds	r7, #20
 80007de:	46bd      	mov	sp, r7
 80007e0:	bc80      	pop	{r7}
 80007e2:	4770      	bx	lr
 80007e4:	200000a8 	.word	0x200000a8

080007e8 <PCD8544_clear_screen>:


void PCD8544_clear_screen(unsigned char colour)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b084      	sub	sp, #16
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	4603      	mov	r3, r0
 80007f0:	71fb      	strb	r3, [r7, #7]
    unsigned char x_pos = 0;
 80007f2:	2300      	movs	r3, #0
 80007f4:	73fb      	strb	r3, [r7, #15]
    unsigned char y_pos = 0;
 80007f6:	2300      	movs	r3, #0
 80007f8:	73bb      	strb	r3, [r7, #14]

    for(y_pos = 0; y_pos < Rows; y_pos++)
 80007fa:	2300      	movs	r3, #0
 80007fc:	73bb      	strb	r3, [r7, #14]
 80007fe:	e011      	b.n	8000824 <PCD8544_clear_screen+0x3c>
    {
        for(x_pos = 0; x_pos < X_max; x_pos++)
 8000800:	2300      	movs	r3, #0
 8000802:	73fb      	strb	r3, [r7, #15]
 8000804:	e008      	b.n	8000818 <PCD8544_clear_screen+0x30>
        {
            PCD8544_print_string(x_pos, y_pos, " ", colour);
 8000806:	79fb      	ldrb	r3, [r7, #7]
 8000808:	7bb9      	ldrb	r1, [r7, #14]
 800080a:	7bf8      	ldrb	r0, [r7, #15]
 800080c:	4a09      	ldr	r2, [pc, #36]	; (8000834 <PCD8544_clear_screen+0x4c>)
 800080e:	f000 f813 	bl	8000838 <PCD8544_print_string>
        for(x_pos = 0; x_pos < X_max; x_pos++)
 8000812:	7bfb      	ldrb	r3, [r7, #15]
 8000814:	3301      	adds	r3, #1
 8000816:	73fb      	strb	r3, [r7, #15]
 8000818:	7bfb      	ldrb	r3, [r7, #15]
 800081a:	2b53      	cmp	r3, #83	; 0x53
 800081c:	d9f3      	bls.n	8000806 <PCD8544_clear_screen+0x1e>
    for(y_pos = 0; y_pos < Rows; y_pos++)
 800081e:	7bbb      	ldrb	r3, [r7, #14]
 8000820:	3301      	adds	r3, #1
 8000822:	73bb      	strb	r3, [r7, #14]
 8000824:	7bbb      	ldrb	r3, [r7, #14]
 8000826:	2b05      	cmp	r3, #5
 8000828:	d9ea      	bls.n	8000800 <PCD8544_clear_screen+0x18>
        }
    }
}
 800082a:	bf00      	nop
 800082c:	3710      	adds	r7, #16
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	0800338c 	.word	0x0800338c

08000838 <PCD8544_print_string>:

void PCD8544_print_string(unsigned char x_pos, unsigned char y_pos, unsigned char *ch, unsigned char colour)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	603a      	str	r2, [r7, #0]
 8000840:	461a      	mov	r2, r3
 8000842:	4603      	mov	r3, r0
 8000844:	71fb      	strb	r3, [r7, #7]
 8000846:	460b      	mov	r3, r1
 8000848:	71bb      	strb	r3, [r7, #6]
 800084a:	4613      	mov	r3, r2
 800084c:	717b      	strb	r3, [r7, #5]
    PCD8544_set_cursor(x_pos, y_pos);
 800084e:	79ba      	ldrb	r2, [r7, #6]
 8000850:	79fb      	ldrb	r3, [r7, #7]
 8000852:	4611      	mov	r1, r2
 8000854:	4618      	mov	r0, r3
 8000856:	f7ff ff51 	bl	80006fc <PCD8544_set_cursor>

    do
    {
       PCD8544_print_char(*ch++, colour);
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	1c5a      	adds	r2, r3, #1
 800085e:	603a      	str	r2, [r7, #0]
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	797a      	ldrb	r2, [r7, #5]
 8000864:	4611      	mov	r1, r2
 8000866:	4618      	mov	r0, r3
 8000868:	f7ff ff64 	bl	8000734 <PCD8544_print_char>
    }while((*ch >= 0x20) && (*ch <= 0x7F));
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	2b1f      	cmp	r3, #31
 8000872:	d904      	bls.n	800087e <PCD8544_print_string+0x46>
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	b25b      	sxtb	r3, r3
 800087a:	2b00      	cmp	r3, #0
 800087c:	daed      	bge.n	800085a <PCD8544_print_string+0x22>
}
 800087e:	bf00      	nop
 8000880:	3708      	adds	r7, #8
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
	...

08000888 <print_int>:
     }
}


void print_int(unsigned char x_pos, unsigned char y_pos, signed long value, unsigned char colour)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b084      	sub	sp, #16
 800088c:	af00      	add	r7, sp, #0
 800088e:	603a      	str	r2, [r7, #0]
 8000890:	461a      	mov	r2, r3
 8000892:	4603      	mov	r3, r0
 8000894:	71fb      	strb	r3, [r7, #7]
 8000896:	460b      	mov	r3, r1
 8000898:	71bb      	strb	r3, [r7, #6]
 800089a:	4613      	mov	r3, r2
 800089c:	717b      	strb	r3, [r7, #5]
    unsigned char ch = 0x00;
 800089e:	2300      	movs	r3, #0
 80008a0:	73fb      	strb	r3, [r7, #15]

    if(value < 0)
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	da0e      	bge.n	80008c6 <print_int+0x3e>
    {
        PCD8544_set_cursor(x_pos, y_pos);
 80008a8:	79ba      	ldrb	r2, [r7, #6]
 80008aa:	79fb      	ldrb	r3, [r7, #7]
 80008ac:	4611      	mov	r1, r2
 80008ae:	4618      	mov	r0, r3
 80008b0:	f7ff ff24 	bl	80006fc <PCD8544_set_cursor>
        PCD8544_print_char(0x2D, colour);
 80008b4:	797b      	ldrb	r3, [r7, #5]
 80008b6:	4619      	mov	r1, r3
 80008b8:	202d      	movs	r0, #45	; 0x2d
 80008ba:	f7ff ff3b 	bl	8000734 <PCD8544_print_char>
        value = -value;
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	425b      	negs	r3, r3
 80008c2:	603b      	str	r3, [r7, #0]
 80008c4:	e00a      	b.n	80008dc <print_int+0x54>
    }
    else
    {
        PCD8544_set_cursor(x_pos, y_pos);
 80008c6:	79ba      	ldrb	r2, [r7, #6]
 80008c8:	79fb      	ldrb	r3, [r7, #7]
 80008ca:	4611      	mov	r1, r2
 80008cc:	4618      	mov	r0, r3
 80008ce:	f7ff ff15 	bl	80006fc <PCD8544_set_cursor>
        PCD8544_print_char(0x20, colour);
 80008d2:	797b      	ldrb	r3, [r7, #5]
 80008d4:	4619      	mov	r1, r3
 80008d6:	2020      	movs	r0, #32
 80008d8:	f7ff ff2c 	bl	8000734 <PCD8544_print_char>
    }

    if(value > 9999)
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	f242 720f 	movw	r2, #9999	; 0x270f
 80008e2:	4293      	cmp	r3, r2
 80008e4:	f340 809f 	ble.w	8000a26 <print_int+0x19e>
    {
        ch = (value / 10000);
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	4a9e      	ldr	r2, [pc, #632]	; (8000b64 <print_int+0x2dc>)
 80008ec:	fb82 1203 	smull	r1, r2, r2, r3
 80008f0:	1312      	asrs	r2, r2, #12
 80008f2:	17db      	asrs	r3, r3, #31
 80008f4:	1ad3      	subs	r3, r2, r3
 80008f6:	73fb      	strb	r3, [r7, #15]
        PCD8544_set_cursor((x_pos + 6), y_pos);
 80008f8:	79fb      	ldrb	r3, [r7, #7]
 80008fa:	3306      	adds	r3, #6
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	79ba      	ldrb	r2, [r7, #6]
 8000900:	4611      	mov	r1, r2
 8000902:	4618      	mov	r0, r3
 8000904:	f7ff fefa 	bl	80006fc <PCD8544_set_cursor>
        PCD8544_print_char((48 + ch), colour);
 8000908:	7bfb      	ldrb	r3, [r7, #15]
 800090a:	3330      	adds	r3, #48	; 0x30
 800090c:	b2db      	uxtb	r3, r3
 800090e:	797a      	ldrb	r2, [r7, #5]
 8000910:	4611      	mov	r1, r2
 8000912:	4618      	mov	r0, r3
 8000914:	f7ff ff0e 	bl	8000734 <PCD8544_print_char>

        ch = ((value % 10000)/ 1000);
 8000918:	683a      	ldr	r2, [r7, #0]
 800091a:	4b92      	ldr	r3, [pc, #584]	; (8000b64 <print_int+0x2dc>)
 800091c:	fb83 1302 	smull	r1, r3, r3, r2
 8000920:	1319      	asrs	r1, r3, #12
 8000922:	17d3      	asrs	r3, r2, #31
 8000924:	1acb      	subs	r3, r1, r3
 8000926:	f242 7110 	movw	r1, #10000	; 0x2710
 800092a:	fb01 f303 	mul.w	r3, r1, r3
 800092e:	1ad3      	subs	r3, r2, r3
 8000930:	4a8d      	ldr	r2, [pc, #564]	; (8000b68 <print_int+0x2e0>)
 8000932:	fb82 1203 	smull	r1, r2, r2, r3
 8000936:	1192      	asrs	r2, r2, #6
 8000938:	17db      	asrs	r3, r3, #31
 800093a:	1ad3      	subs	r3, r2, r3
 800093c:	73fb      	strb	r3, [r7, #15]
        PCD8544_set_cursor((x_pos + 12), y_pos);
 800093e:	79fb      	ldrb	r3, [r7, #7]
 8000940:	330c      	adds	r3, #12
 8000942:	b2db      	uxtb	r3, r3
 8000944:	79ba      	ldrb	r2, [r7, #6]
 8000946:	4611      	mov	r1, r2
 8000948:	4618      	mov	r0, r3
 800094a:	f7ff fed7 	bl	80006fc <PCD8544_set_cursor>
        PCD8544_print_char((48 + ch), colour);
 800094e:	7bfb      	ldrb	r3, [r7, #15]
 8000950:	3330      	adds	r3, #48	; 0x30
 8000952:	b2db      	uxtb	r3, r3
 8000954:	797a      	ldrb	r2, [r7, #5]
 8000956:	4611      	mov	r1, r2
 8000958:	4618      	mov	r0, r3
 800095a:	f7ff feeb 	bl	8000734 <PCD8544_print_char>

        ch = ((value % 1000) / 100);
 800095e:	683a      	ldr	r2, [r7, #0]
 8000960:	4b81      	ldr	r3, [pc, #516]	; (8000b68 <print_int+0x2e0>)
 8000962:	fb83 1302 	smull	r1, r3, r3, r2
 8000966:	1199      	asrs	r1, r3, #6
 8000968:	17d3      	asrs	r3, r2, #31
 800096a:	1acb      	subs	r3, r1, r3
 800096c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000970:	fb01 f303 	mul.w	r3, r1, r3
 8000974:	1ad3      	subs	r3, r2, r3
 8000976:	4a7d      	ldr	r2, [pc, #500]	; (8000b6c <print_int+0x2e4>)
 8000978:	fb82 1203 	smull	r1, r2, r2, r3
 800097c:	1152      	asrs	r2, r2, #5
 800097e:	17db      	asrs	r3, r3, #31
 8000980:	1ad3      	subs	r3, r2, r3
 8000982:	73fb      	strb	r3, [r7, #15]
        PCD8544_set_cursor((x_pos + 18), y_pos);
 8000984:	79fb      	ldrb	r3, [r7, #7]
 8000986:	3312      	adds	r3, #18
 8000988:	b2db      	uxtb	r3, r3
 800098a:	79ba      	ldrb	r2, [r7, #6]
 800098c:	4611      	mov	r1, r2
 800098e:	4618      	mov	r0, r3
 8000990:	f7ff feb4 	bl	80006fc <PCD8544_set_cursor>
        PCD8544_print_char((48 + ch), colour);
 8000994:	7bfb      	ldrb	r3, [r7, #15]
 8000996:	3330      	adds	r3, #48	; 0x30
 8000998:	b2db      	uxtb	r3, r3
 800099a:	797a      	ldrb	r2, [r7, #5]
 800099c:	4611      	mov	r1, r2
 800099e:	4618      	mov	r0, r3
 80009a0:	f7ff fec8 	bl	8000734 <PCD8544_print_char>

        ch = ((value % 100) / 10);
 80009a4:	683a      	ldr	r2, [r7, #0]
 80009a6:	4b71      	ldr	r3, [pc, #452]	; (8000b6c <print_int+0x2e4>)
 80009a8:	fb83 1302 	smull	r1, r3, r3, r2
 80009ac:	1159      	asrs	r1, r3, #5
 80009ae:	17d3      	asrs	r3, r2, #31
 80009b0:	1acb      	subs	r3, r1, r3
 80009b2:	2164      	movs	r1, #100	; 0x64
 80009b4:	fb01 f303 	mul.w	r3, r1, r3
 80009b8:	1ad3      	subs	r3, r2, r3
 80009ba:	4a6d      	ldr	r2, [pc, #436]	; (8000b70 <print_int+0x2e8>)
 80009bc:	fb82 1203 	smull	r1, r2, r2, r3
 80009c0:	1092      	asrs	r2, r2, #2
 80009c2:	17db      	asrs	r3, r3, #31
 80009c4:	1ad3      	subs	r3, r2, r3
 80009c6:	73fb      	strb	r3, [r7, #15]
        PCD8544_set_cursor((x_pos + 24), y_pos);
 80009c8:	79fb      	ldrb	r3, [r7, #7]
 80009ca:	3318      	adds	r3, #24
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	79ba      	ldrb	r2, [r7, #6]
 80009d0:	4611      	mov	r1, r2
 80009d2:	4618      	mov	r0, r3
 80009d4:	f7ff fe92 	bl	80006fc <PCD8544_set_cursor>
        PCD8544_print_char((48 + ch), colour);
 80009d8:	7bfb      	ldrb	r3, [r7, #15]
 80009da:	3330      	adds	r3, #48	; 0x30
 80009dc:	b2db      	uxtb	r3, r3
 80009de:	797a      	ldrb	r2, [r7, #5]
 80009e0:	4611      	mov	r1, r2
 80009e2:	4618      	mov	r0, r3
 80009e4:	f7ff fea6 	bl	8000734 <PCD8544_print_char>

        ch = (value % 10);
 80009e8:	683a      	ldr	r2, [r7, #0]
 80009ea:	4b61      	ldr	r3, [pc, #388]	; (8000b70 <print_int+0x2e8>)
 80009ec:	fb83 1302 	smull	r1, r3, r3, r2
 80009f0:	1099      	asrs	r1, r3, #2
 80009f2:	17d3      	asrs	r3, r2, #31
 80009f4:	1ac9      	subs	r1, r1, r3
 80009f6:	460b      	mov	r3, r1
 80009f8:	009b      	lsls	r3, r3, #2
 80009fa:	440b      	add	r3, r1
 80009fc:	005b      	lsls	r3, r3, #1
 80009fe:	1ad1      	subs	r1, r2, r3
 8000a00:	460b      	mov	r3, r1
 8000a02:	73fb      	strb	r3, [r7, #15]
        PCD8544_set_cursor((x_pos + 30), y_pos);
 8000a04:	79fb      	ldrb	r3, [r7, #7]
 8000a06:	331e      	adds	r3, #30
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	79ba      	ldrb	r2, [r7, #6]
 8000a0c:	4611      	mov	r1, r2
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f7ff fe74 	bl	80006fc <PCD8544_set_cursor>
        PCD8544_print_char((48 + ch), colour);
 8000a14:	7bfb      	ldrb	r3, [r7, #15]
 8000a16:	3330      	adds	r3, #48	; 0x30
 8000a18:	b2db      	uxtb	r3, r3
 8000a1a:	797a      	ldrb	r2, [r7, #5]
 8000a1c:	4611      	mov	r1, r2
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f7ff fe88 	bl	8000734 <PCD8544_print_char>
        PCD8544_print_char(0x20, colour);

        PCD8544_set_cursor((x_pos + 30), y_pos);
        PCD8544_print_char(0x20, colour);
    }
}
 8000a24:	e1ed      	b.n	8000e02 <print_int+0x57a>
    else if((value > 999) && (value <= 9999))
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a2c:	f2c0 80a2 	blt.w	8000b74 <print_int+0x2ec>
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	f242 720f 	movw	r2, #9999	; 0x270f
 8000a36:	4293      	cmp	r3, r2
 8000a38:	f300 809c 	bgt.w	8000b74 <print_int+0x2ec>
        ch = ((value % 10000)/ 1000);
 8000a3c:	683a      	ldr	r2, [r7, #0]
 8000a3e:	4b49      	ldr	r3, [pc, #292]	; (8000b64 <print_int+0x2dc>)
 8000a40:	fb83 1302 	smull	r1, r3, r3, r2
 8000a44:	1319      	asrs	r1, r3, #12
 8000a46:	17d3      	asrs	r3, r2, #31
 8000a48:	1acb      	subs	r3, r1, r3
 8000a4a:	f242 7110 	movw	r1, #10000	; 0x2710
 8000a4e:	fb01 f303 	mul.w	r3, r1, r3
 8000a52:	1ad3      	subs	r3, r2, r3
 8000a54:	4a44      	ldr	r2, [pc, #272]	; (8000b68 <print_int+0x2e0>)
 8000a56:	fb82 1203 	smull	r1, r2, r2, r3
 8000a5a:	1192      	asrs	r2, r2, #6
 8000a5c:	17db      	asrs	r3, r3, #31
 8000a5e:	1ad3      	subs	r3, r2, r3
 8000a60:	73fb      	strb	r3, [r7, #15]
        PCD8544_set_cursor((x_pos + 6), y_pos);
 8000a62:	79fb      	ldrb	r3, [r7, #7]
 8000a64:	3306      	adds	r3, #6
 8000a66:	b2db      	uxtb	r3, r3
 8000a68:	79ba      	ldrb	r2, [r7, #6]
 8000a6a:	4611      	mov	r1, r2
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f7ff fe45 	bl	80006fc <PCD8544_set_cursor>
        PCD8544_print_char((48 + ch), colour);
 8000a72:	7bfb      	ldrb	r3, [r7, #15]
 8000a74:	3330      	adds	r3, #48	; 0x30
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	797a      	ldrb	r2, [r7, #5]
 8000a7a:	4611      	mov	r1, r2
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f7ff fe59 	bl	8000734 <PCD8544_print_char>
        ch = ((value % 1000) / 100);
 8000a82:	683a      	ldr	r2, [r7, #0]
 8000a84:	4b38      	ldr	r3, [pc, #224]	; (8000b68 <print_int+0x2e0>)
 8000a86:	fb83 1302 	smull	r1, r3, r3, r2
 8000a8a:	1199      	asrs	r1, r3, #6
 8000a8c:	17d3      	asrs	r3, r2, #31
 8000a8e:	1acb      	subs	r3, r1, r3
 8000a90:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a94:	fb01 f303 	mul.w	r3, r1, r3
 8000a98:	1ad3      	subs	r3, r2, r3
 8000a9a:	4a34      	ldr	r2, [pc, #208]	; (8000b6c <print_int+0x2e4>)
 8000a9c:	fb82 1203 	smull	r1, r2, r2, r3
 8000aa0:	1152      	asrs	r2, r2, #5
 8000aa2:	17db      	asrs	r3, r3, #31
 8000aa4:	1ad3      	subs	r3, r2, r3
 8000aa6:	73fb      	strb	r3, [r7, #15]
        PCD8544_set_cursor((x_pos + 12), y_pos);
 8000aa8:	79fb      	ldrb	r3, [r7, #7]
 8000aaa:	330c      	adds	r3, #12
 8000aac:	b2db      	uxtb	r3, r3
 8000aae:	79ba      	ldrb	r2, [r7, #6]
 8000ab0:	4611      	mov	r1, r2
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f7ff fe22 	bl	80006fc <PCD8544_set_cursor>
        PCD8544_print_char((48 + ch), colour);
 8000ab8:	7bfb      	ldrb	r3, [r7, #15]
 8000aba:	3330      	adds	r3, #48	; 0x30
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	797a      	ldrb	r2, [r7, #5]
 8000ac0:	4611      	mov	r1, r2
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f7ff fe36 	bl	8000734 <PCD8544_print_char>
        ch = ((value % 100) / 10);
 8000ac8:	683a      	ldr	r2, [r7, #0]
 8000aca:	4b28      	ldr	r3, [pc, #160]	; (8000b6c <print_int+0x2e4>)
 8000acc:	fb83 1302 	smull	r1, r3, r3, r2
 8000ad0:	1159      	asrs	r1, r3, #5
 8000ad2:	17d3      	asrs	r3, r2, #31
 8000ad4:	1acb      	subs	r3, r1, r3
 8000ad6:	2164      	movs	r1, #100	; 0x64
 8000ad8:	fb01 f303 	mul.w	r3, r1, r3
 8000adc:	1ad3      	subs	r3, r2, r3
 8000ade:	4a24      	ldr	r2, [pc, #144]	; (8000b70 <print_int+0x2e8>)
 8000ae0:	fb82 1203 	smull	r1, r2, r2, r3
 8000ae4:	1092      	asrs	r2, r2, #2
 8000ae6:	17db      	asrs	r3, r3, #31
 8000ae8:	1ad3      	subs	r3, r2, r3
 8000aea:	73fb      	strb	r3, [r7, #15]
        PCD8544_set_cursor((x_pos + 18), y_pos);
 8000aec:	79fb      	ldrb	r3, [r7, #7]
 8000aee:	3312      	adds	r3, #18
 8000af0:	b2db      	uxtb	r3, r3
 8000af2:	79ba      	ldrb	r2, [r7, #6]
 8000af4:	4611      	mov	r1, r2
 8000af6:	4618      	mov	r0, r3
 8000af8:	f7ff fe00 	bl	80006fc <PCD8544_set_cursor>
        PCD8544_print_char((48 + ch), colour);
 8000afc:	7bfb      	ldrb	r3, [r7, #15]
 8000afe:	3330      	adds	r3, #48	; 0x30
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	797a      	ldrb	r2, [r7, #5]
 8000b04:	4611      	mov	r1, r2
 8000b06:	4618      	mov	r0, r3
 8000b08:	f7ff fe14 	bl	8000734 <PCD8544_print_char>
        ch = (value % 10);
 8000b0c:	683a      	ldr	r2, [r7, #0]
 8000b0e:	4b18      	ldr	r3, [pc, #96]	; (8000b70 <print_int+0x2e8>)
 8000b10:	fb83 1302 	smull	r1, r3, r3, r2
 8000b14:	1099      	asrs	r1, r3, #2
 8000b16:	17d3      	asrs	r3, r2, #31
 8000b18:	1ac9      	subs	r1, r1, r3
 8000b1a:	460b      	mov	r3, r1
 8000b1c:	009b      	lsls	r3, r3, #2
 8000b1e:	440b      	add	r3, r1
 8000b20:	005b      	lsls	r3, r3, #1
 8000b22:	1ad1      	subs	r1, r2, r3
 8000b24:	460b      	mov	r3, r1
 8000b26:	73fb      	strb	r3, [r7, #15]
        PCD8544_set_cursor((x_pos + 24), y_pos);
 8000b28:	79fb      	ldrb	r3, [r7, #7]
 8000b2a:	3318      	adds	r3, #24
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	79ba      	ldrb	r2, [r7, #6]
 8000b30:	4611      	mov	r1, r2
 8000b32:	4618      	mov	r0, r3
 8000b34:	f7ff fde2 	bl	80006fc <PCD8544_set_cursor>
        PCD8544_print_char((48 + ch), colour);
 8000b38:	7bfb      	ldrb	r3, [r7, #15]
 8000b3a:	3330      	adds	r3, #48	; 0x30
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	797a      	ldrb	r2, [r7, #5]
 8000b40:	4611      	mov	r1, r2
 8000b42:	4618      	mov	r0, r3
 8000b44:	f7ff fdf6 	bl	8000734 <PCD8544_print_char>
        PCD8544_set_cursor((x_pos + 30), y_pos);
 8000b48:	79fb      	ldrb	r3, [r7, #7]
 8000b4a:	331e      	adds	r3, #30
 8000b4c:	b2db      	uxtb	r3, r3
 8000b4e:	79ba      	ldrb	r2, [r7, #6]
 8000b50:	4611      	mov	r1, r2
 8000b52:	4618      	mov	r0, r3
 8000b54:	f7ff fdd2 	bl	80006fc <PCD8544_set_cursor>
        PCD8544_print_char(0x20, colour);
 8000b58:	797b      	ldrb	r3, [r7, #5]
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	2020      	movs	r0, #32
 8000b5e:	f7ff fde9 	bl	8000734 <PCD8544_print_char>
 8000b62:	e14e      	b.n	8000e02 <print_int+0x57a>
 8000b64:	68db8bad 	.word	0x68db8bad
 8000b68:	10624dd3 	.word	0x10624dd3
 8000b6c:	51eb851f 	.word	0x51eb851f
 8000b70:	66666667 	.word	0x66666667
    else if((value > 99) && (value <= 999))
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	2b63      	cmp	r3, #99	; 0x63
 8000b78:	f340 8082 	ble.w	8000c80 <print_int+0x3f8>
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000b82:	da7d      	bge.n	8000c80 <print_int+0x3f8>
        ch = ((value % 1000) / 100);
 8000b84:	683a      	ldr	r2, [r7, #0]
 8000b86:	4ba1      	ldr	r3, [pc, #644]	; (8000e0c <print_int+0x584>)
 8000b88:	fb83 1302 	smull	r1, r3, r3, r2
 8000b8c:	1199      	asrs	r1, r3, #6
 8000b8e:	17d3      	asrs	r3, r2, #31
 8000b90:	1acb      	subs	r3, r1, r3
 8000b92:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b96:	fb01 f303 	mul.w	r3, r1, r3
 8000b9a:	1ad3      	subs	r3, r2, r3
 8000b9c:	4a9c      	ldr	r2, [pc, #624]	; (8000e10 <print_int+0x588>)
 8000b9e:	fb82 1203 	smull	r1, r2, r2, r3
 8000ba2:	1152      	asrs	r2, r2, #5
 8000ba4:	17db      	asrs	r3, r3, #31
 8000ba6:	1ad3      	subs	r3, r2, r3
 8000ba8:	73fb      	strb	r3, [r7, #15]
        PCD8544_set_cursor((x_pos + 6), y_pos);
 8000baa:	79fb      	ldrb	r3, [r7, #7]
 8000bac:	3306      	adds	r3, #6
 8000bae:	b2db      	uxtb	r3, r3
 8000bb0:	79ba      	ldrb	r2, [r7, #6]
 8000bb2:	4611      	mov	r1, r2
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f7ff fda1 	bl	80006fc <PCD8544_set_cursor>
        PCD8544_print_char((48 + ch), colour);
 8000bba:	7bfb      	ldrb	r3, [r7, #15]
 8000bbc:	3330      	adds	r3, #48	; 0x30
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	797a      	ldrb	r2, [r7, #5]
 8000bc2:	4611      	mov	r1, r2
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f7ff fdb5 	bl	8000734 <PCD8544_print_char>
        ch = ((value % 100) / 10);
 8000bca:	683a      	ldr	r2, [r7, #0]
 8000bcc:	4b90      	ldr	r3, [pc, #576]	; (8000e10 <print_int+0x588>)
 8000bce:	fb83 1302 	smull	r1, r3, r3, r2
 8000bd2:	1159      	asrs	r1, r3, #5
 8000bd4:	17d3      	asrs	r3, r2, #31
 8000bd6:	1acb      	subs	r3, r1, r3
 8000bd8:	2164      	movs	r1, #100	; 0x64
 8000bda:	fb01 f303 	mul.w	r3, r1, r3
 8000bde:	1ad3      	subs	r3, r2, r3
 8000be0:	4a8c      	ldr	r2, [pc, #560]	; (8000e14 <print_int+0x58c>)
 8000be2:	fb82 1203 	smull	r1, r2, r2, r3
 8000be6:	1092      	asrs	r2, r2, #2
 8000be8:	17db      	asrs	r3, r3, #31
 8000bea:	1ad3      	subs	r3, r2, r3
 8000bec:	73fb      	strb	r3, [r7, #15]
        PCD8544_set_cursor((x_pos + 12), y_pos);
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	330c      	adds	r3, #12
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	79ba      	ldrb	r2, [r7, #6]
 8000bf6:	4611      	mov	r1, r2
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f7ff fd7f 	bl	80006fc <PCD8544_set_cursor>
        PCD8544_print_char((48 + ch), colour);
 8000bfe:	7bfb      	ldrb	r3, [r7, #15]
 8000c00:	3330      	adds	r3, #48	; 0x30
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	797a      	ldrb	r2, [r7, #5]
 8000c06:	4611      	mov	r1, r2
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f7ff fd93 	bl	8000734 <PCD8544_print_char>
        ch = (value % 10);
 8000c0e:	683a      	ldr	r2, [r7, #0]
 8000c10:	4b80      	ldr	r3, [pc, #512]	; (8000e14 <print_int+0x58c>)
 8000c12:	fb83 1302 	smull	r1, r3, r3, r2
 8000c16:	1099      	asrs	r1, r3, #2
 8000c18:	17d3      	asrs	r3, r2, #31
 8000c1a:	1ac9      	subs	r1, r1, r3
 8000c1c:	460b      	mov	r3, r1
 8000c1e:	009b      	lsls	r3, r3, #2
 8000c20:	440b      	add	r3, r1
 8000c22:	005b      	lsls	r3, r3, #1
 8000c24:	1ad1      	subs	r1, r2, r3
 8000c26:	460b      	mov	r3, r1
 8000c28:	73fb      	strb	r3, [r7, #15]
        PCD8544_set_cursor((x_pos + 18), y_pos);
 8000c2a:	79fb      	ldrb	r3, [r7, #7]
 8000c2c:	3312      	adds	r3, #18
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	79ba      	ldrb	r2, [r7, #6]
 8000c32:	4611      	mov	r1, r2
 8000c34:	4618      	mov	r0, r3
 8000c36:	f7ff fd61 	bl	80006fc <PCD8544_set_cursor>
        PCD8544_print_char((48 + ch), colour);
 8000c3a:	7bfb      	ldrb	r3, [r7, #15]
 8000c3c:	3330      	adds	r3, #48	; 0x30
 8000c3e:	b2db      	uxtb	r3, r3
 8000c40:	797a      	ldrb	r2, [r7, #5]
 8000c42:	4611      	mov	r1, r2
 8000c44:	4618      	mov	r0, r3
 8000c46:	f7ff fd75 	bl	8000734 <PCD8544_print_char>
        PCD8544_set_cursor((x_pos + 24), y_pos);
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
 8000c4c:	3318      	adds	r3, #24
 8000c4e:	b2db      	uxtb	r3, r3
 8000c50:	79ba      	ldrb	r2, [r7, #6]
 8000c52:	4611      	mov	r1, r2
 8000c54:	4618      	mov	r0, r3
 8000c56:	f7ff fd51 	bl	80006fc <PCD8544_set_cursor>
        PCD8544_print_char(0x20, colour);
 8000c5a:	797b      	ldrb	r3, [r7, #5]
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	2020      	movs	r0, #32
 8000c60:	f7ff fd68 	bl	8000734 <PCD8544_print_char>
        PCD8544_set_cursor((x_pos + 30), y_pos);
 8000c64:	79fb      	ldrb	r3, [r7, #7]
 8000c66:	331e      	adds	r3, #30
 8000c68:	b2db      	uxtb	r3, r3
 8000c6a:	79ba      	ldrb	r2, [r7, #6]
 8000c6c:	4611      	mov	r1, r2
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f7ff fd44 	bl	80006fc <PCD8544_set_cursor>
        PCD8544_print_char(0x20, colour);
 8000c74:	797b      	ldrb	r3, [r7, #5]
 8000c76:	4619      	mov	r1, r3
 8000c78:	2020      	movs	r0, #32
 8000c7a:	f7ff fd5b 	bl	8000734 <PCD8544_print_char>
 8000c7e:	e0c0      	b.n	8000e02 <print_int+0x57a>
    else if((value > 9) && (value <= 99))
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	2b09      	cmp	r3, #9
 8000c84:	dd6a      	ble.n	8000d5c <print_int+0x4d4>
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	2b63      	cmp	r3, #99	; 0x63
 8000c8a:	dc67      	bgt.n	8000d5c <print_int+0x4d4>
        ch = ((value % 100) / 10);
 8000c8c:	683a      	ldr	r2, [r7, #0]
 8000c8e:	4b60      	ldr	r3, [pc, #384]	; (8000e10 <print_int+0x588>)
 8000c90:	fb83 1302 	smull	r1, r3, r3, r2
 8000c94:	1159      	asrs	r1, r3, #5
 8000c96:	17d3      	asrs	r3, r2, #31
 8000c98:	1acb      	subs	r3, r1, r3
 8000c9a:	2164      	movs	r1, #100	; 0x64
 8000c9c:	fb01 f303 	mul.w	r3, r1, r3
 8000ca0:	1ad3      	subs	r3, r2, r3
 8000ca2:	4a5c      	ldr	r2, [pc, #368]	; (8000e14 <print_int+0x58c>)
 8000ca4:	fb82 1203 	smull	r1, r2, r2, r3
 8000ca8:	1092      	asrs	r2, r2, #2
 8000caa:	17db      	asrs	r3, r3, #31
 8000cac:	1ad3      	subs	r3, r2, r3
 8000cae:	73fb      	strb	r3, [r7, #15]
        PCD8544_set_cursor((x_pos + 6), y_pos);
 8000cb0:	79fb      	ldrb	r3, [r7, #7]
 8000cb2:	3306      	adds	r3, #6
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	79ba      	ldrb	r2, [r7, #6]
 8000cb8:	4611      	mov	r1, r2
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f7ff fd1e 	bl	80006fc <PCD8544_set_cursor>
        PCD8544_print_char((48 + ch), colour);
 8000cc0:	7bfb      	ldrb	r3, [r7, #15]
 8000cc2:	3330      	adds	r3, #48	; 0x30
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	797a      	ldrb	r2, [r7, #5]
 8000cc8:	4611      	mov	r1, r2
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f7ff fd32 	bl	8000734 <PCD8544_print_char>
        ch = (value % 10);
 8000cd0:	683a      	ldr	r2, [r7, #0]
 8000cd2:	4b50      	ldr	r3, [pc, #320]	; (8000e14 <print_int+0x58c>)
 8000cd4:	fb83 1302 	smull	r1, r3, r3, r2
 8000cd8:	1099      	asrs	r1, r3, #2
 8000cda:	17d3      	asrs	r3, r2, #31
 8000cdc:	1ac9      	subs	r1, r1, r3
 8000cde:	460b      	mov	r3, r1
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	440b      	add	r3, r1
 8000ce4:	005b      	lsls	r3, r3, #1
 8000ce6:	1ad1      	subs	r1, r2, r3
 8000ce8:	460b      	mov	r3, r1
 8000cea:	73fb      	strb	r3, [r7, #15]
        PCD8544_set_cursor((x_pos + 12), y_pos);
 8000cec:	79fb      	ldrb	r3, [r7, #7]
 8000cee:	330c      	adds	r3, #12
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	79ba      	ldrb	r2, [r7, #6]
 8000cf4:	4611      	mov	r1, r2
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f7ff fd00 	bl	80006fc <PCD8544_set_cursor>
        PCD8544_print_char((48 + ch), colour);
 8000cfc:	7bfb      	ldrb	r3, [r7, #15]
 8000cfe:	3330      	adds	r3, #48	; 0x30
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	797a      	ldrb	r2, [r7, #5]
 8000d04:	4611      	mov	r1, r2
 8000d06:	4618      	mov	r0, r3
 8000d08:	f7ff fd14 	bl	8000734 <PCD8544_print_char>
        PCD8544_set_cursor((x_pos + 18), y_pos);
 8000d0c:	79fb      	ldrb	r3, [r7, #7]
 8000d0e:	3312      	adds	r3, #18
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	79ba      	ldrb	r2, [r7, #6]
 8000d14:	4611      	mov	r1, r2
 8000d16:	4618      	mov	r0, r3
 8000d18:	f7ff fcf0 	bl	80006fc <PCD8544_set_cursor>
        PCD8544_print_char(0x20, colour);
 8000d1c:	797b      	ldrb	r3, [r7, #5]
 8000d1e:	4619      	mov	r1, r3
 8000d20:	2020      	movs	r0, #32
 8000d22:	f7ff fd07 	bl	8000734 <PCD8544_print_char>
        PCD8544_set_cursor((x_pos + 24), y_pos);
 8000d26:	79fb      	ldrb	r3, [r7, #7]
 8000d28:	3318      	adds	r3, #24
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	79ba      	ldrb	r2, [r7, #6]
 8000d2e:	4611      	mov	r1, r2
 8000d30:	4618      	mov	r0, r3
 8000d32:	f7ff fce3 	bl	80006fc <PCD8544_set_cursor>
        PCD8544_print_char(0x20, colour);
 8000d36:	797b      	ldrb	r3, [r7, #5]
 8000d38:	4619      	mov	r1, r3
 8000d3a:	2020      	movs	r0, #32
 8000d3c:	f7ff fcfa 	bl	8000734 <PCD8544_print_char>
        PCD8544_set_cursor((x_pos + 30), y_pos);
 8000d40:	79fb      	ldrb	r3, [r7, #7]
 8000d42:	331e      	adds	r3, #30
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	79ba      	ldrb	r2, [r7, #6]
 8000d48:	4611      	mov	r1, r2
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f7ff fcd6 	bl	80006fc <PCD8544_set_cursor>
        PCD8544_print_char(0x20, colour);
 8000d50:	797b      	ldrb	r3, [r7, #5]
 8000d52:	4619      	mov	r1, r3
 8000d54:	2020      	movs	r0, #32
 8000d56:	f7ff fced 	bl	8000734 <PCD8544_print_char>
 8000d5a:	e052      	b.n	8000e02 <print_int+0x57a>
        ch = (value % 10);
 8000d5c:	683a      	ldr	r2, [r7, #0]
 8000d5e:	4b2d      	ldr	r3, [pc, #180]	; (8000e14 <print_int+0x58c>)
 8000d60:	fb83 1302 	smull	r1, r3, r3, r2
 8000d64:	1099      	asrs	r1, r3, #2
 8000d66:	17d3      	asrs	r3, r2, #31
 8000d68:	1ac9      	subs	r1, r1, r3
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	009b      	lsls	r3, r3, #2
 8000d6e:	440b      	add	r3, r1
 8000d70:	005b      	lsls	r3, r3, #1
 8000d72:	1ad1      	subs	r1, r2, r3
 8000d74:	460b      	mov	r3, r1
 8000d76:	73fb      	strb	r3, [r7, #15]
        PCD8544_set_cursor((x_pos + 6), y_pos);
 8000d78:	79fb      	ldrb	r3, [r7, #7]
 8000d7a:	3306      	adds	r3, #6
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	79ba      	ldrb	r2, [r7, #6]
 8000d80:	4611      	mov	r1, r2
 8000d82:	4618      	mov	r0, r3
 8000d84:	f7ff fcba 	bl	80006fc <PCD8544_set_cursor>
        PCD8544_print_char((48 + ch), colour);
 8000d88:	7bfb      	ldrb	r3, [r7, #15]
 8000d8a:	3330      	adds	r3, #48	; 0x30
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	797a      	ldrb	r2, [r7, #5]
 8000d90:	4611      	mov	r1, r2
 8000d92:	4618      	mov	r0, r3
 8000d94:	f7ff fcce 	bl	8000734 <PCD8544_print_char>
        PCD8544_set_cursor((x_pos + 12), y_pos);
 8000d98:	79fb      	ldrb	r3, [r7, #7]
 8000d9a:	330c      	adds	r3, #12
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	79ba      	ldrb	r2, [r7, #6]
 8000da0:	4611      	mov	r1, r2
 8000da2:	4618      	mov	r0, r3
 8000da4:	f7ff fcaa 	bl	80006fc <PCD8544_set_cursor>
        PCD8544_print_char(0x20, colour);
 8000da8:	797b      	ldrb	r3, [r7, #5]
 8000daa:	4619      	mov	r1, r3
 8000dac:	2020      	movs	r0, #32
 8000dae:	f7ff fcc1 	bl	8000734 <PCD8544_print_char>
        PCD8544_set_cursor((x_pos + 18), y_pos);
 8000db2:	79fb      	ldrb	r3, [r7, #7]
 8000db4:	3312      	adds	r3, #18
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	79ba      	ldrb	r2, [r7, #6]
 8000dba:	4611      	mov	r1, r2
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff fc9d 	bl	80006fc <PCD8544_set_cursor>
        PCD8544_print_char(0x20, colour);
 8000dc2:	797b      	ldrb	r3, [r7, #5]
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	2020      	movs	r0, #32
 8000dc8:	f7ff fcb4 	bl	8000734 <PCD8544_print_char>
        PCD8544_set_cursor((x_pos + 24), y_pos);
 8000dcc:	79fb      	ldrb	r3, [r7, #7]
 8000dce:	3318      	adds	r3, #24
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	79ba      	ldrb	r2, [r7, #6]
 8000dd4:	4611      	mov	r1, r2
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f7ff fc90 	bl	80006fc <PCD8544_set_cursor>
        PCD8544_print_char(0x20, colour);
 8000ddc:	797b      	ldrb	r3, [r7, #5]
 8000dde:	4619      	mov	r1, r3
 8000de0:	2020      	movs	r0, #32
 8000de2:	f7ff fca7 	bl	8000734 <PCD8544_print_char>
        PCD8544_set_cursor((x_pos + 30), y_pos);
 8000de6:	79fb      	ldrb	r3, [r7, #7]
 8000de8:	331e      	adds	r3, #30
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	79ba      	ldrb	r2, [r7, #6]
 8000dee:	4611      	mov	r1, r2
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff fc83 	bl	80006fc <PCD8544_set_cursor>
        PCD8544_print_char(0x20, colour);
 8000df6:	797b      	ldrb	r3, [r7, #5]
 8000df8:	4619      	mov	r1, r3
 8000dfa:	2020      	movs	r0, #32
 8000dfc:	f7ff fc9a 	bl	8000734 <PCD8544_print_char>
}
 8000e00:	e7ff      	b.n	8000e02 <print_int+0x57a>
 8000e02:	bf00      	nop
 8000e04:	3710      	adds	r7, #16
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	10624dd3 	.word	0x10624dd3
 8000e10:	51eb851f 	.word	0x51eb851f
 8000e14:	66666667 	.word	0x66666667

08000e18 <LCD5110_setup>:
    PCD8544_set_cursor(x_pos, row);
    PCD8544_write(DAT, value);
}

void LCD5110_setup()
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
    PCD8544_init();
 8000e1c:	f7ff fc0c 	bl	8000638 <PCD8544_init>
    PCD8544_clear_screen(WHITE);
 8000e20:	2001      	movs	r0, #1
 8000e22:	f7ff fce1 	bl	80007e8 <PCD8544_clear_screen>
}
 8000e26:	bf00      	nop
 8000e28:	bd80      	pop	{r7, pc}
	...

08000e2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e30:	f000 fe3c 	bl	8001aac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e34:	f000 fc3e 	bl	80016b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e38:	f000 fc90 	bl	800175c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  LCD5110_setup();
 8000e3c:	f7ff ffec 	bl	8000e18 <LCD5110_setup>
  		PCD8544_backlight_state(ON);
 8000e40:	2001      	movs	r0, #1
 8000e42:	f7ff fc23 	bl	800068c <PCD8544_backlight_state>
  		HAL_Delay(2000);
 8000e46:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000e4a:	f000 fe91 	bl	8001b70 <HAL_Delay>
  		PCD8544_backlight_state(OFF);
 8000e4e:	2000      	movs	r0, #0
 8000e50:	f7ff fc1c 	bl	800068c <PCD8544_backlight_state>
  		HAL_Delay(2000);
 8000e54:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000e58:	f000 fe8a 	bl	8001b70 <HAL_Delay>
  		PCD8544_clear_screen(WHITE);
 8000e5c:	2001      	movs	r0, #1
 8000e5e:	f7ff fcc3 	bl	80007e8 <PCD8544_clear_screen>
  		PCD8544_backlight_state(ON);
 8000e62:	2001      	movs	r0, #1
 8000e64:	f7ff fc12 	bl	800068c <PCD8544_backlight_state>
  		HAL_Delay(3000);
 8000e68:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000e6c:	f000 fe80 	bl	8001b70 <HAL_Delay>
  		PCD8544_clear_screen(WHITE);
 8000e70:	2001      	movs	r0, #1
 8000e72:	f7ff fcb9 	bl	80007e8 <PCD8544_clear_screen>
         HAL_Delay(4000);
 8000e76:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000e7a:	f000 fe79 	bl	8001b70 <HAL_Delay>
      PCD8544_clear_screen(WHITE);
 8000e7e:	2001      	movs	r0, #1
 8000e80:	f7ff fcb2 	bl	80007e8 <PCD8544_clear_screen>
		PCD8544_print_string(1, 0, "    Hien Thi    ", BLACK);
 8000e84:	2300      	movs	r3, #0
 8000e86:	4a82      	ldr	r2, [pc, #520]	; (8001090 <main+0x264>)
 8000e88:	2100      	movs	r1, #0
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	f7ff fcd4 	bl	8000838 <PCD8544_print_string>
		PCD8544_print_string(1, 2, " Nhiet Do:", WHITE);
 8000e90:	2301      	movs	r3, #1
 8000e92:	4a80      	ldr	r2, [pc, #512]	; (8001094 <main+0x268>)
 8000e94:	2102      	movs	r1, #2
 8000e96:	2001      	movs	r0, #1
 8000e98:	f7ff fcce 	bl	8000838 <PCD8544_print_string>
		PCD8544_print_string(1, 3, " Do Am:", WHITE);
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	4a7e      	ldr	r2, [pc, #504]	; (8001098 <main+0x26c>)
 8000ea0:	2103      	movs	r1, #3
 8000ea2:	2001      	movs	r0, #1
 8000ea4:	f7ff fcc8 	bl	8000838 <PCD8544_print_string>
		PCD8544_print_string(1, 4, " Protect:", WHITE);
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	4a7c      	ldr	r2, [pc, #496]	; (800109c <main+0x270>)
 8000eac:	2104      	movs	r1, #4
 8000eae:	2001      	movs	r0, #1
 8000eb0:	f7ff fcc2 	bl	8000838 <PCD8544_print_string>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  switch(Mode_LCD)
 8000eb4:	4b7a      	ldr	r3, [pc, #488]	; (80010a0 <main+0x274>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	3b01      	subs	r3, #1
 8000eba:	2b03      	cmp	r3, #3
 8000ebc:	f200 83e0 	bhi.w	8001680 <main+0x854>
 8000ec0:	a201      	add	r2, pc, #4	; (adr r2, 8000ec8 <main+0x9c>)
 8000ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ec6:	bf00      	nop
 8000ec8:	08000ed9 	.word	0x08000ed9
 8000ecc:	080010bd 	.word	0x080010bd
 8000ed0:	080012fd 	.word	0x080012fd
 8000ed4:	08001545 	.word	0x08001545
	  		 {
	  		  case 1: {
	  					//che do hien thi MAIN MENU
	  					PCD8544_clear_screen(WHITE);
 8000ed8:	2001      	movs	r0, #1
 8000eda:	f7ff fc85 	bl	80007e8 <PCD8544_clear_screen>
	  					PCD8544_print_string(1, 0, "    MAIN MENU    ", BLACK);
 8000ede:	2300      	movs	r3, #0
 8000ee0:	4a70      	ldr	r2, [pc, #448]	; (80010a4 <main+0x278>)
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	2001      	movs	r0, #1
 8000ee6:	f7ff fca7 	bl	8000838 <PCD8544_print_string>
	  					PCD8544_print_string(1, 2, "Cam Bien", WHITE);
 8000eea:	2301      	movs	r3, #1
 8000eec:	4a6e      	ldr	r2, [pc, #440]	; (80010a8 <main+0x27c>)
 8000eee:	2102      	movs	r1, #2
 8000ef0:	2001      	movs	r0, #1
 8000ef2:	f7ff fca1 	bl	8000838 <PCD8544_print_string>
	  					PCD8544_print_string(1, 3, "Giam Sat", WHITE);
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	4a6c      	ldr	r2, [pc, #432]	; (80010ac <main+0x280>)
 8000efa:	2103      	movs	r1, #3
 8000efc:	2001      	movs	r0, #1
 8000efe:	f7ff fc9b 	bl	8000838 <PCD8544_print_string>
	  					PCD8544_print_string(1, 4, "R G B", WHITE);
 8000f02:	2301      	movs	r3, #1
 8000f04:	4a6a      	ldr	r2, [pc, #424]	; (80010b0 <main+0x284>)
 8000f06:	2104      	movs	r1, #4
 8000f08:	2001      	movs	r0, #1
 8000f0a:	f7ff fc95 	bl	8000838 <PCD8544_print_string>

	  					if(!HAL_GPIO_ReadPin(btn_Len_GPIO_Port,btn_Len_Pin))
 8000f0e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f12:	4868      	ldr	r0, [pc, #416]	; (80010b4 <main+0x288>)
 8000f14:	f001 f88c 	bl	8002030 <HAL_GPIO_ReadPin>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d115      	bne.n	8000f4a <main+0x11e>
	  					{
	  						while(!HAL_GPIO_ReadPin(btn_Len_GPIO_Port,btn_Len_Pin));
 8000f1e:	bf00      	nop
 8000f20:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f24:	4863      	ldr	r0, [pc, #396]	; (80010b4 <main+0x288>)
 8000f26:	f001 f883 	bl	8002030 <HAL_GPIO_ReadPin>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d0f7      	beq.n	8000f20 <main+0xf4>
	  						Mode_menu++;
 8000f30:	4b61      	ldr	r3, [pc, #388]	; (80010b8 <main+0x28c>)
 8000f32:	881b      	ldrh	r3, [r3, #0]
 8000f34:	3301      	adds	r3, #1
 8000f36:	b29a      	uxth	r2, r3
 8000f38:	4b5f      	ldr	r3, [pc, #380]	; (80010b8 <main+0x28c>)
 8000f3a:	801a      	strh	r2, [r3, #0]
	  						if(Mode_menu>3) Mode_menu=3;
 8000f3c:	4b5e      	ldr	r3, [pc, #376]	; (80010b8 <main+0x28c>)
 8000f3e:	881b      	ldrh	r3, [r3, #0]
 8000f40:	2b03      	cmp	r3, #3
 8000f42:	d902      	bls.n	8000f4a <main+0x11e>
 8000f44:	4b5c      	ldr	r3, [pc, #368]	; (80010b8 <main+0x28c>)
 8000f46:	2203      	movs	r2, #3
 8000f48:	801a      	strh	r2, [r3, #0]
	  					}
	  					if(!HAL_GPIO_ReadPin(btn_Len_GPIO_Port,btn_Len_Pin))
 8000f4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f4e:	4859      	ldr	r0, [pc, #356]	; (80010b4 <main+0x288>)
 8000f50:	f001 f86e 	bl	8002030 <HAL_GPIO_ReadPin>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d115      	bne.n	8000f86 <main+0x15a>
	  					{
	  						while(!HAL_GPIO_ReadPin(btn_Len_GPIO_Port,btn_Len_Pin));
 8000f5a:	bf00      	nop
 8000f5c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f60:	4854      	ldr	r0, [pc, #336]	; (80010b4 <main+0x288>)
 8000f62:	f001 f865 	bl	8002030 <HAL_GPIO_ReadPin>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d0f7      	beq.n	8000f5c <main+0x130>
	  						Mode_menu--;
 8000f6c:	4b52      	ldr	r3, [pc, #328]	; (80010b8 <main+0x28c>)
 8000f6e:	881b      	ldrh	r3, [r3, #0]
 8000f70:	3b01      	subs	r3, #1
 8000f72:	b29a      	uxth	r2, r3
 8000f74:	4b50      	ldr	r3, [pc, #320]	; (80010b8 <main+0x28c>)
 8000f76:	801a      	strh	r2, [r3, #0]
	  						if(Mode_menu<1) Mode_menu=1;
 8000f78:	4b4f      	ldr	r3, [pc, #316]	; (80010b8 <main+0x28c>)
 8000f7a:	881b      	ldrh	r3, [r3, #0]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d102      	bne.n	8000f86 <main+0x15a>
 8000f80:	4b4d      	ldr	r3, [pc, #308]	; (80010b8 <main+0x28c>)
 8000f82:	2201      	movs	r2, #1
 8000f84:	801a      	strh	r2, [r3, #0]
	  					}
	  					if(Mode_menu)
 8000f86:	4b4c      	ldr	r3, [pc, #304]	; (80010b8 <main+0x28c>)
 8000f88:	881b      	ldrh	r3, [r3, #0]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d027      	beq.n	8000fde <main+0x1b2>
	  					{
	  						PCD8544_print_string(1, 2, "Cam Bien",BLACK);
 8000f8e:	2300      	movs	r3, #0
 8000f90:	4a45      	ldr	r2, [pc, #276]	; (80010a8 <main+0x27c>)
 8000f92:	2102      	movs	r1, #2
 8000f94:	2001      	movs	r0, #1
 8000f96:	f7ff fc4f 	bl	8000838 <PCD8544_print_string>
	  						PCD8544_print_string(1, 3, "Giam Sat", WHITE);
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	4a43      	ldr	r2, [pc, #268]	; (80010ac <main+0x280>)
 8000f9e:	2103      	movs	r1, #3
 8000fa0:	2001      	movs	r0, #1
 8000fa2:	f7ff fc49 	bl	8000838 <PCD8544_print_string>
	  						PCD8544_print_string(1, 4, "R G B", WHITE);
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	4a41      	ldr	r2, [pc, #260]	; (80010b0 <main+0x284>)
 8000faa:	2104      	movs	r1, #4
 8000fac:	2001      	movs	r0, #1
 8000fae:	f7ff fc43 	bl	8000838 <PCD8544_print_string>
	  						if(!HAL_GPIO_ReadPin(btn_OK_GPIO_Port, btn_OK_Pin))
 8000fb2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fb6:	483f      	ldr	r0, [pc, #252]	; (80010b4 <main+0x288>)
 8000fb8:	f001 f83a 	bl	8002030 <HAL_GPIO_ReadPin>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	f040 8357 	bne.w	8001672 <main+0x846>
	  						{
	  							while(!HAL_GPIO_ReadPin(btn_OK_GPIO_Port, btn_OK_Pin));
 8000fc4:	bf00      	nop
 8000fc6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fca:	483a      	ldr	r0, [pc, #232]	; (80010b4 <main+0x288>)
 8000fcc:	f001 f830 	bl	8002030 <HAL_GPIO_ReadPin>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d0f7      	beq.n	8000fc6 <main+0x19a>
	  							Mode_LCD=2;
 8000fd6:	4b32      	ldr	r3, [pc, #200]	; (80010a0 <main+0x274>)
 8000fd8:	2202      	movs	r2, #2
 8000fda:	701a      	strb	r2, [r3, #0]
	  							while(!HAL_GPIO_ReadPin(btn_OK_GPIO_Port, btn_OK_Pin));
	  							Mode_LCD=4;
	  						}
	  					}

	  					break;
 8000fdc:	e349      	b.n	8001672 <main+0x846>
	  					else if(Mode_menu==2)
 8000fde:	4b36      	ldr	r3, [pc, #216]	; (80010b8 <main+0x28c>)
 8000fe0:	881b      	ldrh	r3, [r3, #0]
 8000fe2:	2b02      	cmp	r3, #2
 8000fe4:	d127      	bne.n	8001036 <main+0x20a>
	  						PCD8544_print_string(1, 2, "Cam Bien", WHITE);
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	4a2f      	ldr	r2, [pc, #188]	; (80010a8 <main+0x27c>)
 8000fea:	2102      	movs	r1, #2
 8000fec:	2001      	movs	r0, #1
 8000fee:	f7ff fc23 	bl	8000838 <PCD8544_print_string>
	  						PCD8544_print_string(1, 3, "Giam Sat", BLACK);
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	4a2d      	ldr	r2, [pc, #180]	; (80010ac <main+0x280>)
 8000ff6:	2103      	movs	r1, #3
 8000ff8:	2001      	movs	r0, #1
 8000ffa:	f7ff fc1d 	bl	8000838 <PCD8544_print_string>
	  						PCD8544_print_string(1, 4, "R G B", WHITE);
 8000ffe:	2301      	movs	r3, #1
 8001000:	4a2b      	ldr	r2, [pc, #172]	; (80010b0 <main+0x284>)
 8001002:	2104      	movs	r1, #4
 8001004:	2001      	movs	r0, #1
 8001006:	f7ff fc17 	bl	8000838 <PCD8544_print_string>
	  						if(!HAL_GPIO_ReadPin(btn_OK_GPIO_Port, btn_OK_Pin))
 800100a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800100e:	4829      	ldr	r0, [pc, #164]	; (80010b4 <main+0x288>)
 8001010:	f001 f80e 	bl	8002030 <HAL_GPIO_ReadPin>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	f040 832b 	bne.w	8001672 <main+0x846>
	  							while(!HAL_GPIO_ReadPin(btn_OK_GPIO_Port, btn_OK_Pin));
 800101c:	bf00      	nop
 800101e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001022:	4824      	ldr	r0, [pc, #144]	; (80010b4 <main+0x288>)
 8001024:	f001 f804 	bl	8002030 <HAL_GPIO_ReadPin>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d0f7      	beq.n	800101e <main+0x1f2>
	  							Mode_LCD=3;
 800102e:	4b1c      	ldr	r3, [pc, #112]	; (80010a0 <main+0x274>)
 8001030:	2203      	movs	r2, #3
 8001032:	701a      	strb	r2, [r3, #0]
	  					break;
 8001034:	e31d      	b.n	8001672 <main+0x846>
	  					else if(Mode_menu==3)
 8001036:	4b20      	ldr	r3, [pc, #128]	; (80010b8 <main+0x28c>)
 8001038:	881b      	ldrh	r3, [r3, #0]
 800103a:	2b03      	cmp	r3, #3
 800103c:	f040 8319 	bne.w	8001672 <main+0x846>
	  						PCD8544_print_string(1, 2, "Cam Bien", WHITE);
 8001040:	2301      	movs	r3, #1
 8001042:	4a19      	ldr	r2, [pc, #100]	; (80010a8 <main+0x27c>)
 8001044:	2102      	movs	r1, #2
 8001046:	2001      	movs	r0, #1
 8001048:	f7ff fbf6 	bl	8000838 <PCD8544_print_string>
	  						PCD8544_print_string(1, 3, "Giam Sat", WHITE);
 800104c:	2301      	movs	r3, #1
 800104e:	4a17      	ldr	r2, [pc, #92]	; (80010ac <main+0x280>)
 8001050:	2103      	movs	r1, #3
 8001052:	2001      	movs	r0, #1
 8001054:	f7ff fbf0 	bl	8000838 <PCD8544_print_string>
	  						PCD8544_print_string(1, 4, "R G B", BLACK);
 8001058:	2300      	movs	r3, #0
 800105a:	4a15      	ldr	r2, [pc, #84]	; (80010b0 <main+0x284>)
 800105c:	2104      	movs	r1, #4
 800105e:	2001      	movs	r0, #1
 8001060:	f7ff fbea 	bl	8000838 <PCD8544_print_string>
	  						if(!HAL_GPIO_ReadPin(btn_OK_GPIO_Port, btn_OK_Pin))
 8001064:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001068:	4812      	ldr	r0, [pc, #72]	; (80010b4 <main+0x288>)
 800106a:	f000 ffe1 	bl	8002030 <HAL_GPIO_ReadPin>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	f040 82fe 	bne.w	8001672 <main+0x846>
	  							while(!HAL_GPIO_ReadPin(btn_OK_GPIO_Port, btn_OK_Pin));
 8001076:	bf00      	nop
 8001078:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800107c:	480d      	ldr	r0, [pc, #52]	; (80010b4 <main+0x288>)
 800107e:	f000 ffd7 	bl	8002030 <HAL_GPIO_ReadPin>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d0f7      	beq.n	8001078 <main+0x24c>
	  							Mode_LCD=4;
 8001088:	4b05      	ldr	r3, [pc, #20]	; (80010a0 <main+0x274>)
 800108a:	2204      	movs	r2, #4
 800108c:	701a      	strb	r2, [r3, #0]
	  					break;
 800108e:	e2f0      	b.n	8001672 <main+0x846>
 8001090:	08003390 	.word	0x08003390
 8001094:	080033a4 	.word	0x080033a4
 8001098:	080033b0 	.word	0x080033b0
 800109c:	080033b8 	.word	0x080033b8
 80010a0:	20000006 	.word	0x20000006
 80010a4:	080033c4 	.word	0x080033c4
 80010a8:	080033d8 	.word	0x080033d8
 80010ac:	080033e4 	.word	0x080033e4
 80010b0:	080033f0 	.word	0x080033f0
 80010b4:	40011400 	.word	0x40011400
 80010b8:	20000000 	.word	0x20000000
	  				  }
	  		  case 2: {
	  					//che do hien thi nhiet do va do am len LCD
	  					PCD8544_clear_screen(WHITE);
 80010bc:	2001      	movs	r0, #1
 80010be:	f7ff fb93 	bl	80007e8 <PCD8544_clear_screen>
	  					PCD8544_print_string(1, 0, "    Cam Bien    ", BLACK);
 80010c2:	2300      	movs	r3, #0
 80010c4:	4a7e      	ldr	r2, [pc, #504]	; (80012c0 <main+0x494>)
 80010c6:	2100      	movs	r1, #0
 80010c8:	2001      	movs	r0, #1
 80010ca:	f7ff fbb5 	bl	8000838 <PCD8544_print_string>
	  					PCD8544_print_string(1, 2, "Nhiet Do:", WHITE);print_int(45, 2,int_T, WHITE); PCD8544_set_cursor(70,2);PCD8544_print_char('C',WHITE);
 80010ce:	2301      	movs	r3, #1
 80010d0:	4a7c      	ldr	r2, [pc, #496]	; (80012c4 <main+0x498>)
 80010d2:	2102      	movs	r1, #2
 80010d4:	2001      	movs	r0, #1
 80010d6:	f7ff fbaf 	bl	8000838 <PCD8544_print_string>
 80010da:	4b7b      	ldr	r3, [pc, #492]	; (80012c8 <main+0x49c>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	461a      	mov	r2, r3
 80010e0:	2301      	movs	r3, #1
 80010e2:	2102      	movs	r1, #2
 80010e4:	202d      	movs	r0, #45	; 0x2d
 80010e6:	f7ff fbcf 	bl	8000888 <print_int>
 80010ea:	2102      	movs	r1, #2
 80010ec:	2046      	movs	r0, #70	; 0x46
 80010ee:	f7ff fb05 	bl	80006fc <PCD8544_set_cursor>
 80010f2:	2101      	movs	r1, #1
 80010f4:	2043      	movs	r0, #67	; 0x43
 80010f6:	f7ff fb1d 	bl	8000734 <PCD8544_print_char>
	  					PCD8544_print_string(1, 3, "Do Am:", WHITE);print_int(45, 3,int_RH, WHITE); PCD8544_set_cursor(70,3);PCD8544_print_char('%',WHITE);
 80010fa:	2301      	movs	r3, #1
 80010fc:	4a73      	ldr	r2, [pc, #460]	; (80012cc <main+0x4a0>)
 80010fe:	2103      	movs	r1, #3
 8001100:	2001      	movs	r0, #1
 8001102:	f7ff fb99 	bl	8000838 <PCD8544_print_string>
 8001106:	4b72      	ldr	r3, [pc, #456]	; (80012d0 <main+0x4a4>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	461a      	mov	r2, r3
 800110c:	2301      	movs	r3, #1
 800110e:	2103      	movs	r1, #3
 8001110:	202d      	movs	r0, #45	; 0x2d
 8001112:	f7ff fbb9 	bl	8000888 <print_int>
 8001116:	2103      	movs	r1, #3
 8001118:	2046      	movs	r0, #70	; 0x46
 800111a:	f7ff faef 	bl	80006fc <PCD8544_set_cursor>
 800111e:	2101      	movs	r1, #1
 8001120:	2025      	movs	r0, #37	; 0x25
 8001122:	f7ff fb07 	bl	8000734 <PCD8544_print_char>
	  					if(!HAL_GPIO_ReadPin(btn_phai_GPIO_Port, btn_phai_Pin))
 8001126:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800112a:	486a      	ldr	r0, [pc, #424]	; (80012d4 <main+0x4a8>)
 800112c:	f000 ff80 	bl	8002030 <HAL_GPIO_ReadPin>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d134      	bne.n	80011a0 <main+0x374>
	  					{
	  						while(!HAL_GPIO_ReadPin(btn_phai_GPIO_Port, btn_phai_Pin));
 8001136:	bf00      	nop
 8001138:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800113c:	4865      	ldr	r0, [pc, #404]	; (80012d4 <main+0x4a8>)
 800113e:	f000 ff77 	bl	8002030 <HAL_GPIO_ReadPin>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d0f7      	beq.n	8001138 <main+0x30c>

	  						PCD8544_print_string(1, 2, "Nhiet Do:", WHITE);print_int(45, 2,int_T, WHITE); PCD8544_set_cursor(70,2);PCD8544_print_char('F',WHITE);
 8001148:	2301      	movs	r3, #1
 800114a:	4a5e      	ldr	r2, [pc, #376]	; (80012c4 <main+0x498>)
 800114c:	2102      	movs	r1, #2
 800114e:	2001      	movs	r0, #1
 8001150:	f7ff fb72 	bl	8000838 <PCD8544_print_string>
 8001154:	4b5c      	ldr	r3, [pc, #368]	; (80012c8 <main+0x49c>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	461a      	mov	r2, r3
 800115a:	2301      	movs	r3, #1
 800115c:	2102      	movs	r1, #2
 800115e:	202d      	movs	r0, #45	; 0x2d
 8001160:	f7ff fb92 	bl	8000888 <print_int>
 8001164:	2102      	movs	r1, #2
 8001166:	2046      	movs	r0, #70	; 0x46
 8001168:	f7ff fac8 	bl	80006fc <PCD8544_set_cursor>
 800116c:	2101      	movs	r1, #1
 800116e:	2046      	movs	r0, #70	; 0x46
 8001170:	f7ff fae0 	bl	8000734 <PCD8544_print_char>
	  						PCD8544_print_string(1, 3, "Do Am:", WHITE);print_int(45, 3,int_RH, WHITE); PCD8544_set_cursor(70,3);PCD8544_print_char('%',WHITE);
 8001174:	2301      	movs	r3, #1
 8001176:	4a55      	ldr	r2, [pc, #340]	; (80012cc <main+0x4a0>)
 8001178:	2103      	movs	r1, #3
 800117a:	2001      	movs	r0, #1
 800117c:	f7ff fb5c 	bl	8000838 <PCD8544_print_string>
 8001180:	4b53      	ldr	r3, [pc, #332]	; (80012d0 <main+0x4a4>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	461a      	mov	r2, r3
 8001186:	2301      	movs	r3, #1
 8001188:	2103      	movs	r1, #3
 800118a:	202d      	movs	r0, #45	; 0x2d
 800118c:	f7ff fb7c 	bl	8000888 <print_int>
 8001190:	2103      	movs	r1, #3
 8001192:	2046      	movs	r0, #70	; 0x46
 8001194:	f7ff fab2 	bl	80006fc <PCD8544_set_cursor>
 8001198:	2101      	movs	r1, #1
 800119a:	2025      	movs	r0, #37	; 0x25
 800119c:	f7ff faca 	bl	8000734 <PCD8544_print_char>

	  					}
	  					if(!HAL_GPIO_ReadPin(btn_Trai_GPIO_Port, btn_Trai_Pin))
 80011a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011a4:	484b      	ldr	r0, [pc, #300]	; (80012d4 <main+0x4a8>)
 80011a6:	f000 ff43 	bl	8002030 <HAL_GPIO_ReadPin>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d134      	bne.n	800121a <main+0x3ee>
	  					{
	  						while(!HAL_GPIO_ReadPin(btn_Trai_GPIO_Port, btn_Trai_Pin));
 80011b0:	bf00      	nop
 80011b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011b6:	4847      	ldr	r0, [pc, #284]	; (80012d4 <main+0x4a8>)
 80011b8:	f000 ff3a 	bl	8002030 <HAL_GPIO_ReadPin>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d0f7      	beq.n	80011b2 <main+0x386>

	  						PCD8544_print_string(1, 2, "Nhiet Do:", WHITE);print_int(45, 2,int_T, WHITE); PCD8544_set_cursor(70,2);PCD8544_print_char('C',WHITE);
 80011c2:	2301      	movs	r3, #1
 80011c4:	4a3f      	ldr	r2, [pc, #252]	; (80012c4 <main+0x498>)
 80011c6:	2102      	movs	r1, #2
 80011c8:	2001      	movs	r0, #1
 80011ca:	f7ff fb35 	bl	8000838 <PCD8544_print_string>
 80011ce:	4b3e      	ldr	r3, [pc, #248]	; (80012c8 <main+0x49c>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	461a      	mov	r2, r3
 80011d4:	2301      	movs	r3, #1
 80011d6:	2102      	movs	r1, #2
 80011d8:	202d      	movs	r0, #45	; 0x2d
 80011da:	f7ff fb55 	bl	8000888 <print_int>
 80011de:	2102      	movs	r1, #2
 80011e0:	2046      	movs	r0, #70	; 0x46
 80011e2:	f7ff fa8b 	bl	80006fc <PCD8544_set_cursor>
 80011e6:	2101      	movs	r1, #1
 80011e8:	2043      	movs	r0, #67	; 0x43
 80011ea:	f7ff faa3 	bl	8000734 <PCD8544_print_char>
	  						PCD8544_print_string(1, 3, "Do Am:", WHITE);print_int(45, 3,int_RH, WHITE); PCD8544_set_cursor(70,3);PCD8544_print_char('%',WHITE);
 80011ee:	2301      	movs	r3, #1
 80011f0:	4a36      	ldr	r2, [pc, #216]	; (80012cc <main+0x4a0>)
 80011f2:	2103      	movs	r1, #3
 80011f4:	2001      	movs	r0, #1
 80011f6:	f7ff fb1f 	bl	8000838 <PCD8544_print_string>
 80011fa:	4b35      	ldr	r3, [pc, #212]	; (80012d0 <main+0x4a4>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	461a      	mov	r2, r3
 8001200:	2301      	movs	r3, #1
 8001202:	2103      	movs	r1, #3
 8001204:	202d      	movs	r0, #45	; 0x2d
 8001206:	f7ff fb3f 	bl	8000888 <print_int>
 800120a:	2103      	movs	r1, #3
 800120c:	2046      	movs	r0, #70	; 0x46
 800120e:	f7ff fa75 	bl	80006fc <PCD8544_set_cursor>
 8001212:	2101      	movs	r1, #1
 8001214:	2025      	movs	r0, #37	; 0x25
 8001216:	f7ff fa8d 	bl	8000734 <PCD8544_print_char>

	  					}
	  					if(int_T>=T)
 800121a:	4b2b      	ldr	r3, [pc, #172]	; (80012c8 <main+0x49c>)
 800121c:	781a      	ldrb	r2, [r3, #0]
 800121e:	4b2e      	ldr	r3, [pc, #184]	; (80012d8 <main+0x4ac>)
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	429a      	cmp	r2, r3
 8001224:	d309      	bcc.n	800123a <main+0x40e>
	  					{
	  					 PCD8544_print_string(1, 4, "     OVER T!    ", BLACK);	printf("OVER TEMPT!\r\n");
 8001226:	2300      	movs	r3, #0
 8001228:	4a2c      	ldr	r2, [pc, #176]	; (80012dc <main+0x4b0>)
 800122a:	2104      	movs	r1, #4
 800122c:	2001      	movs	r0, #1
 800122e:	f7ff fb03 	bl	8000838 <PCD8544_print_string>
 8001232:	482b      	ldr	r0, [pc, #172]	; (80012e0 <main+0x4b4>)
 8001234:	f001 fc94 	bl	8002b60 <puts>
 8001238:	e02b      	b.n	8001292 <main+0x466>
	  					}
	  					else if(int_RH>=H)
 800123a:	4b25      	ldr	r3, [pc, #148]	; (80012d0 <main+0x4a4>)
 800123c:	781a      	ldrb	r2, [r3, #0]
 800123e:	4b29      	ldr	r3, [pc, #164]	; (80012e4 <main+0x4b8>)
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	429a      	cmp	r2, r3
 8001244:	d309      	bcc.n	800125a <main+0x42e>
	  					{
	  						PCD8544_print_string(1, 4, "     OVER H!    ", BLACK); printf("OVER HUM!\r\n");
 8001246:	2300      	movs	r3, #0
 8001248:	4a27      	ldr	r2, [pc, #156]	; (80012e8 <main+0x4bc>)
 800124a:	2104      	movs	r1, #4
 800124c:	2001      	movs	r0, #1
 800124e:	f7ff faf3 	bl	8000838 <PCD8544_print_string>
 8001252:	4826      	ldr	r0, [pc, #152]	; (80012ec <main+0x4c0>)
 8001254:	f001 fc84 	bl	8002b60 <puts>
 8001258:	e01b      	b.n	8001292 <main+0x466>
	  					}
	  					else if(int_T>=T&&int_RH>=H)
 800125a:	4b1b      	ldr	r3, [pc, #108]	; (80012c8 <main+0x49c>)
 800125c:	781a      	ldrb	r2, [r3, #0]
 800125e:	4b1e      	ldr	r3, [pc, #120]	; (80012d8 <main+0x4ac>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	429a      	cmp	r2, r3
 8001264:	d30f      	bcc.n	8001286 <main+0x45a>
 8001266:	4b1a      	ldr	r3, [pc, #104]	; (80012d0 <main+0x4a4>)
 8001268:	781a      	ldrb	r2, [r3, #0]
 800126a:	4b1e      	ldr	r3, [pc, #120]	; (80012e4 <main+0x4b8>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	429a      	cmp	r2, r3
 8001270:	d309      	bcc.n	8001286 <main+0x45a>
	  					{
	  						PCD8544_print_string(1, 4, "    OVER T&H!   ", BLACK); printf("OVER HUM!\r\n");
 8001272:	2300      	movs	r3, #0
 8001274:	4a1e      	ldr	r2, [pc, #120]	; (80012f0 <main+0x4c4>)
 8001276:	2104      	movs	r1, #4
 8001278:	2001      	movs	r0, #1
 800127a:	f7ff fadd 	bl	8000838 <PCD8544_print_string>
 800127e:	481b      	ldr	r0, [pc, #108]	; (80012ec <main+0x4c0>)
 8001280:	f001 fc6e 	bl	8002b60 <puts>
	  					{
 8001284:	e005      	b.n	8001292 <main+0x466>
	  					}
	  					else PCD8544_print_string(1, 4, "     SAVE    ", WHITE);
 8001286:	2301      	movs	r3, #1
 8001288:	4a1a      	ldr	r2, [pc, #104]	; (80012f4 <main+0x4c8>)
 800128a:	2104      	movs	r1, #4
 800128c:	2001      	movs	r0, #1
 800128e:	f7ff fad3 	bl	8000838 <PCD8544_print_string>
	  					if(!HAL_GPIO_ReadPin(btn_OK_GPIO_Port, btn_OK_Pin))
 8001292:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001296:	480f      	ldr	r0, [pc, #60]	; (80012d4 <main+0x4a8>)
 8001298:	f000 feca 	bl	8002030 <HAL_GPIO_ReadPin>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	f040 81e9 	bne.w	8001676 <main+0x84a>
	  					{
	  						while(!HAL_GPIO_ReadPin(btn_OK_GPIO_Port, btn_OK_Pin));
 80012a4:	bf00      	nop
 80012a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012aa:	480a      	ldr	r0, [pc, #40]	; (80012d4 <main+0x4a8>)
 80012ac:	f000 fec0 	bl	8002030 <HAL_GPIO_ReadPin>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d0f7      	beq.n	80012a6 <main+0x47a>
	  						Mode_LCD=1;
 80012b6:	4b10      	ldr	r3, [pc, #64]	; (80012f8 <main+0x4cc>)
 80012b8:	2201      	movs	r2, #1
 80012ba:	701a      	strb	r2, [r3, #0]
	  					}
	  					break;
 80012bc:	e1db      	b.n	8001676 <main+0x84a>
 80012be:	bf00      	nop
 80012c0:	080033f8 	.word	0x080033f8
 80012c4:	0800340c 	.word	0x0800340c
 80012c8:	20000094 	.word	0x20000094
 80012cc:	08003418 	.word	0x08003418
 80012d0:	20000095 	.word	0x20000095
 80012d4:	40011400 	.word	0x40011400
 80012d8:	20000004 	.word	0x20000004
 80012dc:	08003420 	.word	0x08003420
 80012e0:	08003434 	.word	0x08003434
 80012e4:	20000005 	.word	0x20000005
 80012e8:	08003444 	.word	0x08003444
 80012ec:	08003458 	.word	0x08003458
 80012f0:	08003464 	.word	0x08003464
 80012f4:	08003478 	.word	0x08003478
 80012f8:	20000006 	.word	0x20000006
	  				  }
	  		  case 3: {
	  			        //che do giam sat nhiet do va do am len LCD
	  					PCD8544_clear_screen(WHITE);
 80012fc:	2001      	movs	r0, #1
 80012fe:	f7ff fa73 	bl	80007e8 <PCD8544_clear_screen>
	  					PCD8544_print_string(1, 0, "    Giam Sat    ", BLACK);
 8001302:	2300      	movs	r3, #0
 8001304:	4aa1      	ldr	r2, [pc, #644]	; (800158c <main+0x760>)
 8001306:	2100      	movs	r1, #0
 8001308:	2001      	movs	r0, #1
 800130a:	f7ff fa95 	bl	8000838 <PCD8544_print_string>
	  					PCD8544_print_string(1, 2, "Over T:", WHITE);print_int(45, 2,T, WHITE); PCD8544_set_cursor(70,2);PCD8544_print_char('C',WHITE);
 800130e:	2301      	movs	r3, #1
 8001310:	4a9f      	ldr	r2, [pc, #636]	; (8001590 <main+0x764>)
 8001312:	2102      	movs	r1, #2
 8001314:	2001      	movs	r0, #1
 8001316:	f7ff fa8f 	bl	8000838 <PCD8544_print_string>
 800131a:	4b9e      	ldr	r3, [pc, #632]	; (8001594 <main+0x768>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	461a      	mov	r2, r3
 8001320:	2301      	movs	r3, #1
 8001322:	2102      	movs	r1, #2
 8001324:	202d      	movs	r0, #45	; 0x2d
 8001326:	f7ff faaf 	bl	8000888 <print_int>
 800132a:	2102      	movs	r1, #2
 800132c:	2046      	movs	r0, #70	; 0x46
 800132e:	f7ff f9e5 	bl	80006fc <PCD8544_set_cursor>
 8001332:	2101      	movs	r1, #1
 8001334:	2043      	movs	r0, #67	; 0x43
 8001336:	f7ff f9fd 	bl	8000734 <PCD8544_print_char>
	  					PCD8544_print_string(1, 3, "Over H:", WHITE);print_int(45, 3,H, WHITE); PCD8544_set_cursor(70,3);PCD8544_print_char('%',WHITE);
 800133a:	2301      	movs	r3, #1
 800133c:	4a96      	ldr	r2, [pc, #600]	; (8001598 <main+0x76c>)
 800133e:	2103      	movs	r1, #3
 8001340:	2001      	movs	r0, #1
 8001342:	f7ff fa79 	bl	8000838 <PCD8544_print_string>
 8001346:	4b95      	ldr	r3, [pc, #596]	; (800159c <main+0x770>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	461a      	mov	r2, r3
 800134c:	2301      	movs	r3, #1
 800134e:	2103      	movs	r1, #3
 8001350:	202d      	movs	r0, #45	; 0x2d
 8001352:	f7ff fa99 	bl	8000888 <print_int>
 8001356:	2103      	movs	r1, #3
 8001358:	2046      	movs	r0, #70	; 0x46
 800135a:	f7ff f9cf 	bl	80006fc <PCD8544_set_cursor>
 800135e:	2101      	movs	r1, #1
 8001360:	2025      	movs	r0, #37	; 0x25
 8001362:	f7ff f9e7 	bl	8000734 <PCD8544_print_char>

	  			        if(!HAL_GPIO_ReadPin(btn_Len_GPIO_Port,btn_Len_Pin))
 8001366:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800136a:	488d      	ldr	r0, [pc, #564]	; (80015a0 <main+0x774>)
 800136c:	f000 fe60 	bl	8002030 <HAL_GPIO_ReadPin>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d115      	bne.n	80013a2 <main+0x576>
	  					{
	  						while(!!HAL_GPIO_ReadPin(btn_Len_GPIO_Port,btn_Len_Pin));
 8001376:	bf00      	nop
 8001378:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800137c:	4888      	ldr	r0, [pc, #544]	; (80015a0 <main+0x774>)
 800137e:	f000 fe57 	bl	8002030 <HAL_GPIO_ReadPin>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d1f7      	bne.n	8001378 <main+0x54c>
	  						Mode_giamsat++;
 8001388:	4b86      	ldr	r3, [pc, #536]	; (80015a4 <main+0x778>)
 800138a:	881b      	ldrh	r3, [r3, #0]
 800138c:	3301      	adds	r3, #1
 800138e:	b29a      	uxth	r2, r3
 8001390:	4b84      	ldr	r3, [pc, #528]	; (80015a4 <main+0x778>)
 8001392:	801a      	strh	r2, [r3, #0]
	  						if(Mode_giamsat>2) Mode_giamsat=2;
 8001394:	4b83      	ldr	r3, [pc, #524]	; (80015a4 <main+0x778>)
 8001396:	881b      	ldrh	r3, [r3, #0]
 8001398:	2b02      	cmp	r3, #2
 800139a:	d902      	bls.n	80013a2 <main+0x576>
 800139c:	4b81      	ldr	r3, [pc, #516]	; (80015a4 <main+0x778>)
 800139e:	2202      	movs	r2, #2
 80013a0:	801a      	strh	r2, [r3, #0]
	  					}
	  					if(!HAL_GPIO_ReadPin(btn_Len_GPIO_Port,btn_Len_Pin))
 80013a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013a6:	487e      	ldr	r0, [pc, #504]	; (80015a0 <main+0x774>)
 80013a8:	f000 fe42 	bl	8002030 <HAL_GPIO_ReadPin>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d115      	bne.n	80013de <main+0x5b2>
	  					{
	  						while(!!HAL_GPIO_ReadPin(btn_Len_GPIO_Port,btn_Len_Pin));
 80013b2:	bf00      	nop
 80013b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013b8:	4879      	ldr	r0, [pc, #484]	; (80015a0 <main+0x774>)
 80013ba:	f000 fe39 	bl	8002030 <HAL_GPIO_ReadPin>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d1f7      	bne.n	80013b4 <main+0x588>
	  						Mode_giamsat--;
 80013c4:	4b77      	ldr	r3, [pc, #476]	; (80015a4 <main+0x778>)
 80013c6:	881b      	ldrh	r3, [r3, #0]
 80013c8:	3b01      	subs	r3, #1
 80013ca:	b29a      	uxth	r2, r3
 80013cc:	4b75      	ldr	r3, [pc, #468]	; (80015a4 <main+0x778>)
 80013ce:	801a      	strh	r2, [r3, #0]
	  						if(Mode_giamsat<1) Mode_giamsat=1;
 80013d0:	4b74      	ldr	r3, [pc, #464]	; (80015a4 <main+0x778>)
 80013d2:	881b      	ldrh	r3, [r3, #0]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d102      	bne.n	80013de <main+0x5b2>
 80013d8:	4b72      	ldr	r3, [pc, #456]	; (80015a4 <main+0x778>)
 80013da:	2201      	movs	r2, #1
 80013dc:	801a      	strh	r2, [r3, #0]
	  					}
	  					if(Mode_giamsat)
 80013de:	4b71      	ldr	r3, [pc, #452]	; (80015a4 <main+0x778>)
 80013e0:	881b      	ldrh	r3, [r3, #0]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d04a      	beq.n	800147c <main+0x650>
	  					{
	  						PCD8544_print_string(1, 2, "Over T:", BLACK);print_int(45, 2,T, BLACK); PCD8544_set_cursor(70,2);PCD8544_print_char('C',BLACK);
 80013e6:	2300      	movs	r3, #0
 80013e8:	4a69      	ldr	r2, [pc, #420]	; (8001590 <main+0x764>)
 80013ea:	2102      	movs	r1, #2
 80013ec:	2001      	movs	r0, #1
 80013ee:	f7ff fa23 	bl	8000838 <PCD8544_print_string>
 80013f2:	4b68      	ldr	r3, [pc, #416]	; (8001594 <main+0x768>)
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	461a      	mov	r2, r3
 80013f8:	2300      	movs	r3, #0
 80013fa:	2102      	movs	r1, #2
 80013fc:	202d      	movs	r0, #45	; 0x2d
 80013fe:	f7ff fa43 	bl	8000888 <print_int>
 8001402:	2102      	movs	r1, #2
 8001404:	2046      	movs	r0, #70	; 0x46
 8001406:	f7ff f979 	bl	80006fc <PCD8544_set_cursor>
 800140a:	2100      	movs	r1, #0
 800140c:	2043      	movs	r0, #67	; 0x43
 800140e:	f7ff f991 	bl	8000734 <PCD8544_print_char>
	  						PCD8544_print_string(1, 3, "Over H:", WHITE);print_int(45, 3,H, WHITE); PCD8544_set_cursor(70,3);PCD8544_print_char('%',WHITE);
 8001412:	2301      	movs	r3, #1
 8001414:	4a60      	ldr	r2, [pc, #384]	; (8001598 <main+0x76c>)
 8001416:	2103      	movs	r1, #3
 8001418:	2001      	movs	r0, #1
 800141a:	f7ff fa0d 	bl	8000838 <PCD8544_print_string>
 800141e:	4b5f      	ldr	r3, [pc, #380]	; (800159c <main+0x770>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	461a      	mov	r2, r3
 8001424:	2301      	movs	r3, #1
 8001426:	2103      	movs	r1, #3
 8001428:	202d      	movs	r0, #45	; 0x2d
 800142a:	f7ff fa2d 	bl	8000888 <print_int>
 800142e:	2103      	movs	r1, #3
 8001430:	2046      	movs	r0, #70	; 0x46
 8001432:	f7ff f963 	bl	80006fc <PCD8544_set_cursor>
 8001436:	2101      	movs	r1, #1
 8001438:	2025      	movs	r0, #37	; 0x25
 800143a:	f7ff f97b 	bl	8000734 <PCD8544_print_char>
	  						if(!HAL_GPIO_ReadPin(btn_phai_GPIO_Port, btn_phai_Pin))
 800143e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001442:	4857      	ldr	r0, [pc, #348]	; (80015a0 <main+0x774>)
 8001444:	f000 fdf4 	bl	8002030 <HAL_GPIO_ReadPin>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d164      	bne.n	8001518 <main+0x6ec>
	  						{
	  						  while(!HAL_GPIO_ReadPin(btn_phai_GPIO_Port, btn_phai_Pin));
 800144e:	bf00      	nop
 8001450:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001454:	4852      	ldr	r0, [pc, #328]	; (80015a0 <main+0x774>)
 8001456:	f000 fdeb 	bl	8002030 <HAL_GPIO_ReadPin>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d0f7      	beq.n	8001450 <main+0x624>
	  						  T++;
 8001460:	4b4c      	ldr	r3, [pc, #304]	; (8001594 <main+0x768>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	3301      	adds	r3, #1
 8001466:	b2da      	uxtb	r2, r3
 8001468:	4b4a      	ldr	r3, [pc, #296]	; (8001594 <main+0x768>)
 800146a:	701a      	strb	r2, [r3, #0]
	  						  if(T>50) T=0;
 800146c:	4b49      	ldr	r3, [pc, #292]	; (8001594 <main+0x768>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	2b32      	cmp	r3, #50	; 0x32
 8001472:	d951      	bls.n	8001518 <main+0x6ec>
 8001474:	4b47      	ldr	r3, [pc, #284]	; (8001594 <main+0x768>)
 8001476:	2200      	movs	r2, #0
 8001478:	701a      	strb	r2, [r3, #0]
 800147a:	e04d      	b.n	8001518 <main+0x6ec>
	  						}
	  					}
	  					else if(Mode_giamsat==2)
 800147c:	4b49      	ldr	r3, [pc, #292]	; (80015a4 <main+0x778>)
 800147e:	881b      	ldrh	r3, [r3, #0]
 8001480:	2b02      	cmp	r3, #2
 8001482:	d149      	bne.n	8001518 <main+0x6ec>
	  					{
	  						PCD8544_print_string(1, 2, "Over T:",WHITE );print_int(45, 2,T, WHITE); PCD8544_set_cursor(70,2);PCD8544_print_char('C',WHITE);
 8001484:	2301      	movs	r3, #1
 8001486:	4a42      	ldr	r2, [pc, #264]	; (8001590 <main+0x764>)
 8001488:	2102      	movs	r1, #2
 800148a:	2001      	movs	r0, #1
 800148c:	f7ff f9d4 	bl	8000838 <PCD8544_print_string>
 8001490:	4b40      	ldr	r3, [pc, #256]	; (8001594 <main+0x768>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	461a      	mov	r2, r3
 8001496:	2301      	movs	r3, #1
 8001498:	2102      	movs	r1, #2
 800149a:	202d      	movs	r0, #45	; 0x2d
 800149c:	f7ff f9f4 	bl	8000888 <print_int>
 80014a0:	2102      	movs	r1, #2
 80014a2:	2046      	movs	r0, #70	; 0x46
 80014a4:	f7ff f92a 	bl	80006fc <PCD8544_set_cursor>
 80014a8:	2101      	movs	r1, #1
 80014aa:	2043      	movs	r0, #67	; 0x43
 80014ac:	f7ff f942 	bl	8000734 <PCD8544_print_char>
	  						PCD8544_print_string(1, 3, "Over H:", BLACK);print_int(45, 3,H, BLACK); PCD8544_set_cursor(70,3);PCD8544_print_char('%',BLACK);
 80014b0:	2300      	movs	r3, #0
 80014b2:	4a39      	ldr	r2, [pc, #228]	; (8001598 <main+0x76c>)
 80014b4:	2103      	movs	r1, #3
 80014b6:	2001      	movs	r0, #1
 80014b8:	f7ff f9be 	bl	8000838 <PCD8544_print_string>
 80014bc:	4b37      	ldr	r3, [pc, #220]	; (800159c <main+0x770>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	461a      	mov	r2, r3
 80014c2:	2300      	movs	r3, #0
 80014c4:	2103      	movs	r1, #3
 80014c6:	202d      	movs	r0, #45	; 0x2d
 80014c8:	f7ff f9de 	bl	8000888 <print_int>
 80014cc:	2103      	movs	r1, #3
 80014ce:	2046      	movs	r0, #70	; 0x46
 80014d0:	f7ff f914 	bl	80006fc <PCD8544_set_cursor>
 80014d4:	2100      	movs	r1, #0
 80014d6:	2025      	movs	r0, #37	; 0x25
 80014d8:	f7ff f92c 	bl	8000734 <PCD8544_print_char>
	  						if(!HAL_GPIO_ReadPin(btn_phai_GPIO_Port, btn_phai_Pin))
 80014dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014e0:	482f      	ldr	r0, [pc, #188]	; (80015a0 <main+0x774>)
 80014e2:	f000 fda5 	bl	8002030 <HAL_GPIO_ReadPin>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d115      	bne.n	8001518 <main+0x6ec>
	  						{
	  						  while(!HAL_GPIO_ReadPin(btn_phai_GPIO_Port, btn_phai_Pin));
 80014ec:	bf00      	nop
 80014ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014f2:	482b      	ldr	r0, [pc, #172]	; (80015a0 <main+0x774>)
 80014f4:	f000 fd9c 	bl	8002030 <HAL_GPIO_ReadPin>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d0f7      	beq.n	80014ee <main+0x6c2>
	  						  H++;
 80014fe:	4b27      	ldr	r3, [pc, #156]	; (800159c <main+0x770>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	3301      	adds	r3, #1
 8001504:	b2da      	uxtb	r2, r3
 8001506:	4b25      	ldr	r3, [pc, #148]	; (800159c <main+0x770>)
 8001508:	701a      	strb	r2, [r3, #0]
	  						  if(T>50) T=0;
 800150a:	4b22      	ldr	r3, [pc, #136]	; (8001594 <main+0x768>)
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	2b32      	cmp	r3, #50	; 0x32
 8001510:	d902      	bls.n	8001518 <main+0x6ec>
 8001512:	4b20      	ldr	r3, [pc, #128]	; (8001594 <main+0x768>)
 8001514:	2200      	movs	r2, #0
 8001516:	701a      	strb	r2, [r3, #0]
	  						}
	  					}
	  					if(!HAL_GPIO_ReadPin(btn_OK_GPIO_Port, btn_OK_Pin))
 8001518:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800151c:	4820      	ldr	r0, [pc, #128]	; (80015a0 <main+0x774>)
 800151e:	f000 fd87 	bl	8002030 <HAL_GPIO_ReadPin>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	f040 80a8 	bne.w	800167a <main+0x84e>
	  					{
	  						while(!HAL_GPIO_ReadPin(btn_OK_GPIO_Port, btn_OK_Pin));
 800152a:	bf00      	nop
 800152c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001530:	481b      	ldr	r0, [pc, #108]	; (80015a0 <main+0x774>)
 8001532:	f000 fd7d 	bl	8002030 <HAL_GPIO_ReadPin>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d0f7      	beq.n	800152c <main+0x700>
	  						Mode_LCD=1;
 800153c:	4b1a      	ldr	r3, [pc, #104]	; (80015a8 <main+0x77c>)
 800153e:	2201      	movs	r2, #1
 8001540:	701a      	strb	r2, [r3, #0]
	  					}
	  					break;
 8001542:	e09a      	b.n	800167a <main+0x84e>
	  				  }
	  		  case 4: {
	  					//hien thi che do RGB len LCD
	  					PCD8544_clear_screen(WHITE);
 8001544:	2001      	movs	r0, #1
 8001546:	f7ff f94f 	bl	80007e8 <PCD8544_clear_screen>
	  					if(!HAL_GPIO_ReadPin(btn_Len_GPIO_Port, btn_Len_Pin))
 800154a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800154e:	4814      	ldr	r0, [pc, #80]	; (80015a0 <main+0x774>)
 8001550:	f000 fd6e 	bl	8002030 <HAL_GPIO_ReadPin>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d10e      	bne.n	8001578 <main+0x74c>
	  					{
	  					  while(!HAL_GPIO_ReadPin(btn_Len_GPIO_Port, btn_Len_Pin))
 800155a:	e005      	b.n	8001568 <main+0x73c>
	  					  Mode_Color++;
 800155c:	4b13      	ldr	r3, [pc, #76]	; (80015ac <main+0x780>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	3301      	adds	r3, #1
 8001562:	b2da      	uxtb	r2, r3
 8001564:	4b11      	ldr	r3, [pc, #68]	; (80015ac <main+0x780>)
 8001566:	701a      	strb	r2, [r3, #0]
	  					  while(!HAL_GPIO_ReadPin(btn_Len_GPIO_Port, btn_Len_Pin))
 8001568:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800156c:	480c      	ldr	r0, [pc, #48]	; (80015a0 <main+0x774>)
 800156e:	f000 fd5f 	bl	8002030 <HAL_GPIO_ReadPin>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d0f1      	beq.n	800155c <main+0x730>
	  					}
	  					if(!HAL_GPIO_ReadPin(btn_Len_GPIO_Port, btn_Len_Pin))
 8001578:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800157c:	4808      	ldr	r0, [pc, #32]	; (80015a0 <main+0x774>)
 800157e:	f000 fd57 	bl	8002030 <HAL_GPIO_ReadPin>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d121      	bne.n	80015cc <main+0x7a0>
	  					{
	  					  while(!HAL_GPIO_ReadPin(btn_Len_GPIO_Port, btn_Len_Pin))
 8001588:	e018      	b.n	80015bc <main+0x790>
 800158a:	bf00      	nop
 800158c:	08003488 	.word	0x08003488
 8001590:	0800349c 	.word	0x0800349c
 8001594:	20000004 	.word	0x20000004
 8001598:	080034a4 	.word	0x080034a4
 800159c:	20000005 	.word	0x20000005
 80015a0:	40011400 	.word	0x40011400
 80015a4:	20000002 	.word	0x20000002
 80015a8:	20000006 	.word	0x20000006
 80015ac:	200002a0 	.word	0x200002a0
	  					  Mode_Color--;
 80015b0:	4b35      	ldr	r3, [pc, #212]	; (8001688 <main+0x85c>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	3b01      	subs	r3, #1
 80015b6:	b2da      	uxtb	r2, r3
 80015b8:	4b33      	ldr	r3, [pc, #204]	; (8001688 <main+0x85c>)
 80015ba:	701a      	strb	r2, [r3, #0]
	  					  while(!HAL_GPIO_ReadPin(btn_Len_GPIO_Port, btn_Len_Pin))
 80015bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015c0:	4832      	ldr	r0, [pc, #200]	; (800168c <main+0x860>)
 80015c2:	f000 fd35 	bl	8002030 <HAL_GPIO_ReadPin>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d0f1      	beq.n	80015b0 <main+0x784>
	  					}
	  					PCD8544_print_string(1, 0, "      R G B     ", BLACK);
 80015cc:	2300      	movs	r3, #0
 80015ce:	4a30      	ldr	r2, [pc, #192]	; (8001690 <main+0x864>)
 80015d0:	2100      	movs	r1, #0
 80015d2:	2001      	movs	r0, #1
 80015d4:	f7ff f930 	bl	8000838 <PCD8544_print_string>
	  					PCD8544_print_string(1, 1, "Color:", WHITE);print_int(45, 1,Mode_Color, WHITE);
 80015d8:	2301      	movs	r3, #1
 80015da:	4a2e      	ldr	r2, [pc, #184]	; (8001694 <main+0x868>)
 80015dc:	2101      	movs	r1, #1
 80015de:	2001      	movs	r0, #1
 80015e0:	f7ff f92a 	bl	8000838 <PCD8544_print_string>
 80015e4:	4b28      	ldr	r3, [pc, #160]	; (8001688 <main+0x85c>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	461a      	mov	r2, r3
 80015ea:	2301      	movs	r3, #1
 80015ec:	2101      	movs	r1, #1
 80015ee:	202d      	movs	r0, #45	; 0x2d
 80015f0:	f7ff f94a 	bl	8000888 <print_int>
	  					PCD8544_print_string(1, 2, "% R:", WHITE);print_int(45, 2,d1, WHITE);
 80015f4:	2301      	movs	r3, #1
 80015f6:	4a28      	ldr	r2, [pc, #160]	; (8001698 <main+0x86c>)
 80015f8:	2102      	movs	r1, #2
 80015fa:	2001      	movs	r0, #1
 80015fc:	f7ff f91c 	bl	8000838 <PCD8544_print_string>
 8001600:	4b26      	ldr	r3, [pc, #152]	; (800169c <main+0x870>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	461a      	mov	r2, r3
 8001606:	2301      	movs	r3, #1
 8001608:	2102      	movs	r1, #2
 800160a:	202d      	movs	r0, #45	; 0x2d
 800160c:	f7ff f93c 	bl	8000888 <print_int>
	  					PCD8544_print_string(1, 3, "% G:", WHITE);print_int(45, 3,d2, WHITE);
 8001610:	2301      	movs	r3, #1
 8001612:	4a23      	ldr	r2, [pc, #140]	; (80016a0 <main+0x874>)
 8001614:	2103      	movs	r1, #3
 8001616:	2001      	movs	r0, #1
 8001618:	f7ff f90e 	bl	8000838 <PCD8544_print_string>
 800161c:	4b21      	ldr	r3, [pc, #132]	; (80016a4 <main+0x878>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	461a      	mov	r2, r3
 8001622:	2301      	movs	r3, #1
 8001624:	2103      	movs	r1, #3
 8001626:	202d      	movs	r0, #45	; 0x2d
 8001628:	f7ff f92e 	bl	8000888 <print_int>
	  					PCD8544_print_string(1, 4, "% B:", WHITE);print_int(45, 4,d3, WHITE);
 800162c:	2301      	movs	r3, #1
 800162e:	4a1e      	ldr	r2, [pc, #120]	; (80016a8 <main+0x87c>)
 8001630:	2104      	movs	r1, #4
 8001632:	2001      	movs	r0, #1
 8001634:	f7ff f900 	bl	8000838 <PCD8544_print_string>
 8001638:	4b1c      	ldr	r3, [pc, #112]	; (80016ac <main+0x880>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	461a      	mov	r2, r3
 800163e:	2301      	movs	r3, #1
 8001640:	2104      	movs	r1, #4
 8001642:	202d      	movs	r0, #45	; 0x2d
 8001644:	f7ff f920 	bl	8000888 <print_int>
	  					if(!HAL_GPIO_ReadPin(btn_OK_GPIO_Port, btn_OK_Pin))
 8001648:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800164c:	480f      	ldr	r0, [pc, #60]	; (800168c <main+0x860>)
 800164e:	f000 fcef 	bl	8002030 <HAL_GPIO_ReadPin>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d112      	bne.n	800167e <main+0x852>
	  					{
	  						while(!HAL_GPIO_ReadPin(btn_OK_GPIO_Port, btn_OK_Pin));
 8001658:	bf00      	nop
 800165a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800165e:	480b      	ldr	r0, [pc, #44]	; (800168c <main+0x860>)
 8001660:	f000 fce6 	bl	8002030 <HAL_GPIO_ReadPin>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d0f7      	beq.n	800165a <main+0x82e>
	  						Mode_LCD=1;
 800166a:	4b11      	ldr	r3, [pc, #68]	; (80016b0 <main+0x884>)
 800166c:	2201      	movs	r2, #1
 800166e:	701a      	strb	r2, [r3, #0]
	  					}
	  					break;
 8001670:	e005      	b.n	800167e <main+0x852>
	  					break;
 8001672:	bf00      	nop
 8001674:	e004      	b.n	8001680 <main+0x854>
	  					break;
 8001676:	bf00      	nop
 8001678:	e002      	b.n	8001680 <main+0x854>
	  					break;
 800167a:	bf00      	nop
 800167c:	e000      	b.n	8001680 <main+0x854>
	  					break;
 800167e:	bf00      	nop
	  				  }
	  		 }
	  		HAL_Delay(50);
 8001680:	2032      	movs	r0, #50	; 0x32
 8001682:	f000 fa75 	bl	8001b70 <HAL_Delay>
	  switch(Mode_LCD)
 8001686:	e415      	b.n	8000eb4 <main+0x88>
 8001688:	200002a0 	.word	0x200002a0
 800168c:	40011400 	.word	0x40011400
 8001690:	080034ac 	.word	0x080034ac
 8001694:	080034c0 	.word	0x080034c0
 8001698:	080034c8 	.word	0x080034c8
 800169c:	20000096 	.word	0x20000096
 80016a0:	080034d0 	.word	0x080034d0
 80016a4:	20000097 	.word	0x20000097
 80016a8:	080034d8 	.word	0x080034d8
 80016ac:	20000098 	.word	0x20000098
 80016b0:	20000006 	.word	0x20000006

080016b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b094      	sub	sp, #80	; 0x50
 80016b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ba:	f107 0318 	add.w	r3, r7, #24
 80016be:	2238      	movs	r2, #56	; 0x38
 80016c0:	2100      	movs	r1, #0
 80016c2:	4618      	mov	r0, r3
 80016c4:	f001 f9e8 	bl	8002a98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016c8:	1d3b      	adds	r3, r7, #4
 80016ca:	2200      	movs	r2, #0
 80016cc:	601a      	str	r2, [r3, #0]
 80016ce:	605a      	str	r2, [r3, #4]
 80016d0:	609a      	str	r2, [r3, #8]
 80016d2:	60da      	str	r2, [r3, #12]
 80016d4:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016d6:	2301      	movs	r3, #1
 80016d8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV5;
 80016e0:	2304      	movs	r3, #4
 80016e2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016e4:	2301      	movs	r3, #1
 80016e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_PLL2;
 80016e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016ec:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016ee:	2302      	movs	r3, #2
 80016f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80016f8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80016fc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL2_ON;
 80016fe:	2302      	movs	r3, #2
 8001700:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL2.PLL2MUL = RCC_PLL2_MUL8;
 8001702:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001706:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL2.HSEPrediv2Value = RCC_HSE_PREDIV2_DIV5;
 8001708:	2340      	movs	r3, #64	; 0x40
 800170a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800170c:	f107 0318 	add.w	r3, r7, #24
 8001710:	4618      	mov	r0, r3
 8001712:	f000 fcbd 	bl	8002090 <HAL_RCC_OscConfig>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 800171c:	f000 f86a 	bl	80017f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001720:	230f      	movs	r3, #15
 8001722:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001724:	2302      	movs	r3, #2
 8001726:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001728:	2300      	movs	r3, #0
 800172a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800172c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001730:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001732:	2300      	movs	r3, #0
 8001734:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001736:	1d3b      	adds	r3, r7, #4
 8001738:	2102      	movs	r1, #2
 800173a:	4618      	mov	r0, r3
 800173c:	f000 ffbe 	bl	80026bc <HAL_RCC_ClockConfig>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001746:	f000 f855 	bl	80017f4 <Error_Handler>
  }
  /** Configure the Systick interrupt time 
  */
  __HAL_RCC_PLLI2S_ENABLE();
 800174a:	4b03      	ldr	r3, [pc, #12]	; (8001758 <SystemClock_Config+0xa4>)
 800174c:	2201      	movs	r2, #1
 800174e:	601a      	str	r2, [r3, #0]
}
 8001750:	bf00      	nop
 8001752:	3750      	adds	r7, #80	; 0x50
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	42420070 	.word	0x42420070

0800175c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b086      	sub	sp, #24
 8001760:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001762:	f107 0308 	add.w	r3, r7, #8
 8001766:	2200      	movs	r2, #0
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	605a      	str	r2, [r3, #4]
 800176c:	609a      	str	r2, [r3, #8]
 800176e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001770:	4b1d      	ldr	r3, [pc, #116]	; (80017e8 <MX_GPIO_Init+0x8c>)
 8001772:	699b      	ldr	r3, [r3, #24]
 8001774:	4a1c      	ldr	r2, [pc, #112]	; (80017e8 <MX_GPIO_Init+0x8c>)
 8001776:	f043 0304 	orr.w	r3, r3, #4
 800177a:	6193      	str	r3, [r2, #24]
 800177c:	4b1a      	ldr	r3, [pc, #104]	; (80017e8 <MX_GPIO_Init+0x8c>)
 800177e:	699b      	ldr	r3, [r3, #24]
 8001780:	f003 0304 	and.w	r3, r3, #4
 8001784:	607b      	str	r3, [r7, #4]
 8001786:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001788:	4b17      	ldr	r3, [pc, #92]	; (80017e8 <MX_GPIO_Init+0x8c>)
 800178a:	699b      	ldr	r3, [r3, #24]
 800178c:	4a16      	ldr	r2, [pc, #88]	; (80017e8 <MX_GPIO_Init+0x8c>)
 800178e:	f043 0320 	orr.w	r3, r3, #32
 8001792:	6193      	str	r3, [r2, #24]
 8001794:	4b14      	ldr	r3, [pc, #80]	; (80017e8 <MX_GPIO_Init+0x8c>)
 8001796:	699b      	ldr	r3, [r3, #24]
 8001798:	f003 0320 	and.w	r3, r3, #32
 800179c:	603b      	str	r3, [r7, #0]
 800179e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RST_Pin|DC_Pin|LIGHT_Pin|CS_Pin 
 80017a0:	2200      	movs	r2, #0
 80017a2:	21b7      	movs	r1, #183	; 0xb7
 80017a4:	4811      	ldr	r0, [pc, #68]	; (80017ec <MX_GPIO_Init+0x90>)
 80017a6:	f000 fc5a 	bl	800205e <HAL_GPIO_WritePin>
                          |SCLK_Pin|MOSI_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : RST_Pin DC_Pin LIGHT_Pin CS_Pin 
                           SCLK_Pin MOSI_Pin */
  GPIO_InitStruct.Pin = RST_Pin|DC_Pin|LIGHT_Pin|CS_Pin 
 80017aa:	23b7      	movs	r3, #183	; 0xb7
 80017ac:	60bb      	str	r3, [r7, #8]
                          |SCLK_Pin|MOSI_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ae:	2301      	movs	r3, #1
 80017b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b2:	2300      	movs	r3, #0
 80017b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b6:	2302      	movs	r3, #2
 80017b8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ba:	f107 0308 	add.w	r3, r7, #8
 80017be:	4619      	mov	r1, r3
 80017c0:	480a      	ldr	r0, [pc, #40]	; (80017ec <MX_GPIO_Init+0x90>)
 80017c2:	f000 fadb 	bl	8001d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : btn_OK_Pin btn_Len_Pin btn_Xuong_Pin btn_phai_Pin 
                           btn_Trai_Pin */
  GPIO_InitStruct.Pin = btn_OK_Pin|btn_Len_Pin|btn_Xuong_Pin|btn_phai_Pin 
 80017c6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80017ca:	60bb      	str	r3, [r7, #8]
                          |btn_Trai_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017cc:	2300      	movs	r3, #0
 80017ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017d0:	2301      	movs	r3, #1
 80017d2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017d4:	f107 0308 	add.w	r3, r7, #8
 80017d8:	4619      	mov	r1, r3
 80017da:	4805      	ldr	r0, [pc, #20]	; (80017f0 <MX_GPIO_Init+0x94>)
 80017dc:	f000 face 	bl	8001d7c <HAL_GPIO_Init>

}
 80017e0:	bf00      	nop
 80017e2:	3718      	adds	r7, #24
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	40021000 	.word	0x40021000
 80017ec:	40010800 	.word	0x40010800
 80017f0:	40011400 	.word	0x40011400

080017f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80017f8:	bf00      	nop
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bc80      	pop	{r7}
 80017fe:	4770      	bx	lr

08001800 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001800:	b480      	push	{r7}
 8001802:	b085      	sub	sp, #20
 8001804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001806:	4b15      	ldr	r3, [pc, #84]	; (800185c <HAL_MspInit+0x5c>)
 8001808:	699b      	ldr	r3, [r3, #24]
 800180a:	4a14      	ldr	r2, [pc, #80]	; (800185c <HAL_MspInit+0x5c>)
 800180c:	f043 0301 	orr.w	r3, r3, #1
 8001810:	6193      	str	r3, [r2, #24]
 8001812:	4b12      	ldr	r3, [pc, #72]	; (800185c <HAL_MspInit+0x5c>)
 8001814:	699b      	ldr	r3, [r3, #24]
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	60bb      	str	r3, [r7, #8]
 800181c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800181e:	4b0f      	ldr	r3, [pc, #60]	; (800185c <HAL_MspInit+0x5c>)
 8001820:	69db      	ldr	r3, [r3, #28]
 8001822:	4a0e      	ldr	r2, [pc, #56]	; (800185c <HAL_MspInit+0x5c>)
 8001824:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001828:	61d3      	str	r3, [r2, #28]
 800182a:	4b0c      	ldr	r3, [pc, #48]	; (800185c <HAL_MspInit+0x5c>)
 800182c:	69db      	ldr	r3, [r3, #28]
 800182e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001832:	607b      	str	r3, [r7, #4]
 8001834:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001836:	4b0a      	ldr	r3, [pc, #40]	; (8001860 <HAL_MspInit+0x60>)
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	60fb      	str	r3, [r7, #12]
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001842:	60fb      	str	r3, [r7, #12]
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800184a:	60fb      	str	r3, [r7, #12]
 800184c:	4a04      	ldr	r2, [pc, #16]	; (8001860 <HAL_MspInit+0x60>)
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001852:	bf00      	nop
 8001854:	3714      	adds	r7, #20
 8001856:	46bd      	mov	sp, r7
 8001858:	bc80      	pop	{r7}
 800185a:	4770      	bx	lr
 800185c:	40021000 	.word	0x40021000
 8001860:	40010000 	.word	0x40010000

08001864 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001868:	bf00      	nop
 800186a:	46bd      	mov	sp, r7
 800186c:	bc80      	pop	{r7}
 800186e:	4770      	bx	lr

08001870 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001874:	e7fe      	b.n	8001874 <HardFault_Handler+0x4>

08001876 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001876:	b480      	push	{r7}
 8001878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800187a:	e7fe      	b.n	800187a <MemManage_Handler+0x4>

0800187c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001880:	e7fe      	b.n	8001880 <BusFault_Handler+0x4>

08001882 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001882:	b480      	push	{r7}
 8001884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001886:	e7fe      	b.n	8001886 <UsageFault_Handler+0x4>

08001888 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800188c:	bf00      	nop
 800188e:	46bd      	mov	sp, r7
 8001890:	bc80      	pop	{r7}
 8001892:	4770      	bx	lr

08001894 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001898:	bf00      	nop
 800189a:	46bd      	mov	sp, r7
 800189c:	bc80      	pop	{r7}
 800189e:	4770      	bx	lr

080018a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018a4:	bf00      	nop
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bc80      	pop	{r7}
 80018aa:	4770      	bx	lr

080018ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018b0:	f000 f942 	bl	8001b38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018b4:	bf00      	nop
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b086      	sub	sp, #24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018c4:	2300      	movs	r3, #0
 80018c6:	617b      	str	r3, [r7, #20]
 80018c8:	e00a      	b.n	80018e0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80018ca:	f3af 8000 	nop.w
 80018ce:	4601      	mov	r1, r0
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	1c5a      	adds	r2, r3, #1
 80018d4:	60ba      	str	r2, [r7, #8]
 80018d6:	b2ca      	uxtb	r2, r1
 80018d8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	3301      	adds	r3, #1
 80018de:	617b      	str	r3, [r7, #20]
 80018e0:	697a      	ldr	r2, [r7, #20]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	dbf0      	blt.n	80018ca <_read+0x12>
	}

return len;
 80018e8:	687b      	ldr	r3, [r7, #4]
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3718      	adds	r7, #24
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b086      	sub	sp, #24
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	60f8      	str	r0, [r7, #12]
 80018fa:	60b9      	str	r1, [r7, #8]
 80018fc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018fe:	2300      	movs	r3, #0
 8001900:	617b      	str	r3, [r7, #20]
 8001902:	e009      	b.n	8001918 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	1c5a      	adds	r2, r3, #1
 8001908:	60ba      	str	r2, [r7, #8]
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	4618      	mov	r0, r3
 800190e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	3301      	adds	r3, #1
 8001916:	617b      	str	r3, [r7, #20]
 8001918:	697a      	ldr	r2, [r7, #20]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	429a      	cmp	r2, r3
 800191e:	dbf1      	blt.n	8001904 <_write+0x12>
	}
	return len;
 8001920:	687b      	ldr	r3, [r7, #4]
}
 8001922:	4618      	mov	r0, r3
 8001924:	3718      	adds	r7, #24
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}

0800192a <_close>:

int _close(int file)
{
 800192a:	b480      	push	{r7}
 800192c:	b083      	sub	sp, #12
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]
	return -1;
 8001932:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001936:	4618      	mov	r0, r3
 8001938:	370c      	adds	r7, #12
 800193a:	46bd      	mov	sp, r7
 800193c:	bc80      	pop	{r7}
 800193e:	4770      	bx	lr

08001940 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001950:	605a      	str	r2, [r3, #4]
	return 0;
 8001952:	2300      	movs	r3, #0
}
 8001954:	4618      	mov	r0, r3
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	bc80      	pop	{r7}
 800195c:	4770      	bx	lr

0800195e <_isatty>:

int _isatty(int file)
{
 800195e:	b480      	push	{r7}
 8001960:	b083      	sub	sp, #12
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
	return 1;
 8001966:	2301      	movs	r3, #1
}
 8001968:	4618      	mov	r0, r3
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	bc80      	pop	{r7}
 8001970:	4770      	bx	lr

08001972 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001972:	b480      	push	{r7}
 8001974:	b085      	sub	sp, #20
 8001976:	af00      	add	r7, sp, #0
 8001978:	60f8      	str	r0, [r7, #12]
 800197a:	60b9      	str	r1, [r7, #8]
 800197c:	607a      	str	r2, [r7, #4]
	return 0;
 800197e:	2300      	movs	r3, #0
}
 8001980:	4618      	mov	r0, r3
 8001982:	3714      	adds	r7, #20
 8001984:	46bd      	mov	sp, r7
 8001986:	bc80      	pop	{r7}
 8001988:	4770      	bx	lr
	...

0800198c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001994:	4b11      	ldr	r3, [pc, #68]	; (80019dc <_sbrk+0x50>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d102      	bne.n	80019a2 <_sbrk+0x16>
		heap_end = &end;
 800199c:	4b0f      	ldr	r3, [pc, #60]	; (80019dc <_sbrk+0x50>)
 800199e:	4a10      	ldr	r2, [pc, #64]	; (80019e0 <_sbrk+0x54>)
 80019a0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80019a2:	4b0e      	ldr	r3, [pc, #56]	; (80019dc <_sbrk+0x50>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80019a8:	4b0c      	ldr	r3, [pc, #48]	; (80019dc <_sbrk+0x50>)
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	4413      	add	r3, r2
 80019b0:	466a      	mov	r2, sp
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d907      	bls.n	80019c6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80019b6:	f001 f845 	bl	8002a44 <__errno>
 80019ba:	4602      	mov	r2, r0
 80019bc:	230c      	movs	r3, #12
 80019be:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80019c0:	f04f 33ff 	mov.w	r3, #4294967295
 80019c4:	e006      	b.n	80019d4 <_sbrk+0x48>
	}

	heap_end += incr;
 80019c6:	4b05      	ldr	r3, [pc, #20]	; (80019dc <_sbrk+0x50>)
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4413      	add	r3, r2
 80019ce:	4a03      	ldr	r2, [pc, #12]	; (80019dc <_sbrk+0x50>)
 80019d0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80019d2:	68fb      	ldr	r3, [r7, #12]
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3710      	adds	r7, #16
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	2000009c 	.word	0x2000009c
 80019e0:	200002b0 	.word	0x200002b0

080019e4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80019e8:	4b1a      	ldr	r3, [pc, #104]	; (8001a54 <SystemInit+0x70>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a19      	ldr	r2, [pc, #100]	; (8001a54 <SystemInit+0x70>)
 80019ee:	f043 0301 	orr.w	r3, r3, #1
 80019f2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
#else
  RCC->CFGR &= 0xF0FF0000U;
 80019f4:	4b17      	ldr	r3, [pc, #92]	; (8001a54 <SystemInit+0x70>)
 80019f6:	685a      	ldr	r2, [r3, #4]
 80019f8:	4916      	ldr	r1, [pc, #88]	; (8001a54 <SystemInit+0x70>)
 80019fa:	4b17      	ldr	r3, [pc, #92]	; (8001a58 <SystemInit+0x74>)
 80019fc:	4013      	ands	r3, r2
 80019fe:	604b      	str	r3, [r1, #4]
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001a00:	4b14      	ldr	r3, [pc, #80]	; (8001a54 <SystemInit+0x70>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a13      	ldr	r2, [pc, #76]	; (8001a54 <SystemInit+0x70>)
 8001a06:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001a0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a0e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001a10:	4b10      	ldr	r3, [pc, #64]	; (8001a54 <SystemInit+0x70>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a0f      	ldr	r2, [pc, #60]	; (8001a54 <SystemInit+0x70>)
 8001a16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a1a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001a1c:	4b0d      	ldr	r3, [pc, #52]	; (8001a54 <SystemInit+0x70>)
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	4a0c      	ldr	r2, [pc, #48]	; (8001a54 <SystemInit+0x70>)
 8001a22:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001a26:	6053      	str	r3, [r2, #4]

#if defined(STM32F105xC) || defined(STM32F107xC)
  /* Reset PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEBFFFFFFU;
 8001a28:	4b0a      	ldr	r3, [pc, #40]	; (8001a54 <SystemInit+0x70>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a09      	ldr	r2, [pc, #36]	; (8001a54 <SystemInit+0x70>)
 8001a2e:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8001a32:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x00FF0000U;
 8001a34:	4b07      	ldr	r3, [pc, #28]	; (8001a54 <SystemInit+0x70>)
 8001a36:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 8001a3a:	609a      	str	r2, [r3, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;
 8001a3c:	4b05      	ldr	r3, [pc, #20]	; (8001a54 <SystemInit+0x70>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	62da      	str	r2, [r3, #44]	; 0x2c
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001a42:	4b06      	ldr	r3, [pc, #24]	; (8001a5c <SystemInit+0x78>)
 8001a44:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a48:	609a      	str	r2, [r3, #8]
#endif 
}
 8001a4a:	bf00      	nop
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bc80      	pop	{r7}
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	40021000 	.word	0x40021000
 8001a58:	f0ff0000 	.word	0xf0ff0000
 8001a5c:	e000ed00 	.word	0xe000ed00

08001a60 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001a60:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001a62:	e003      	b.n	8001a6c <LoopCopyDataInit>

08001a64 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001a64:	4b0b      	ldr	r3, [pc, #44]	; (8001a94 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001a66:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001a68:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001a6a:	3104      	adds	r1, #4

08001a6c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001a6c:	480a      	ldr	r0, [pc, #40]	; (8001a98 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001a6e:	4b0b      	ldr	r3, [pc, #44]	; (8001a9c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001a70:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001a72:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001a74:	d3f6      	bcc.n	8001a64 <CopyDataInit>
  ldr r2, =_sbss
 8001a76:	4a0a      	ldr	r2, [pc, #40]	; (8001aa0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001a78:	e002      	b.n	8001a80 <LoopFillZerobss>

08001a7a <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001a7a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001a7c:	f842 3b04 	str.w	r3, [r2], #4

08001a80 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001a80:	4b08      	ldr	r3, [pc, #32]	; (8001aa4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001a82:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001a84:	d3f9      	bcc.n	8001a7a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a86:	f7ff ffad 	bl	80019e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a8a:	f000 ffe1 	bl	8002a50 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a8e:	f7ff f9cd 	bl	8000e2c <main>
  bx lr
 8001a92:	4770      	bx	lr
  ldr r3, =_sidata
 8001a94:	08003764 	.word	0x08003764
  ldr r0, =_sdata
 8001a98:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001a9c:	20000078 	.word	0x20000078
  ldr r2, =_sbss
 8001aa0:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 8001aa4:	200002ac 	.word	0x200002ac

08001aa8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001aa8:	e7fe      	b.n	8001aa8 <ADC1_2_IRQHandler>
	...

08001aac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ab0:	4b08      	ldr	r3, [pc, #32]	; (8001ad4 <HAL_Init+0x28>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a07      	ldr	r2, [pc, #28]	; (8001ad4 <HAL_Init+0x28>)
 8001ab6:	f043 0310 	orr.w	r3, r3, #16
 8001aba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001abc:	2003      	movs	r0, #3
 8001abe:	f000 f929 	bl	8001d14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ac2:	2000      	movs	r0, #0
 8001ac4:	f000 f808 	bl	8001ad8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ac8:	f7ff fe9a 	bl	8001800 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	40022000 	.word	0x40022000

08001ad8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ae0:	4b12      	ldr	r3, [pc, #72]	; (8001b2c <HAL_InitTick+0x54>)
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	4b12      	ldr	r3, [pc, #72]	; (8001b30 <HAL_InitTick+0x58>)
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	4619      	mov	r1, r3
 8001aea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aee:	fbb3 f3f1 	udiv	r3, r3, r1
 8001af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001af6:	4618      	mov	r0, r3
 8001af8:	f000 f933 	bl	8001d62 <HAL_SYSTICK_Config>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e00e      	b.n	8001b24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2b0f      	cmp	r3, #15
 8001b0a:	d80a      	bhi.n	8001b22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	6879      	ldr	r1, [r7, #4]
 8001b10:	f04f 30ff 	mov.w	r0, #4294967295
 8001b14:	f000 f909 	bl	8001d2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b18:	4a06      	ldr	r2, [pc, #24]	; (8001b34 <HAL_InitTick+0x5c>)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	e000      	b.n	8001b24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3708      	adds	r7, #8
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	20000008 	.word	0x20000008
 8001b30:	20000010 	.word	0x20000010
 8001b34:	2000000c 	.word	0x2000000c

08001b38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b3c:	4b05      	ldr	r3, [pc, #20]	; (8001b54 <HAL_IncTick+0x1c>)
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	461a      	mov	r2, r3
 8001b42:	4b05      	ldr	r3, [pc, #20]	; (8001b58 <HAL_IncTick+0x20>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4413      	add	r3, r2
 8001b48:	4a03      	ldr	r2, [pc, #12]	; (8001b58 <HAL_IncTick+0x20>)
 8001b4a:	6013      	str	r3, [r2, #0]
}
 8001b4c:	bf00      	nop
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bc80      	pop	{r7}
 8001b52:	4770      	bx	lr
 8001b54:	20000010 	.word	0x20000010
 8001b58:	200002a4 	.word	0x200002a4

08001b5c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b60:	4b02      	ldr	r3, [pc, #8]	; (8001b6c <HAL_GetTick+0x10>)
 8001b62:	681b      	ldr	r3, [r3, #0]
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bc80      	pop	{r7}
 8001b6a:	4770      	bx	lr
 8001b6c:	200002a4 	.word	0x200002a4

08001b70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b78:	f7ff fff0 	bl	8001b5c <HAL_GetTick>
 8001b7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b88:	d005      	beq.n	8001b96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b8a:	4b09      	ldr	r3, [pc, #36]	; (8001bb0 <HAL_Delay+0x40>)
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	461a      	mov	r2, r3
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	4413      	add	r3, r2
 8001b94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b96:	bf00      	nop
 8001b98:	f7ff ffe0 	bl	8001b5c <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	68fa      	ldr	r2, [r7, #12]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d8f7      	bhi.n	8001b98 <HAL_Delay+0x28>
  {
  }
}
 8001ba8:	bf00      	nop
 8001baa:	3710      	adds	r7, #16
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	20000010 	.word	0x20000010

08001bb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b085      	sub	sp, #20
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f003 0307 	and.w	r3, r3, #7
 8001bc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bc4:	4b0c      	ldr	r3, [pc, #48]	; (8001bf8 <__NVIC_SetPriorityGrouping+0x44>)
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bca:	68ba      	ldr	r2, [r7, #8]
 8001bcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001be0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001be4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001be6:	4a04      	ldr	r2, [pc, #16]	; (8001bf8 <__NVIC_SetPriorityGrouping+0x44>)
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	60d3      	str	r3, [r2, #12]
}
 8001bec:	bf00      	nop
 8001bee:	3714      	adds	r7, #20
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bc80      	pop	{r7}
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	e000ed00 	.word	0xe000ed00

08001bfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c00:	4b04      	ldr	r3, [pc, #16]	; (8001c14 <__NVIC_GetPriorityGrouping+0x18>)
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	0a1b      	lsrs	r3, r3, #8
 8001c06:	f003 0307 	and.w	r3, r3, #7
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bc80      	pop	{r7}
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	e000ed00 	.word	0xe000ed00

08001c18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	4603      	mov	r3, r0
 8001c20:	6039      	str	r1, [r7, #0]
 8001c22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	db0a      	blt.n	8001c42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	b2da      	uxtb	r2, r3
 8001c30:	490c      	ldr	r1, [pc, #48]	; (8001c64 <__NVIC_SetPriority+0x4c>)
 8001c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c36:	0112      	lsls	r2, r2, #4
 8001c38:	b2d2      	uxtb	r2, r2
 8001c3a:	440b      	add	r3, r1
 8001c3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c40:	e00a      	b.n	8001c58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	b2da      	uxtb	r2, r3
 8001c46:	4908      	ldr	r1, [pc, #32]	; (8001c68 <__NVIC_SetPriority+0x50>)
 8001c48:	79fb      	ldrb	r3, [r7, #7]
 8001c4a:	f003 030f 	and.w	r3, r3, #15
 8001c4e:	3b04      	subs	r3, #4
 8001c50:	0112      	lsls	r2, r2, #4
 8001c52:	b2d2      	uxtb	r2, r2
 8001c54:	440b      	add	r3, r1
 8001c56:	761a      	strb	r2, [r3, #24]
}
 8001c58:	bf00      	nop
 8001c5a:	370c      	adds	r7, #12
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bc80      	pop	{r7}
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	e000e100 	.word	0xe000e100
 8001c68:	e000ed00 	.word	0xe000ed00

08001c6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b089      	sub	sp, #36	; 0x24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	f003 0307 	and.w	r3, r3, #7
 8001c7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	f1c3 0307 	rsb	r3, r3, #7
 8001c86:	2b04      	cmp	r3, #4
 8001c88:	bf28      	it	cs
 8001c8a:	2304      	movcs	r3, #4
 8001c8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	3304      	adds	r3, #4
 8001c92:	2b06      	cmp	r3, #6
 8001c94:	d902      	bls.n	8001c9c <NVIC_EncodePriority+0x30>
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	3b03      	subs	r3, #3
 8001c9a:	e000      	b.n	8001c9e <NVIC_EncodePriority+0x32>
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ca0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8001caa:	43da      	mvns	r2, r3
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	401a      	ands	r2, r3
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cb4:	f04f 31ff 	mov.w	r1, #4294967295
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	fa01 f303 	lsl.w	r3, r1, r3
 8001cbe:	43d9      	mvns	r1, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc4:	4313      	orrs	r3, r2
         );
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3724      	adds	r7, #36	; 0x24
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bc80      	pop	{r7}
 8001cce:	4770      	bx	lr

08001cd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	3b01      	subs	r3, #1
 8001cdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ce0:	d301      	bcc.n	8001ce6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e00f      	b.n	8001d06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ce6:	4a0a      	ldr	r2, [pc, #40]	; (8001d10 <SysTick_Config+0x40>)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	3b01      	subs	r3, #1
 8001cec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cee:	210f      	movs	r1, #15
 8001cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8001cf4:	f7ff ff90 	bl	8001c18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cf8:	4b05      	ldr	r3, [pc, #20]	; (8001d10 <SysTick_Config+0x40>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cfe:	4b04      	ldr	r3, [pc, #16]	; (8001d10 <SysTick_Config+0x40>)
 8001d00:	2207      	movs	r2, #7
 8001d02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d04:	2300      	movs	r3, #0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	e000e010 	.word	0xe000e010

08001d14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f7ff ff49 	bl	8001bb4 <__NVIC_SetPriorityGrouping>
}
 8001d22:	bf00      	nop
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	b086      	sub	sp, #24
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	4603      	mov	r3, r0
 8001d32:	60b9      	str	r1, [r7, #8]
 8001d34:	607a      	str	r2, [r7, #4]
 8001d36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d3c:	f7ff ff5e 	bl	8001bfc <__NVIC_GetPriorityGrouping>
 8001d40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	68b9      	ldr	r1, [r7, #8]
 8001d46:	6978      	ldr	r0, [r7, #20]
 8001d48:	f7ff ff90 	bl	8001c6c <NVIC_EncodePriority>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d52:	4611      	mov	r1, r2
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7ff ff5f 	bl	8001c18 <__NVIC_SetPriority>
}
 8001d5a:	bf00      	nop
 8001d5c:	3718      	adds	r7, #24
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b082      	sub	sp, #8
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f7ff ffb0 	bl	8001cd0 <SysTick_Config>
 8001d70:	4603      	mov	r3, r0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
	...

08001d7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b08b      	sub	sp, #44	; 0x2c
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d86:	2300      	movs	r3, #0
 8001d88:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d8e:	e127      	b.n	8001fe0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d90:	2201      	movs	r2, #1
 8001d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	69fa      	ldr	r2, [r7, #28]
 8001da0:	4013      	ands	r3, r2
 8001da2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	f040 8116 	bne.w	8001fda <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	2b12      	cmp	r3, #18
 8001db4:	d034      	beq.n	8001e20 <HAL_GPIO_Init+0xa4>
 8001db6:	2b12      	cmp	r3, #18
 8001db8:	d80d      	bhi.n	8001dd6 <HAL_GPIO_Init+0x5a>
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d02b      	beq.n	8001e16 <HAL_GPIO_Init+0x9a>
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d804      	bhi.n	8001dcc <HAL_GPIO_Init+0x50>
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d031      	beq.n	8001e2a <HAL_GPIO_Init+0xae>
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d01c      	beq.n	8001e04 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001dca:	e048      	b.n	8001e5e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001dcc:	2b03      	cmp	r3, #3
 8001dce:	d043      	beq.n	8001e58 <HAL_GPIO_Init+0xdc>
 8001dd0:	2b11      	cmp	r3, #17
 8001dd2:	d01b      	beq.n	8001e0c <HAL_GPIO_Init+0x90>
          break;
 8001dd4:	e043      	b.n	8001e5e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001dd6:	4a89      	ldr	r2, [pc, #548]	; (8001ffc <HAL_GPIO_Init+0x280>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d026      	beq.n	8001e2a <HAL_GPIO_Init+0xae>
 8001ddc:	4a87      	ldr	r2, [pc, #540]	; (8001ffc <HAL_GPIO_Init+0x280>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d806      	bhi.n	8001df0 <HAL_GPIO_Init+0x74>
 8001de2:	4a87      	ldr	r2, [pc, #540]	; (8002000 <HAL_GPIO_Init+0x284>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d020      	beq.n	8001e2a <HAL_GPIO_Init+0xae>
 8001de8:	4a86      	ldr	r2, [pc, #536]	; (8002004 <HAL_GPIO_Init+0x288>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d01d      	beq.n	8001e2a <HAL_GPIO_Init+0xae>
          break;
 8001dee:	e036      	b.n	8001e5e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001df0:	4a85      	ldr	r2, [pc, #532]	; (8002008 <HAL_GPIO_Init+0x28c>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d019      	beq.n	8001e2a <HAL_GPIO_Init+0xae>
 8001df6:	4a85      	ldr	r2, [pc, #532]	; (800200c <HAL_GPIO_Init+0x290>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d016      	beq.n	8001e2a <HAL_GPIO_Init+0xae>
 8001dfc:	4a84      	ldr	r2, [pc, #528]	; (8002010 <HAL_GPIO_Init+0x294>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d013      	beq.n	8001e2a <HAL_GPIO_Init+0xae>
          break;
 8001e02:	e02c      	b.n	8001e5e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	623b      	str	r3, [r7, #32]
          break;
 8001e0a:	e028      	b.n	8001e5e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	3304      	adds	r3, #4
 8001e12:	623b      	str	r3, [r7, #32]
          break;
 8001e14:	e023      	b.n	8001e5e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	68db      	ldr	r3, [r3, #12]
 8001e1a:	3308      	adds	r3, #8
 8001e1c:	623b      	str	r3, [r7, #32]
          break;
 8001e1e:	e01e      	b.n	8001e5e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	330c      	adds	r3, #12
 8001e26:	623b      	str	r3, [r7, #32]
          break;
 8001e28:	e019      	b.n	8001e5e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d102      	bne.n	8001e38 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e32:	2304      	movs	r3, #4
 8001e34:	623b      	str	r3, [r7, #32]
          break;
 8001e36:	e012      	b.n	8001e5e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d105      	bne.n	8001e4c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e40:	2308      	movs	r3, #8
 8001e42:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	69fa      	ldr	r2, [r7, #28]
 8001e48:	611a      	str	r2, [r3, #16]
          break;
 8001e4a:	e008      	b.n	8001e5e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e4c:	2308      	movs	r3, #8
 8001e4e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	69fa      	ldr	r2, [r7, #28]
 8001e54:	615a      	str	r2, [r3, #20]
          break;
 8001e56:	e002      	b.n	8001e5e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	623b      	str	r3, [r7, #32]
          break;
 8001e5c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	2bff      	cmp	r3, #255	; 0xff
 8001e62:	d801      	bhi.n	8001e68 <HAL_GPIO_Init+0xec>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	e001      	b.n	8001e6c <HAL_GPIO_Init+0xf0>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	3304      	adds	r3, #4
 8001e6c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	2bff      	cmp	r3, #255	; 0xff
 8001e72:	d802      	bhi.n	8001e7a <HAL_GPIO_Init+0xfe>
 8001e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	e002      	b.n	8001e80 <HAL_GPIO_Init+0x104>
 8001e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7c:	3b08      	subs	r3, #8
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	210f      	movs	r1, #15
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e8e:	43db      	mvns	r3, r3
 8001e90:	401a      	ands	r2, r3
 8001e92:	6a39      	ldr	r1, [r7, #32]
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	fa01 f303 	lsl.w	r3, r1, r3
 8001e9a:	431a      	orrs	r2, r3
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	f000 8096 	beq.w	8001fda <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001eae:	4b59      	ldr	r3, [pc, #356]	; (8002014 <HAL_GPIO_Init+0x298>)
 8001eb0:	699b      	ldr	r3, [r3, #24]
 8001eb2:	4a58      	ldr	r2, [pc, #352]	; (8002014 <HAL_GPIO_Init+0x298>)
 8001eb4:	f043 0301 	orr.w	r3, r3, #1
 8001eb8:	6193      	str	r3, [r2, #24]
 8001eba:	4b56      	ldr	r3, [pc, #344]	; (8002014 <HAL_GPIO_Init+0x298>)
 8001ebc:	699b      	ldr	r3, [r3, #24]
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	60bb      	str	r3, [r7, #8]
 8001ec4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ec6:	4a54      	ldr	r2, [pc, #336]	; (8002018 <HAL_GPIO_Init+0x29c>)
 8001ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eca:	089b      	lsrs	r3, r3, #2
 8001ecc:	3302      	adds	r3, #2
 8001ece:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ed2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed6:	f003 0303 	and.w	r3, r3, #3
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	220f      	movs	r2, #15
 8001ede:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee2:	43db      	mvns	r3, r3
 8001ee4:	68fa      	ldr	r2, [r7, #12]
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a4b      	ldr	r2, [pc, #300]	; (800201c <HAL_GPIO_Init+0x2a0>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d013      	beq.n	8001f1a <HAL_GPIO_Init+0x19e>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a4a      	ldr	r2, [pc, #296]	; (8002020 <HAL_GPIO_Init+0x2a4>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d00d      	beq.n	8001f16 <HAL_GPIO_Init+0x19a>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a49      	ldr	r2, [pc, #292]	; (8002024 <HAL_GPIO_Init+0x2a8>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d007      	beq.n	8001f12 <HAL_GPIO_Init+0x196>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a48      	ldr	r2, [pc, #288]	; (8002028 <HAL_GPIO_Init+0x2ac>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d101      	bne.n	8001f0e <HAL_GPIO_Init+0x192>
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e006      	b.n	8001f1c <HAL_GPIO_Init+0x1a0>
 8001f0e:	2304      	movs	r3, #4
 8001f10:	e004      	b.n	8001f1c <HAL_GPIO_Init+0x1a0>
 8001f12:	2302      	movs	r3, #2
 8001f14:	e002      	b.n	8001f1c <HAL_GPIO_Init+0x1a0>
 8001f16:	2301      	movs	r3, #1
 8001f18:	e000      	b.n	8001f1c <HAL_GPIO_Init+0x1a0>
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f1e:	f002 0203 	and.w	r2, r2, #3
 8001f22:	0092      	lsls	r2, r2, #2
 8001f24:	4093      	lsls	r3, r2
 8001f26:	68fa      	ldr	r2, [r7, #12]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f2c:	493a      	ldr	r1, [pc, #232]	; (8002018 <HAL_GPIO_Init+0x29c>)
 8001f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f30:	089b      	lsrs	r3, r3, #2
 8001f32:	3302      	adds	r3, #2
 8001f34:	68fa      	ldr	r2, [r7, #12]
 8001f36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d006      	beq.n	8001f54 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f46:	4b39      	ldr	r3, [pc, #228]	; (800202c <HAL_GPIO_Init+0x2b0>)
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	4938      	ldr	r1, [pc, #224]	; (800202c <HAL_GPIO_Init+0x2b0>)
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	600b      	str	r3, [r1, #0]
 8001f52:	e006      	b.n	8001f62 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f54:	4b35      	ldr	r3, [pc, #212]	; (800202c <HAL_GPIO_Init+0x2b0>)
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	69bb      	ldr	r3, [r7, #24]
 8001f5a:	43db      	mvns	r3, r3
 8001f5c:	4933      	ldr	r1, [pc, #204]	; (800202c <HAL_GPIO_Init+0x2b0>)
 8001f5e:	4013      	ands	r3, r2
 8001f60:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d006      	beq.n	8001f7c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f6e:	4b2f      	ldr	r3, [pc, #188]	; (800202c <HAL_GPIO_Init+0x2b0>)
 8001f70:	685a      	ldr	r2, [r3, #4]
 8001f72:	492e      	ldr	r1, [pc, #184]	; (800202c <HAL_GPIO_Init+0x2b0>)
 8001f74:	69bb      	ldr	r3, [r7, #24]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	604b      	str	r3, [r1, #4]
 8001f7a:	e006      	b.n	8001f8a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f7c:	4b2b      	ldr	r3, [pc, #172]	; (800202c <HAL_GPIO_Init+0x2b0>)
 8001f7e:	685a      	ldr	r2, [r3, #4]
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	43db      	mvns	r3, r3
 8001f84:	4929      	ldr	r1, [pc, #164]	; (800202c <HAL_GPIO_Init+0x2b0>)
 8001f86:	4013      	ands	r3, r2
 8001f88:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d006      	beq.n	8001fa4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f96:	4b25      	ldr	r3, [pc, #148]	; (800202c <HAL_GPIO_Init+0x2b0>)
 8001f98:	689a      	ldr	r2, [r3, #8]
 8001f9a:	4924      	ldr	r1, [pc, #144]	; (800202c <HAL_GPIO_Init+0x2b0>)
 8001f9c:	69bb      	ldr	r3, [r7, #24]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	608b      	str	r3, [r1, #8]
 8001fa2:	e006      	b.n	8001fb2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001fa4:	4b21      	ldr	r3, [pc, #132]	; (800202c <HAL_GPIO_Init+0x2b0>)
 8001fa6:	689a      	ldr	r2, [r3, #8]
 8001fa8:	69bb      	ldr	r3, [r7, #24]
 8001faa:	43db      	mvns	r3, r3
 8001fac:	491f      	ldr	r1, [pc, #124]	; (800202c <HAL_GPIO_Init+0x2b0>)
 8001fae:	4013      	ands	r3, r2
 8001fb0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d006      	beq.n	8001fcc <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001fbe:	4b1b      	ldr	r3, [pc, #108]	; (800202c <HAL_GPIO_Init+0x2b0>)
 8001fc0:	68da      	ldr	r2, [r3, #12]
 8001fc2:	491a      	ldr	r1, [pc, #104]	; (800202c <HAL_GPIO_Init+0x2b0>)
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	60cb      	str	r3, [r1, #12]
 8001fca:	e006      	b.n	8001fda <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001fcc:	4b17      	ldr	r3, [pc, #92]	; (800202c <HAL_GPIO_Init+0x2b0>)
 8001fce:	68da      	ldr	r2, [r3, #12]
 8001fd0:	69bb      	ldr	r3, [r7, #24]
 8001fd2:	43db      	mvns	r3, r3
 8001fd4:	4915      	ldr	r1, [pc, #84]	; (800202c <HAL_GPIO_Init+0x2b0>)
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fdc:	3301      	adds	r3, #1
 8001fde:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe6:	fa22 f303 	lsr.w	r3, r2, r3
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	f47f aed0 	bne.w	8001d90 <HAL_GPIO_Init+0x14>
  }
}
 8001ff0:	bf00      	nop
 8001ff2:	372c      	adds	r7, #44	; 0x2c
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bc80      	pop	{r7}
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	10210000 	.word	0x10210000
 8002000:	10110000 	.word	0x10110000
 8002004:	10120000 	.word	0x10120000
 8002008:	10310000 	.word	0x10310000
 800200c:	10320000 	.word	0x10320000
 8002010:	10220000 	.word	0x10220000
 8002014:	40021000 	.word	0x40021000
 8002018:	40010000 	.word	0x40010000
 800201c:	40010800 	.word	0x40010800
 8002020:	40010c00 	.word	0x40010c00
 8002024:	40011000 	.word	0x40011000
 8002028:	40011400 	.word	0x40011400
 800202c:	40010400 	.word	0x40010400

08002030 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002030:	b480      	push	{r7}
 8002032:	b085      	sub	sp, #20
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	460b      	mov	r3, r1
 800203a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	689a      	ldr	r2, [r3, #8]
 8002040:	887b      	ldrh	r3, [r7, #2]
 8002042:	4013      	ands	r3, r2
 8002044:	2b00      	cmp	r3, #0
 8002046:	d002      	beq.n	800204e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002048:	2301      	movs	r3, #1
 800204a:	73fb      	strb	r3, [r7, #15]
 800204c:	e001      	b.n	8002052 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800204e:	2300      	movs	r3, #0
 8002050:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002052:	7bfb      	ldrb	r3, [r7, #15]
}
 8002054:	4618      	mov	r0, r3
 8002056:	3714      	adds	r7, #20
 8002058:	46bd      	mov	sp, r7
 800205a:	bc80      	pop	{r7}
 800205c:	4770      	bx	lr

0800205e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800205e:	b480      	push	{r7}
 8002060:	b083      	sub	sp, #12
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
 8002066:	460b      	mov	r3, r1
 8002068:	807b      	strh	r3, [r7, #2]
 800206a:	4613      	mov	r3, r2
 800206c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800206e:	787b      	ldrb	r3, [r7, #1]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d003      	beq.n	800207c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002074:	887a      	ldrh	r2, [r7, #2]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800207a:	e003      	b.n	8002084 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800207c:	887b      	ldrh	r3, [r7, #2]
 800207e:	041a      	lsls	r2, r3, #16
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	611a      	str	r2, [r3, #16]
}
 8002084:	bf00      	nop
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	bc80      	pop	{r7}
 800208c:	4770      	bx	lr
	...

08002090 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d101      	bne.n	80020a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e304      	b.n	80026ac <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	f000 8087 	beq.w	80021be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020b0:	4b92      	ldr	r3, [pc, #584]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f003 030c 	and.w	r3, r3, #12
 80020b8:	2b04      	cmp	r3, #4
 80020ba:	d00c      	beq.n	80020d6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020bc:	4b8f      	ldr	r3, [pc, #572]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f003 030c 	and.w	r3, r3, #12
 80020c4:	2b08      	cmp	r3, #8
 80020c6:	d112      	bne.n	80020ee <HAL_RCC_OscConfig+0x5e>
 80020c8:	4b8c      	ldr	r3, [pc, #560]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020d4:	d10b      	bne.n	80020ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020d6:	4b89      	ldr	r3, [pc, #548]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d06c      	beq.n	80021bc <HAL_RCC_OscConfig+0x12c>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d168      	bne.n	80021bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e2de      	b.n	80026ac <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020f6:	d106      	bne.n	8002106 <HAL_RCC_OscConfig+0x76>
 80020f8:	4b80      	ldr	r3, [pc, #512]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a7f      	ldr	r2, [pc, #508]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 80020fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002102:	6013      	str	r3, [r2, #0]
 8002104:	e02e      	b.n	8002164 <HAL_RCC_OscConfig+0xd4>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d10c      	bne.n	8002128 <HAL_RCC_OscConfig+0x98>
 800210e:	4b7b      	ldr	r3, [pc, #492]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a7a      	ldr	r2, [pc, #488]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 8002114:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002118:	6013      	str	r3, [r2, #0]
 800211a:	4b78      	ldr	r3, [pc, #480]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a77      	ldr	r2, [pc, #476]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 8002120:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002124:	6013      	str	r3, [r2, #0]
 8002126:	e01d      	b.n	8002164 <HAL_RCC_OscConfig+0xd4>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002130:	d10c      	bne.n	800214c <HAL_RCC_OscConfig+0xbc>
 8002132:	4b72      	ldr	r3, [pc, #456]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a71      	ldr	r2, [pc, #452]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 8002138:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800213c:	6013      	str	r3, [r2, #0]
 800213e:	4b6f      	ldr	r3, [pc, #444]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a6e      	ldr	r2, [pc, #440]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 8002144:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002148:	6013      	str	r3, [r2, #0]
 800214a:	e00b      	b.n	8002164 <HAL_RCC_OscConfig+0xd4>
 800214c:	4b6b      	ldr	r3, [pc, #428]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a6a      	ldr	r2, [pc, #424]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 8002152:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002156:	6013      	str	r3, [r2, #0]
 8002158:	4b68      	ldr	r3, [pc, #416]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a67      	ldr	r2, [pc, #412]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 800215e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002162:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d013      	beq.n	8002194 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800216c:	f7ff fcf6 	bl	8001b5c <HAL_GetTick>
 8002170:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002172:	e008      	b.n	8002186 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002174:	f7ff fcf2 	bl	8001b5c <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	2b64      	cmp	r3, #100	; 0x64
 8002180:	d901      	bls.n	8002186 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e292      	b.n	80026ac <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002186:	4b5d      	ldr	r3, [pc, #372]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d0f0      	beq.n	8002174 <HAL_RCC_OscConfig+0xe4>
 8002192:	e014      	b.n	80021be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002194:	f7ff fce2 	bl	8001b5c <HAL_GetTick>
 8002198:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800219a:	e008      	b.n	80021ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800219c:	f7ff fcde 	bl	8001b5c <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b64      	cmp	r3, #100	; 0x64
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e27e      	b.n	80026ac <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ae:	4b53      	ldr	r3, [pc, #332]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d1f0      	bne.n	800219c <HAL_RCC_OscConfig+0x10c>
 80021ba:	e000      	b.n	80021be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0302 	and.w	r3, r3, #2
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d063      	beq.n	8002292 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021ca:	4b4c      	ldr	r3, [pc, #304]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f003 030c 	and.w	r3, r3, #12
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d00b      	beq.n	80021ee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80021d6:	4b49      	ldr	r3, [pc, #292]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f003 030c 	and.w	r3, r3, #12
 80021de:	2b08      	cmp	r3, #8
 80021e0:	d11c      	bne.n	800221c <HAL_RCC_OscConfig+0x18c>
 80021e2:	4b46      	ldr	r3, [pc, #280]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d116      	bne.n	800221c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021ee:	4b43      	ldr	r3, [pc, #268]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0302 	and.w	r3, r3, #2
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d005      	beq.n	8002206 <HAL_RCC_OscConfig+0x176>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	695b      	ldr	r3, [r3, #20]
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d001      	beq.n	8002206 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e252      	b.n	80026ac <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002206:	4b3d      	ldr	r3, [pc, #244]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	699b      	ldr	r3, [r3, #24]
 8002212:	00db      	lsls	r3, r3, #3
 8002214:	4939      	ldr	r1, [pc, #228]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 8002216:	4313      	orrs	r3, r2
 8002218:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800221a:	e03a      	b.n	8002292 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	695b      	ldr	r3, [r3, #20]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d020      	beq.n	8002266 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002224:	4b36      	ldr	r3, [pc, #216]	; (8002300 <HAL_RCC_OscConfig+0x270>)
 8002226:	2201      	movs	r2, #1
 8002228:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800222a:	f7ff fc97 	bl	8001b5c <HAL_GetTick>
 800222e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002230:	e008      	b.n	8002244 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002232:	f7ff fc93 	bl	8001b5c <HAL_GetTick>
 8002236:	4602      	mov	r2, r0
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	2b02      	cmp	r3, #2
 800223e:	d901      	bls.n	8002244 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002240:	2303      	movs	r3, #3
 8002242:	e233      	b.n	80026ac <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002244:	4b2d      	ldr	r3, [pc, #180]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0302 	and.w	r3, r3, #2
 800224c:	2b00      	cmp	r3, #0
 800224e:	d0f0      	beq.n	8002232 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002250:	4b2a      	ldr	r3, [pc, #168]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	699b      	ldr	r3, [r3, #24]
 800225c:	00db      	lsls	r3, r3, #3
 800225e:	4927      	ldr	r1, [pc, #156]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 8002260:	4313      	orrs	r3, r2
 8002262:	600b      	str	r3, [r1, #0]
 8002264:	e015      	b.n	8002292 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002266:	4b26      	ldr	r3, [pc, #152]	; (8002300 <HAL_RCC_OscConfig+0x270>)
 8002268:	2200      	movs	r2, #0
 800226a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800226c:	f7ff fc76 	bl	8001b5c <HAL_GetTick>
 8002270:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002272:	e008      	b.n	8002286 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002274:	f7ff fc72 	bl	8001b5c <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	2b02      	cmp	r3, #2
 8002280:	d901      	bls.n	8002286 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e212      	b.n	80026ac <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002286:	4b1d      	ldr	r3, [pc, #116]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	2b00      	cmp	r3, #0
 8002290:	d1f0      	bne.n	8002274 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0308 	and.w	r3, r3, #8
 800229a:	2b00      	cmp	r3, #0
 800229c:	d03a      	beq.n	8002314 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	69db      	ldr	r3, [r3, #28]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d019      	beq.n	80022da <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022a6:	4b17      	ldr	r3, [pc, #92]	; (8002304 <HAL_RCC_OscConfig+0x274>)
 80022a8:	2201      	movs	r2, #1
 80022aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ac:	f7ff fc56 	bl	8001b5c <HAL_GetTick>
 80022b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022b2:	e008      	b.n	80022c6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022b4:	f7ff fc52 	bl	8001b5c <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d901      	bls.n	80022c6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e1f2      	b.n	80026ac <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022c6:	4b0d      	ldr	r3, [pc, #52]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 80022c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ca:	f003 0302 	and.w	r3, r3, #2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d0f0      	beq.n	80022b4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80022d2:	2001      	movs	r0, #1
 80022d4:	f000 fb98 	bl	8002a08 <RCC_Delay>
 80022d8:	e01c      	b.n	8002314 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022da:	4b0a      	ldr	r3, [pc, #40]	; (8002304 <HAL_RCC_OscConfig+0x274>)
 80022dc:	2200      	movs	r2, #0
 80022de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022e0:	f7ff fc3c 	bl	8001b5c <HAL_GetTick>
 80022e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022e6:	e00f      	b.n	8002308 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022e8:	f7ff fc38 	bl	8001b5c <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d908      	bls.n	8002308 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e1d8      	b.n	80026ac <HAL_RCC_OscConfig+0x61c>
 80022fa:	bf00      	nop
 80022fc:	40021000 	.word	0x40021000
 8002300:	42420000 	.word	0x42420000
 8002304:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002308:	4b9b      	ldr	r3, [pc, #620]	; (8002578 <HAL_RCC_OscConfig+0x4e8>)
 800230a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230c:	f003 0302 	and.w	r3, r3, #2
 8002310:	2b00      	cmp	r3, #0
 8002312:	d1e9      	bne.n	80022e8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0304 	and.w	r3, r3, #4
 800231c:	2b00      	cmp	r3, #0
 800231e:	f000 80a6 	beq.w	800246e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002322:	2300      	movs	r3, #0
 8002324:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002326:	4b94      	ldr	r3, [pc, #592]	; (8002578 <HAL_RCC_OscConfig+0x4e8>)
 8002328:	69db      	ldr	r3, [r3, #28]
 800232a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d10d      	bne.n	800234e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002332:	4b91      	ldr	r3, [pc, #580]	; (8002578 <HAL_RCC_OscConfig+0x4e8>)
 8002334:	69db      	ldr	r3, [r3, #28]
 8002336:	4a90      	ldr	r2, [pc, #576]	; (8002578 <HAL_RCC_OscConfig+0x4e8>)
 8002338:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800233c:	61d3      	str	r3, [r2, #28]
 800233e:	4b8e      	ldr	r3, [pc, #568]	; (8002578 <HAL_RCC_OscConfig+0x4e8>)
 8002340:	69db      	ldr	r3, [r3, #28]
 8002342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002346:	60bb      	str	r3, [r7, #8]
 8002348:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800234a:	2301      	movs	r3, #1
 800234c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800234e:	4b8b      	ldr	r3, [pc, #556]	; (800257c <HAL_RCC_OscConfig+0x4ec>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002356:	2b00      	cmp	r3, #0
 8002358:	d118      	bne.n	800238c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800235a:	4b88      	ldr	r3, [pc, #544]	; (800257c <HAL_RCC_OscConfig+0x4ec>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a87      	ldr	r2, [pc, #540]	; (800257c <HAL_RCC_OscConfig+0x4ec>)
 8002360:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002364:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002366:	f7ff fbf9 	bl	8001b5c <HAL_GetTick>
 800236a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800236c:	e008      	b.n	8002380 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800236e:	f7ff fbf5 	bl	8001b5c <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	2b64      	cmp	r3, #100	; 0x64
 800237a:	d901      	bls.n	8002380 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	e195      	b.n	80026ac <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002380:	4b7e      	ldr	r3, [pc, #504]	; (800257c <HAL_RCC_OscConfig+0x4ec>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002388:	2b00      	cmp	r3, #0
 800238a:	d0f0      	beq.n	800236e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	691b      	ldr	r3, [r3, #16]
 8002390:	2b01      	cmp	r3, #1
 8002392:	d106      	bne.n	80023a2 <HAL_RCC_OscConfig+0x312>
 8002394:	4b78      	ldr	r3, [pc, #480]	; (8002578 <HAL_RCC_OscConfig+0x4e8>)
 8002396:	6a1b      	ldr	r3, [r3, #32]
 8002398:	4a77      	ldr	r2, [pc, #476]	; (8002578 <HAL_RCC_OscConfig+0x4e8>)
 800239a:	f043 0301 	orr.w	r3, r3, #1
 800239e:	6213      	str	r3, [r2, #32]
 80023a0:	e02d      	b.n	80023fe <HAL_RCC_OscConfig+0x36e>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	691b      	ldr	r3, [r3, #16]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d10c      	bne.n	80023c4 <HAL_RCC_OscConfig+0x334>
 80023aa:	4b73      	ldr	r3, [pc, #460]	; (8002578 <HAL_RCC_OscConfig+0x4e8>)
 80023ac:	6a1b      	ldr	r3, [r3, #32]
 80023ae:	4a72      	ldr	r2, [pc, #456]	; (8002578 <HAL_RCC_OscConfig+0x4e8>)
 80023b0:	f023 0301 	bic.w	r3, r3, #1
 80023b4:	6213      	str	r3, [r2, #32]
 80023b6:	4b70      	ldr	r3, [pc, #448]	; (8002578 <HAL_RCC_OscConfig+0x4e8>)
 80023b8:	6a1b      	ldr	r3, [r3, #32]
 80023ba:	4a6f      	ldr	r2, [pc, #444]	; (8002578 <HAL_RCC_OscConfig+0x4e8>)
 80023bc:	f023 0304 	bic.w	r3, r3, #4
 80023c0:	6213      	str	r3, [r2, #32]
 80023c2:	e01c      	b.n	80023fe <HAL_RCC_OscConfig+0x36e>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	691b      	ldr	r3, [r3, #16]
 80023c8:	2b05      	cmp	r3, #5
 80023ca:	d10c      	bne.n	80023e6 <HAL_RCC_OscConfig+0x356>
 80023cc:	4b6a      	ldr	r3, [pc, #424]	; (8002578 <HAL_RCC_OscConfig+0x4e8>)
 80023ce:	6a1b      	ldr	r3, [r3, #32]
 80023d0:	4a69      	ldr	r2, [pc, #420]	; (8002578 <HAL_RCC_OscConfig+0x4e8>)
 80023d2:	f043 0304 	orr.w	r3, r3, #4
 80023d6:	6213      	str	r3, [r2, #32]
 80023d8:	4b67      	ldr	r3, [pc, #412]	; (8002578 <HAL_RCC_OscConfig+0x4e8>)
 80023da:	6a1b      	ldr	r3, [r3, #32]
 80023dc:	4a66      	ldr	r2, [pc, #408]	; (8002578 <HAL_RCC_OscConfig+0x4e8>)
 80023de:	f043 0301 	orr.w	r3, r3, #1
 80023e2:	6213      	str	r3, [r2, #32]
 80023e4:	e00b      	b.n	80023fe <HAL_RCC_OscConfig+0x36e>
 80023e6:	4b64      	ldr	r3, [pc, #400]	; (8002578 <HAL_RCC_OscConfig+0x4e8>)
 80023e8:	6a1b      	ldr	r3, [r3, #32]
 80023ea:	4a63      	ldr	r2, [pc, #396]	; (8002578 <HAL_RCC_OscConfig+0x4e8>)
 80023ec:	f023 0301 	bic.w	r3, r3, #1
 80023f0:	6213      	str	r3, [r2, #32]
 80023f2:	4b61      	ldr	r3, [pc, #388]	; (8002578 <HAL_RCC_OscConfig+0x4e8>)
 80023f4:	6a1b      	ldr	r3, [r3, #32]
 80023f6:	4a60      	ldr	r2, [pc, #384]	; (8002578 <HAL_RCC_OscConfig+0x4e8>)
 80023f8:	f023 0304 	bic.w	r3, r3, #4
 80023fc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d015      	beq.n	8002432 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002406:	f7ff fba9 	bl	8001b5c <HAL_GetTick>
 800240a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800240c:	e00a      	b.n	8002424 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800240e:	f7ff fba5 	bl	8001b5c <HAL_GetTick>
 8002412:	4602      	mov	r2, r0
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	f241 3288 	movw	r2, #5000	; 0x1388
 800241c:	4293      	cmp	r3, r2
 800241e:	d901      	bls.n	8002424 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	e143      	b.n	80026ac <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002424:	4b54      	ldr	r3, [pc, #336]	; (8002578 <HAL_RCC_OscConfig+0x4e8>)
 8002426:	6a1b      	ldr	r3, [r3, #32]
 8002428:	f003 0302 	and.w	r3, r3, #2
 800242c:	2b00      	cmp	r3, #0
 800242e:	d0ee      	beq.n	800240e <HAL_RCC_OscConfig+0x37e>
 8002430:	e014      	b.n	800245c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002432:	f7ff fb93 	bl	8001b5c <HAL_GetTick>
 8002436:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002438:	e00a      	b.n	8002450 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800243a:	f7ff fb8f 	bl	8001b5c <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	f241 3288 	movw	r2, #5000	; 0x1388
 8002448:	4293      	cmp	r3, r2
 800244a:	d901      	bls.n	8002450 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	e12d      	b.n	80026ac <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002450:	4b49      	ldr	r3, [pc, #292]	; (8002578 <HAL_RCC_OscConfig+0x4e8>)
 8002452:	6a1b      	ldr	r3, [r3, #32]
 8002454:	f003 0302 	and.w	r3, r3, #2
 8002458:	2b00      	cmp	r3, #0
 800245a:	d1ee      	bne.n	800243a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800245c:	7dfb      	ldrb	r3, [r7, #23]
 800245e:	2b01      	cmp	r3, #1
 8002460:	d105      	bne.n	800246e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002462:	4b45      	ldr	r3, [pc, #276]	; (8002578 <HAL_RCC_OscConfig+0x4e8>)
 8002464:	69db      	ldr	r3, [r3, #28]
 8002466:	4a44      	ldr	r2, [pc, #272]	; (8002578 <HAL_RCC_OscConfig+0x4e8>)
 8002468:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800246c:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002472:	2b00      	cmp	r3, #0
 8002474:	f000 808c 	beq.w	8002590 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8002478:	4b3f      	ldr	r3, [pc, #252]	; (8002578 <HAL_RCC_OscConfig+0x4e8>)
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002480:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002484:	d10e      	bne.n	80024a4 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8002486:	4b3c      	ldr	r3, [pc, #240]	; (8002578 <HAL_RCC_OscConfig+0x4e8>)
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 800248e:	2b08      	cmp	r3, #8
 8002490:	d108      	bne.n	80024a4 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8002492:	4b39      	ldr	r3, [pc, #228]	; (8002578 <HAL_RCC_OscConfig+0x4e8>)
 8002494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002496:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 800249a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800249e:	d101      	bne.n	80024a4 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e103      	b.n	80026ac <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d14e      	bne.n	800254a <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 80024ac:	4b32      	ldr	r3, [pc, #200]	; (8002578 <HAL_RCC_OscConfig+0x4e8>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d009      	beq.n	80024cc <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 80024b8:	4b2f      	ldr	r3, [pc, #188]	; (8002578 <HAL_RCC_OscConfig+0x4e8>)
 80024ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d001      	beq.n	80024cc <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e0ef      	b.n	80026ac <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 80024cc:	4b2c      	ldr	r3, [pc, #176]	; (8002580 <HAL_RCC_OscConfig+0x4f0>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d2:	f7ff fb43 	bl	8001b5c <HAL_GetTick>
 80024d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 80024d8:	e008      	b.n	80024ec <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80024da:	f7ff fb3f 	bl	8001b5c <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	2b64      	cmp	r3, #100	; 0x64
 80024e6:	d901      	bls.n	80024ec <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e0df      	b.n	80026ac <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 80024ec:	4b22      	ldr	r3, [pc, #136]	; (8002578 <HAL_RCC_OscConfig+0x4e8>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d1f0      	bne.n	80024da <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 80024f8:	4b1f      	ldr	r3, [pc, #124]	; (8002578 <HAL_RCC_OscConfig+0x4e8>)
 80024fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002504:	491c      	ldr	r1, [pc, #112]	; (8002578 <HAL_RCC_OscConfig+0x4e8>)
 8002506:	4313      	orrs	r3, r2
 8002508:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 800250a:	4b1b      	ldr	r3, [pc, #108]	; (8002578 <HAL_RCC_OscConfig+0x4e8>)
 800250c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800250e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002516:	4918      	ldr	r1, [pc, #96]	; (8002578 <HAL_RCC_OscConfig+0x4e8>)
 8002518:	4313      	orrs	r3, r2
 800251a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 800251c:	4b18      	ldr	r3, [pc, #96]	; (8002580 <HAL_RCC_OscConfig+0x4f0>)
 800251e:	2201      	movs	r2, #1
 8002520:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002522:	f7ff fb1b 	bl	8001b5c <HAL_GetTick>
 8002526:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8002528:	e008      	b.n	800253c <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800252a:	f7ff fb17 	bl	8001b5c <HAL_GetTick>
 800252e:	4602      	mov	r2, r0
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	2b64      	cmp	r3, #100	; 0x64
 8002536:	d901      	bls.n	800253c <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e0b7      	b.n	80026ac <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 800253c:	4b0e      	ldr	r3, [pc, #56]	; (8002578 <HAL_RCC_OscConfig+0x4e8>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d0f0      	beq.n	800252a <HAL_RCC_OscConfig+0x49a>
 8002548:	e022      	b.n	8002590 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 800254a:	4b0b      	ldr	r3, [pc, #44]	; (8002578 <HAL_RCC_OscConfig+0x4e8>)
 800254c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800254e:	4a0a      	ldr	r2, [pc, #40]	; (8002578 <HAL_RCC_OscConfig+0x4e8>)
 8002550:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002554:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8002556:	4b0a      	ldr	r3, [pc, #40]	; (8002580 <HAL_RCC_OscConfig+0x4f0>)
 8002558:	2200      	movs	r2, #0
 800255a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800255c:	f7ff fafe 	bl	8001b5c <HAL_GetTick>
 8002560:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8002562:	e00f      	b.n	8002584 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002564:	f7ff fafa 	bl	8001b5c <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	2b64      	cmp	r3, #100	; 0x64
 8002570:	d908      	bls.n	8002584 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e09a      	b.n	80026ac <HAL_RCC_OscConfig+0x61c>
 8002576:	bf00      	nop
 8002578:	40021000 	.word	0x40021000
 800257c:	40007000 	.word	0x40007000
 8002580:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8002584:	4b4b      	ldr	r3, [pc, #300]	; (80026b4 <HAL_RCC_OscConfig+0x624>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d1e9      	bne.n	8002564 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6a1b      	ldr	r3, [r3, #32]
 8002594:	2b00      	cmp	r3, #0
 8002596:	f000 8088 	beq.w	80026aa <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800259a:	4b46      	ldr	r3, [pc, #280]	; (80026b4 <HAL_RCC_OscConfig+0x624>)
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f003 030c 	and.w	r3, r3, #12
 80025a2:	2b08      	cmp	r3, #8
 80025a4:	d068      	beq.n	8002678 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6a1b      	ldr	r3, [r3, #32]
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d14d      	bne.n	800264a <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025ae:	4b42      	ldr	r3, [pc, #264]	; (80026b8 <HAL_RCC_OscConfig+0x628>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b4:	f7ff fad2 	bl	8001b5c <HAL_GetTick>
 80025b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025ba:	e008      	b.n	80025ce <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025bc:	f7ff face 	bl	8001b5c <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e06e      	b.n	80026ac <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025ce:	4b39      	ldr	r3, [pc, #228]	; (80026b4 <HAL_RCC_OscConfig+0x624>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d1f0      	bne.n	80025bc <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025e2:	d10f      	bne.n	8002604 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 80025e4:	4b33      	ldr	r3, [pc, #204]	; (80026b4 <HAL_RCC_OscConfig+0x624>)
 80025e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	4931      	ldr	r1, [pc, #196]	; (80026b4 <HAL_RCC_OscConfig+0x624>)
 80025ee:	4313      	orrs	r3, r2
 80025f0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80025f2:	4b30      	ldr	r3, [pc, #192]	; (80026b4 <HAL_RCC_OscConfig+0x624>)
 80025f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f6:	f023 020f 	bic.w	r2, r3, #15
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	492d      	ldr	r1, [pc, #180]	; (80026b4 <HAL_RCC_OscConfig+0x624>)
 8002600:	4313      	orrs	r3, r2
 8002602:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002604:	4b2b      	ldr	r3, [pc, #172]	; (80026b4 <HAL_RCC_OscConfig+0x624>)
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002614:	430b      	orrs	r3, r1
 8002616:	4927      	ldr	r1, [pc, #156]	; (80026b4 <HAL_RCC_OscConfig+0x624>)
 8002618:	4313      	orrs	r3, r2
 800261a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800261c:	4b26      	ldr	r3, [pc, #152]	; (80026b8 <HAL_RCC_OscConfig+0x628>)
 800261e:	2201      	movs	r2, #1
 8002620:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002622:	f7ff fa9b 	bl	8001b5c <HAL_GetTick>
 8002626:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002628:	e008      	b.n	800263c <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800262a:	f7ff fa97 	bl	8001b5c <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	2b02      	cmp	r3, #2
 8002636:	d901      	bls.n	800263c <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8002638:	2303      	movs	r3, #3
 800263a:	e037      	b.n	80026ac <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800263c:	4b1d      	ldr	r3, [pc, #116]	; (80026b4 <HAL_RCC_OscConfig+0x624>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d0f0      	beq.n	800262a <HAL_RCC_OscConfig+0x59a>
 8002648:	e02f      	b.n	80026aa <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800264a:	4b1b      	ldr	r3, [pc, #108]	; (80026b8 <HAL_RCC_OscConfig+0x628>)
 800264c:	2200      	movs	r2, #0
 800264e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002650:	f7ff fa84 	bl	8001b5c <HAL_GetTick>
 8002654:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002656:	e008      	b.n	800266a <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002658:	f7ff fa80 	bl	8001b5c <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	2b02      	cmp	r3, #2
 8002664:	d901      	bls.n	800266a <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e020      	b.n	80026ac <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800266a:	4b12      	ldr	r3, [pc, #72]	; (80026b4 <HAL_RCC_OscConfig+0x624>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d1f0      	bne.n	8002658 <HAL_RCC_OscConfig+0x5c8>
 8002676:	e018      	b.n	80026aa <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a1b      	ldr	r3, [r3, #32]
 800267c:	2b01      	cmp	r3, #1
 800267e:	d101      	bne.n	8002684 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e013      	b.n	80026ac <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002684:	4b0b      	ldr	r3, [pc, #44]	; (80026b4 <HAL_RCC_OscConfig+0x624>)
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002694:	429a      	cmp	r2, r3
 8002696:	d106      	bne.n	80026a6 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d001      	beq.n	80026aa <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e000      	b.n	80026ac <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 80026aa:	2300      	movs	r3, #0
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3718      	adds	r7, #24
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	40021000 	.word	0x40021000
 80026b8:	42420060 	.word	0x42420060

080026bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d101      	bne.n	80026d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e0d0      	b.n	8002872 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026d0:	4b6a      	ldr	r3, [pc, #424]	; (800287c <HAL_RCC_ClockConfig+0x1c0>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0307 	and.w	r3, r3, #7
 80026d8:	683a      	ldr	r2, [r7, #0]
 80026da:	429a      	cmp	r2, r3
 80026dc:	d910      	bls.n	8002700 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026de:	4b67      	ldr	r3, [pc, #412]	; (800287c <HAL_RCC_ClockConfig+0x1c0>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f023 0207 	bic.w	r2, r3, #7
 80026e6:	4965      	ldr	r1, [pc, #404]	; (800287c <HAL_RCC_ClockConfig+0x1c0>)
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ee:	4b63      	ldr	r3, [pc, #396]	; (800287c <HAL_RCC_ClockConfig+0x1c0>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0307 	and.w	r3, r3, #7
 80026f6:	683a      	ldr	r2, [r7, #0]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d001      	beq.n	8002700 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e0b8      	b.n	8002872 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0302 	and.w	r3, r3, #2
 8002708:	2b00      	cmp	r3, #0
 800270a:	d020      	beq.n	800274e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0304 	and.w	r3, r3, #4
 8002714:	2b00      	cmp	r3, #0
 8002716:	d005      	beq.n	8002724 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002718:	4b59      	ldr	r3, [pc, #356]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	4a58      	ldr	r2, [pc, #352]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 800271e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002722:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0308 	and.w	r3, r3, #8
 800272c:	2b00      	cmp	r3, #0
 800272e:	d005      	beq.n	800273c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002730:	4b53      	ldr	r3, [pc, #332]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	4a52      	ldr	r2, [pc, #328]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 8002736:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800273a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800273c:	4b50      	ldr	r3, [pc, #320]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	494d      	ldr	r1, [pc, #308]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 800274a:	4313      	orrs	r3, r2
 800274c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0301 	and.w	r3, r3, #1
 8002756:	2b00      	cmp	r3, #0
 8002758:	d040      	beq.n	80027dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	2b01      	cmp	r3, #1
 8002760:	d107      	bne.n	8002772 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002762:	4b47      	ldr	r3, [pc, #284]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d115      	bne.n	800279a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e07f      	b.n	8002872 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	2b02      	cmp	r3, #2
 8002778:	d107      	bne.n	800278a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800277a:	4b41      	ldr	r3, [pc, #260]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d109      	bne.n	800279a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e073      	b.n	8002872 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800278a:	4b3d      	ldr	r3, [pc, #244]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d101      	bne.n	800279a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e06b      	b.n	8002872 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800279a:	4b39      	ldr	r3, [pc, #228]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f023 0203 	bic.w	r2, r3, #3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	4936      	ldr	r1, [pc, #216]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 80027a8:	4313      	orrs	r3, r2
 80027aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027ac:	f7ff f9d6 	bl	8001b5c <HAL_GetTick>
 80027b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027b2:	e00a      	b.n	80027ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027b4:	f7ff f9d2 	bl	8001b5c <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	f241 3288 	movw	r2, #5000	; 0x1388
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e053      	b.n	8002872 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ca:	4b2d      	ldr	r3, [pc, #180]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f003 020c 	and.w	r2, r3, #12
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	429a      	cmp	r2, r3
 80027da:	d1eb      	bne.n	80027b4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027dc:	4b27      	ldr	r3, [pc, #156]	; (800287c <HAL_RCC_ClockConfig+0x1c0>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0307 	and.w	r3, r3, #7
 80027e4:	683a      	ldr	r2, [r7, #0]
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d210      	bcs.n	800280c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ea:	4b24      	ldr	r3, [pc, #144]	; (800287c <HAL_RCC_ClockConfig+0x1c0>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f023 0207 	bic.w	r2, r3, #7
 80027f2:	4922      	ldr	r1, [pc, #136]	; (800287c <HAL_RCC_ClockConfig+0x1c0>)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027fa:	4b20      	ldr	r3, [pc, #128]	; (800287c <HAL_RCC_ClockConfig+0x1c0>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0307 	and.w	r3, r3, #7
 8002802:	683a      	ldr	r2, [r7, #0]
 8002804:	429a      	cmp	r2, r3
 8002806:	d001      	beq.n	800280c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e032      	b.n	8002872 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0304 	and.w	r3, r3, #4
 8002814:	2b00      	cmp	r3, #0
 8002816:	d008      	beq.n	800282a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002818:	4b19      	ldr	r3, [pc, #100]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	4916      	ldr	r1, [pc, #88]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 8002826:	4313      	orrs	r3, r2
 8002828:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0308 	and.w	r3, r3, #8
 8002832:	2b00      	cmp	r3, #0
 8002834:	d009      	beq.n	800284a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002836:	4b12      	ldr	r3, [pc, #72]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	691b      	ldr	r3, [r3, #16]
 8002842:	00db      	lsls	r3, r3, #3
 8002844:	490e      	ldr	r1, [pc, #56]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 8002846:	4313      	orrs	r3, r2
 8002848:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800284a:	f000 f821 	bl	8002890 <HAL_RCC_GetSysClockFreq>
 800284e:	4601      	mov	r1, r0
 8002850:	4b0b      	ldr	r3, [pc, #44]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	091b      	lsrs	r3, r3, #4
 8002856:	f003 030f 	and.w	r3, r3, #15
 800285a:	4a0a      	ldr	r2, [pc, #40]	; (8002884 <HAL_RCC_ClockConfig+0x1c8>)
 800285c:	5cd3      	ldrb	r3, [r2, r3]
 800285e:	fa21 f303 	lsr.w	r3, r1, r3
 8002862:	4a09      	ldr	r2, [pc, #36]	; (8002888 <HAL_RCC_ClockConfig+0x1cc>)
 8002864:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002866:	4b09      	ldr	r3, [pc, #36]	; (800288c <HAL_RCC_ClockConfig+0x1d0>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4618      	mov	r0, r3
 800286c:	f7ff f934 	bl	8001ad8 <HAL_InitTick>

  return HAL_OK;
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	3710      	adds	r7, #16
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	40022000 	.word	0x40022000
 8002880:	40021000 	.word	0x40021000
 8002884:	080036e0 	.word	0x080036e0
 8002888:	20000008 	.word	0x20000008
 800288c:	2000000c 	.word	0x2000000c

08002890 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002890:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002892:	b091      	sub	sp, #68	; 0x44
 8002894:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 8002896:	4b56      	ldr	r3, [pc, #344]	; (80029f0 <HAL_RCC_GetSysClockFreq+0x160>)
 8002898:	f107 0414 	add.w	r4, r7, #20
 800289c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800289e:	c407      	stmia	r4!, {r0, r1, r2}
 80028a0:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 80028a2:	4b54      	ldr	r3, [pc, #336]	; (80029f4 <HAL_RCC_GetSysClockFreq+0x164>)
 80028a4:	1d3c      	adds	r4, r7, #4
 80028a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028ac:	2300      	movs	r3, #0
 80028ae:	637b      	str	r3, [r7, #52]	; 0x34
 80028b0:	2300      	movs	r3, #0
 80028b2:	633b      	str	r3, [r7, #48]	; 0x30
 80028b4:	2300      	movs	r3, #0
 80028b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028b8:	2300      	movs	r3, #0
 80028ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t sysclockfreq = 0U;
 80028bc:	2300      	movs	r3, #0
 80028be:	63bb      	str	r3, [r7, #56]	; 0x38
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 80028c0:	2300      	movs	r3, #0
 80028c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80028c4:	2300      	movs	r3, #0
 80028c6:	627b      	str	r3, [r7, #36]	; 0x24
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80028c8:	4b4b      	ldr	r3, [pc, #300]	; (80029f8 <HAL_RCC_GetSysClockFreq+0x168>)
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	637b      	str	r3, [r7, #52]	; 0x34

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028d0:	f003 030c 	and.w	r3, r3, #12
 80028d4:	2b04      	cmp	r3, #4
 80028d6:	d002      	beq.n	80028de <HAL_RCC_GetSysClockFreq+0x4e>
 80028d8:	2b08      	cmp	r3, #8
 80028da:	d003      	beq.n	80028e4 <HAL_RCC_GetSysClockFreq+0x54>
 80028dc:	e07f      	b.n	80029de <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028de:	4b47      	ldr	r3, [pc, #284]	; (80029fc <HAL_RCC_GetSysClockFreq+0x16c>)
 80028e0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80028e2:	e07f      	b.n	80029e4 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80028e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028e6:	0c9b      	lsrs	r3, r3, #18
 80028e8:	f003 030f 	and.w	r3, r3, #15
 80028ec:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80028f0:	4413      	add	r3, r2
 80028f2:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 80028f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80028f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d065      	beq.n	80029ce <HAL_RCC_GetSysClockFreq+0x13e>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8002902:	4b3d      	ldr	r3, [pc, #244]	; (80029f8 <HAL_RCC_GetSysClockFreq+0x168>)
 8002904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002906:	f003 030f 	and.w	r3, r3, #15
 800290a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800290e:	4413      	add	r3, r2
 8002910:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8002914:	633b      	str	r3, [r7, #48]	; 0x30
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8002916:	4b38      	ldr	r3, [pc, #224]	; (80029f8 <HAL_RCC_GetSysClockFreq+0x168>)
 8002918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800291a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d043      	beq.n	80029aa <HAL_RCC_GetSysClockFreq+0x11a>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8002922:	4b35      	ldr	r3, [pc, #212]	; (80029f8 <HAL_RCC_GetSysClockFreq+0x168>)
 8002924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002926:	091b      	lsrs	r3, r3, #4
 8002928:	f003 030f 	and.w	r3, r3, #15
 800292c:	3301      	adds	r3, #1
 800292e:	62bb      	str	r3, [r7, #40]	; 0x28
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8002930:	4b31      	ldr	r3, [pc, #196]	; (80029f8 <HAL_RCC_GetSysClockFreq+0x168>)
 8002932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002934:	0a1b      	lsrs	r3, r3, #8
 8002936:	f003 030f 	and.w	r3, r3, #15
 800293a:	3302      	adds	r3, #2
 800293c:	627b      	str	r3, [r7, #36]	; 0x24
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 800293e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002940:	4619      	mov	r1, r3
 8002942:	f04f 0200 	mov.w	r2, #0
 8002946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002948:	f04f 0400 	mov.w	r4, #0
 800294c:	fb03 f502 	mul.w	r5, r3, r2
 8002950:	fb01 f004 	mul.w	r0, r1, r4
 8002954:	4428      	add	r0, r5
 8002956:	fba1 3403 	umull	r3, r4, r1, r3
 800295a:	1902      	adds	r2, r0, r4
 800295c:	4614      	mov	r4, r2
 800295e:	4a27      	ldr	r2, [pc, #156]	; (80029fc <HAL_RCC_GetSysClockFreq+0x16c>)
 8002960:	fb02 f104 	mul.w	r1, r2, r4
 8002964:	2200      	movs	r2, #0
 8002966:	fb02 f203 	mul.w	r2, r2, r3
 800296a:	440a      	add	r2, r1
 800296c:	4923      	ldr	r1, [pc, #140]	; (80029fc <HAL_RCC_GetSysClockFreq+0x16c>)
 800296e:	fba3 5601 	umull	r5, r6, r3, r1
 8002972:	1993      	adds	r3, r2, r6
 8002974:	461e      	mov	r6, r3
 8002976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002978:	4619      	mov	r1, r3
 800297a:	f04f 0200 	mov.w	r2, #0
 800297e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002980:	f04f 0400 	mov.w	r4, #0
 8002984:	fb03 fc02 	mul.w	ip, r3, r2
 8002988:	fb01 f004 	mul.w	r0, r1, r4
 800298c:	4460      	add	r0, ip
 800298e:	fba1 3403 	umull	r3, r4, r1, r3
 8002992:	1902      	adds	r2, r0, r4
 8002994:	4614      	mov	r4, r2
 8002996:	461a      	mov	r2, r3
 8002998:	4623      	mov	r3, r4
 800299a:	4628      	mov	r0, r5
 800299c:	4631      	mov	r1, r6
 800299e:	f7fd fc41 	bl	8000224 <__aeabi_uldivmod>
 80029a2:	4603      	mov	r3, r0
 80029a4:	460c      	mov	r4, r1
 80029a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029a8:	e007      	b.n	80029ba <HAL_RCC_GetSysClockFreq+0x12a>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 80029aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ac:	4a13      	ldr	r2, [pc, #76]	; (80029fc <HAL_RCC_GetSysClockFreq+0x16c>)
 80029ae:	fb02 f203 	mul.w	r2, r2, r3
 80029b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 80029ba:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80029be:	461a      	mov	r2, r3
 80029c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d108      	bne.n	80029d8 <HAL_RCC_GetSysClockFreq+0x148>
        {
          pllclk = pllclk / 2;
 80029c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029c8:	085b      	lsrs	r3, r3, #1
 80029ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029cc:	e004      	b.n	80029d8 <HAL_RCC_GetSysClockFreq+0x148>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80029ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029d0:	4a0b      	ldr	r2, [pc, #44]	; (8002a00 <HAL_RCC_GetSysClockFreq+0x170>)
 80029d2:	fb02 f303 	mul.w	r3, r2, r3
 80029d6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      sysclockfreq = pllclk;
 80029d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029da:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80029dc:	e002      	b.n	80029e4 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80029de:	4b09      	ldr	r3, [pc, #36]	; (8002a04 <HAL_RCC_GetSysClockFreq+0x174>)
 80029e0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80029e2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3744      	adds	r7, #68	; 0x44
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029ee:	bf00      	nop
 80029f0:	080034e0 	.word	0x080034e0
 80029f4:	080034f0 	.word	0x080034f0
 80029f8:	40021000 	.word	0x40021000
 80029fc:	017d7840 	.word	0x017d7840
 8002a00:	003d0900 	.word	0x003d0900
 8002a04:	007a1200 	.word	0x007a1200

08002a08 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b085      	sub	sp, #20
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002a10:	4b0a      	ldr	r3, [pc, #40]	; (8002a3c <RCC_Delay+0x34>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a0a      	ldr	r2, [pc, #40]	; (8002a40 <RCC_Delay+0x38>)
 8002a16:	fba2 2303 	umull	r2, r3, r2, r3
 8002a1a:	0a5b      	lsrs	r3, r3, #9
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	fb02 f303 	mul.w	r3, r2, r3
 8002a22:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a24:	bf00      	nop
  }
  while (Delay --);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	1e5a      	subs	r2, r3, #1
 8002a2a:	60fa      	str	r2, [r7, #12]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d1f9      	bne.n	8002a24 <RCC_Delay+0x1c>
}
 8002a30:	bf00      	nop
 8002a32:	3714      	adds	r7, #20
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bc80      	pop	{r7}
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	20000008 	.word	0x20000008
 8002a40:	10624dd3 	.word	0x10624dd3

08002a44 <__errno>:
 8002a44:	4b01      	ldr	r3, [pc, #4]	; (8002a4c <__errno+0x8>)
 8002a46:	6818      	ldr	r0, [r3, #0]
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	20000014 	.word	0x20000014

08002a50 <__libc_init_array>:
 8002a50:	b570      	push	{r4, r5, r6, lr}
 8002a52:	2500      	movs	r5, #0
 8002a54:	4e0c      	ldr	r6, [pc, #48]	; (8002a88 <__libc_init_array+0x38>)
 8002a56:	4c0d      	ldr	r4, [pc, #52]	; (8002a8c <__libc_init_array+0x3c>)
 8002a58:	1ba4      	subs	r4, r4, r6
 8002a5a:	10a4      	asrs	r4, r4, #2
 8002a5c:	42a5      	cmp	r5, r4
 8002a5e:	d109      	bne.n	8002a74 <__libc_init_array+0x24>
 8002a60:	f000 fc88 	bl	8003374 <_init>
 8002a64:	2500      	movs	r5, #0
 8002a66:	4e0a      	ldr	r6, [pc, #40]	; (8002a90 <__libc_init_array+0x40>)
 8002a68:	4c0a      	ldr	r4, [pc, #40]	; (8002a94 <__libc_init_array+0x44>)
 8002a6a:	1ba4      	subs	r4, r4, r6
 8002a6c:	10a4      	asrs	r4, r4, #2
 8002a6e:	42a5      	cmp	r5, r4
 8002a70:	d105      	bne.n	8002a7e <__libc_init_array+0x2e>
 8002a72:	bd70      	pop	{r4, r5, r6, pc}
 8002a74:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002a78:	4798      	blx	r3
 8002a7a:	3501      	adds	r5, #1
 8002a7c:	e7ee      	b.n	8002a5c <__libc_init_array+0xc>
 8002a7e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002a82:	4798      	blx	r3
 8002a84:	3501      	adds	r5, #1
 8002a86:	e7f2      	b.n	8002a6e <__libc_init_array+0x1e>
 8002a88:	0800375c 	.word	0x0800375c
 8002a8c:	0800375c 	.word	0x0800375c
 8002a90:	0800375c 	.word	0x0800375c
 8002a94:	08003760 	.word	0x08003760

08002a98 <memset>:
 8002a98:	4603      	mov	r3, r0
 8002a9a:	4402      	add	r2, r0
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d100      	bne.n	8002aa2 <memset+0xa>
 8002aa0:	4770      	bx	lr
 8002aa2:	f803 1b01 	strb.w	r1, [r3], #1
 8002aa6:	e7f9      	b.n	8002a9c <memset+0x4>

08002aa8 <_puts_r>:
 8002aa8:	b570      	push	{r4, r5, r6, lr}
 8002aaa:	460e      	mov	r6, r1
 8002aac:	4605      	mov	r5, r0
 8002aae:	b118      	cbz	r0, 8002ab8 <_puts_r+0x10>
 8002ab0:	6983      	ldr	r3, [r0, #24]
 8002ab2:	b90b      	cbnz	r3, 8002ab8 <_puts_r+0x10>
 8002ab4:	f000 fa0c 	bl	8002ed0 <__sinit>
 8002ab8:	69ab      	ldr	r3, [r5, #24]
 8002aba:	68ac      	ldr	r4, [r5, #8]
 8002abc:	b913      	cbnz	r3, 8002ac4 <_puts_r+0x1c>
 8002abe:	4628      	mov	r0, r5
 8002ac0:	f000 fa06 	bl	8002ed0 <__sinit>
 8002ac4:	4b23      	ldr	r3, [pc, #140]	; (8002b54 <_puts_r+0xac>)
 8002ac6:	429c      	cmp	r4, r3
 8002ac8:	d117      	bne.n	8002afa <_puts_r+0x52>
 8002aca:	686c      	ldr	r4, [r5, #4]
 8002acc:	89a3      	ldrh	r3, [r4, #12]
 8002ace:	071b      	lsls	r3, r3, #28
 8002ad0:	d51d      	bpl.n	8002b0e <_puts_r+0x66>
 8002ad2:	6923      	ldr	r3, [r4, #16]
 8002ad4:	b1db      	cbz	r3, 8002b0e <_puts_r+0x66>
 8002ad6:	3e01      	subs	r6, #1
 8002ad8:	68a3      	ldr	r3, [r4, #8]
 8002ada:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002ade:	3b01      	subs	r3, #1
 8002ae0:	60a3      	str	r3, [r4, #8]
 8002ae2:	b9e9      	cbnz	r1, 8002b20 <_puts_r+0x78>
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	da2e      	bge.n	8002b46 <_puts_r+0x9e>
 8002ae8:	4622      	mov	r2, r4
 8002aea:	210a      	movs	r1, #10
 8002aec:	4628      	mov	r0, r5
 8002aee:	f000 f83f 	bl	8002b70 <__swbuf_r>
 8002af2:	3001      	adds	r0, #1
 8002af4:	d011      	beq.n	8002b1a <_puts_r+0x72>
 8002af6:	200a      	movs	r0, #10
 8002af8:	e011      	b.n	8002b1e <_puts_r+0x76>
 8002afa:	4b17      	ldr	r3, [pc, #92]	; (8002b58 <_puts_r+0xb0>)
 8002afc:	429c      	cmp	r4, r3
 8002afe:	d101      	bne.n	8002b04 <_puts_r+0x5c>
 8002b00:	68ac      	ldr	r4, [r5, #8]
 8002b02:	e7e3      	b.n	8002acc <_puts_r+0x24>
 8002b04:	4b15      	ldr	r3, [pc, #84]	; (8002b5c <_puts_r+0xb4>)
 8002b06:	429c      	cmp	r4, r3
 8002b08:	bf08      	it	eq
 8002b0a:	68ec      	ldreq	r4, [r5, #12]
 8002b0c:	e7de      	b.n	8002acc <_puts_r+0x24>
 8002b0e:	4621      	mov	r1, r4
 8002b10:	4628      	mov	r0, r5
 8002b12:	f000 f87f 	bl	8002c14 <__swsetup_r>
 8002b16:	2800      	cmp	r0, #0
 8002b18:	d0dd      	beq.n	8002ad6 <_puts_r+0x2e>
 8002b1a:	f04f 30ff 	mov.w	r0, #4294967295
 8002b1e:	bd70      	pop	{r4, r5, r6, pc}
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	da04      	bge.n	8002b2e <_puts_r+0x86>
 8002b24:	69a2      	ldr	r2, [r4, #24]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	dc06      	bgt.n	8002b38 <_puts_r+0x90>
 8002b2a:	290a      	cmp	r1, #10
 8002b2c:	d004      	beq.n	8002b38 <_puts_r+0x90>
 8002b2e:	6823      	ldr	r3, [r4, #0]
 8002b30:	1c5a      	adds	r2, r3, #1
 8002b32:	6022      	str	r2, [r4, #0]
 8002b34:	7019      	strb	r1, [r3, #0]
 8002b36:	e7cf      	b.n	8002ad8 <_puts_r+0x30>
 8002b38:	4622      	mov	r2, r4
 8002b3a:	4628      	mov	r0, r5
 8002b3c:	f000 f818 	bl	8002b70 <__swbuf_r>
 8002b40:	3001      	adds	r0, #1
 8002b42:	d1c9      	bne.n	8002ad8 <_puts_r+0x30>
 8002b44:	e7e9      	b.n	8002b1a <_puts_r+0x72>
 8002b46:	200a      	movs	r0, #10
 8002b48:	6823      	ldr	r3, [r4, #0]
 8002b4a:	1c5a      	adds	r2, r3, #1
 8002b4c:	6022      	str	r2, [r4, #0]
 8002b4e:	7018      	strb	r0, [r3, #0]
 8002b50:	e7e5      	b.n	8002b1e <_puts_r+0x76>
 8002b52:	bf00      	nop
 8002b54:	08003714 	.word	0x08003714
 8002b58:	08003734 	.word	0x08003734
 8002b5c:	080036f4 	.word	0x080036f4

08002b60 <puts>:
 8002b60:	4b02      	ldr	r3, [pc, #8]	; (8002b6c <puts+0xc>)
 8002b62:	4601      	mov	r1, r0
 8002b64:	6818      	ldr	r0, [r3, #0]
 8002b66:	f7ff bf9f 	b.w	8002aa8 <_puts_r>
 8002b6a:	bf00      	nop
 8002b6c:	20000014 	.word	0x20000014

08002b70 <__swbuf_r>:
 8002b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b72:	460e      	mov	r6, r1
 8002b74:	4614      	mov	r4, r2
 8002b76:	4605      	mov	r5, r0
 8002b78:	b118      	cbz	r0, 8002b82 <__swbuf_r+0x12>
 8002b7a:	6983      	ldr	r3, [r0, #24]
 8002b7c:	b90b      	cbnz	r3, 8002b82 <__swbuf_r+0x12>
 8002b7e:	f000 f9a7 	bl	8002ed0 <__sinit>
 8002b82:	4b21      	ldr	r3, [pc, #132]	; (8002c08 <__swbuf_r+0x98>)
 8002b84:	429c      	cmp	r4, r3
 8002b86:	d12a      	bne.n	8002bde <__swbuf_r+0x6e>
 8002b88:	686c      	ldr	r4, [r5, #4]
 8002b8a:	69a3      	ldr	r3, [r4, #24]
 8002b8c:	60a3      	str	r3, [r4, #8]
 8002b8e:	89a3      	ldrh	r3, [r4, #12]
 8002b90:	071a      	lsls	r2, r3, #28
 8002b92:	d52e      	bpl.n	8002bf2 <__swbuf_r+0x82>
 8002b94:	6923      	ldr	r3, [r4, #16]
 8002b96:	b363      	cbz	r3, 8002bf2 <__swbuf_r+0x82>
 8002b98:	6923      	ldr	r3, [r4, #16]
 8002b9a:	6820      	ldr	r0, [r4, #0]
 8002b9c:	b2f6      	uxtb	r6, r6
 8002b9e:	1ac0      	subs	r0, r0, r3
 8002ba0:	6963      	ldr	r3, [r4, #20]
 8002ba2:	4637      	mov	r7, r6
 8002ba4:	4283      	cmp	r3, r0
 8002ba6:	dc04      	bgt.n	8002bb2 <__swbuf_r+0x42>
 8002ba8:	4621      	mov	r1, r4
 8002baa:	4628      	mov	r0, r5
 8002bac:	f000 f926 	bl	8002dfc <_fflush_r>
 8002bb0:	bb28      	cbnz	r0, 8002bfe <__swbuf_r+0x8e>
 8002bb2:	68a3      	ldr	r3, [r4, #8]
 8002bb4:	3001      	adds	r0, #1
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	60a3      	str	r3, [r4, #8]
 8002bba:	6823      	ldr	r3, [r4, #0]
 8002bbc:	1c5a      	adds	r2, r3, #1
 8002bbe:	6022      	str	r2, [r4, #0]
 8002bc0:	701e      	strb	r6, [r3, #0]
 8002bc2:	6963      	ldr	r3, [r4, #20]
 8002bc4:	4283      	cmp	r3, r0
 8002bc6:	d004      	beq.n	8002bd2 <__swbuf_r+0x62>
 8002bc8:	89a3      	ldrh	r3, [r4, #12]
 8002bca:	07db      	lsls	r3, r3, #31
 8002bcc:	d519      	bpl.n	8002c02 <__swbuf_r+0x92>
 8002bce:	2e0a      	cmp	r6, #10
 8002bd0:	d117      	bne.n	8002c02 <__swbuf_r+0x92>
 8002bd2:	4621      	mov	r1, r4
 8002bd4:	4628      	mov	r0, r5
 8002bd6:	f000 f911 	bl	8002dfc <_fflush_r>
 8002bda:	b190      	cbz	r0, 8002c02 <__swbuf_r+0x92>
 8002bdc:	e00f      	b.n	8002bfe <__swbuf_r+0x8e>
 8002bde:	4b0b      	ldr	r3, [pc, #44]	; (8002c0c <__swbuf_r+0x9c>)
 8002be0:	429c      	cmp	r4, r3
 8002be2:	d101      	bne.n	8002be8 <__swbuf_r+0x78>
 8002be4:	68ac      	ldr	r4, [r5, #8]
 8002be6:	e7d0      	b.n	8002b8a <__swbuf_r+0x1a>
 8002be8:	4b09      	ldr	r3, [pc, #36]	; (8002c10 <__swbuf_r+0xa0>)
 8002bea:	429c      	cmp	r4, r3
 8002bec:	bf08      	it	eq
 8002bee:	68ec      	ldreq	r4, [r5, #12]
 8002bf0:	e7cb      	b.n	8002b8a <__swbuf_r+0x1a>
 8002bf2:	4621      	mov	r1, r4
 8002bf4:	4628      	mov	r0, r5
 8002bf6:	f000 f80d 	bl	8002c14 <__swsetup_r>
 8002bfa:	2800      	cmp	r0, #0
 8002bfc:	d0cc      	beq.n	8002b98 <__swbuf_r+0x28>
 8002bfe:	f04f 37ff 	mov.w	r7, #4294967295
 8002c02:	4638      	mov	r0, r7
 8002c04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c06:	bf00      	nop
 8002c08:	08003714 	.word	0x08003714
 8002c0c:	08003734 	.word	0x08003734
 8002c10:	080036f4 	.word	0x080036f4

08002c14 <__swsetup_r>:
 8002c14:	4b32      	ldr	r3, [pc, #200]	; (8002ce0 <__swsetup_r+0xcc>)
 8002c16:	b570      	push	{r4, r5, r6, lr}
 8002c18:	681d      	ldr	r5, [r3, #0]
 8002c1a:	4606      	mov	r6, r0
 8002c1c:	460c      	mov	r4, r1
 8002c1e:	b125      	cbz	r5, 8002c2a <__swsetup_r+0x16>
 8002c20:	69ab      	ldr	r3, [r5, #24]
 8002c22:	b913      	cbnz	r3, 8002c2a <__swsetup_r+0x16>
 8002c24:	4628      	mov	r0, r5
 8002c26:	f000 f953 	bl	8002ed0 <__sinit>
 8002c2a:	4b2e      	ldr	r3, [pc, #184]	; (8002ce4 <__swsetup_r+0xd0>)
 8002c2c:	429c      	cmp	r4, r3
 8002c2e:	d10f      	bne.n	8002c50 <__swsetup_r+0x3c>
 8002c30:	686c      	ldr	r4, [r5, #4]
 8002c32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002c36:	b29a      	uxth	r2, r3
 8002c38:	0715      	lsls	r5, r2, #28
 8002c3a:	d42c      	bmi.n	8002c96 <__swsetup_r+0x82>
 8002c3c:	06d0      	lsls	r0, r2, #27
 8002c3e:	d411      	bmi.n	8002c64 <__swsetup_r+0x50>
 8002c40:	2209      	movs	r2, #9
 8002c42:	6032      	str	r2, [r6, #0]
 8002c44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c48:	81a3      	strh	r3, [r4, #12]
 8002c4a:	f04f 30ff 	mov.w	r0, #4294967295
 8002c4e:	e03e      	b.n	8002cce <__swsetup_r+0xba>
 8002c50:	4b25      	ldr	r3, [pc, #148]	; (8002ce8 <__swsetup_r+0xd4>)
 8002c52:	429c      	cmp	r4, r3
 8002c54:	d101      	bne.n	8002c5a <__swsetup_r+0x46>
 8002c56:	68ac      	ldr	r4, [r5, #8]
 8002c58:	e7eb      	b.n	8002c32 <__swsetup_r+0x1e>
 8002c5a:	4b24      	ldr	r3, [pc, #144]	; (8002cec <__swsetup_r+0xd8>)
 8002c5c:	429c      	cmp	r4, r3
 8002c5e:	bf08      	it	eq
 8002c60:	68ec      	ldreq	r4, [r5, #12]
 8002c62:	e7e6      	b.n	8002c32 <__swsetup_r+0x1e>
 8002c64:	0751      	lsls	r1, r2, #29
 8002c66:	d512      	bpl.n	8002c8e <__swsetup_r+0x7a>
 8002c68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002c6a:	b141      	cbz	r1, 8002c7e <__swsetup_r+0x6a>
 8002c6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002c70:	4299      	cmp	r1, r3
 8002c72:	d002      	beq.n	8002c7a <__swsetup_r+0x66>
 8002c74:	4630      	mov	r0, r6
 8002c76:	f000 fa19 	bl	80030ac <_free_r>
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	6363      	str	r3, [r4, #52]	; 0x34
 8002c7e:	89a3      	ldrh	r3, [r4, #12]
 8002c80:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002c84:	81a3      	strh	r3, [r4, #12]
 8002c86:	2300      	movs	r3, #0
 8002c88:	6063      	str	r3, [r4, #4]
 8002c8a:	6923      	ldr	r3, [r4, #16]
 8002c8c:	6023      	str	r3, [r4, #0]
 8002c8e:	89a3      	ldrh	r3, [r4, #12]
 8002c90:	f043 0308 	orr.w	r3, r3, #8
 8002c94:	81a3      	strh	r3, [r4, #12]
 8002c96:	6923      	ldr	r3, [r4, #16]
 8002c98:	b94b      	cbnz	r3, 8002cae <__swsetup_r+0x9a>
 8002c9a:	89a3      	ldrh	r3, [r4, #12]
 8002c9c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002ca0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ca4:	d003      	beq.n	8002cae <__swsetup_r+0x9a>
 8002ca6:	4621      	mov	r1, r4
 8002ca8:	4630      	mov	r0, r6
 8002caa:	f000 f9bf 	bl	800302c <__smakebuf_r>
 8002cae:	89a2      	ldrh	r2, [r4, #12]
 8002cb0:	f012 0301 	ands.w	r3, r2, #1
 8002cb4:	d00c      	beq.n	8002cd0 <__swsetup_r+0xbc>
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	60a3      	str	r3, [r4, #8]
 8002cba:	6963      	ldr	r3, [r4, #20]
 8002cbc:	425b      	negs	r3, r3
 8002cbe:	61a3      	str	r3, [r4, #24]
 8002cc0:	6923      	ldr	r3, [r4, #16]
 8002cc2:	b953      	cbnz	r3, 8002cda <__swsetup_r+0xc6>
 8002cc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002cc8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8002ccc:	d1ba      	bne.n	8002c44 <__swsetup_r+0x30>
 8002cce:	bd70      	pop	{r4, r5, r6, pc}
 8002cd0:	0792      	lsls	r2, r2, #30
 8002cd2:	bf58      	it	pl
 8002cd4:	6963      	ldrpl	r3, [r4, #20]
 8002cd6:	60a3      	str	r3, [r4, #8]
 8002cd8:	e7f2      	b.n	8002cc0 <__swsetup_r+0xac>
 8002cda:	2000      	movs	r0, #0
 8002cdc:	e7f7      	b.n	8002cce <__swsetup_r+0xba>
 8002cde:	bf00      	nop
 8002ce0:	20000014 	.word	0x20000014
 8002ce4:	08003714 	.word	0x08003714
 8002ce8:	08003734 	.word	0x08003734
 8002cec:	080036f4 	.word	0x080036f4

08002cf0 <__sflush_r>:
 8002cf0:	898a      	ldrh	r2, [r1, #12]
 8002cf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002cf6:	4605      	mov	r5, r0
 8002cf8:	0710      	lsls	r0, r2, #28
 8002cfa:	460c      	mov	r4, r1
 8002cfc:	d458      	bmi.n	8002db0 <__sflush_r+0xc0>
 8002cfe:	684b      	ldr	r3, [r1, #4]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	dc05      	bgt.n	8002d10 <__sflush_r+0x20>
 8002d04:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	dc02      	bgt.n	8002d10 <__sflush_r+0x20>
 8002d0a:	2000      	movs	r0, #0
 8002d0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002d10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002d12:	2e00      	cmp	r6, #0
 8002d14:	d0f9      	beq.n	8002d0a <__sflush_r+0x1a>
 8002d16:	2300      	movs	r3, #0
 8002d18:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002d1c:	682f      	ldr	r7, [r5, #0]
 8002d1e:	6a21      	ldr	r1, [r4, #32]
 8002d20:	602b      	str	r3, [r5, #0]
 8002d22:	d032      	beq.n	8002d8a <__sflush_r+0x9a>
 8002d24:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002d26:	89a3      	ldrh	r3, [r4, #12]
 8002d28:	075a      	lsls	r2, r3, #29
 8002d2a:	d505      	bpl.n	8002d38 <__sflush_r+0x48>
 8002d2c:	6863      	ldr	r3, [r4, #4]
 8002d2e:	1ac0      	subs	r0, r0, r3
 8002d30:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002d32:	b10b      	cbz	r3, 8002d38 <__sflush_r+0x48>
 8002d34:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002d36:	1ac0      	subs	r0, r0, r3
 8002d38:	2300      	movs	r3, #0
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002d3e:	6a21      	ldr	r1, [r4, #32]
 8002d40:	4628      	mov	r0, r5
 8002d42:	47b0      	blx	r6
 8002d44:	1c43      	adds	r3, r0, #1
 8002d46:	89a3      	ldrh	r3, [r4, #12]
 8002d48:	d106      	bne.n	8002d58 <__sflush_r+0x68>
 8002d4a:	6829      	ldr	r1, [r5, #0]
 8002d4c:	291d      	cmp	r1, #29
 8002d4e:	d848      	bhi.n	8002de2 <__sflush_r+0xf2>
 8002d50:	4a29      	ldr	r2, [pc, #164]	; (8002df8 <__sflush_r+0x108>)
 8002d52:	40ca      	lsrs	r2, r1
 8002d54:	07d6      	lsls	r6, r2, #31
 8002d56:	d544      	bpl.n	8002de2 <__sflush_r+0xf2>
 8002d58:	2200      	movs	r2, #0
 8002d5a:	6062      	str	r2, [r4, #4]
 8002d5c:	6922      	ldr	r2, [r4, #16]
 8002d5e:	04d9      	lsls	r1, r3, #19
 8002d60:	6022      	str	r2, [r4, #0]
 8002d62:	d504      	bpl.n	8002d6e <__sflush_r+0x7e>
 8002d64:	1c42      	adds	r2, r0, #1
 8002d66:	d101      	bne.n	8002d6c <__sflush_r+0x7c>
 8002d68:	682b      	ldr	r3, [r5, #0]
 8002d6a:	b903      	cbnz	r3, 8002d6e <__sflush_r+0x7e>
 8002d6c:	6560      	str	r0, [r4, #84]	; 0x54
 8002d6e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002d70:	602f      	str	r7, [r5, #0]
 8002d72:	2900      	cmp	r1, #0
 8002d74:	d0c9      	beq.n	8002d0a <__sflush_r+0x1a>
 8002d76:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002d7a:	4299      	cmp	r1, r3
 8002d7c:	d002      	beq.n	8002d84 <__sflush_r+0x94>
 8002d7e:	4628      	mov	r0, r5
 8002d80:	f000 f994 	bl	80030ac <_free_r>
 8002d84:	2000      	movs	r0, #0
 8002d86:	6360      	str	r0, [r4, #52]	; 0x34
 8002d88:	e7c0      	b.n	8002d0c <__sflush_r+0x1c>
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	4628      	mov	r0, r5
 8002d8e:	47b0      	blx	r6
 8002d90:	1c41      	adds	r1, r0, #1
 8002d92:	d1c8      	bne.n	8002d26 <__sflush_r+0x36>
 8002d94:	682b      	ldr	r3, [r5, #0]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d0c5      	beq.n	8002d26 <__sflush_r+0x36>
 8002d9a:	2b1d      	cmp	r3, #29
 8002d9c:	d001      	beq.n	8002da2 <__sflush_r+0xb2>
 8002d9e:	2b16      	cmp	r3, #22
 8002da0:	d101      	bne.n	8002da6 <__sflush_r+0xb6>
 8002da2:	602f      	str	r7, [r5, #0]
 8002da4:	e7b1      	b.n	8002d0a <__sflush_r+0x1a>
 8002da6:	89a3      	ldrh	r3, [r4, #12]
 8002da8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002dac:	81a3      	strh	r3, [r4, #12]
 8002dae:	e7ad      	b.n	8002d0c <__sflush_r+0x1c>
 8002db0:	690f      	ldr	r7, [r1, #16]
 8002db2:	2f00      	cmp	r7, #0
 8002db4:	d0a9      	beq.n	8002d0a <__sflush_r+0x1a>
 8002db6:	0793      	lsls	r3, r2, #30
 8002db8:	bf18      	it	ne
 8002dba:	2300      	movne	r3, #0
 8002dbc:	680e      	ldr	r6, [r1, #0]
 8002dbe:	bf08      	it	eq
 8002dc0:	694b      	ldreq	r3, [r1, #20]
 8002dc2:	eba6 0807 	sub.w	r8, r6, r7
 8002dc6:	600f      	str	r7, [r1, #0]
 8002dc8:	608b      	str	r3, [r1, #8]
 8002dca:	f1b8 0f00 	cmp.w	r8, #0
 8002dce:	dd9c      	ble.n	8002d0a <__sflush_r+0x1a>
 8002dd0:	4643      	mov	r3, r8
 8002dd2:	463a      	mov	r2, r7
 8002dd4:	6a21      	ldr	r1, [r4, #32]
 8002dd6:	4628      	mov	r0, r5
 8002dd8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002dda:	47b0      	blx	r6
 8002ddc:	2800      	cmp	r0, #0
 8002dde:	dc06      	bgt.n	8002dee <__sflush_r+0xfe>
 8002de0:	89a3      	ldrh	r3, [r4, #12]
 8002de2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002de6:	81a3      	strh	r3, [r4, #12]
 8002de8:	f04f 30ff 	mov.w	r0, #4294967295
 8002dec:	e78e      	b.n	8002d0c <__sflush_r+0x1c>
 8002dee:	4407      	add	r7, r0
 8002df0:	eba8 0800 	sub.w	r8, r8, r0
 8002df4:	e7e9      	b.n	8002dca <__sflush_r+0xda>
 8002df6:	bf00      	nop
 8002df8:	20400001 	.word	0x20400001

08002dfc <_fflush_r>:
 8002dfc:	b538      	push	{r3, r4, r5, lr}
 8002dfe:	690b      	ldr	r3, [r1, #16]
 8002e00:	4605      	mov	r5, r0
 8002e02:	460c      	mov	r4, r1
 8002e04:	b1db      	cbz	r3, 8002e3e <_fflush_r+0x42>
 8002e06:	b118      	cbz	r0, 8002e10 <_fflush_r+0x14>
 8002e08:	6983      	ldr	r3, [r0, #24]
 8002e0a:	b90b      	cbnz	r3, 8002e10 <_fflush_r+0x14>
 8002e0c:	f000 f860 	bl	8002ed0 <__sinit>
 8002e10:	4b0c      	ldr	r3, [pc, #48]	; (8002e44 <_fflush_r+0x48>)
 8002e12:	429c      	cmp	r4, r3
 8002e14:	d109      	bne.n	8002e2a <_fflush_r+0x2e>
 8002e16:	686c      	ldr	r4, [r5, #4]
 8002e18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e1c:	b17b      	cbz	r3, 8002e3e <_fflush_r+0x42>
 8002e1e:	4621      	mov	r1, r4
 8002e20:	4628      	mov	r0, r5
 8002e22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002e26:	f7ff bf63 	b.w	8002cf0 <__sflush_r>
 8002e2a:	4b07      	ldr	r3, [pc, #28]	; (8002e48 <_fflush_r+0x4c>)
 8002e2c:	429c      	cmp	r4, r3
 8002e2e:	d101      	bne.n	8002e34 <_fflush_r+0x38>
 8002e30:	68ac      	ldr	r4, [r5, #8]
 8002e32:	e7f1      	b.n	8002e18 <_fflush_r+0x1c>
 8002e34:	4b05      	ldr	r3, [pc, #20]	; (8002e4c <_fflush_r+0x50>)
 8002e36:	429c      	cmp	r4, r3
 8002e38:	bf08      	it	eq
 8002e3a:	68ec      	ldreq	r4, [r5, #12]
 8002e3c:	e7ec      	b.n	8002e18 <_fflush_r+0x1c>
 8002e3e:	2000      	movs	r0, #0
 8002e40:	bd38      	pop	{r3, r4, r5, pc}
 8002e42:	bf00      	nop
 8002e44:	08003714 	.word	0x08003714
 8002e48:	08003734 	.word	0x08003734
 8002e4c:	080036f4 	.word	0x080036f4

08002e50 <std>:
 8002e50:	2300      	movs	r3, #0
 8002e52:	b510      	push	{r4, lr}
 8002e54:	4604      	mov	r4, r0
 8002e56:	e9c0 3300 	strd	r3, r3, [r0]
 8002e5a:	6083      	str	r3, [r0, #8]
 8002e5c:	8181      	strh	r1, [r0, #12]
 8002e5e:	6643      	str	r3, [r0, #100]	; 0x64
 8002e60:	81c2      	strh	r2, [r0, #14]
 8002e62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002e66:	6183      	str	r3, [r0, #24]
 8002e68:	4619      	mov	r1, r3
 8002e6a:	2208      	movs	r2, #8
 8002e6c:	305c      	adds	r0, #92	; 0x5c
 8002e6e:	f7ff fe13 	bl	8002a98 <memset>
 8002e72:	4b05      	ldr	r3, [pc, #20]	; (8002e88 <std+0x38>)
 8002e74:	6224      	str	r4, [r4, #32]
 8002e76:	6263      	str	r3, [r4, #36]	; 0x24
 8002e78:	4b04      	ldr	r3, [pc, #16]	; (8002e8c <std+0x3c>)
 8002e7a:	62a3      	str	r3, [r4, #40]	; 0x28
 8002e7c:	4b04      	ldr	r3, [pc, #16]	; (8002e90 <std+0x40>)
 8002e7e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002e80:	4b04      	ldr	r3, [pc, #16]	; (8002e94 <std+0x44>)
 8002e82:	6323      	str	r3, [r4, #48]	; 0x30
 8002e84:	bd10      	pop	{r4, pc}
 8002e86:	bf00      	nop
 8002e88:	08003219 	.word	0x08003219
 8002e8c:	0800323b 	.word	0x0800323b
 8002e90:	08003273 	.word	0x08003273
 8002e94:	08003297 	.word	0x08003297

08002e98 <_cleanup_r>:
 8002e98:	4901      	ldr	r1, [pc, #4]	; (8002ea0 <_cleanup_r+0x8>)
 8002e9a:	f000 b885 	b.w	8002fa8 <_fwalk_reent>
 8002e9e:	bf00      	nop
 8002ea0:	08002dfd 	.word	0x08002dfd

08002ea4 <__sfmoreglue>:
 8002ea4:	b570      	push	{r4, r5, r6, lr}
 8002ea6:	2568      	movs	r5, #104	; 0x68
 8002ea8:	1e4a      	subs	r2, r1, #1
 8002eaa:	4355      	muls	r5, r2
 8002eac:	460e      	mov	r6, r1
 8002eae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002eb2:	f000 f947 	bl	8003144 <_malloc_r>
 8002eb6:	4604      	mov	r4, r0
 8002eb8:	b140      	cbz	r0, 8002ecc <__sfmoreglue+0x28>
 8002eba:	2100      	movs	r1, #0
 8002ebc:	e9c0 1600 	strd	r1, r6, [r0]
 8002ec0:	300c      	adds	r0, #12
 8002ec2:	60a0      	str	r0, [r4, #8]
 8002ec4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002ec8:	f7ff fde6 	bl	8002a98 <memset>
 8002ecc:	4620      	mov	r0, r4
 8002ece:	bd70      	pop	{r4, r5, r6, pc}

08002ed0 <__sinit>:
 8002ed0:	6983      	ldr	r3, [r0, #24]
 8002ed2:	b510      	push	{r4, lr}
 8002ed4:	4604      	mov	r4, r0
 8002ed6:	bb33      	cbnz	r3, 8002f26 <__sinit+0x56>
 8002ed8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8002edc:	6503      	str	r3, [r0, #80]	; 0x50
 8002ede:	4b12      	ldr	r3, [pc, #72]	; (8002f28 <__sinit+0x58>)
 8002ee0:	4a12      	ldr	r2, [pc, #72]	; (8002f2c <__sinit+0x5c>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	6282      	str	r2, [r0, #40]	; 0x28
 8002ee6:	4298      	cmp	r0, r3
 8002ee8:	bf04      	itt	eq
 8002eea:	2301      	moveq	r3, #1
 8002eec:	6183      	streq	r3, [r0, #24]
 8002eee:	f000 f81f 	bl	8002f30 <__sfp>
 8002ef2:	6060      	str	r0, [r4, #4]
 8002ef4:	4620      	mov	r0, r4
 8002ef6:	f000 f81b 	bl	8002f30 <__sfp>
 8002efa:	60a0      	str	r0, [r4, #8]
 8002efc:	4620      	mov	r0, r4
 8002efe:	f000 f817 	bl	8002f30 <__sfp>
 8002f02:	2200      	movs	r2, #0
 8002f04:	60e0      	str	r0, [r4, #12]
 8002f06:	2104      	movs	r1, #4
 8002f08:	6860      	ldr	r0, [r4, #4]
 8002f0a:	f7ff ffa1 	bl	8002e50 <std>
 8002f0e:	2201      	movs	r2, #1
 8002f10:	2109      	movs	r1, #9
 8002f12:	68a0      	ldr	r0, [r4, #8]
 8002f14:	f7ff ff9c 	bl	8002e50 <std>
 8002f18:	2202      	movs	r2, #2
 8002f1a:	2112      	movs	r1, #18
 8002f1c:	68e0      	ldr	r0, [r4, #12]
 8002f1e:	f7ff ff97 	bl	8002e50 <std>
 8002f22:	2301      	movs	r3, #1
 8002f24:	61a3      	str	r3, [r4, #24]
 8002f26:	bd10      	pop	{r4, pc}
 8002f28:	080036f0 	.word	0x080036f0
 8002f2c:	08002e99 	.word	0x08002e99

08002f30 <__sfp>:
 8002f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f32:	4b1b      	ldr	r3, [pc, #108]	; (8002fa0 <__sfp+0x70>)
 8002f34:	4607      	mov	r7, r0
 8002f36:	681e      	ldr	r6, [r3, #0]
 8002f38:	69b3      	ldr	r3, [r6, #24]
 8002f3a:	b913      	cbnz	r3, 8002f42 <__sfp+0x12>
 8002f3c:	4630      	mov	r0, r6
 8002f3e:	f7ff ffc7 	bl	8002ed0 <__sinit>
 8002f42:	3648      	adds	r6, #72	; 0x48
 8002f44:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002f48:	3b01      	subs	r3, #1
 8002f4a:	d503      	bpl.n	8002f54 <__sfp+0x24>
 8002f4c:	6833      	ldr	r3, [r6, #0]
 8002f4e:	b133      	cbz	r3, 8002f5e <__sfp+0x2e>
 8002f50:	6836      	ldr	r6, [r6, #0]
 8002f52:	e7f7      	b.n	8002f44 <__sfp+0x14>
 8002f54:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002f58:	b16d      	cbz	r5, 8002f76 <__sfp+0x46>
 8002f5a:	3468      	adds	r4, #104	; 0x68
 8002f5c:	e7f4      	b.n	8002f48 <__sfp+0x18>
 8002f5e:	2104      	movs	r1, #4
 8002f60:	4638      	mov	r0, r7
 8002f62:	f7ff ff9f 	bl	8002ea4 <__sfmoreglue>
 8002f66:	6030      	str	r0, [r6, #0]
 8002f68:	2800      	cmp	r0, #0
 8002f6a:	d1f1      	bne.n	8002f50 <__sfp+0x20>
 8002f6c:	230c      	movs	r3, #12
 8002f6e:	4604      	mov	r4, r0
 8002f70:	603b      	str	r3, [r7, #0]
 8002f72:	4620      	mov	r0, r4
 8002f74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f76:	4b0b      	ldr	r3, [pc, #44]	; (8002fa4 <__sfp+0x74>)
 8002f78:	6665      	str	r5, [r4, #100]	; 0x64
 8002f7a:	e9c4 5500 	strd	r5, r5, [r4]
 8002f7e:	60a5      	str	r5, [r4, #8]
 8002f80:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8002f84:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8002f88:	2208      	movs	r2, #8
 8002f8a:	4629      	mov	r1, r5
 8002f8c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002f90:	f7ff fd82 	bl	8002a98 <memset>
 8002f94:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002f98:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002f9c:	e7e9      	b.n	8002f72 <__sfp+0x42>
 8002f9e:	bf00      	nop
 8002fa0:	080036f0 	.word	0x080036f0
 8002fa4:	ffff0001 	.word	0xffff0001

08002fa8 <_fwalk_reent>:
 8002fa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002fac:	4680      	mov	r8, r0
 8002fae:	4689      	mov	r9, r1
 8002fb0:	2600      	movs	r6, #0
 8002fb2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002fb6:	b914      	cbnz	r4, 8002fbe <_fwalk_reent+0x16>
 8002fb8:	4630      	mov	r0, r6
 8002fba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002fbe:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8002fc2:	3f01      	subs	r7, #1
 8002fc4:	d501      	bpl.n	8002fca <_fwalk_reent+0x22>
 8002fc6:	6824      	ldr	r4, [r4, #0]
 8002fc8:	e7f5      	b.n	8002fb6 <_fwalk_reent+0xe>
 8002fca:	89ab      	ldrh	r3, [r5, #12]
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d907      	bls.n	8002fe0 <_fwalk_reent+0x38>
 8002fd0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	d003      	beq.n	8002fe0 <_fwalk_reent+0x38>
 8002fd8:	4629      	mov	r1, r5
 8002fda:	4640      	mov	r0, r8
 8002fdc:	47c8      	blx	r9
 8002fde:	4306      	orrs	r6, r0
 8002fe0:	3568      	adds	r5, #104	; 0x68
 8002fe2:	e7ee      	b.n	8002fc2 <_fwalk_reent+0x1a>

08002fe4 <__swhatbuf_r>:
 8002fe4:	b570      	push	{r4, r5, r6, lr}
 8002fe6:	460e      	mov	r6, r1
 8002fe8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002fec:	b096      	sub	sp, #88	; 0x58
 8002fee:	2900      	cmp	r1, #0
 8002ff0:	4614      	mov	r4, r2
 8002ff2:	461d      	mov	r5, r3
 8002ff4:	da07      	bge.n	8003006 <__swhatbuf_r+0x22>
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	602b      	str	r3, [r5, #0]
 8002ffa:	89b3      	ldrh	r3, [r6, #12]
 8002ffc:	061a      	lsls	r2, r3, #24
 8002ffe:	d410      	bmi.n	8003022 <__swhatbuf_r+0x3e>
 8003000:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003004:	e00e      	b.n	8003024 <__swhatbuf_r+0x40>
 8003006:	466a      	mov	r2, sp
 8003008:	f000 f96c 	bl	80032e4 <_fstat_r>
 800300c:	2800      	cmp	r0, #0
 800300e:	dbf2      	blt.n	8002ff6 <__swhatbuf_r+0x12>
 8003010:	9a01      	ldr	r2, [sp, #4]
 8003012:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003016:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800301a:	425a      	negs	r2, r3
 800301c:	415a      	adcs	r2, r3
 800301e:	602a      	str	r2, [r5, #0]
 8003020:	e7ee      	b.n	8003000 <__swhatbuf_r+0x1c>
 8003022:	2340      	movs	r3, #64	; 0x40
 8003024:	2000      	movs	r0, #0
 8003026:	6023      	str	r3, [r4, #0]
 8003028:	b016      	add	sp, #88	; 0x58
 800302a:	bd70      	pop	{r4, r5, r6, pc}

0800302c <__smakebuf_r>:
 800302c:	898b      	ldrh	r3, [r1, #12]
 800302e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003030:	079d      	lsls	r5, r3, #30
 8003032:	4606      	mov	r6, r0
 8003034:	460c      	mov	r4, r1
 8003036:	d507      	bpl.n	8003048 <__smakebuf_r+0x1c>
 8003038:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800303c:	6023      	str	r3, [r4, #0]
 800303e:	6123      	str	r3, [r4, #16]
 8003040:	2301      	movs	r3, #1
 8003042:	6163      	str	r3, [r4, #20]
 8003044:	b002      	add	sp, #8
 8003046:	bd70      	pop	{r4, r5, r6, pc}
 8003048:	ab01      	add	r3, sp, #4
 800304a:	466a      	mov	r2, sp
 800304c:	f7ff ffca 	bl	8002fe4 <__swhatbuf_r>
 8003050:	9900      	ldr	r1, [sp, #0]
 8003052:	4605      	mov	r5, r0
 8003054:	4630      	mov	r0, r6
 8003056:	f000 f875 	bl	8003144 <_malloc_r>
 800305a:	b948      	cbnz	r0, 8003070 <__smakebuf_r+0x44>
 800305c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003060:	059a      	lsls	r2, r3, #22
 8003062:	d4ef      	bmi.n	8003044 <__smakebuf_r+0x18>
 8003064:	f023 0303 	bic.w	r3, r3, #3
 8003068:	f043 0302 	orr.w	r3, r3, #2
 800306c:	81a3      	strh	r3, [r4, #12]
 800306e:	e7e3      	b.n	8003038 <__smakebuf_r+0xc>
 8003070:	4b0d      	ldr	r3, [pc, #52]	; (80030a8 <__smakebuf_r+0x7c>)
 8003072:	62b3      	str	r3, [r6, #40]	; 0x28
 8003074:	89a3      	ldrh	r3, [r4, #12]
 8003076:	6020      	str	r0, [r4, #0]
 8003078:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800307c:	81a3      	strh	r3, [r4, #12]
 800307e:	9b00      	ldr	r3, [sp, #0]
 8003080:	6120      	str	r0, [r4, #16]
 8003082:	6163      	str	r3, [r4, #20]
 8003084:	9b01      	ldr	r3, [sp, #4]
 8003086:	b15b      	cbz	r3, 80030a0 <__smakebuf_r+0x74>
 8003088:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800308c:	4630      	mov	r0, r6
 800308e:	f000 f93b 	bl	8003308 <_isatty_r>
 8003092:	b128      	cbz	r0, 80030a0 <__smakebuf_r+0x74>
 8003094:	89a3      	ldrh	r3, [r4, #12]
 8003096:	f023 0303 	bic.w	r3, r3, #3
 800309a:	f043 0301 	orr.w	r3, r3, #1
 800309e:	81a3      	strh	r3, [r4, #12]
 80030a0:	89a3      	ldrh	r3, [r4, #12]
 80030a2:	431d      	orrs	r5, r3
 80030a4:	81a5      	strh	r5, [r4, #12]
 80030a6:	e7cd      	b.n	8003044 <__smakebuf_r+0x18>
 80030a8:	08002e99 	.word	0x08002e99

080030ac <_free_r>:
 80030ac:	b538      	push	{r3, r4, r5, lr}
 80030ae:	4605      	mov	r5, r0
 80030b0:	2900      	cmp	r1, #0
 80030b2:	d043      	beq.n	800313c <_free_r+0x90>
 80030b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80030b8:	1f0c      	subs	r4, r1, #4
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	bfb8      	it	lt
 80030be:	18e4      	addlt	r4, r4, r3
 80030c0:	f000 f944 	bl	800334c <__malloc_lock>
 80030c4:	4a1e      	ldr	r2, [pc, #120]	; (8003140 <_free_r+0x94>)
 80030c6:	6813      	ldr	r3, [r2, #0]
 80030c8:	4610      	mov	r0, r2
 80030ca:	b933      	cbnz	r3, 80030da <_free_r+0x2e>
 80030cc:	6063      	str	r3, [r4, #4]
 80030ce:	6014      	str	r4, [r2, #0]
 80030d0:	4628      	mov	r0, r5
 80030d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80030d6:	f000 b93a 	b.w	800334e <__malloc_unlock>
 80030da:	42a3      	cmp	r3, r4
 80030dc:	d90b      	bls.n	80030f6 <_free_r+0x4a>
 80030de:	6821      	ldr	r1, [r4, #0]
 80030e0:	1862      	adds	r2, r4, r1
 80030e2:	4293      	cmp	r3, r2
 80030e4:	bf01      	itttt	eq
 80030e6:	681a      	ldreq	r2, [r3, #0]
 80030e8:	685b      	ldreq	r3, [r3, #4]
 80030ea:	1852      	addeq	r2, r2, r1
 80030ec:	6022      	streq	r2, [r4, #0]
 80030ee:	6063      	str	r3, [r4, #4]
 80030f0:	6004      	str	r4, [r0, #0]
 80030f2:	e7ed      	b.n	80030d0 <_free_r+0x24>
 80030f4:	4613      	mov	r3, r2
 80030f6:	685a      	ldr	r2, [r3, #4]
 80030f8:	b10a      	cbz	r2, 80030fe <_free_r+0x52>
 80030fa:	42a2      	cmp	r2, r4
 80030fc:	d9fa      	bls.n	80030f4 <_free_r+0x48>
 80030fe:	6819      	ldr	r1, [r3, #0]
 8003100:	1858      	adds	r0, r3, r1
 8003102:	42a0      	cmp	r0, r4
 8003104:	d10b      	bne.n	800311e <_free_r+0x72>
 8003106:	6820      	ldr	r0, [r4, #0]
 8003108:	4401      	add	r1, r0
 800310a:	1858      	adds	r0, r3, r1
 800310c:	4282      	cmp	r2, r0
 800310e:	6019      	str	r1, [r3, #0]
 8003110:	d1de      	bne.n	80030d0 <_free_r+0x24>
 8003112:	6810      	ldr	r0, [r2, #0]
 8003114:	6852      	ldr	r2, [r2, #4]
 8003116:	4401      	add	r1, r0
 8003118:	6019      	str	r1, [r3, #0]
 800311a:	605a      	str	r2, [r3, #4]
 800311c:	e7d8      	b.n	80030d0 <_free_r+0x24>
 800311e:	d902      	bls.n	8003126 <_free_r+0x7a>
 8003120:	230c      	movs	r3, #12
 8003122:	602b      	str	r3, [r5, #0]
 8003124:	e7d4      	b.n	80030d0 <_free_r+0x24>
 8003126:	6820      	ldr	r0, [r4, #0]
 8003128:	1821      	adds	r1, r4, r0
 800312a:	428a      	cmp	r2, r1
 800312c:	bf01      	itttt	eq
 800312e:	6811      	ldreq	r1, [r2, #0]
 8003130:	6852      	ldreq	r2, [r2, #4]
 8003132:	1809      	addeq	r1, r1, r0
 8003134:	6021      	streq	r1, [r4, #0]
 8003136:	6062      	str	r2, [r4, #4]
 8003138:	605c      	str	r4, [r3, #4]
 800313a:	e7c9      	b.n	80030d0 <_free_r+0x24>
 800313c:	bd38      	pop	{r3, r4, r5, pc}
 800313e:	bf00      	nop
 8003140:	200000a0 	.word	0x200000a0

08003144 <_malloc_r>:
 8003144:	b570      	push	{r4, r5, r6, lr}
 8003146:	1ccd      	adds	r5, r1, #3
 8003148:	f025 0503 	bic.w	r5, r5, #3
 800314c:	3508      	adds	r5, #8
 800314e:	2d0c      	cmp	r5, #12
 8003150:	bf38      	it	cc
 8003152:	250c      	movcc	r5, #12
 8003154:	2d00      	cmp	r5, #0
 8003156:	4606      	mov	r6, r0
 8003158:	db01      	blt.n	800315e <_malloc_r+0x1a>
 800315a:	42a9      	cmp	r1, r5
 800315c:	d903      	bls.n	8003166 <_malloc_r+0x22>
 800315e:	230c      	movs	r3, #12
 8003160:	6033      	str	r3, [r6, #0]
 8003162:	2000      	movs	r0, #0
 8003164:	bd70      	pop	{r4, r5, r6, pc}
 8003166:	f000 f8f1 	bl	800334c <__malloc_lock>
 800316a:	4a21      	ldr	r2, [pc, #132]	; (80031f0 <_malloc_r+0xac>)
 800316c:	6814      	ldr	r4, [r2, #0]
 800316e:	4621      	mov	r1, r4
 8003170:	b991      	cbnz	r1, 8003198 <_malloc_r+0x54>
 8003172:	4c20      	ldr	r4, [pc, #128]	; (80031f4 <_malloc_r+0xb0>)
 8003174:	6823      	ldr	r3, [r4, #0]
 8003176:	b91b      	cbnz	r3, 8003180 <_malloc_r+0x3c>
 8003178:	4630      	mov	r0, r6
 800317a:	f000 f83d 	bl	80031f8 <_sbrk_r>
 800317e:	6020      	str	r0, [r4, #0]
 8003180:	4629      	mov	r1, r5
 8003182:	4630      	mov	r0, r6
 8003184:	f000 f838 	bl	80031f8 <_sbrk_r>
 8003188:	1c43      	adds	r3, r0, #1
 800318a:	d124      	bne.n	80031d6 <_malloc_r+0x92>
 800318c:	230c      	movs	r3, #12
 800318e:	4630      	mov	r0, r6
 8003190:	6033      	str	r3, [r6, #0]
 8003192:	f000 f8dc 	bl	800334e <__malloc_unlock>
 8003196:	e7e4      	b.n	8003162 <_malloc_r+0x1e>
 8003198:	680b      	ldr	r3, [r1, #0]
 800319a:	1b5b      	subs	r3, r3, r5
 800319c:	d418      	bmi.n	80031d0 <_malloc_r+0x8c>
 800319e:	2b0b      	cmp	r3, #11
 80031a0:	d90f      	bls.n	80031c2 <_malloc_r+0x7e>
 80031a2:	600b      	str	r3, [r1, #0]
 80031a4:	18cc      	adds	r4, r1, r3
 80031a6:	50cd      	str	r5, [r1, r3]
 80031a8:	4630      	mov	r0, r6
 80031aa:	f000 f8d0 	bl	800334e <__malloc_unlock>
 80031ae:	f104 000b 	add.w	r0, r4, #11
 80031b2:	1d23      	adds	r3, r4, #4
 80031b4:	f020 0007 	bic.w	r0, r0, #7
 80031b8:	1ac3      	subs	r3, r0, r3
 80031ba:	d0d3      	beq.n	8003164 <_malloc_r+0x20>
 80031bc:	425a      	negs	r2, r3
 80031be:	50e2      	str	r2, [r4, r3]
 80031c0:	e7d0      	b.n	8003164 <_malloc_r+0x20>
 80031c2:	684b      	ldr	r3, [r1, #4]
 80031c4:	428c      	cmp	r4, r1
 80031c6:	bf16      	itet	ne
 80031c8:	6063      	strne	r3, [r4, #4]
 80031ca:	6013      	streq	r3, [r2, #0]
 80031cc:	460c      	movne	r4, r1
 80031ce:	e7eb      	b.n	80031a8 <_malloc_r+0x64>
 80031d0:	460c      	mov	r4, r1
 80031d2:	6849      	ldr	r1, [r1, #4]
 80031d4:	e7cc      	b.n	8003170 <_malloc_r+0x2c>
 80031d6:	1cc4      	adds	r4, r0, #3
 80031d8:	f024 0403 	bic.w	r4, r4, #3
 80031dc:	42a0      	cmp	r0, r4
 80031de:	d005      	beq.n	80031ec <_malloc_r+0xa8>
 80031e0:	1a21      	subs	r1, r4, r0
 80031e2:	4630      	mov	r0, r6
 80031e4:	f000 f808 	bl	80031f8 <_sbrk_r>
 80031e8:	3001      	adds	r0, #1
 80031ea:	d0cf      	beq.n	800318c <_malloc_r+0x48>
 80031ec:	6025      	str	r5, [r4, #0]
 80031ee:	e7db      	b.n	80031a8 <_malloc_r+0x64>
 80031f0:	200000a0 	.word	0x200000a0
 80031f4:	200000a4 	.word	0x200000a4

080031f8 <_sbrk_r>:
 80031f8:	b538      	push	{r3, r4, r5, lr}
 80031fa:	2300      	movs	r3, #0
 80031fc:	4c05      	ldr	r4, [pc, #20]	; (8003214 <_sbrk_r+0x1c>)
 80031fe:	4605      	mov	r5, r0
 8003200:	4608      	mov	r0, r1
 8003202:	6023      	str	r3, [r4, #0]
 8003204:	f7fe fbc2 	bl	800198c <_sbrk>
 8003208:	1c43      	adds	r3, r0, #1
 800320a:	d102      	bne.n	8003212 <_sbrk_r+0x1a>
 800320c:	6823      	ldr	r3, [r4, #0]
 800320e:	b103      	cbz	r3, 8003212 <_sbrk_r+0x1a>
 8003210:	602b      	str	r3, [r5, #0]
 8003212:	bd38      	pop	{r3, r4, r5, pc}
 8003214:	200002a8 	.word	0x200002a8

08003218 <__sread>:
 8003218:	b510      	push	{r4, lr}
 800321a:	460c      	mov	r4, r1
 800321c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003220:	f000 f896 	bl	8003350 <_read_r>
 8003224:	2800      	cmp	r0, #0
 8003226:	bfab      	itete	ge
 8003228:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800322a:	89a3      	ldrhlt	r3, [r4, #12]
 800322c:	181b      	addge	r3, r3, r0
 800322e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003232:	bfac      	ite	ge
 8003234:	6563      	strge	r3, [r4, #84]	; 0x54
 8003236:	81a3      	strhlt	r3, [r4, #12]
 8003238:	bd10      	pop	{r4, pc}

0800323a <__swrite>:
 800323a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800323e:	461f      	mov	r7, r3
 8003240:	898b      	ldrh	r3, [r1, #12]
 8003242:	4605      	mov	r5, r0
 8003244:	05db      	lsls	r3, r3, #23
 8003246:	460c      	mov	r4, r1
 8003248:	4616      	mov	r6, r2
 800324a:	d505      	bpl.n	8003258 <__swrite+0x1e>
 800324c:	2302      	movs	r3, #2
 800324e:	2200      	movs	r2, #0
 8003250:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003254:	f000 f868 	bl	8003328 <_lseek_r>
 8003258:	89a3      	ldrh	r3, [r4, #12]
 800325a:	4632      	mov	r2, r6
 800325c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003260:	81a3      	strh	r3, [r4, #12]
 8003262:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003266:	463b      	mov	r3, r7
 8003268:	4628      	mov	r0, r5
 800326a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800326e:	f000 b817 	b.w	80032a0 <_write_r>

08003272 <__sseek>:
 8003272:	b510      	push	{r4, lr}
 8003274:	460c      	mov	r4, r1
 8003276:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800327a:	f000 f855 	bl	8003328 <_lseek_r>
 800327e:	1c43      	adds	r3, r0, #1
 8003280:	89a3      	ldrh	r3, [r4, #12]
 8003282:	bf15      	itete	ne
 8003284:	6560      	strne	r0, [r4, #84]	; 0x54
 8003286:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800328a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800328e:	81a3      	strheq	r3, [r4, #12]
 8003290:	bf18      	it	ne
 8003292:	81a3      	strhne	r3, [r4, #12]
 8003294:	bd10      	pop	{r4, pc}

08003296 <__sclose>:
 8003296:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800329a:	f000 b813 	b.w	80032c4 <_close_r>
	...

080032a0 <_write_r>:
 80032a0:	b538      	push	{r3, r4, r5, lr}
 80032a2:	4605      	mov	r5, r0
 80032a4:	4608      	mov	r0, r1
 80032a6:	4611      	mov	r1, r2
 80032a8:	2200      	movs	r2, #0
 80032aa:	4c05      	ldr	r4, [pc, #20]	; (80032c0 <_write_r+0x20>)
 80032ac:	6022      	str	r2, [r4, #0]
 80032ae:	461a      	mov	r2, r3
 80032b0:	f7fe fb1f 	bl	80018f2 <_write>
 80032b4:	1c43      	adds	r3, r0, #1
 80032b6:	d102      	bne.n	80032be <_write_r+0x1e>
 80032b8:	6823      	ldr	r3, [r4, #0]
 80032ba:	b103      	cbz	r3, 80032be <_write_r+0x1e>
 80032bc:	602b      	str	r3, [r5, #0]
 80032be:	bd38      	pop	{r3, r4, r5, pc}
 80032c0:	200002a8 	.word	0x200002a8

080032c4 <_close_r>:
 80032c4:	b538      	push	{r3, r4, r5, lr}
 80032c6:	2300      	movs	r3, #0
 80032c8:	4c05      	ldr	r4, [pc, #20]	; (80032e0 <_close_r+0x1c>)
 80032ca:	4605      	mov	r5, r0
 80032cc:	4608      	mov	r0, r1
 80032ce:	6023      	str	r3, [r4, #0]
 80032d0:	f7fe fb2b 	bl	800192a <_close>
 80032d4:	1c43      	adds	r3, r0, #1
 80032d6:	d102      	bne.n	80032de <_close_r+0x1a>
 80032d8:	6823      	ldr	r3, [r4, #0]
 80032da:	b103      	cbz	r3, 80032de <_close_r+0x1a>
 80032dc:	602b      	str	r3, [r5, #0]
 80032de:	bd38      	pop	{r3, r4, r5, pc}
 80032e0:	200002a8 	.word	0x200002a8

080032e4 <_fstat_r>:
 80032e4:	b538      	push	{r3, r4, r5, lr}
 80032e6:	2300      	movs	r3, #0
 80032e8:	4c06      	ldr	r4, [pc, #24]	; (8003304 <_fstat_r+0x20>)
 80032ea:	4605      	mov	r5, r0
 80032ec:	4608      	mov	r0, r1
 80032ee:	4611      	mov	r1, r2
 80032f0:	6023      	str	r3, [r4, #0]
 80032f2:	f7fe fb25 	bl	8001940 <_fstat>
 80032f6:	1c43      	adds	r3, r0, #1
 80032f8:	d102      	bne.n	8003300 <_fstat_r+0x1c>
 80032fa:	6823      	ldr	r3, [r4, #0]
 80032fc:	b103      	cbz	r3, 8003300 <_fstat_r+0x1c>
 80032fe:	602b      	str	r3, [r5, #0]
 8003300:	bd38      	pop	{r3, r4, r5, pc}
 8003302:	bf00      	nop
 8003304:	200002a8 	.word	0x200002a8

08003308 <_isatty_r>:
 8003308:	b538      	push	{r3, r4, r5, lr}
 800330a:	2300      	movs	r3, #0
 800330c:	4c05      	ldr	r4, [pc, #20]	; (8003324 <_isatty_r+0x1c>)
 800330e:	4605      	mov	r5, r0
 8003310:	4608      	mov	r0, r1
 8003312:	6023      	str	r3, [r4, #0]
 8003314:	f7fe fb23 	bl	800195e <_isatty>
 8003318:	1c43      	adds	r3, r0, #1
 800331a:	d102      	bne.n	8003322 <_isatty_r+0x1a>
 800331c:	6823      	ldr	r3, [r4, #0]
 800331e:	b103      	cbz	r3, 8003322 <_isatty_r+0x1a>
 8003320:	602b      	str	r3, [r5, #0]
 8003322:	bd38      	pop	{r3, r4, r5, pc}
 8003324:	200002a8 	.word	0x200002a8

08003328 <_lseek_r>:
 8003328:	b538      	push	{r3, r4, r5, lr}
 800332a:	4605      	mov	r5, r0
 800332c:	4608      	mov	r0, r1
 800332e:	4611      	mov	r1, r2
 8003330:	2200      	movs	r2, #0
 8003332:	4c05      	ldr	r4, [pc, #20]	; (8003348 <_lseek_r+0x20>)
 8003334:	6022      	str	r2, [r4, #0]
 8003336:	461a      	mov	r2, r3
 8003338:	f7fe fb1b 	bl	8001972 <_lseek>
 800333c:	1c43      	adds	r3, r0, #1
 800333e:	d102      	bne.n	8003346 <_lseek_r+0x1e>
 8003340:	6823      	ldr	r3, [r4, #0]
 8003342:	b103      	cbz	r3, 8003346 <_lseek_r+0x1e>
 8003344:	602b      	str	r3, [r5, #0]
 8003346:	bd38      	pop	{r3, r4, r5, pc}
 8003348:	200002a8 	.word	0x200002a8

0800334c <__malloc_lock>:
 800334c:	4770      	bx	lr

0800334e <__malloc_unlock>:
 800334e:	4770      	bx	lr

08003350 <_read_r>:
 8003350:	b538      	push	{r3, r4, r5, lr}
 8003352:	4605      	mov	r5, r0
 8003354:	4608      	mov	r0, r1
 8003356:	4611      	mov	r1, r2
 8003358:	2200      	movs	r2, #0
 800335a:	4c05      	ldr	r4, [pc, #20]	; (8003370 <_read_r+0x20>)
 800335c:	6022      	str	r2, [r4, #0]
 800335e:	461a      	mov	r2, r3
 8003360:	f7fe faaa 	bl	80018b8 <_read>
 8003364:	1c43      	adds	r3, r0, #1
 8003366:	d102      	bne.n	800336e <_read_r+0x1e>
 8003368:	6823      	ldr	r3, [r4, #0]
 800336a:	b103      	cbz	r3, 800336e <_read_r+0x1e>
 800336c:	602b      	str	r3, [r5, #0]
 800336e:	bd38      	pop	{r3, r4, r5, pc}
 8003370:	200002a8 	.word	0x200002a8

08003374 <_init>:
 8003374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003376:	bf00      	nop
 8003378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800337a:	bc08      	pop	{r3}
 800337c:	469e      	mov	lr, r3
 800337e:	4770      	bx	lr

08003380 <_fini>:
 8003380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003382:	bf00      	nop
 8003384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003386:	bc08      	pop	{r3}
 8003388:	469e      	mov	lr, r3
 800338a:	4770      	bx	lr
