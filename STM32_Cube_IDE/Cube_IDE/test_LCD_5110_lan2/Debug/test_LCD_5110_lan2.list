
test_LCD_5110_lan2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b28  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000264  08002c38  08002c38  00012c38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e9c  08002e9c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002e9c  08002e9c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e9c  08002e9c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e9c  08002e9c  00012e9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ea0  08002ea0  00012ea0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002ea4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000218  2000000c  08002eb0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000224  08002eb0  00020224  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003647  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000f32  00000000  00000000  0002367c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000480  00000000  00000000  000245b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000003e8  00000000  00000000  00024a30  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00012678  00000000  00000000  00024e18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00004333  00000000  00000000  00037490  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000640d8  00000000  00000000  0003b7c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0009f89b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001230  00000000  00000000  0009f918  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000000c 	.word	0x2000000c
 800012c:	00000000 	.word	0x00000000
 8000130:	08002c20 	.word	0x08002c20

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000010 	.word	0x20000010
 800014c:	08002c20 	.word	0x08002c20

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_d2f>:
 80004c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80004cc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80004d0:	bf24      	itt	cs
 80004d2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80004d6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80004da:	d90d      	bls.n	80004f8 <__aeabi_d2f+0x30>
 80004dc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80004e0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80004e4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80004e8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80004ec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80004f0:	bf08      	it	eq
 80004f2:	f020 0001 	biceq.w	r0, r0, #1
 80004f6:	4770      	bx	lr
 80004f8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80004fc:	d121      	bne.n	8000542 <__aeabi_d2f+0x7a>
 80004fe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000502:	bfbc      	itt	lt
 8000504:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000508:	4770      	bxlt	lr
 800050a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800050e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000512:	f1c2 0218 	rsb	r2, r2, #24
 8000516:	f1c2 0c20 	rsb	ip, r2, #32
 800051a:	fa10 f30c 	lsls.w	r3, r0, ip
 800051e:	fa20 f002 	lsr.w	r0, r0, r2
 8000522:	bf18      	it	ne
 8000524:	f040 0001 	orrne.w	r0, r0, #1
 8000528:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800052c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000530:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000534:	ea40 000c 	orr.w	r0, r0, ip
 8000538:	fa23 f302 	lsr.w	r3, r3, r2
 800053c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000540:	e7cc      	b.n	80004dc <__aeabi_d2f+0x14>
 8000542:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000546:	d107      	bne.n	8000558 <__aeabi_d2f+0x90>
 8000548:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800054c:	bf1e      	ittt	ne
 800054e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000552:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000556:	4770      	bxne	lr
 8000558:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800055c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000560:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <__aeabi_frsub>:
 8000568:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800056c:	e002      	b.n	8000574 <__addsf3>
 800056e:	bf00      	nop

08000570 <__aeabi_fsub>:
 8000570:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000574 <__addsf3>:
 8000574:	0042      	lsls	r2, r0, #1
 8000576:	bf1f      	itttt	ne
 8000578:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800057c:	ea92 0f03 	teqne	r2, r3
 8000580:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000584:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000588:	d06a      	beq.n	8000660 <__addsf3+0xec>
 800058a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800058e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000592:	bfc1      	itttt	gt
 8000594:	18d2      	addgt	r2, r2, r3
 8000596:	4041      	eorgt	r1, r0
 8000598:	4048      	eorgt	r0, r1
 800059a:	4041      	eorgt	r1, r0
 800059c:	bfb8      	it	lt
 800059e:	425b      	neglt	r3, r3
 80005a0:	2b19      	cmp	r3, #25
 80005a2:	bf88      	it	hi
 80005a4:	4770      	bxhi	lr
 80005a6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80005aa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005ae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80005b2:	bf18      	it	ne
 80005b4:	4240      	negne	r0, r0
 80005b6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80005ba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80005be:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80005c2:	bf18      	it	ne
 80005c4:	4249      	negne	r1, r1
 80005c6:	ea92 0f03 	teq	r2, r3
 80005ca:	d03f      	beq.n	800064c <__addsf3+0xd8>
 80005cc:	f1a2 0201 	sub.w	r2, r2, #1
 80005d0:	fa41 fc03 	asr.w	ip, r1, r3
 80005d4:	eb10 000c 	adds.w	r0, r0, ip
 80005d8:	f1c3 0320 	rsb	r3, r3, #32
 80005dc:	fa01 f103 	lsl.w	r1, r1, r3
 80005e0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80005e4:	d502      	bpl.n	80005ec <__addsf3+0x78>
 80005e6:	4249      	negs	r1, r1
 80005e8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80005ec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80005f0:	d313      	bcc.n	800061a <__addsf3+0xa6>
 80005f2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80005f6:	d306      	bcc.n	8000606 <__addsf3+0x92>
 80005f8:	0840      	lsrs	r0, r0, #1
 80005fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80005fe:	f102 0201 	add.w	r2, r2, #1
 8000602:	2afe      	cmp	r2, #254	; 0xfe
 8000604:	d251      	bcs.n	80006aa <__addsf3+0x136>
 8000606:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800060a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800060e:	bf08      	it	eq
 8000610:	f020 0001 	biceq.w	r0, r0, #1
 8000614:	ea40 0003 	orr.w	r0, r0, r3
 8000618:	4770      	bx	lr
 800061a:	0049      	lsls	r1, r1, #1
 800061c:	eb40 0000 	adc.w	r0, r0, r0
 8000620:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000624:	f1a2 0201 	sub.w	r2, r2, #1
 8000628:	d1ed      	bne.n	8000606 <__addsf3+0x92>
 800062a:	fab0 fc80 	clz	ip, r0
 800062e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000632:	ebb2 020c 	subs.w	r2, r2, ip
 8000636:	fa00 f00c 	lsl.w	r0, r0, ip
 800063a:	bfaa      	itet	ge
 800063c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000640:	4252      	neglt	r2, r2
 8000642:	4318      	orrge	r0, r3
 8000644:	bfbc      	itt	lt
 8000646:	40d0      	lsrlt	r0, r2
 8000648:	4318      	orrlt	r0, r3
 800064a:	4770      	bx	lr
 800064c:	f092 0f00 	teq	r2, #0
 8000650:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000654:	bf06      	itte	eq
 8000656:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800065a:	3201      	addeq	r2, #1
 800065c:	3b01      	subne	r3, #1
 800065e:	e7b5      	b.n	80005cc <__addsf3+0x58>
 8000660:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000664:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000668:	bf18      	it	ne
 800066a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800066e:	d021      	beq.n	80006b4 <__addsf3+0x140>
 8000670:	ea92 0f03 	teq	r2, r3
 8000674:	d004      	beq.n	8000680 <__addsf3+0x10c>
 8000676:	f092 0f00 	teq	r2, #0
 800067a:	bf08      	it	eq
 800067c:	4608      	moveq	r0, r1
 800067e:	4770      	bx	lr
 8000680:	ea90 0f01 	teq	r0, r1
 8000684:	bf1c      	itt	ne
 8000686:	2000      	movne	r0, #0
 8000688:	4770      	bxne	lr
 800068a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800068e:	d104      	bne.n	800069a <__addsf3+0x126>
 8000690:	0040      	lsls	r0, r0, #1
 8000692:	bf28      	it	cs
 8000694:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000698:	4770      	bx	lr
 800069a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800069e:	bf3c      	itt	cc
 80006a0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80006a4:	4770      	bxcc	lr
 80006a6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006aa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80006ae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006b2:	4770      	bx	lr
 80006b4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80006b8:	bf16      	itet	ne
 80006ba:	4608      	movne	r0, r1
 80006bc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80006c0:	4601      	movne	r1, r0
 80006c2:	0242      	lsls	r2, r0, #9
 80006c4:	bf06      	itte	eq
 80006c6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80006ca:	ea90 0f01 	teqeq	r0, r1
 80006ce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80006d2:	4770      	bx	lr

080006d4 <__aeabi_ui2f>:
 80006d4:	f04f 0300 	mov.w	r3, #0
 80006d8:	e004      	b.n	80006e4 <__aeabi_i2f+0x8>
 80006da:	bf00      	nop

080006dc <__aeabi_i2f>:
 80006dc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80006e0:	bf48      	it	mi
 80006e2:	4240      	negmi	r0, r0
 80006e4:	ea5f 0c00 	movs.w	ip, r0
 80006e8:	bf08      	it	eq
 80006ea:	4770      	bxeq	lr
 80006ec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80006f0:	4601      	mov	r1, r0
 80006f2:	f04f 0000 	mov.w	r0, #0
 80006f6:	e01c      	b.n	8000732 <__aeabi_l2f+0x2a>

080006f8 <__aeabi_ul2f>:
 80006f8:	ea50 0201 	orrs.w	r2, r0, r1
 80006fc:	bf08      	it	eq
 80006fe:	4770      	bxeq	lr
 8000700:	f04f 0300 	mov.w	r3, #0
 8000704:	e00a      	b.n	800071c <__aeabi_l2f+0x14>
 8000706:	bf00      	nop

08000708 <__aeabi_l2f>:
 8000708:	ea50 0201 	orrs.w	r2, r0, r1
 800070c:	bf08      	it	eq
 800070e:	4770      	bxeq	lr
 8000710:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000714:	d502      	bpl.n	800071c <__aeabi_l2f+0x14>
 8000716:	4240      	negs	r0, r0
 8000718:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800071c:	ea5f 0c01 	movs.w	ip, r1
 8000720:	bf02      	ittt	eq
 8000722:	4684      	moveq	ip, r0
 8000724:	4601      	moveq	r1, r0
 8000726:	2000      	moveq	r0, #0
 8000728:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 800072c:	bf08      	it	eq
 800072e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000732:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000736:	fabc f28c 	clz	r2, ip
 800073a:	3a08      	subs	r2, #8
 800073c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000740:	db10      	blt.n	8000764 <__aeabi_l2f+0x5c>
 8000742:	fa01 fc02 	lsl.w	ip, r1, r2
 8000746:	4463      	add	r3, ip
 8000748:	fa00 fc02 	lsl.w	ip, r0, r2
 800074c:	f1c2 0220 	rsb	r2, r2, #32
 8000750:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000754:	fa20 f202 	lsr.w	r2, r0, r2
 8000758:	eb43 0002 	adc.w	r0, r3, r2
 800075c:	bf08      	it	eq
 800075e:	f020 0001 	biceq.w	r0, r0, #1
 8000762:	4770      	bx	lr
 8000764:	f102 0220 	add.w	r2, r2, #32
 8000768:	fa01 fc02 	lsl.w	ip, r1, r2
 800076c:	f1c2 0220 	rsb	r2, r2, #32
 8000770:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000774:	fa21 f202 	lsr.w	r2, r1, r2
 8000778:	eb43 0002 	adc.w	r0, r3, r2
 800077c:	bf08      	it	eq
 800077e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000782:	4770      	bx	lr

08000784 <__aeabi_fmul>:
 8000784:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000788:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800078c:	bf1e      	ittt	ne
 800078e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000792:	ea92 0f0c 	teqne	r2, ip
 8000796:	ea93 0f0c 	teqne	r3, ip
 800079a:	d06f      	beq.n	800087c <__aeabi_fmul+0xf8>
 800079c:	441a      	add	r2, r3
 800079e:	ea80 0c01 	eor.w	ip, r0, r1
 80007a2:	0240      	lsls	r0, r0, #9
 80007a4:	bf18      	it	ne
 80007a6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80007aa:	d01e      	beq.n	80007ea <__aeabi_fmul+0x66>
 80007ac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80007b0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80007b4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80007b8:	fba0 3101 	umull	r3, r1, r0, r1
 80007bc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80007c0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80007c4:	bf3e      	ittt	cc
 80007c6:	0049      	lslcc	r1, r1, #1
 80007c8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80007cc:	005b      	lslcc	r3, r3, #1
 80007ce:	ea40 0001 	orr.w	r0, r0, r1
 80007d2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80007d6:	2afd      	cmp	r2, #253	; 0xfd
 80007d8:	d81d      	bhi.n	8000816 <__aeabi_fmul+0x92>
 80007da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80007de:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80007e2:	bf08      	it	eq
 80007e4:	f020 0001 	biceq.w	r0, r0, #1
 80007e8:	4770      	bx	lr
 80007ea:	f090 0f00 	teq	r0, #0
 80007ee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80007f2:	bf08      	it	eq
 80007f4:	0249      	lsleq	r1, r1, #9
 80007f6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80007fa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80007fe:	3a7f      	subs	r2, #127	; 0x7f
 8000800:	bfc2      	ittt	gt
 8000802:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000806:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800080a:	4770      	bxgt	lr
 800080c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000810:	f04f 0300 	mov.w	r3, #0
 8000814:	3a01      	subs	r2, #1
 8000816:	dc5d      	bgt.n	80008d4 <__aeabi_fmul+0x150>
 8000818:	f112 0f19 	cmn.w	r2, #25
 800081c:	bfdc      	itt	le
 800081e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000822:	4770      	bxle	lr
 8000824:	f1c2 0200 	rsb	r2, r2, #0
 8000828:	0041      	lsls	r1, r0, #1
 800082a:	fa21 f102 	lsr.w	r1, r1, r2
 800082e:	f1c2 0220 	rsb	r2, r2, #32
 8000832:	fa00 fc02 	lsl.w	ip, r0, r2
 8000836:	ea5f 0031 	movs.w	r0, r1, rrx
 800083a:	f140 0000 	adc.w	r0, r0, #0
 800083e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000842:	bf08      	it	eq
 8000844:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000848:	4770      	bx	lr
 800084a:	f092 0f00 	teq	r2, #0
 800084e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000852:	bf02      	ittt	eq
 8000854:	0040      	lsleq	r0, r0, #1
 8000856:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800085a:	3a01      	subeq	r2, #1
 800085c:	d0f9      	beq.n	8000852 <__aeabi_fmul+0xce>
 800085e:	ea40 000c 	orr.w	r0, r0, ip
 8000862:	f093 0f00 	teq	r3, #0
 8000866:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800086a:	bf02      	ittt	eq
 800086c:	0049      	lsleq	r1, r1, #1
 800086e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000872:	3b01      	subeq	r3, #1
 8000874:	d0f9      	beq.n	800086a <__aeabi_fmul+0xe6>
 8000876:	ea41 010c 	orr.w	r1, r1, ip
 800087a:	e78f      	b.n	800079c <__aeabi_fmul+0x18>
 800087c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000880:	ea92 0f0c 	teq	r2, ip
 8000884:	bf18      	it	ne
 8000886:	ea93 0f0c 	teqne	r3, ip
 800088a:	d00a      	beq.n	80008a2 <__aeabi_fmul+0x11e>
 800088c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000890:	bf18      	it	ne
 8000892:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000896:	d1d8      	bne.n	800084a <__aeabi_fmul+0xc6>
 8000898:	ea80 0001 	eor.w	r0, r0, r1
 800089c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80008a0:	4770      	bx	lr
 80008a2:	f090 0f00 	teq	r0, #0
 80008a6:	bf17      	itett	ne
 80008a8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80008ac:	4608      	moveq	r0, r1
 80008ae:	f091 0f00 	teqne	r1, #0
 80008b2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80008b6:	d014      	beq.n	80008e2 <__aeabi_fmul+0x15e>
 80008b8:	ea92 0f0c 	teq	r2, ip
 80008bc:	d101      	bne.n	80008c2 <__aeabi_fmul+0x13e>
 80008be:	0242      	lsls	r2, r0, #9
 80008c0:	d10f      	bne.n	80008e2 <__aeabi_fmul+0x15e>
 80008c2:	ea93 0f0c 	teq	r3, ip
 80008c6:	d103      	bne.n	80008d0 <__aeabi_fmul+0x14c>
 80008c8:	024b      	lsls	r3, r1, #9
 80008ca:	bf18      	it	ne
 80008cc:	4608      	movne	r0, r1
 80008ce:	d108      	bne.n	80008e2 <__aeabi_fmul+0x15e>
 80008d0:	ea80 0001 	eor.w	r0, r0, r1
 80008d4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80008d8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80008dc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008e0:	4770      	bx	lr
 80008e2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80008e6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80008ea:	4770      	bx	lr

080008ec <__aeabi_fdiv>:
 80008ec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008f0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80008f4:	bf1e      	ittt	ne
 80008f6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80008fa:	ea92 0f0c 	teqne	r2, ip
 80008fe:	ea93 0f0c 	teqne	r3, ip
 8000902:	d069      	beq.n	80009d8 <__aeabi_fdiv+0xec>
 8000904:	eba2 0203 	sub.w	r2, r2, r3
 8000908:	ea80 0c01 	eor.w	ip, r0, r1
 800090c:	0249      	lsls	r1, r1, #9
 800090e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000912:	d037      	beq.n	8000984 <__aeabi_fdiv+0x98>
 8000914:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000918:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 800091c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000920:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000924:	428b      	cmp	r3, r1
 8000926:	bf38      	it	cc
 8000928:	005b      	lslcc	r3, r3, #1
 800092a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800092e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000932:	428b      	cmp	r3, r1
 8000934:	bf24      	itt	cs
 8000936:	1a5b      	subcs	r3, r3, r1
 8000938:	ea40 000c 	orrcs.w	r0, r0, ip
 800093c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000940:	bf24      	itt	cs
 8000942:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000946:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800094a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800094e:	bf24      	itt	cs
 8000950:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 800095c:	bf24      	itt	cs
 800095e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000962:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000966:	011b      	lsls	r3, r3, #4
 8000968:	bf18      	it	ne
 800096a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800096e:	d1e0      	bne.n	8000932 <__aeabi_fdiv+0x46>
 8000970:	2afd      	cmp	r2, #253	; 0xfd
 8000972:	f63f af50 	bhi.w	8000816 <__aeabi_fmul+0x92>
 8000976:	428b      	cmp	r3, r1
 8000978:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800097c:	bf08      	it	eq
 800097e:	f020 0001 	biceq.w	r0, r0, #1
 8000982:	4770      	bx	lr
 8000984:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000988:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800098c:	327f      	adds	r2, #127	; 0x7f
 800098e:	bfc2      	ittt	gt
 8000990:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000994:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000998:	4770      	bxgt	lr
 800099a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800099e:	f04f 0300 	mov.w	r3, #0
 80009a2:	3a01      	subs	r2, #1
 80009a4:	e737      	b.n	8000816 <__aeabi_fmul+0x92>
 80009a6:	f092 0f00 	teq	r2, #0
 80009aa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80009ae:	bf02      	ittt	eq
 80009b0:	0040      	lsleq	r0, r0, #1
 80009b2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80009b6:	3a01      	subeq	r2, #1
 80009b8:	d0f9      	beq.n	80009ae <__aeabi_fdiv+0xc2>
 80009ba:	ea40 000c 	orr.w	r0, r0, ip
 80009be:	f093 0f00 	teq	r3, #0
 80009c2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009c6:	bf02      	ittt	eq
 80009c8:	0049      	lsleq	r1, r1, #1
 80009ca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80009ce:	3b01      	subeq	r3, #1
 80009d0:	d0f9      	beq.n	80009c6 <__aeabi_fdiv+0xda>
 80009d2:	ea41 010c 	orr.w	r1, r1, ip
 80009d6:	e795      	b.n	8000904 <__aeabi_fdiv+0x18>
 80009d8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80009dc:	ea92 0f0c 	teq	r2, ip
 80009e0:	d108      	bne.n	80009f4 <__aeabi_fdiv+0x108>
 80009e2:	0242      	lsls	r2, r0, #9
 80009e4:	f47f af7d 	bne.w	80008e2 <__aeabi_fmul+0x15e>
 80009e8:	ea93 0f0c 	teq	r3, ip
 80009ec:	f47f af70 	bne.w	80008d0 <__aeabi_fmul+0x14c>
 80009f0:	4608      	mov	r0, r1
 80009f2:	e776      	b.n	80008e2 <__aeabi_fmul+0x15e>
 80009f4:	ea93 0f0c 	teq	r3, ip
 80009f8:	d104      	bne.n	8000a04 <__aeabi_fdiv+0x118>
 80009fa:	024b      	lsls	r3, r1, #9
 80009fc:	f43f af4c 	beq.w	8000898 <__aeabi_fmul+0x114>
 8000a00:	4608      	mov	r0, r1
 8000a02:	e76e      	b.n	80008e2 <__aeabi_fmul+0x15e>
 8000a04:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000a08:	bf18      	it	ne
 8000a0a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000a0e:	d1ca      	bne.n	80009a6 <__aeabi_fdiv+0xba>
 8000a10:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000a14:	f47f af5c 	bne.w	80008d0 <__aeabi_fmul+0x14c>
 8000a18:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000a1c:	f47f af3c 	bne.w	8000898 <__aeabi_fmul+0x114>
 8000a20:	e75f      	b.n	80008e2 <__aeabi_fmul+0x15e>
 8000a22:	bf00      	nop

08000a24 <__gesf2>:
 8000a24:	f04f 3cff 	mov.w	ip, #4294967295
 8000a28:	e006      	b.n	8000a38 <__cmpsf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__lesf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	e002      	b.n	8000a38 <__cmpsf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__cmpsf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a3c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000a40:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a44:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a48:	bf18      	it	ne
 8000a4a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a4e:	d011      	beq.n	8000a74 <__cmpsf2+0x40>
 8000a50:	b001      	add	sp, #4
 8000a52:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000a56:	bf18      	it	ne
 8000a58:	ea90 0f01 	teqne	r0, r1
 8000a5c:	bf58      	it	pl
 8000a5e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000a62:	bf88      	it	hi
 8000a64:	17c8      	asrhi	r0, r1, #31
 8000a66:	bf38      	it	cc
 8000a68:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000a6c:	bf18      	it	ne
 8000a6e:	f040 0001 	orrne.w	r0, r0, #1
 8000a72:	4770      	bx	lr
 8000a74:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a78:	d102      	bne.n	8000a80 <__cmpsf2+0x4c>
 8000a7a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000a7e:	d105      	bne.n	8000a8c <__cmpsf2+0x58>
 8000a80:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000a84:	d1e4      	bne.n	8000a50 <__cmpsf2+0x1c>
 8000a86:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000a8a:	d0e1      	beq.n	8000a50 <__cmpsf2+0x1c>
 8000a8c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop

08000a94 <__aeabi_cfrcmple>:
 8000a94:	4684      	mov	ip, r0
 8000a96:	4608      	mov	r0, r1
 8000a98:	4661      	mov	r1, ip
 8000a9a:	e7ff      	b.n	8000a9c <__aeabi_cfcmpeq>

08000a9c <__aeabi_cfcmpeq>:
 8000a9c:	b50f      	push	{r0, r1, r2, r3, lr}
 8000a9e:	f7ff ffc9 	bl	8000a34 <__cmpsf2>
 8000aa2:	2800      	cmp	r0, #0
 8000aa4:	bf48      	it	mi
 8000aa6:	f110 0f00 	cmnmi.w	r0, #0
 8000aaa:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000aac <__aeabi_fcmpeq>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff fff4 	bl	8000a9c <__aeabi_cfcmpeq>
 8000ab4:	bf0c      	ite	eq
 8000ab6:	2001      	moveq	r0, #1
 8000ab8:	2000      	movne	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_fcmplt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffea 	bl	8000a9c <__aeabi_cfcmpeq>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_fcmple>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffe0 	bl	8000a9c <__aeabi_cfcmpeq>
 8000adc:	bf94      	ite	ls
 8000ade:	2001      	movls	r0, #1
 8000ae0:	2000      	movhi	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_fcmpge>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffd2 	bl	8000a94 <__aeabi_cfrcmple>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_fcmpgt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffc8 	bl	8000a94 <__aeabi_cfrcmple>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_f2iz>:
 8000b10:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b14:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b18:	d30f      	bcc.n	8000b3a <__aeabi_f2iz+0x2a>
 8000b1a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b1e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b22:	d90d      	bls.n	8000b40 <__aeabi_f2iz+0x30>
 8000b24:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b28:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b30:	fa23 f002 	lsr.w	r0, r3, r2
 8000b34:	bf18      	it	ne
 8000b36:	4240      	negne	r0, r0
 8000b38:	4770      	bx	lr
 8000b3a:	f04f 0000 	mov.w	r0, #0
 8000b3e:	4770      	bx	lr
 8000b40:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000b44:	d101      	bne.n	8000b4a <__aeabi_f2iz+0x3a>
 8000b46:	0242      	lsls	r2, r0, #9
 8000b48:	d105      	bne.n	8000b56 <__aeabi_f2iz+0x46>
 8000b4a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000b4e:	bf08      	it	eq
 8000b50:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b54:	4770      	bx	lr
 8000b56:	f04f 0000 	mov.w	r0, #0
 8000b5a:	4770      	bx	lr

08000b5c <setup_LCD_GPIOs>:
#include "5110.h"
#include "main.h"


void setup_LCD_GPIOs()
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_2,1); // Back Light
 8000b60:	2201      	movs	r2, #1
 8000b62:	2104      	movs	r1, #4
 8000b64:	4810      	ldr	r0, [pc, #64]	; (8000ba8 <setup_LCD_GPIOs+0x4c>)
 8000b66:	f001 fc2d 	bl	80023c4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,1); // CE(SS)
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	2110      	movs	r1, #16
 8000b6e:	480e      	ldr	r0, [pc, #56]	; (8000ba8 <setup_LCD_GPIOs+0x4c>)
 8000b70:	f001 fc28 	bl	80023c4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,1); // D/C
 8000b74:	2201      	movs	r2, #1
 8000b76:	2102      	movs	r1, #2
 8000b78:	480b      	ldr	r0, [pc, #44]	; (8000ba8 <setup_LCD_GPIOs+0x4c>)
 8000b7a:	f001 fc23 	bl	80023c4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,0); // Reset
 8000b7e:	2200      	movs	r2, #0
 8000b80:	2101      	movs	r1, #1
 8000b82:	4809      	ldr	r0, [pc, #36]	; (8000ba8 <setup_LCD_GPIOs+0x4c>)
 8000b84:	f001 fc1e 	bl	80023c4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,0); // MOSI
 8000b88:	2200      	movs	r2, #0
 8000b8a:	2180      	movs	r1, #128	; 0x80
 8000b8c:	4806      	ldr	r0, [pc, #24]	; (8000ba8 <setup_LCD_GPIOs+0x4c>)
 8000b8e:	f001 fc19 	bl	80023c4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,0); // SCLK
 8000b92:	2200      	movs	r2, #0
 8000b94:	2120      	movs	r1, #32
 8000b96:	4804      	ldr	r0, [pc, #16]	; (8000ba8 <setup_LCD_GPIOs+0x4c>)
 8000b98:	f001 fc14 	bl	80023c4 <HAL_GPIO_WritePin>
			HAL_Delay(10);
 8000b9c:	200a      	movs	r0, #10
 8000b9e:	f001 f9b1 	bl	8001f04 <HAL_Delay>
}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40010800 	.word	0x40010800

08000bac <PCD8544_write>:


void PCD8544_write(unsigned char type, unsigned char value)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	460a      	mov	r2, r1
 8000bb6:	71fb      	strb	r3, [r7, #7]
 8000bb8:	4613      	mov	r3, r2
 8000bba:	71bb      	strb	r3, [r7, #6]
     unsigned char s = 0x08;
 8000bbc:	2308      	movs	r3, #8
 8000bbe:	73fb      	strb	r3, [r7, #15]

     if(type != 0)
 8000bc0:	79fb      	ldrb	r3, [r7, #7]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d005      	beq.n	8000bd2 <PCD8544_write+0x26>
     {
          // GPIOB_pin_high(DC_pin);
			 HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,1);
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	2102      	movs	r1, #2
 8000bca:	481d      	ldr	r0, [pc, #116]	; (8000c40 <PCD8544_write+0x94>)
 8000bcc:	f001 fbfa 	bl	80023c4 <HAL_GPIO_WritePin>
 8000bd0:	e004      	b.n	8000bdc <PCD8544_write+0x30>
     }
     else
     {
           //GPIOB_pin_low(DC_pin);
			 HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,0);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	2102      	movs	r1, #2
 8000bd6:	481a      	ldr	r0, [pc, #104]	; (8000c40 <PCD8544_write+0x94>)
 8000bd8:	f001 fbf4 	bl	80023c4 <HAL_GPIO_WritePin>
     }

          //GPIOB_pin_low(CE_pin);
		 HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,0);
 8000bdc:	2200      	movs	r2, #0
 8000bde:	2110      	movs	r1, #16
 8000be0:	4817      	ldr	r0, [pc, #92]	; (8000c40 <PCD8544_write+0x94>)
 8000be2:	f001 fbef 	bl	80023c4 <HAL_GPIO_WritePin>

     while(s > 0)
 8000be6:	e01e      	b.n	8000c26 <PCD8544_write+0x7a>
     {
               //GPIOB_pin_low(SCK_pin);
			     HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,0);
 8000be8:	2200      	movs	r2, #0
 8000bea:	2120      	movs	r1, #32
 8000bec:	4814      	ldr	r0, [pc, #80]	; (8000c40 <PCD8544_write+0x94>)
 8000bee:	f001 fbe9 	bl	80023c4 <HAL_GPIO_WritePin>

         if((value & 0x80) == 0)
 8000bf2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	db05      	blt.n	8000c06 <PCD8544_write+0x5a>
         {
                   //GPIOB_pin_low(SDO_pin);
					 HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,0);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	2180      	movs	r1, #128	; 0x80
 8000bfe:	4810      	ldr	r0, [pc, #64]	; (8000c40 <PCD8544_write+0x94>)
 8000c00:	f001 fbe0 	bl	80023c4 <HAL_GPIO_WritePin>
 8000c04:	e004      	b.n	8000c10 <PCD8544_write+0x64>
         }
         else
         {
                    //GPIOB_pin_high(SDO_pin);
					  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,1);
 8000c06:	2201      	movs	r2, #1
 8000c08:	2180      	movs	r1, #128	; 0x80
 8000c0a:	480d      	ldr	r0, [pc, #52]	; (8000c40 <PCD8544_write+0x94>)
 8000c0c:	f001 fbda 	bl	80023c4 <HAL_GPIO_WritePin>
         }

         value <<= 1;
 8000c10:	79bb      	ldrb	r3, [r7, #6]
 8000c12:	005b      	lsls	r3, r3, #1
 8000c14:	71bb      	strb	r3, [r7, #6]
               //GPIOB_pin_high(SCK_pin);
				 HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,1);
 8000c16:	2201      	movs	r2, #1
 8000c18:	2120      	movs	r1, #32
 8000c1a:	4809      	ldr	r0, [pc, #36]	; (8000c40 <PCD8544_write+0x94>)
 8000c1c:	f001 fbd2 	bl	80023c4 <HAL_GPIO_WritePin>
         s--;
 8000c20:	7bfb      	ldrb	r3, [r7, #15]
 8000c22:	3b01      	subs	r3, #1
 8000c24:	73fb      	strb	r3, [r7, #15]
     while(s > 0)
 8000c26:	7bfb      	ldrb	r3, [r7, #15]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d1dd      	bne.n	8000be8 <PCD8544_write+0x3c>
     };

       //GPIOB_pin_high(CE_pin);
		 HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,1);
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	2110      	movs	r1, #16
 8000c30:	4803      	ldr	r0, [pc, #12]	; (8000c40 <PCD8544_write+0x94>)
 8000c32:	f001 fbc7 	bl	80023c4 <HAL_GPIO_WritePin>
}
 8000c36:	bf00      	nop
 8000c38:	3710      	adds	r7, #16
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40010800 	.word	0x40010800

08000c44 <PCD8544_reset>:


void PCD8544_reset()
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
//     GPIOB_pin_low(RST_pin);
//     delay_us(100);
//     GPIOB_pin_high(RST_pin);
				HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,0);
 8000c48:	2200      	movs	r2, #0
 8000c4a:	2101      	movs	r1, #1
 8000c4c:	4806      	ldr	r0, [pc, #24]	; (8000c68 <PCD8544_reset+0x24>)
 8000c4e:	f001 fbb9 	bl	80023c4 <HAL_GPIO_WritePin>
				HAL_Delay(100);
 8000c52:	2064      	movs	r0, #100	; 0x64
 8000c54:	f001 f956 	bl	8001f04 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,1);
 8000c58:	2201      	movs	r2, #1
 8000c5a:	2101      	movs	r1, #1
 8000c5c:	4802      	ldr	r0, [pc, #8]	; (8000c68 <PCD8544_reset+0x24>)
 8000c5e:	f001 fbb1 	bl	80023c4 <HAL_GPIO_WritePin>
}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	40010800 	.word	0x40010800

08000c6c <PCD8544_init>:


void PCD8544_init()
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
    setup_LCD_GPIOs();
 8000c70:	f7ff ff74 	bl	8000b5c <setup_LCD_GPIOs>
    PCD8544_reset();
 8000c74:	f7ff ffe6 	bl	8000c44 <PCD8544_reset>
    PCD8544_write(CMD, (PCD8544_extended_instruction | PCD8544_function_set));
 8000c78:	2121      	movs	r1, #33	; 0x21
 8000c7a:	2000      	movs	r0, #0
 8000c7c:	f7ff ff96 	bl	8000bac <PCD8544_write>
    PCD8544_write(CMD, (PCD8544_set_bias | 0x02));
 8000c80:	2112      	movs	r1, #18
 8000c82:	2000      	movs	r0, #0
 8000c84:	f7ff ff92 	bl	8000bac <PCD8544_write>
    PCD8544_set_contrast(0x39);
 8000c88:	2039      	movs	r0, #57	; 0x39
 8000c8a:	f000 f833 	bl	8000cf4 <PCD8544_set_contrast>
    PCD8544_write(CMD, PCD8544_set_temp);
 8000c8e:	2104      	movs	r1, #4
 8000c90:	2000      	movs	r0, #0
 8000c92:	f7ff ff8b 	bl	8000bac <PCD8544_write>
    PCD8544_write(CMD, (PCD8544_display_normal | PCD8544_display_control));
 8000c96:	210c      	movs	r1, #12
 8000c98:	2000      	movs	r0, #0
 8000c9a:	f7ff ff87 	bl	8000bac <PCD8544_write>
    PCD8544_write(CMD, PCD8544_function_set);
 8000c9e:	2120      	movs	r1, #32
 8000ca0:	2000      	movs	r0, #0
 8000ca2:	f7ff ff83 	bl	8000bac <PCD8544_write>
    PCD8544_write(CMD, PCD8544_display_all_on);
 8000ca6:	2101      	movs	r1, #1
 8000ca8:	2000      	movs	r0, #0
 8000caa:	f7ff ff7f 	bl	8000bac <PCD8544_write>
    PCD8544_write(CMD, PCD8544_display_normal);
 8000cae:	2104      	movs	r1, #4
 8000cb0:	2000      	movs	r0, #0
 8000cb2:	f7ff ff7b 	bl	8000bac <PCD8544_write>
    PCD8544_clear_buffer(OFF);
 8000cb6:	2000      	movs	r0, #0
 8000cb8:	f000 f888 	bl	8000dcc <PCD8544_clear_buffer>
}
 8000cbc:	bf00      	nop
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <PCD8544_backlight_state>:


void PCD8544_backlight_state(unsigned char value)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	71fb      	strb	r3, [r7, #7]
     if(value != 0)
 8000cca:	79fb      	ldrb	r3, [r7, #7]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d005      	beq.n	8000cdc <PCD8544_backlight_state+0x1c>
     {
         //GPIOB_pin_low(BL_pin);
			  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_2,0);
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	2104      	movs	r1, #4
 8000cd4:	4806      	ldr	r0, [pc, #24]	; (8000cf0 <PCD8544_backlight_state+0x30>)
 8000cd6:	f001 fb75 	bl	80023c4 <HAL_GPIO_WritePin>
     else
     {
        // GPIOB_pin_high(BL_pin);
			 HAL_GPIO_WritePin(GPIOA,GPIO_PIN_2,1);
     }
}
 8000cda:	e004      	b.n	8000ce6 <PCD8544_backlight_state+0x26>
			 HAL_GPIO_WritePin(GPIOA,GPIO_PIN_2,1);
 8000cdc:	2201      	movs	r2, #1
 8000cde:	2104      	movs	r1, #4
 8000ce0:	4803      	ldr	r0, [pc, #12]	; (8000cf0 <PCD8544_backlight_state+0x30>)
 8000ce2:	f001 fb6f 	bl	80023c4 <HAL_GPIO_WritePin>
}
 8000ce6:	bf00      	nop
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	40010800 	.word	0x40010800

08000cf4 <PCD8544_set_contrast>:


void PCD8544_set_contrast(unsigned char value)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	71fb      	strb	r3, [r7, #7]
    if(value >= 0x7F)
 8000cfe:	79fb      	ldrb	r3, [r7, #7]
 8000d00:	2b7e      	cmp	r3, #126	; 0x7e
 8000d02:	d901      	bls.n	8000d08 <PCD8544_set_contrast+0x14>
    {
       value = 0x7F;
 8000d04:	237f      	movs	r3, #127	; 0x7f
 8000d06:	71fb      	strb	r3, [r7, #7]
    }

    PCD8544_write(CMD, (PCD8544_extended_instruction | PCD8544_function_set));
 8000d08:	2121      	movs	r1, #33	; 0x21
 8000d0a:	2000      	movs	r0, #0
 8000d0c:	f7ff ff4e 	bl	8000bac <PCD8544_write>
    PCD8544_write(CMD, (PCD8544_set_VOP | value));
 8000d10:	79fb      	ldrb	r3, [r7, #7]
 8000d12:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	4619      	mov	r1, r3
 8000d1a:	2000      	movs	r0, #0
 8000d1c:	f7ff ff46 	bl	8000bac <PCD8544_write>
    PCD8544_write(CMD, PCD8544_function_set);
 8000d20:	2120      	movs	r1, #32
 8000d22:	2000      	movs	r0, #0
 8000d24:	f7ff ff42 	bl	8000bac <PCD8544_write>
}
 8000d28:	bf00      	nop
 8000d2a:	3708      	adds	r7, #8
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <PCD8544_set_cursor>:


void PCD8544_set_cursor(unsigned char x_pos, unsigned char y_pos)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	460a      	mov	r2, r1
 8000d3a:	71fb      	strb	r3, [r7, #7]
 8000d3c:	4613      	mov	r3, r2
 8000d3e:	71bb      	strb	r3, [r7, #6]
    PCD8544_write(CMD, (PCD8544_set_X_addr | x_pos));
 8000d40:	79fb      	ldrb	r3, [r7, #7]
 8000d42:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	4619      	mov	r1, r3
 8000d4a:	2000      	movs	r0, #0
 8000d4c:	f7ff ff2e 	bl	8000bac <PCD8544_write>
    PCD8544_write(CMD, (PCD8544_set_Y_addr | y_pos));
 8000d50:	79bb      	ldrb	r3, [r7, #6]
 8000d52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	4619      	mov	r1, r3
 8000d5a:	2000      	movs	r0, #0
 8000d5c:	f7ff ff26 	bl	8000bac <PCD8544_write>
}
 8000d60:	bf00      	nop
 8000d62:	3708      	adds	r7, #8
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <PCD8544_print_char>:


void PCD8544_print_char(unsigned char ch, unsigned char colour)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	4603      	mov	r3, r0
 8000d70:	460a      	mov	r2, r1
 8000d72:	71fb      	strb	r3, [r7, #7]
 8000d74:	4613      	mov	r3, r2
 8000d76:	71bb      	strb	r3, [r7, #6]
     unsigned char s = 0;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	73fb      	strb	r3, [r7, #15]
     unsigned char chr = 0;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	73bb      	strb	r3, [r7, #14]

     for(s = 0; s <= 4; s++)
 8000d80:	2300      	movs	r3, #0
 8000d82:	73fb      	strb	r3, [r7, #15]
 8000d84:	e019      	b.n	8000dba <PCD8544_print_char+0x52>
     {
           chr = font[(ch - 0x20)][s];
 8000d86:	79fb      	ldrb	r3, [r7, #7]
 8000d88:	f1a3 0220 	sub.w	r2, r3, #32
 8000d8c:	7bf9      	ldrb	r1, [r7, #15]
 8000d8e:	480e      	ldr	r0, [pc, #56]	; (8000dc8 <PCD8544_print_char+0x60>)
 8000d90:	4613      	mov	r3, r2
 8000d92:	009b      	lsls	r3, r3, #2
 8000d94:	4413      	add	r3, r2
 8000d96:	4403      	add	r3, r0
 8000d98:	440b      	add	r3, r1
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	73bb      	strb	r3, [r7, #14]
           if(colour == BLACK)
 8000d9e:	79bb      	ldrb	r3, [r7, #6]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d102      	bne.n	8000daa <PCD8544_print_char+0x42>
           {
               chr = ~chr;
 8000da4:	7bbb      	ldrb	r3, [r7, #14]
 8000da6:	43db      	mvns	r3, r3
 8000da8:	73bb      	strb	r3, [r7, #14]
           }
           PCD8544_write(DAT, chr);
 8000daa:	7bbb      	ldrb	r3, [r7, #14]
 8000dac:	4619      	mov	r1, r3
 8000dae:	2001      	movs	r0, #1
 8000db0:	f7ff fefc 	bl	8000bac <PCD8544_write>
     for(s = 0; s <= 4; s++)
 8000db4:	7bfb      	ldrb	r3, [r7, #15]
 8000db6:	3301      	adds	r3, #1
 8000db8:	73fb      	strb	r3, [r7, #15]
 8000dba:	7bfb      	ldrb	r3, [r7, #15]
 8000dbc:	2b04      	cmp	r3, #4
 8000dbe:	d9e2      	bls.n	8000d86 <PCD8544_print_char+0x1e>
     }
}
 8000dc0:	bf00      	nop
 8000dc2:	3710      	adds	r7, #16
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	08002cac 	.word	0x08002cac

08000dcc <PCD8544_clear_buffer>:
    }
}


void PCD8544_clear_buffer(unsigned char colour)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b085      	sub	sp, #20
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	71fb      	strb	r3, [r7, #7]
    unsigned char x_pos = 0;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	73fb      	strb	r3, [r7, #15]
    unsigned char y_pos = 0;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	73bb      	strb	r3, [r7, #14]

    for(x_pos; x_pos < X_max; x_pos++)
 8000dde:	e013      	b.n	8000e08 <PCD8544_clear_buffer+0x3c>
    {
        for(y_pos; y_pos < Rows; y_pos++)
        {
            PCD8544_buffer[x_pos][y_pos] = colour;
 8000de0:	7bfa      	ldrb	r2, [r7, #15]
 8000de2:	7bb9      	ldrb	r1, [r7, #14]
 8000de4:	480c      	ldr	r0, [pc, #48]	; (8000e18 <PCD8544_clear_buffer+0x4c>)
 8000de6:	4613      	mov	r3, r2
 8000de8:	005b      	lsls	r3, r3, #1
 8000dea:	4413      	add	r3, r2
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	4403      	add	r3, r0
 8000df0:	440b      	add	r3, r1
 8000df2:	79fa      	ldrb	r2, [r7, #7]
 8000df4:	701a      	strb	r2, [r3, #0]
        for(y_pos; y_pos < Rows; y_pos++)
 8000df6:	7bbb      	ldrb	r3, [r7, #14]
 8000df8:	3301      	adds	r3, #1
 8000dfa:	73bb      	strb	r3, [r7, #14]
 8000dfc:	7bbb      	ldrb	r3, [r7, #14]
 8000dfe:	2b05      	cmp	r3, #5
 8000e00:	d9ee      	bls.n	8000de0 <PCD8544_clear_buffer+0x14>
    for(x_pos; x_pos < X_max; x_pos++)
 8000e02:	7bfb      	ldrb	r3, [r7, #15]
 8000e04:	3301      	adds	r3, #1
 8000e06:	73fb      	strb	r3, [r7, #15]
 8000e08:	7bfb      	ldrb	r3, [r7, #15]
 8000e0a:	2b53      	cmp	r3, #83	; 0x53
 8000e0c:	d9f6      	bls.n	8000dfc <PCD8544_clear_buffer+0x30>
        }
    }
}
 8000e0e:	bf00      	nop
 8000e10:	3714      	adds	r7, #20
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bc80      	pop	{r7}
 8000e16:	4770      	bx	lr
 8000e18:	20000028 	.word	0x20000028

08000e1c <PCD8544_clear_screen>:


void PCD8544_clear_screen(unsigned char colour)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	71fb      	strb	r3, [r7, #7]
    unsigned char x_pos = 0;
 8000e26:	2300      	movs	r3, #0
 8000e28:	73fb      	strb	r3, [r7, #15]
    unsigned char y_pos = 0;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	73bb      	strb	r3, [r7, #14]

    for(y_pos = 0; y_pos < Rows; y_pos++)
 8000e2e:	2300      	movs	r3, #0
 8000e30:	73bb      	strb	r3, [r7, #14]
 8000e32:	e011      	b.n	8000e58 <PCD8544_clear_screen+0x3c>
    {
        for(x_pos = 0; x_pos < X_max; x_pos++)
 8000e34:	2300      	movs	r3, #0
 8000e36:	73fb      	strb	r3, [r7, #15]
 8000e38:	e008      	b.n	8000e4c <PCD8544_clear_screen+0x30>
        {
            PCD8544_print_string(x_pos, y_pos, " ", colour);
 8000e3a:	79fb      	ldrb	r3, [r7, #7]
 8000e3c:	7bb9      	ldrb	r1, [r7, #14]
 8000e3e:	7bf8      	ldrb	r0, [r7, #15]
 8000e40:	4a09      	ldr	r2, [pc, #36]	; (8000e68 <PCD8544_clear_screen+0x4c>)
 8000e42:	f000 f813 	bl	8000e6c <PCD8544_print_string>
        for(x_pos = 0; x_pos < X_max; x_pos++)
 8000e46:	7bfb      	ldrb	r3, [r7, #15]
 8000e48:	3301      	adds	r3, #1
 8000e4a:	73fb      	strb	r3, [r7, #15]
 8000e4c:	7bfb      	ldrb	r3, [r7, #15]
 8000e4e:	2b53      	cmp	r3, #83	; 0x53
 8000e50:	d9f3      	bls.n	8000e3a <PCD8544_clear_screen+0x1e>
    for(y_pos = 0; y_pos < Rows; y_pos++)
 8000e52:	7bbb      	ldrb	r3, [r7, #14]
 8000e54:	3301      	adds	r3, #1
 8000e56:	73bb      	strb	r3, [r7, #14]
 8000e58:	7bbb      	ldrb	r3, [r7, #14]
 8000e5a:	2b05      	cmp	r3, #5
 8000e5c:	d9ea      	bls.n	8000e34 <PCD8544_clear_screen+0x18>
        }
    }
}
 8000e5e:	bf00      	nop
 8000e60:	3710      	adds	r7, #16
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	08002c38 	.word	0x08002c38

08000e6c <PCD8544_print_string>:

void PCD8544_print_string(unsigned char x_pos, unsigned char y_pos, unsigned char *ch, unsigned char colour)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	603a      	str	r2, [r7, #0]
 8000e74:	461a      	mov	r2, r3
 8000e76:	4603      	mov	r3, r0
 8000e78:	71fb      	strb	r3, [r7, #7]
 8000e7a:	460b      	mov	r3, r1
 8000e7c:	71bb      	strb	r3, [r7, #6]
 8000e7e:	4613      	mov	r3, r2
 8000e80:	717b      	strb	r3, [r7, #5]
    PCD8544_set_cursor(x_pos, y_pos);
 8000e82:	79ba      	ldrb	r2, [r7, #6]
 8000e84:	79fb      	ldrb	r3, [r7, #7]
 8000e86:	4611      	mov	r1, r2
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f7ff ff51 	bl	8000d30 <PCD8544_set_cursor>

    do
    {
       PCD8544_print_char(*ch++, colour);
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	1c5a      	adds	r2, r3, #1
 8000e92:	603a      	str	r2, [r7, #0]
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	797a      	ldrb	r2, [r7, #5]
 8000e98:	4611      	mov	r1, r2
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f7ff ff64 	bl	8000d68 <PCD8544_print_char>
    }while((*ch >= 0x20) && (*ch <= 0x7F));
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	2b1f      	cmp	r3, #31
 8000ea6:	d904      	bls.n	8000eb2 <PCD8544_print_string+0x46>
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	b25b      	sxtb	r3, r3
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	daed      	bge.n	8000e8e <PCD8544_print_string+0x22>
}
 8000eb2:	bf00      	nop
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
	...

08000ebc <print_chr>:


void print_chr(unsigned char x_pos, unsigned char y_pos, signed int value, unsigned char colour)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	603a      	str	r2, [r7, #0]
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	71fb      	strb	r3, [r7, #7]
 8000eca:	460b      	mov	r3, r1
 8000ecc:	71bb      	strb	r3, [r7, #6]
 8000ece:	4613      	mov	r3, r2
 8000ed0:	717b      	strb	r3, [r7, #5]
    unsigned char ch = 0x00;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	73fb      	strb	r3, [r7, #15]

    if(value < 0)
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	da0e      	bge.n	8000efa <print_chr+0x3e>
    {
        PCD8544_set_cursor(x_pos, y_pos);
 8000edc:	79ba      	ldrb	r2, [r7, #6]
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	4611      	mov	r1, r2
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f7ff ff24 	bl	8000d30 <PCD8544_set_cursor>
        PCD8544_print_char(0x2D, colour);
 8000ee8:	797b      	ldrb	r3, [r7, #5]
 8000eea:	4619      	mov	r1, r3
 8000eec:	202d      	movs	r0, #45	; 0x2d
 8000eee:	f7ff ff3b 	bl	8000d68 <PCD8544_print_char>
        value = -value;
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	425b      	negs	r3, r3
 8000ef6:	603b      	str	r3, [r7, #0]
 8000ef8:	e00a      	b.n	8000f10 <print_chr+0x54>
    }
    else
    {
        PCD8544_set_cursor(x_pos, y_pos);
 8000efa:	79ba      	ldrb	r2, [r7, #6]
 8000efc:	79fb      	ldrb	r3, [r7, #7]
 8000efe:	4611      	mov	r1, r2
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff ff15 	bl	8000d30 <PCD8544_set_cursor>
        PCD8544_print_char(0x20, colour);
 8000f06:	797b      	ldrb	r3, [r7, #5]
 8000f08:	4619      	mov	r1, r3
 8000f0a:	2020      	movs	r0, #32
 8000f0c:	f7ff ff2c 	bl	8000d68 <PCD8544_print_char>
    }

     if((value > 99) && (value <= 999))
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	2b63      	cmp	r3, #99	; 0x63
 8000f14:	dd5c      	ble.n	8000fd0 <print_chr+0x114>
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f1c:	da58      	bge.n	8000fd0 <print_chr+0x114>
     {
         ch = (value / 100);
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	4a77      	ldr	r2, [pc, #476]	; (8001100 <print_chr+0x244>)
 8000f22:	fb82 1203 	smull	r1, r2, r2, r3
 8000f26:	1152      	asrs	r2, r2, #5
 8000f28:	17db      	asrs	r3, r3, #31
 8000f2a:	1ad3      	subs	r3, r2, r3
 8000f2c:	73fb      	strb	r3, [r7, #15]
         PCD8544_set_cursor((x_pos + 6), y_pos);
 8000f2e:	79fb      	ldrb	r3, [r7, #7]
 8000f30:	3306      	adds	r3, #6
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	79ba      	ldrb	r2, [r7, #6]
 8000f36:	4611      	mov	r1, r2
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff fef9 	bl	8000d30 <PCD8544_set_cursor>
         PCD8544_print_char((48 + ch), colour);
 8000f3e:	7bfb      	ldrb	r3, [r7, #15]
 8000f40:	3330      	adds	r3, #48	; 0x30
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	797a      	ldrb	r2, [r7, #5]
 8000f46:	4611      	mov	r1, r2
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff ff0d 	bl	8000d68 <PCD8544_print_char>

         ch = ((value % 100) / 10);
 8000f4e:	683a      	ldr	r2, [r7, #0]
 8000f50:	4b6b      	ldr	r3, [pc, #428]	; (8001100 <print_chr+0x244>)
 8000f52:	fb83 1302 	smull	r1, r3, r3, r2
 8000f56:	1159      	asrs	r1, r3, #5
 8000f58:	17d3      	asrs	r3, r2, #31
 8000f5a:	1acb      	subs	r3, r1, r3
 8000f5c:	2164      	movs	r1, #100	; 0x64
 8000f5e:	fb01 f303 	mul.w	r3, r1, r3
 8000f62:	1ad3      	subs	r3, r2, r3
 8000f64:	4a67      	ldr	r2, [pc, #412]	; (8001104 <print_chr+0x248>)
 8000f66:	fb82 1203 	smull	r1, r2, r2, r3
 8000f6a:	1092      	asrs	r2, r2, #2
 8000f6c:	17db      	asrs	r3, r3, #31
 8000f6e:	1ad3      	subs	r3, r2, r3
 8000f70:	73fb      	strb	r3, [r7, #15]
         PCD8544_set_cursor((x_pos + 12), y_pos);
 8000f72:	79fb      	ldrb	r3, [r7, #7]
 8000f74:	330c      	adds	r3, #12
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	79ba      	ldrb	r2, [r7, #6]
 8000f7a:	4611      	mov	r1, r2
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff fed7 	bl	8000d30 <PCD8544_set_cursor>
         PCD8544_print_char((48 + ch), colour);
 8000f82:	7bfb      	ldrb	r3, [r7, #15]
 8000f84:	3330      	adds	r3, #48	; 0x30
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	797a      	ldrb	r2, [r7, #5]
 8000f8a:	4611      	mov	r1, r2
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff feeb 	bl	8000d68 <PCD8544_print_char>

         ch = (value % 10);
 8000f92:	683a      	ldr	r2, [r7, #0]
 8000f94:	4b5b      	ldr	r3, [pc, #364]	; (8001104 <print_chr+0x248>)
 8000f96:	fb83 1302 	smull	r1, r3, r3, r2
 8000f9a:	1099      	asrs	r1, r3, #2
 8000f9c:	17d3      	asrs	r3, r2, #31
 8000f9e:	1ac9      	subs	r1, r1, r3
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	440b      	add	r3, r1
 8000fa6:	005b      	lsls	r3, r3, #1
 8000fa8:	1ad1      	subs	r1, r2, r3
 8000faa:	460b      	mov	r3, r1
 8000fac:	73fb      	strb	r3, [r7, #15]
         PCD8544_set_cursor((x_pos + 18), y_pos);
 8000fae:	79fb      	ldrb	r3, [r7, #7]
 8000fb0:	3312      	adds	r3, #18
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	79ba      	ldrb	r2, [r7, #6]
 8000fb6:	4611      	mov	r1, r2
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff feb9 	bl	8000d30 <PCD8544_set_cursor>
         PCD8544_print_char((48 + ch), colour);
 8000fbe:	7bfb      	ldrb	r3, [r7, #15]
 8000fc0:	3330      	adds	r3, #48	; 0x30
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	797a      	ldrb	r2, [r7, #5]
 8000fc6:	4611      	mov	r1, r2
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff fecd 	bl	8000d68 <PCD8544_print_char>
 8000fce:	e092      	b.n	80010f6 <print_chr+0x23a>
     }
     else if((value > 9) && (value <= 99))
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	2b09      	cmp	r3, #9
 8000fd4:	dd50      	ble.n	8001078 <print_chr+0x1bc>
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	2b63      	cmp	r3, #99	; 0x63
 8000fda:	dc4d      	bgt.n	8001078 <print_chr+0x1bc>
     {
         ch = ((value % 100) / 10);
 8000fdc:	683a      	ldr	r2, [r7, #0]
 8000fde:	4b48      	ldr	r3, [pc, #288]	; (8001100 <print_chr+0x244>)
 8000fe0:	fb83 1302 	smull	r1, r3, r3, r2
 8000fe4:	1159      	asrs	r1, r3, #5
 8000fe6:	17d3      	asrs	r3, r2, #31
 8000fe8:	1acb      	subs	r3, r1, r3
 8000fea:	2164      	movs	r1, #100	; 0x64
 8000fec:	fb01 f303 	mul.w	r3, r1, r3
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	4a44      	ldr	r2, [pc, #272]	; (8001104 <print_chr+0x248>)
 8000ff4:	fb82 1203 	smull	r1, r2, r2, r3
 8000ff8:	1092      	asrs	r2, r2, #2
 8000ffa:	17db      	asrs	r3, r3, #31
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	73fb      	strb	r3, [r7, #15]
         PCD8544_set_cursor((x_pos + 6), y_pos);
 8001000:	79fb      	ldrb	r3, [r7, #7]
 8001002:	3306      	adds	r3, #6
 8001004:	b2db      	uxtb	r3, r3
 8001006:	79ba      	ldrb	r2, [r7, #6]
 8001008:	4611      	mov	r1, r2
 800100a:	4618      	mov	r0, r3
 800100c:	f7ff fe90 	bl	8000d30 <PCD8544_set_cursor>
         PCD8544_print_char((48 + ch), colour);
 8001010:	7bfb      	ldrb	r3, [r7, #15]
 8001012:	3330      	adds	r3, #48	; 0x30
 8001014:	b2db      	uxtb	r3, r3
 8001016:	797a      	ldrb	r2, [r7, #5]
 8001018:	4611      	mov	r1, r2
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff fea4 	bl	8000d68 <PCD8544_print_char>

         ch = (value % 10);
 8001020:	683a      	ldr	r2, [r7, #0]
 8001022:	4b38      	ldr	r3, [pc, #224]	; (8001104 <print_chr+0x248>)
 8001024:	fb83 1302 	smull	r1, r3, r3, r2
 8001028:	1099      	asrs	r1, r3, #2
 800102a:	17d3      	asrs	r3, r2, #31
 800102c:	1ac9      	subs	r1, r1, r3
 800102e:	460b      	mov	r3, r1
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	440b      	add	r3, r1
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	1ad1      	subs	r1, r2, r3
 8001038:	460b      	mov	r3, r1
 800103a:	73fb      	strb	r3, [r7, #15]
         PCD8544_set_cursor((x_pos + 12), y_pos);
 800103c:	79fb      	ldrb	r3, [r7, #7]
 800103e:	330c      	adds	r3, #12
 8001040:	b2db      	uxtb	r3, r3
 8001042:	79ba      	ldrb	r2, [r7, #6]
 8001044:	4611      	mov	r1, r2
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff fe72 	bl	8000d30 <PCD8544_set_cursor>
         PCD8544_print_char((48 + ch), colour);
 800104c:	7bfb      	ldrb	r3, [r7, #15]
 800104e:	3330      	adds	r3, #48	; 0x30
 8001050:	b2db      	uxtb	r3, r3
 8001052:	797a      	ldrb	r2, [r7, #5]
 8001054:	4611      	mov	r1, r2
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff fe86 	bl	8000d68 <PCD8544_print_char>

         PCD8544_set_cursor((x_pos + 18), y_pos);
 800105c:	79fb      	ldrb	r3, [r7, #7]
 800105e:	3312      	adds	r3, #18
 8001060:	b2db      	uxtb	r3, r3
 8001062:	79ba      	ldrb	r2, [r7, #6]
 8001064:	4611      	mov	r1, r2
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff fe62 	bl	8000d30 <PCD8544_set_cursor>
         PCD8544_print_char(0x20, colour);
 800106c:	797b      	ldrb	r3, [r7, #5]
 800106e:	4619      	mov	r1, r3
 8001070:	2020      	movs	r0, #32
 8001072:	f7ff fe79 	bl	8000d68 <PCD8544_print_char>
 8001076:	e03e      	b.n	80010f6 <print_chr+0x23a>
     }
     else if((value >= 0) && (value <= 9))
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	2b00      	cmp	r3, #0
 800107c:	db3b      	blt.n	80010f6 <print_chr+0x23a>
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	2b09      	cmp	r3, #9
 8001082:	dc38      	bgt.n	80010f6 <print_chr+0x23a>
     {
         ch = (value % 10);
 8001084:	683a      	ldr	r2, [r7, #0]
 8001086:	4b1f      	ldr	r3, [pc, #124]	; (8001104 <print_chr+0x248>)
 8001088:	fb83 1302 	smull	r1, r3, r3, r2
 800108c:	1099      	asrs	r1, r3, #2
 800108e:	17d3      	asrs	r3, r2, #31
 8001090:	1ac9      	subs	r1, r1, r3
 8001092:	460b      	mov	r3, r1
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	440b      	add	r3, r1
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	1ad1      	subs	r1, r2, r3
 800109c:	460b      	mov	r3, r1
 800109e:	73fb      	strb	r3, [r7, #15]
         PCD8544_set_cursor((x_pos + 6), y_pos);
 80010a0:	79fb      	ldrb	r3, [r7, #7]
 80010a2:	3306      	adds	r3, #6
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	79ba      	ldrb	r2, [r7, #6]
 80010a8:	4611      	mov	r1, r2
 80010aa:	4618      	mov	r0, r3
 80010ac:	f7ff fe40 	bl	8000d30 <PCD8544_set_cursor>
         PCD8544_print_char((48 + ch), colour);
 80010b0:	7bfb      	ldrb	r3, [r7, #15]
 80010b2:	3330      	adds	r3, #48	; 0x30
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	797a      	ldrb	r2, [r7, #5]
 80010b8:	4611      	mov	r1, r2
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff fe54 	bl	8000d68 <PCD8544_print_char>

         PCD8544_set_cursor((x_pos + 12), y_pos);
 80010c0:	79fb      	ldrb	r3, [r7, #7]
 80010c2:	330c      	adds	r3, #12
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	79ba      	ldrb	r2, [r7, #6]
 80010c8:	4611      	mov	r1, r2
 80010ca:	4618      	mov	r0, r3
 80010cc:	f7ff fe30 	bl	8000d30 <PCD8544_set_cursor>
         PCD8544_print_char(0x20, colour);
 80010d0:	797b      	ldrb	r3, [r7, #5]
 80010d2:	4619      	mov	r1, r3
 80010d4:	2020      	movs	r0, #32
 80010d6:	f7ff fe47 	bl	8000d68 <PCD8544_print_char>

         PCD8544_set_cursor((x_pos + 18), y_pos);
 80010da:	79fb      	ldrb	r3, [r7, #7]
 80010dc:	3312      	adds	r3, #18
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	79ba      	ldrb	r2, [r7, #6]
 80010e2:	4611      	mov	r1, r2
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff fe23 	bl	8000d30 <PCD8544_set_cursor>
         PCD8544_print_char(0x20, colour);
 80010ea:	797b      	ldrb	r3, [r7, #5]
 80010ec:	4619      	mov	r1, r3
 80010ee:	2020      	movs	r0, #32
 80010f0:	f7ff fe3a 	bl	8000d68 <PCD8544_print_char>
     }
}
 80010f4:	e7ff      	b.n	80010f6 <print_chr+0x23a>
 80010f6:	bf00      	nop
 80010f8:	3710      	adds	r7, #16
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	51eb851f 	.word	0x51eb851f
 8001104:	66666667 	.word	0x66666667

08001108 <print_int>:


void print_int(unsigned char x_pos, unsigned char y_pos, signed long value, unsigned char colour)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	603a      	str	r2, [r7, #0]
 8001110:	461a      	mov	r2, r3
 8001112:	4603      	mov	r3, r0
 8001114:	71fb      	strb	r3, [r7, #7]
 8001116:	460b      	mov	r3, r1
 8001118:	71bb      	strb	r3, [r7, #6]
 800111a:	4613      	mov	r3, r2
 800111c:	717b      	strb	r3, [r7, #5]
    unsigned char ch = 0x00;
 800111e:	2300      	movs	r3, #0
 8001120:	73fb      	strb	r3, [r7, #15]

    if(value < 0)
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	2b00      	cmp	r3, #0
 8001126:	da0e      	bge.n	8001146 <print_int+0x3e>
    {
        PCD8544_set_cursor(x_pos, y_pos);
 8001128:	79ba      	ldrb	r2, [r7, #6]
 800112a:	79fb      	ldrb	r3, [r7, #7]
 800112c:	4611      	mov	r1, r2
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff fdfe 	bl	8000d30 <PCD8544_set_cursor>
        PCD8544_print_char(0x2D, colour);
 8001134:	797b      	ldrb	r3, [r7, #5]
 8001136:	4619      	mov	r1, r3
 8001138:	202d      	movs	r0, #45	; 0x2d
 800113a:	f7ff fe15 	bl	8000d68 <PCD8544_print_char>
        value = -value;
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	425b      	negs	r3, r3
 8001142:	603b      	str	r3, [r7, #0]
 8001144:	e00a      	b.n	800115c <print_int+0x54>
    }
    else
    {
        PCD8544_set_cursor(x_pos, y_pos);
 8001146:	79ba      	ldrb	r2, [r7, #6]
 8001148:	79fb      	ldrb	r3, [r7, #7]
 800114a:	4611      	mov	r1, r2
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff fdef 	bl	8000d30 <PCD8544_set_cursor>
        PCD8544_print_char(0x20, colour);
 8001152:	797b      	ldrb	r3, [r7, #5]
 8001154:	4619      	mov	r1, r3
 8001156:	2020      	movs	r0, #32
 8001158:	f7ff fe06 	bl	8000d68 <PCD8544_print_char>
    }

    if(value > 9999)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	f242 720f 	movw	r2, #9999	; 0x270f
 8001162:	4293      	cmp	r3, r2
 8001164:	f340 809f 	ble.w	80012a6 <print_int+0x19e>
    {
        ch = (value / 10000);
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	4a9e      	ldr	r2, [pc, #632]	; (80013e4 <print_int+0x2dc>)
 800116c:	fb82 1203 	smull	r1, r2, r2, r3
 8001170:	1312      	asrs	r2, r2, #12
 8001172:	17db      	asrs	r3, r3, #31
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	73fb      	strb	r3, [r7, #15]
        PCD8544_set_cursor((x_pos + 6), y_pos);
 8001178:	79fb      	ldrb	r3, [r7, #7]
 800117a:	3306      	adds	r3, #6
 800117c:	b2db      	uxtb	r3, r3
 800117e:	79ba      	ldrb	r2, [r7, #6]
 8001180:	4611      	mov	r1, r2
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff fdd4 	bl	8000d30 <PCD8544_set_cursor>
        PCD8544_print_char((48 + ch), colour);
 8001188:	7bfb      	ldrb	r3, [r7, #15]
 800118a:	3330      	adds	r3, #48	; 0x30
 800118c:	b2db      	uxtb	r3, r3
 800118e:	797a      	ldrb	r2, [r7, #5]
 8001190:	4611      	mov	r1, r2
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff fde8 	bl	8000d68 <PCD8544_print_char>

        ch = ((value % 10000)/ 1000);
 8001198:	683a      	ldr	r2, [r7, #0]
 800119a:	4b92      	ldr	r3, [pc, #584]	; (80013e4 <print_int+0x2dc>)
 800119c:	fb83 1302 	smull	r1, r3, r3, r2
 80011a0:	1319      	asrs	r1, r3, #12
 80011a2:	17d3      	asrs	r3, r2, #31
 80011a4:	1acb      	subs	r3, r1, r3
 80011a6:	f242 7110 	movw	r1, #10000	; 0x2710
 80011aa:	fb01 f303 	mul.w	r3, r1, r3
 80011ae:	1ad3      	subs	r3, r2, r3
 80011b0:	4a8d      	ldr	r2, [pc, #564]	; (80013e8 <print_int+0x2e0>)
 80011b2:	fb82 1203 	smull	r1, r2, r2, r3
 80011b6:	1192      	asrs	r2, r2, #6
 80011b8:	17db      	asrs	r3, r3, #31
 80011ba:	1ad3      	subs	r3, r2, r3
 80011bc:	73fb      	strb	r3, [r7, #15]
        PCD8544_set_cursor((x_pos + 12), y_pos);
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	330c      	adds	r3, #12
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	79ba      	ldrb	r2, [r7, #6]
 80011c6:	4611      	mov	r1, r2
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff fdb1 	bl	8000d30 <PCD8544_set_cursor>
        PCD8544_print_char((48 + ch), colour);
 80011ce:	7bfb      	ldrb	r3, [r7, #15]
 80011d0:	3330      	adds	r3, #48	; 0x30
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	797a      	ldrb	r2, [r7, #5]
 80011d6:	4611      	mov	r1, r2
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff fdc5 	bl	8000d68 <PCD8544_print_char>

        ch = ((value % 1000) / 100);
 80011de:	683a      	ldr	r2, [r7, #0]
 80011e0:	4b81      	ldr	r3, [pc, #516]	; (80013e8 <print_int+0x2e0>)
 80011e2:	fb83 1302 	smull	r1, r3, r3, r2
 80011e6:	1199      	asrs	r1, r3, #6
 80011e8:	17d3      	asrs	r3, r2, #31
 80011ea:	1acb      	subs	r3, r1, r3
 80011ec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80011f0:	fb01 f303 	mul.w	r3, r1, r3
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	4a7d      	ldr	r2, [pc, #500]	; (80013ec <print_int+0x2e4>)
 80011f8:	fb82 1203 	smull	r1, r2, r2, r3
 80011fc:	1152      	asrs	r2, r2, #5
 80011fe:	17db      	asrs	r3, r3, #31
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	73fb      	strb	r3, [r7, #15]
        PCD8544_set_cursor((x_pos + 18), y_pos);
 8001204:	79fb      	ldrb	r3, [r7, #7]
 8001206:	3312      	adds	r3, #18
 8001208:	b2db      	uxtb	r3, r3
 800120a:	79ba      	ldrb	r2, [r7, #6]
 800120c:	4611      	mov	r1, r2
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff fd8e 	bl	8000d30 <PCD8544_set_cursor>
        PCD8544_print_char((48 + ch), colour);
 8001214:	7bfb      	ldrb	r3, [r7, #15]
 8001216:	3330      	adds	r3, #48	; 0x30
 8001218:	b2db      	uxtb	r3, r3
 800121a:	797a      	ldrb	r2, [r7, #5]
 800121c:	4611      	mov	r1, r2
 800121e:	4618      	mov	r0, r3
 8001220:	f7ff fda2 	bl	8000d68 <PCD8544_print_char>

        ch = ((value % 100) / 10);
 8001224:	683a      	ldr	r2, [r7, #0]
 8001226:	4b71      	ldr	r3, [pc, #452]	; (80013ec <print_int+0x2e4>)
 8001228:	fb83 1302 	smull	r1, r3, r3, r2
 800122c:	1159      	asrs	r1, r3, #5
 800122e:	17d3      	asrs	r3, r2, #31
 8001230:	1acb      	subs	r3, r1, r3
 8001232:	2164      	movs	r1, #100	; 0x64
 8001234:	fb01 f303 	mul.w	r3, r1, r3
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	4a6d      	ldr	r2, [pc, #436]	; (80013f0 <print_int+0x2e8>)
 800123c:	fb82 1203 	smull	r1, r2, r2, r3
 8001240:	1092      	asrs	r2, r2, #2
 8001242:	17db      	asrs	r3, r3, #31
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	73fb      	strb	r3, [r7, #15]
        PCD8544_set_cursor((x_pos + 24), y_pos);
 8001248:	79fb      	ldrb	r3, [r7, #7]
 800124a:	3318      	adds	r3, #24
 800124c:	b2db      	uxtb	r3, r3
 800124e:	79ba      	ldrb	r2, [r7, #6]
 8001250:	4611      	mov	r1, r2
 8001252:	4618      	mov	r0, r3
 8001254:	f7ff fd6c 	bl	8000d30 <PCD8544_set_cursor>
        PCD8544_print_char((48 + ch), colour);
 8001258:	7bfb      	ldrb	r3, [r7, #15]
 800125a:	3330      	adds	r3, #48	; 0x30
 800125c:	b2db      	uxtb	r3, r3
 800125e:	797a      	ldrb	r2, [r7, #5]
 8001260:	4611      	mov	r1, r2
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff fd80 	bl	8000d68 <PCD8544_print_char>

        ch = (value % 10);
 8001268:	683a      	ldr	r2, [r7, #0]
 800126a:	4b61      	ldr	r3, [pc, #388]	; (80013f0 <print_int+0x2e8>)
 800126c:	fb83 1302 	smull	r1, r3, r3, r2
 8001270:	1099      	asrs	r1, r3, #2
 8001272:	17d3      	asrs	r3, r2, #31
 8001274:	1ac9      	subs	r1, r1, r3
 8001276:	460b      	mov	r3, r1
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	440b      	add	r3, r1
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	1ad1      	subs	r1, r2, r3
 8001280:	460b      	mov	r3, r1
 8001282:	73fb      	strb	r3, [r7, #15]
        PCD8544_set_cursor((x_pos + 30), y_pos);
 8001284:	79fb      	ldrb	r3, [r7, #7]
 8001286:	331e      	adds	r3, #30
 8001288:	b2db      	uxtb	r3, r3
 800128a:	79ba      	ldrb	r2, [r7, #6]
 800128c:	4611      	mov	r1, r2
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff fd4e 	bl	8000d30 <PCD8544_set_cursor>
        PCD8544_print_char((48 + ch), colour);
 8001294:	7bfb      	ldrb	r3, [r7, #15]
 8001296:	3330      	adds	r3, #48	; 0x30
 8001298:	b2db      	uxtb	r3, r3
 800129a:	797a      	ldrb	r2, [r7, #5]
 800129c:	4611      	mov	r1, r2
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff fd62 	bl	8000d68 <PCD8544_print_char>
        PCD8544_print_char(0x20, colour);

        PCD8544_set_cursor((x_pos + 30), y_pos);
        PCD8544_print_char(0x20, colour);
    }
}
 80012a4:	e1ed      	b.n	8001682 <print_int+0x57a>
    else if((value > 999) && (value <= 9999))
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80012ac:	f2c0 80a2 	blt.w	80013f4 <print_int+0x2ec>
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	f242 720f 	movw	r2, #9999	; 0x270f
 80012b6:	4293      	cmp	r3, r2
 80012b8:	f300 809c 	bgt.w	80013f4 <print_int+0x2ec>
        ch = ((value % 10000)/ 1000);
 80012bc:	683a      	ldr	r2, [r7, #0]
 80012be:	4b49      	ldr	r3, [pc, #292]	; (80013e4 <print_int+0x2dc>)
 80012c0:	fb83 1302 	smull	r1, r3, r3, r2
 80012c4:	1319      	asrs	r1, r3, #12
 80012c6:	17d3      	asrs	r3, r2, #31
 80012c8:	1acb      	subs	r3, r1, r3
 80012ca:	f242 7110 	movw	r1, #10000	; 0x2710
 80012ce:	fb01 f303 	mul.w	r3, r1, r3
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	4a44      	ldr	r2, [pc, #272]	; (80013e8 <print_int+0x2e0>)
 80012d6:	fb82 1203 	smull	r1, r2, r2, r3
 80012da:	1192      	asrs	r2, r2, #6
 80012dc:	17db      	asrs	r3, r3, #31
 80012de:	1ad3      	subs	r3, r2, r3
 80012e0:	73fb      	strb	r3, [r7, #15]
        PCD8544_set_cursor((x_pos + 6), y_pos);
 80012e2:	79fb      	ldrb	r3, [r7, #7]
 80012e4:	3306      	adds	r3, #6
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	79ba      	ldrb	r2, [r7, #6]
 80012ea:	4611      	mov	r1, r2
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff fd1f 	bl	8000d30 <PCD8544_set_cursor>
        PCD8544_print_char((48 + ch), colour);
 80012f2:	7bfb      	ldrb	r3, [r7, #15]
 80012f4:	3330      	adds	r3, #48	; 0x30
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	797a      	ldrb	r2, [r7, #5]
 80012fa:	4611      	mov	r1, r2
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff fd33 	bl	8000d68 <PCD8544_print_char>
        ch = ((value % 1000) / 100);
 8001302:	683a      	ldr	r2, [r7, #0]
 8001304:	4b38      	ldr	r3, [pc, #224]	; (80013e8 <print_int+0x2e0>)
 8001306:	fb83 1302 	smull	r1, r3, r3, r2
 800130a:	1199      	asrs	r1, r3, #6
 800130c:	17d3      	asrs	r3, r2, #31
 800130e:	1acb      	subs	r3, r1, r3
 8001310:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001314:	fb01 f303 	mul.w	r3, r1, r3
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	4a34      	ldr	r2, [pc, #208]	; (80013ec <print_int+0x2e4>)
 800131c:	fb82 1203 	smull	r1, r2, r2, r3
 8001320:	1152      	asrs	r2, r2, #5
 8001322:	17db      	asrs	r3, r3, #31
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	73fb      	strb	r3, [r7, #15]
        PCD8544_set_cursor((x_pos + 12), y_pos);
 8001328:	79fb      	ldrb	r3, [r7, #7]
 800132a:	330c      	adds	r3, #12
 800132c:	b2db      	uxtb	r3, r3
 800132e:	79ba      	ldrb	r2, [r7, #6]
 8001330:	4611      	mov	r1, r2
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff fcfc 	bl	8000d30 <PCD8544_set_cursor>
        PCD8544_print_char((48 + ch), colour);
 8001338:	7bfb      	ldrb	r3, [r7, #15]
 800133a:	3330      	adds	r3, #48	; 0x30
 800133c:	b2db      	uxtb	r3, r3
 800133e:	797a      	ldrb	r2, [r7, #5]
 8001340:	4611      	mov	r1, r2
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff fd10 	bl	8000d68 <PCD8544_print_char>
        ch = ((value % 100) / 10);
 8001348:	683a      	ldr	r2, [r7, #0]
 800134a:	4b28      	ldr	r3, [pc, #160]	; (80013ec <print_int+0x2e4>)
 800134c:	fb83 1302 	smull	r1, r3, r3, r2
 8001350:	1159      	asrs	r1, r3, #5
 8001352:	17d3      	asrs	r3, r2, #31
 8001354:	1acb      	subs	r3, r1, r3
 8001356:	2164      	movs	r1, #100	; 0x64
 8001358:	fb01 f303 	mul.w	r3, r1, r3
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	4a24      	ldr	r2, [pc, #144]	; (80013f0 <print_int+0x2e8>)
 8001360:	fb82 1203 	smull	r1, r2, r2, r3
 8001364:	1092      	asrs	r2, r2, #2
 8001366:	17db      	asrs	r3, r3, #31
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	73fb      	strb	r3, [r7, #15]
        PCD8544_set_cursor((x_pos + 18), y_pos);
 800136c:	79fb      	ldrb	r3, [r7, #7]
 800136e:	3312      	adds	r3, #18
 8001370:	b2db      	uxtb	r3, r3
 8001372:	79ba      	ldrb	r2, [r7, #6]
 8001374:	4611      	mov	r1, r2
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff fcda 	bl	8000d30 <PCD8544_set_cursor>
        PCD8544_print_char((48 + ch), colour);
 800137c:	7bfb      	ldrb	r3, [r7, #15]
 800137e:	3330      	adds	r3, #48	; 0x30
 8001380:	b2db      	uxtb	r3, r3
 8001382:	797a      	ldrb	r2, [r7, #5]
 8001384:	4611      	mov	r1, r2
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff fcee 	bl	8000d68 <PCD8544_print_char>
        ch = (value % 10);
 800138c:	683a      	ldr	r2, [r7, #0]
 800138e:	4b18      	ldr	r3, [pc, #96]	; (80013f0 <print_int+0x2e8>)
 8001390:	fb83 1302 	smull	r1, r3, r3, r2
 8001394:	1099      	asrs	r1, r3, #2
 8001396:	17d3      	asrs	r3, r2, #31
 8001398:	1ac9      	subs	r1, r1, r3
 800139a:	460b      	mov	r3, r1
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	440b      	add	r3, r1
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	1ad1      	subs	r1, r2, r3
 80013a4:	460b      	mov	r3, r1
 80013a6:	73fb      	strb	r3, [r7, #15]
        PCD8544_set_cursor((x_pos + 24), y_pos);
 80013a8:	79fb      	ldrb	r3, [r7, #7]
 80013aa:	3318      	adds	r3, #24
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	79ba      	ldrb	r2, [r7, #6]
 80013b0:	4611      	mov	r1, r2
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff fcbc 	bl	8000d30 <PCD8544_set_cursor>
        PCD8544_print_char((48 + ch), colour);
 80013b8:	7bfb      	ldrb	r3, [r7, #15]
 80013ba:	3330      	adds	r3, #48	; 0x30
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	797a      	ldrb	r2, [r7, #5]
 80013c0:	4611      	mov	r1, r2
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff fcd0 	bl	8000d68 <PCD8544_print_char>
        PCD8544_set_cursor((x_pos + 30), y_pos);
 80013c8:	79fb      	ldrb	r3, [r7, #7]
 80013ca:	331e      	adds	r3, #30
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	79ba      	ldrb	r2, [r7, #6]
 80013d0:	4611      	mov	r1, r2
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff fcac 	bl	8000d30 <PCD8544_set_cursor>
        PCD8544_print_char(0x20, colour);
 80013d8:	797b      	ldrb	r3, [r7, #5]
 80013da:	4619      	mov	r1, r3
 80013dc:	2020      	movs	r0, #32
 80013de:	f7ff fcc3 	bl	8000d68 <PCD8544_print_char>
 80013e2:	e14e      	b.n	8001682 <print_int+0x57a>
 80013e4:	68db8bad 	.word	0x68db8bad
 80013e8:	10624dd3 	.word	0x10624dd3
 80013ec:	51eb851f 	.word	0x51eb851f
 80013f0:	66666667 	.word	0x66666667
    else if((value > 99) && (value <= 999))
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	2b63      	cmp	r3, #99	; 0x63
 80013f8:	f340 8082 	ble.w	8001500 <print_int+0x3f8>
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001402:	da7d      	bge.n	8001500 <print_int+0x3f8>
        ch = ((value % 1000) / 100);
 8001404:	683a      	ldr	r2, [r7, #0]
 8001406:	4ba1      	ldr	r3, [pc, #644]	; (800168c <print_int+0x584>)
 8001408:	fb83 1302 	smull	r1, r3, r3, r2
 800140c:	1199      	asrs	r1, r3, #6
 800140e:	17d3      	asrs	r3, r2, #31
 8001410:	1acb      	subs	r3, r1, r3
 8001412:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001416:	fb01 f303 	mul.w	r3, r1, r3
 800141a:	1ad3      	subs	r3, r2, r3
 800141c:	4a9c      	ldr	r2, [pc, #624]	; (8001690 <print_int+0x588>)
 800141e:	fb82 1203 	smull	r1, r2, r2, r3
 8001422:	1152      	asrs	r2, r2, #5
 8001424:	17db      	asrs	r3, r3, #31
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	73fb      	strb	r3, [r7, #15]
        PCD8544_set_cursor((x_pos + 6), y_pos);
 800142a:	79fb      	ldrb	r3, [r7, #7]
 800142c:	3306      	adds	r3, #6
 800142e:	b2db      	uxtb	r3, r3
 8001430:	79ba      	ldrb	r2, [r7, #6]
 8001432:	4611      	mov	r1, r2
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff fc7b 	bl	8000d30 <PCD8544_set_cursor>
        PCD8544_print_char((48 + ch), colour);
 800143a:	7bfb      	ldrb	r3, [r7, #15]
 800143c:	3330      	adds	r3, #48	; 0x30
 800143e:	b2db      	uxtb	r3, r3
 8001440:	797a      	ldrb	r2, [r7, #5]
 8001442:	4611      	mov	r1, r2
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff fc8f 	bl	8000d68 <PCD8544_print_char>
        ch = ((value % 100) / 10);
 800144a:	683a      	ldr	r2, [r7, #0]
 800144c:	4b90      	ldr	r3, [pc, #576]	; (8001690 <print_int+0x588>)
 800144e:	fb83 1302 	smull	r1, r3, r3, r2
 8001452:	1159      	asrs	r1, r3, #5
 8001454:	17d3      	asrs	r3, r2, #31
 8001456:	1acb      	subs	r3, r1, r3
 8001458:	2164      	movs	r1, #100	; 0x64
 800145a:	fb01 f303 	mul.w	r3, r1, r3
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	4a8c      	ldr	r2, [pc, #560]	; (8001694 <print_int+0x58c>)
 8001462:	fb82 1203 	smull	r1, r2, r2, r3
 8001466:	1092      	asrs	r2, r2, #2
 8001468:	17db      	asrs	r3, r3, #31
 800146a:	1ad3      	subs	r3, r2, r3
 800146c:	73fb      	strb	r3, [r7, #15]
        PCD8544_set_cursor((x_pos + 12), y_pos);
 800146e:	79fb      	ldrb	r3, [r7, #7]
 8001470:	330c      	adds	r3, #12
 8001472:	b2db      	uxtb	r3, r3
 8001474:	79ba      	ldrb	r2, [r7, #6]
 8001476:	4611      	mov	r1, r2
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff fc59 	bl	8000d30 <PCD8544_set_cursor>
        PCD8544_print_char((48 + ch), colour);
 800147e:	7bfb      	ldrb	r3, [r7, #15]
 8001480:	3330      	adds	r3, #48	; 0x30
 8001482:	b2db      	uxtb	r3, r3
 8001484:	797a      	ldrb	r2, [r7, #5]
 8001486:	4611      	mov	r1, r2
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff fc6d 	bl	8000d68 <PCD8544_print_char>
        ch = (value % 10);
 800148e:	683a      	ldr	r2, [r7, #0]
 8001490:	4b80      	ldr	r3, [pc, #512]	; (8001694 <print_int+0x58c>)
 8001492:	fb83 1302 	smull	r1, r3, r3, r2
 8001496:	1099      	asrs	r1, r3, #2
 8001498:	17d3      	asrs	r3, r2, #31
 800149a:	1ac9      	subs	r1, r1, r3
 800149c:	460b      	mov	r3, r1
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	440b      	add	r3, r1
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	1ad1      	subs	r1, r2, r3
 80014a6:	460b      	mov	r3, r1
 80014a8:	73fb      	strb	r3, [r7, #15]
        PCD8544_set_cursor((x_pos + 18), y_pos);
 80014aa:	79fb      	ldrb	r3, [r7, #7]
 80014ac:	3312      	adds	r3, #18
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	79ba      	ldrb	r2, [r7, #6]
 80014b2:	4611      	mov	r1, r2
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff fc3b 	bl	8000d30 <PCD8544_set_cursor>
        PCD8544_print_char((48 + ch), colour);
 80014ba:	7bfb      	ldrb	r3, [r7, #15]
 80014bc:	3330      	adds	r3, #48	; 0x30
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	797a      	ldrb	r2, [r7, #5]
 80014c2:	4611      	mov	r1, r2
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff fc4f 	bl	8000d68 <PCD8544_print_char>
        PCD8544_set_cursor((x_pos + 24), y_pos);
 80014ca:	79fb      	ldrb	r3, [r7, #7]
 80014cc:	3318      	adds	r3, #24
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	79ba      	ldrb	r2, [r7, #6]
 80014d2:	4611      	mov	r1, r2
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff fc2b 	bl	8000d30 <PCD8544_set_cursor>
        PCD8544_print_char(0x20, colour);
 80014da:	797b      	ldrb	r3, [r7, #5]
 80014dc:	4619      	mov	r1, r3
 80014de:	2020      	movs	r0, #32
 80014e0:	f7ff fc42 	bl	8000d68 <PCD8544_print_char>
        PCD8544_set_cursor((x_pos + 30), y_pos);
 80014e4:	79fb      	ldrb	r3, [r7, #7]
 80014e6:	331e      	adds	r3, #30
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	79ba      	ldrb	r2, [r7, #6]
 80014ec:	4611      	mov	r1, r2
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff fc1e 	bl	8000d30 <PCD8544_set_cursor>
        PCD8544_print_char(0x20, colour);
 80014f4:	797b      	ldrb	r3, [r7, #5]
 80014f6:	4619      	mov	r1, r3
 80014f8:	2020      	movs	r0, #32
 80014fa:	f7ff fc35 	bl	8000d68 <PCD8544_print_char>
 80014fe:	e0c0      	b.n	8001682 <print_int+0x57a>
    else if((value > 9) && (value <= 99))
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	2b09      	cmp	r3, #9
 8001504:	dd6a      	ble.n	80015dc <print_int+0x4d4>
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	2b63      	cmp	r3, #99	; 0x63
 800150a:	dc67      	bgt.n	80015dc <print_int+0x4d4>
        ch = ((value % 100) / 10);
 800150c:	683a      	ldr	r2, [r7, #0]
 800150e:	4b60      	ldr	r3, [pc, #384]	; (8001690 <print_int+0x588>)
 8001510:	fb83 1302 	smull	r1, r3, r3, r2
 8001514:	1159      	asrs	r1, r3, #5
 8001516:	17d3      	asrs	r3, r2, #31
 8001518:	1acb      	subs	r3, r1, r3
 800151a:	2164      	movs	r1, #100	; 0x64
 800151c:	fb01 f303 	mul.w	r3, r1, r3
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	4a5c      	ldr	r2, [pc, #368]	; (8001694 <print_int+0x58c>)
 8001524:	fb82 1203 	smull	r1, r2, r2, r3
 8001528:	1092      	asrs	r2, r2, #2
 800152a:	17db      	asrs	r3, r3, #31
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	73fb      	strb	r3, [r7, #15]
        PCD8544_set_cursor((x_pos + 6), y_pos);
 8001530:	79fb      	ldrb	r3, [r7, #7]
 8001532:	3306      	adds	r3, #6
 8001534:	b2db      	uxtb	r3, r3
 8001536:	79ba      	ldrb	r2, [r7, #6]
 8001538:	4611      	mov	r1, r2
 800153a:	4618      	mov	r0, r3
 800153c:	f7ff fbf8 	bl	8000d30 <PCD8544_set_cursor>
        PCD8544_print_char((48 + ch), colour);
 8001540:	7bfb      	ldrb	r3, [r7, #15]
 8001542:	3330      	adds	r3, #48	; 0x30
 8001544:	b2db      	uxtb	r3, r3
 8001546:	797a      	ldrb	r2, [r7, #5]
 8001548:	4611      	mov	r1, r2
 800154a:	4618      	mov	r0, r3
 800154c:	f7ff fc0c 	bl	8000d68 <PCD8544_print_char>
        ch = (value % 10);
 8001550:	683a      	ldr	r2, [r7, #0]
 8001552:	4b50      	ldr	r3, [pc, #320]	; (8001694 <print_int+0x58c>)
 8001554:	fb83 1302 	smull	r1, r3, r3, r2
 8001558:	1099      	asrs	r1, r3, #2
 800155a:	17d3      	asrs	r3, r2, #31
 800155c:	1ac9      	subs	r1, r1, r3
 800155e:	460b      	mov	r3, r1
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	440b      	add	r3, r1
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	1ad1      	subs	r1, r2, r3
 8001568:	460b      	mov	r3, r1
 800156a:	73fb      	strb	r3, [r7, #15]
        PCD8544_set_cursor((x_pos + 12), y_pos);
 800156c:	79fb      	ldrb	r3, [r7, #7]
 800156e:	330c      	adds	r3, #12
 8001570:	b2db      	uxtb	r3, r3
 8001572:	79ba      	ldrb	r2, [r7, #6]
 8001574:	4611      	mov	r1, r2
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff fbda 	bl	8000d30 <PCD8544_set_cursor>
        PCD8544_print_char((48 + ch), colour);
 800157c:	7bfb      	ldrb	r3, [r7, #15]
 800157e:	3330      	adds	r3, #48	; 0x30
 8001580:	b2db      	uxtb	r3, r3
 8001582:	797a      	ldrb	r2, [r7, #5]
 8001584:	4611      	mov	r1, r2
 8001586:	4618      	mov	r0, r3
 8001588:	f7ff fbee 	bl	8000d68 <PCD8544_print_char>
        PCD8544_set_cursor((x_pos + 18), y_pos);
 800158c:	79fb      	ldrb	r3, [r7, #7]
 800158e:	3312      	adds	r3, #18
 8001590:	b2db      	uxtb	r3, r3
 8001592:	79ba      	ldrb	r2, [r7, #6]
 8001594:	4611      	mov	r1, r2
 8001596:	4618      	mov	r0, r3
 8001598:	f7ff fbca 	bl	8000d30 <PCD8544_set_cursor>
        PCD8544_print_char(0x20, colour);
 800159c:	797b      	ldrb	r3, [r7, #5]
 800159e:	4619      	mov	r1, r3
 80015a0:	2020      	movs	r0, #32
 80015a2:	f7ff fbe1 	bl	8000d68 <PCD8544_print_char>
        PCD8544_set_cursor((x_pos + 24), y_pos);
 80015a6:	79fb      	ldrb	r3, [r7, #7]
 80015a8:	3318      	adds	r3, #24
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	79ba      	ldrb	r2, [r7, #6]
 80015ae:	4611      	mov	r1, r2
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff fbbd 	bl	8000d30 <PCD8544_set_cursor>
        PCD8544_print_char(0x20, colour);
 80015b6:	797b      	ldrb	r3, [r7, #5]
 80015b8:	4619      	mov	r1, r3
 80015ba:	2020      	movs	r0, #32
 80015bc:	f7ff fbd4 	bl	8000d68 <PCD8544_print_char>
        PCD8544_set_cursor((x_pos + 30), y_pos);
 80015c0:	79fb      	ldrb	r3, [r7, #7]
 80015c2:	331e      	adds	r3, #30
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	79ba      	ldrb	r2, [r7, #6]
 80015c8:	4611      	mov	r1, r2
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7ff fbb0 	bl	8000d30 <PCD8544_set_cursor>
        PCD8544_print_char(0x20, colour);
 80015d0:	797b      	ldrb	r3, [r7, #5]
 80015d2:	4619      	mov	r1, r3
 80015d4:	2020      	movs	r0, #32
 80015d6:	f7ff fbc7 	bl	8000d68 <PCD8544_print_char>
 80015da:	e052      	b.n	8001682 <print_int+0x57a>
        ch = (value % 10);
 80015dc:	683a      	ldr	r2, [r7, #0]
 80015de:	4b2d      	ldr	r3, [pc, #180]	; (8001694 <print_int+0x58c>)
 80015e0:	fb83 1302 	smull	r1, r3, r3, r2
 80015e4:	1099      	asrs	r1, r3, #2
 80015e6:	17d3      	asrs	r3, r2, #31
 80015e8:	1ac9      	subs	r1, r1, r3
 80015ea:	460b      	mov	r3, r1
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	440b      	add	r3, r1
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	1ad1      	subs	r1, r2, r3
 80015f4:	460b      	mov	r3, r1
 80015f6:	73fb      	strb	r3, [r7, #15]
        PCD8544_set_cursor((x_pos + 6), y_pos);
 80015f8:	79fb      	ldrb	r3, [r7, #7]
 80015fa:	3306      	adds	r3, #6
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	79ba      	ldrb	r2, [r7, #6]
 8001600:	4611      	mov	r1, r2
 8001602:	4618      	mov	r0, r3
 8001604:	f7ff fb94 	bl	8000d30 <PCD8544_set_cursor>
        PCD8544_print_char((48 + ch), colour);
 8001608:	7bfb      	ldrb	r3, [r7, #15]
 800160a:	3330      	adds	r3, #48	; 0x30
 800160c:	b2db      	uxtb	r3, r3
 800160e:	797a      	ldrb	r2, [r7, #5]
 8001610:	4611      	mov	r1, r2
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff fba8 	bl	8000d68 <PCD8544_print_char>
        PCD8544_set_cursor((x_pos + 12), y_pos);
 8001618:	79fb      	ldrb	r3, [r7, #7]
 800161a:	330c      	adds	r3, #12
 800161c:	b2db      	uxtb	r3, r3
 800161e:	79ba      	ldrb	r2, [r7, #6]
 8001620:	4611      	mov	r1, r2
 8001622:	4618      	mov	r0, r3
 8001624:	f7ff fb84 	bl	8000d30 <PCD8544_set_cursor>
        PCD8544_print_char(0x20, colour);
 8001628:	797b      	ldrb	r3, [r7, #5]
 800162a:	4619      	mov	r1, r3
 800162c:	2020      	movs	r0, #32
 800162e:	f7ff fb9b 	bl	8000d68 <PCD8544_print_char>
        PCD8544_set_cursor((x_pos + 18), y_pos);
 8001632:	79fb      	ldrb	r3, [r7, #7]
 8001634:	3312      	adds	r3, #18
 8001636:	b2db      	uxtb	r3, r3
 8001638:	79ba      	ldrb	r2, [r7, #6]
 800163a:	4611      	mov	r1, r2
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff fb77 	bl	8000d30 <PCD8544_set_cursor>
        PCD8544_print_char(0x20, colour);
 8001642:	797b      	ldrb	r3, [r7, #5]
 8001644:	4619      	mov	r1, r3
 8001646:	2020      	movs	r0, #32
 8001648:	f7ff fb8e 	bl	8000d68 <PCD8544_print_char>
        PCD8544_set_cursor((x_pos + 24), y_pos);
 800164c:	79fb      	ldrb	r3, [r7, #7]
 800164e:	3318      	adds	r3, #24
 8001650:	b2db      	uxtb	r3, r3
 8001652:	79ba      	ldrb	r2, [r7, #6]
 8001654:	4611      	mov	r1, r2
 8001656:	4618      	mov	r0, r3
 8001658:	f7ff fb6a 	bl	8000d30 <PCD8544_set_cursor>
        PCD8544_print_char(0x20, colour);
 800165c:	797b      	ldrb	r3, [r7, #5]
 800165e:	4619      	mov	r1, r3
 8001660:	2020      	movs	r0, #32
 8001662:	f7ff fb81 	bl	8000d68 <PCD8544_print_char>
        PCD8544_set_cursor((x_pos + 30), y_pos);
 8001666:	79fb      	ldrb	r3, [r7, #7]
 8001668:	331e      	adds	r3, #30
 800166a:	b2db      	uxtb	r3, r3
 800166c:	79ba      	ldrb	r2, [r7, #6]
 800166e:	4611      	mov	r1, r2
 8001670:	4618      	mov	r0, r3
 8001672:	f7ff fb5d 	bl	8000d30 <PCD8544_set_cursor>
        PCD8544_print_char(0x20, colour);
 8001676:	797b      	ldrb	r3, [r7, #5]
 8001678:	4619      	mov	r1, r3
 800167a:	2020      	movs	r0, #32
 800167c:	f7ff fb74 	bl	8000d68 <PCD8544_print_char>
}
 8001680:	e7ff      	b.n	8001682 <print_int+0x57a>
 8001682:	bf00      	nop
 8001684:	3710      	adds	r7, #16
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	10624dd3 	.word	0x10624dd3
 8001690:	51eb851f 	.word	0x51eb851f
 8001694:	66666667 	.word	0x66666667

08001698 <print_decimal>:

void print_decimal(unsigned char x_pos, unsigned char y_pos, unsigned int value, unsigned char points, unsigned char colour)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	603a      	str	r2, [r7, #0]
 80016a0:	461a      	mov	r2, r3
 80016a2:	4603      	mov	r3, r0
 80016a4:	71fb      	strb	r3, [r7, #7]
 80016a6:	460b      	mov	r3, r1
 80016a8:	71bb      	strb	r3, [r7, #6]
 80016aa:	4613      	mov	r3, r2
 80016ac:	717b      	strb	r3, [r7, #5]
    unsigned char ch = 0x00;
 80016ae:	2300      	movs	r3, #0
 80016b0:	73fb      	strb	r3, [r7, #15]

    PCD8544_set_cursor(x_pos, y_pos);
 80016b2:	79ba      	ldrb	r2, [r7, #6]
 80016b4:	79fb      	ldrb	r3, [r7, #7]
 80016b6:	4611      	mov	r1, r2
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff fb39 	bl	8000d30 <PCD8544_set_cursor>
    PCD8544_print_char(0x2E, colour);
 80016be:	7e3b      	ldrb	r3, [r7, #24]
 80016c0:	4619      	mov	r1, r3
 80016c2:	202e      	movs	r0, #46	; 0x2e
 80016c4:	f7ff fb50 	bl	8000d68 <PCD8544_print_char>

    ch = (value / 1000);
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	4a3d      	ldr	r2, [pc, #244]	; (80017c0 <print_decimal+0x128>)
 80016cc:	fba2 2303 	umull	r2, r3, r2, r3
 80016d0:	099b      	lsrs	r3, r3, #6
 80016d2:	73fb      	strb	r3, [r7, #15]
    PCD8544_set_cursor((x_pos + 6), y_pos);
 80016d4:	79fb      	ldrb	r3, [r7, #7]
 80016d6:	3306      	adds	r3, #6
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	79ba      	ldrb	r2, [r7, #6]
 80016dc:	4611      	mov	r1, r2
 80016de:	4618      	mov	r0, r3
 80016e0:	f7ff fb26 	bl	8000d30 <PCD8544_set_cursor>
    PCD8544_print_char((48 + ch), colour);
 80016e4:	7bfb      	ldrb	r3, [r7, #15]
 80016e6:	3330      	adds	r3, #48	; 0x30
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	7e3a      	ldrb	r2, [r7, #24]
 80016ec:	4611      	mov	r1, r2
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7ff fb3a 	bl	8000d68 <PCD8544_print_char>

    if(points > 1)
 80016f4:	797b      	ldrb	r3, [r7, #5]
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d95e      	bls.n	80017b8 <print_decimal+0x120>
    {
        ch = ((value % 1000) / 100);
 80016fa:	683a      	ldr	r2, [r7, #0]
 80016fc:	4b30      	ldr	r3, [pc, #192]	; (80017c0 <print_decimal+0x128>)
 80016fe:	fba3 1302 	umull	r1, r3, r3, r2
 8001702:	099b      	lsrs	r3, r3, #6
 8001704:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001708:	fb01 f303 	mul.w	r3, r1, r3
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	4a2d      	ldr	r2, [pc, #180]	; (80017c4 <print_decimal+0x12c>)
 8001710:	fba2 2303 	umull	r2, r3, r2, r3
 8001714:	095b      	lsrs	r3, r3, #5
 8001716:	73fb      	strb	r3, [r7, #15]
        PCD8544_set_cursor((x_pos + 12), y_pos);
 8001718:	79fb      	ldrb	r3, [r7, #7]
 800171a:	330c      	adds	r3, #12
 800171c:	b2db      	uxtb	r3, r3
 800171e:	79ba      	ldrb	r2, [r7, #6]
 8001720:	4611      	mov	r1, r2
 8001722:	4618      	mov	r0, r3
 8001724:	f7ff fb04 	bl	8000d30 <PCD8544_set_cursor>
        PCD8544_print_char((48 + ch), colour);
 8001728:	7bfb      	ldrb	r3, [r7, #15]
 800172a:	3330      	adds	r3, #48	; 0x30
 800172c:	b2db      	uxtb	r3, r3
 800172e:	7e3a      	ldrb	r2, [r7, #24]
 8001730:	4611      	mov	r1, r2
 8001732:	4618      	mov	r0, r3
 8001734:	f7ff fb18 	bl	8000d68 <PCD8544_print_char>


        if(points > 2)
 8001738:	797b      	ldrb	r3, [r7, #5]
 800173a:	2b02      	cmp	r3, #2
 800173c:	d93c      	bls.n	80017b8 <print_decimal+0x120>
        {
            ch = ((value % 100) / 10);
 800173e:	683a      	ldr	r2, [r7, #0]
 8001740:	4b20      	ldr	r3, [pc, #128]	; (80017c4 <print_decimal+0x12c>)
 8001742:	fba3 1302 	umull	r1, r3, r3, r2
 8001746:	095b      	lsrs	r3, r3, #5
 8001748:	2164      	movs	r1, #100	; 0x64
 800174a:	fb01 f303 	mul.w	r3, r1, r3
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	4a1d      	ldr	r2, [pc, #116]	; (80017c8 <print_decimal+0x130>)
 8001752:	fba2 2303 	umull	r2, r3, r2, r3
 8001756:	08db      	lsrs	r3, r3, #3
 8001758:	73fb      	strb	r3, [r7, #15]
            PCD8544_set_cursor((x_pos + 18), y_pos);
 800175a:	79fb      	ldrb	r3, [r7, #7]
 800175c:	3312      	adds	r3, #18
 800175e:	b2db      	uxtb	r3, r3
 8001760:	79ba      	ldrb	r2, [r7, #6]
 8001762:	4611      	mov	r1, r2
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff fae3 	bl	8000d30 <PCD8544_set_cursor>
            PCD8544_print_char((48 + ch), colour);
 800176a:	7bfb      	ldrb	r3, [r7, #15]
 800176c:	3330      	adds	r3, #48	; 0x30
 800176e:	b2db      	uxtb	r3, r3
 8001770:	7e3a      	ldrb	r2, [r7, #24]
 8001772:	4611      	mov	r1, r2
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff faf7 	bl	8000d68 <PCD8544_print_char>

            if(points > 3)
 800177a:	797b      	ldrb	r3, [r7, #5]
 800177c:	2b03      	cmp	r3, #3
 800177e:	d91b      	bls.n	80017b8 <print_decimal+0x120>
            {
                ch = (value % 10);
 8001780:	6839      	ldr	r1, [r7, #0]
 8001782:	4b11      	ldr	r3, [pc, #68]	; (80017c8 <print_decimal+0x130>)
 8001784:	fba3 2301 	umull	r2, r3, r3, r1
 8001788:	08da      	lsrs	r2, r3, #3
 800178a:	4613      	mov	r3, r2
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	4413      	add	r3, r2
 8001790:	005b      	lsls	r3, r3, #1
 8001792:	1aca      	subs	r2, r1, r3
 8001794:	4613      	mov	r3, r2
 8001796:	73fb      	strb	r3, [r7, #15]
                PCD8544_set_cursor((x_pos + 24), y_pos);
 8001798:	79fb      	ldrb	r3, [r7, #7]
 800179a:	3318      	adds	r3, #24
 800179c:	b2db      	uxtb	r3, r3
 800179e:	79ba      	ldrb	r2, [r7, #6]
 80017a0:	4611      	mov	r1, r2
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7ff fac4 	bl	8000d30 <PCD8544_set_cursor>
                PCD8544_print_char((48 + ch), colour);;
 80017a8:	7bfb      	ldrb	r3, [r7, #15]
 80017aa:	3330      	adds	r3, #48	; 0x30
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	7e3a      	ldrb	r2, [r7, #24]
 80017b0:	4611      	mov	r1, r2
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7ff fad8 	bl	8000d68 <PCD8544_print_char>
            }
        }
    }
}
 80017b8:	bf00      	nop
 80017ba:	3710      	adds	r7, #16
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	10624dd3 	.word	0x10624dd3
 80017c4:	51eb851f 	.word	0x51eb851f
 80017c8:	cccccccd 	.word	0xcccccccd

080017cc <print_float>:


void print_float(unsigned char x_pos, unsigned char y_pos, float value, unsigned char points, unsigned char colour)
{
 80017cc:	b590      	push	{r4, r7, lr}
 80017ce:	b087      	sub	sp, #28
 80017d0:	af02      	add	r7, sp, #8
 80017d2:	603a      	str	r2, [r7, #0]
 80017d4:	461a      	mov	r2, r3
 80017d6:	4603      	mov	r3, r0
 80017d8:	71fb      	strb	r3, [r7, #7]
 80017da:	460b      	mov	r3, r1
 80017dc:	71bb      	strb	r3, [r7, #6]
 80017de:	4613      	mov	r3, r2
 80017e0:	717b      	strb	r3, [r7, #5]
    signed long tmp = 0x00;
 80017e2:	2300      	movs	r3, #0
 80017e4:	60fb      	str	r3, [r7, #12]

    tmp = ((signed long)value);
 80017e6:	6838      	ldr	r0, [r7, #0]
 80017e8:	f7ff f992 	bl	8000b10 <__aeabi_f2iz>
 80017ec:	4603      	mov	r3, r0
 80017ee:	60fb      	str	r3, [r7, #12]
    print_int(x_pos, y_pos, tmp, colour);
 80017f0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80017f4:	79b9      	ldrb	r1, [r7, #6]
 80017f6:	79f8      	ldrb	r0, [r7, #7]
 80017f8:	68fa      	ldr	r2, [r7, #12]
 80017fa:	f7ff fc85 	bl	8001108 <print_int>
    tmp = ((value - tmp) * 10000);
 80017fe:	68f8      	ldr	r0, [r7, #12]
 8001800:	f7fe ff6c 	bl	80006dc <__aeabi_i2f>
 8001804:	4603      	mov	r3, r0
 8001806:	4619      	mov	r1, r3
 8001808:	6838      	ldr	r0, [r7, #0]
 800180a:	f7fe feb1 	bl	8000570 <__aeabi_fsub>
 800180e:	4603      	mov	r3, r0
 8001810:	495a      	ldr	r1, [pc, #360]	; (800197c <print_float+0x1b0>)
 8001812:	4618      	mov	r0, r3
 8001814:	f7fe ffb6 	bl	8000784 <__aeabi_fmul>
 8001818:	4603      	mov	r3, r0
 800181a:	4618      	mov	r0, r3
 800181c:	f7ff f978 	bl	8000b10 <__aeabi_f2iz>
 8001820:	4603      	mov	r3, r0
 8001822:	60fb      	str	r3, [r7, #12]

    if(tmp < 0)
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	2b00      	cmp	r3, #0
 8001828:	da02      	bge.n	8001830 <print_float+0x64>
    {
       tmp = -tmp;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	425b      	negs	r3, r3
 800182e:	60fb      	str	r3, [r7, #12]
    }

    if((value >= 9999) && (value < 99999))
 8001830:	4953      	ldr	r1, [pc, #332]	; (8001980 <print_float+0x1b4>)
 8001832:	6838      	ldr	r0, [r7, #0]
 8001834:	f7ff f958 	bl	8000ae8 <__aeabi_fcmpge>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d013      	beq.n	8001866 <print_float+0x9a>
 800183e:	4951      	ldr	r1, [pc, #324]	; (8001984 <print_float+0x1b8>)
 8001840:	6838      	ldr	r0, [r7, #0]
 8001842:	f7ff f93d 	bl	8000ac0 <__aeabi_fcmplt>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d00c      	beq.n	8001866 <print_float+0x9a>
    {
        print_decimal((x_pos + 36), y_pos, tmp, points, colour);
 800184c:	79fb      	ldrb	r3, [r7, #7]
 800184e:	3324      	adds	r3, #36	; 0x24
 8001850:	b2d8      	uxtb	r0, r3
 8001852:	68fa      	ldr	r2, [r7, #12]
 8001854:	797c      	ldrb	r4, [r7, #5]
 8001856:	79b9      	ldrb	r1, [r7, #6]
 8001858:	f897 3020 	ldrb.w	r3, [r7, #32]
 800185c:	9300      	str	r3, [sp, #0]
 800185e:	4623      	mov	r3, r4
 8001860:	f7ff ff1a 	bl	8001698 <print_decimal>
 8001864:	e086      	b.n	8001974 <print_float+0x1a8>
    }
    else if((value >= 999) && (value < 9999))
 8001866:	4948      	ldr	r1, [pc, #288]	; (8001988 <print_float+0x1bc>)
 8001868:	6838      	ldr	r0, [r7, #0]
 800186a:	f7ff f93d 	bl	8000ae8 <__aeabi_fcmpge>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d013      	beq.n	800189c <print_float+0xd0>
 8001874:	4942      	ldr	r1, [pc, #264]	; (8001980 <print_float+0x1b4>)
 8001876:	6838      	ldr	r0, [r7, #0]
 8001878:	f7ff f922 	bl	8000ac0 <__aeabi_fcmplt>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d00c      	beq.n	800189c <print_float+0xd0>
    {
        print_decimal((x_pos + 30), y_pos, tmp, points, colour);
 8001882:	79fb      	ldrb	r3, [r7, #7]
 8001884:	331e      	adds	r3, #30
 8001886:	b2d8      	uxtb	r0, r3
 8001888:	68fa      	ldr	r2, [r7, #12]
 800188a:	797c      	ldrb	r4, [r7, #5]
 800188c:	79b9      	ldrb	r1, [r7, #6]
 800188e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001892:	9300      	str	r3, [sp, #0]
 8001894:	4623      	mov	r3, r4
 8001896:	f7ff feff 	bl	8001698 <print_decimal>
 800189a:	e06b      	b.n	8001974 <print_float+0x1a8>
    }
    else if((value >= 99) && (value < 999))
 800189c:	493b      	ldr	r1, [pc, #236]	; (800198c <print_float+0x1c0>)
 800189e:	6838      	ldr	r0, [r7, #0]
 80018a0:	f7ff f922 	bl	8000ae8 <__aeabi_fcmpge>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d013      	beq.n	80018d2 <print_float+0x106>
 80018aa:	4937      	ldr	r1, [pc, #220]	; (8001988 <print_float+0x1bc>)
 80018ac:	6838      	ldr	r0, [r7, #0]
 80018ae:	f7ff f907 	bl	8000ac0 <__aeabi_fcmplt>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d00c      	beq.n	80018d2 <print_float+0x106>
    {
        print_decimal((x_pos + 24), y_pos, tmp, points, colour);
 80018b8:	79fb      	ldrb	r3, [r7, #7]
 80018ba:	3318      	adds	r3, #24
 80018bc:	b2d8      	uxtb	r0, r3
 80018be:	68fa      	ldr	r2, [r7, #12]
 80018c0:	797c      	ldrb	r4, [r7, #5]
 80018c2:	79b9      	ldrb	r1, [r7, #6]
 80018c4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80018c8:	9300      	str	r3, [sp, #0]
 80018ca:	4623      	mov	r3, r4
 80018cc:	f7ff fee4 	bl	8001698 <print_decimal>
 80018d0:	e050      	b.n	8001974 <print_float+0x1a8>
    }
    else if((value >= 9) && (value < 99))
 80018d2:	492f      	ldr	r1, [pc, #188]	; (8001990 <print_float+0x1c4>)
 80018d4:	6838      	ldr	r0, [r7, #0]
 80018d6:	f7ff f907 	bl	8000ae8 <__aeabi_fcmpge>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d013      	beq.n	8001908 <print_float+0x13c>
 80018e0:	492a      	ldr	r1, [pc, #168]	; (800198c <print_float+0x1c0>)
 80018e2:	6838      	ldr	r0, [r7, #0]
 80018e4:	f7ff f8ec 	bl	8000ac0 <__aeabi_fcmplt>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d00c      	beq.n	8001908 <print_float+0x13c>
    {
        print_decimal((x_pos + 18), y_pos, tmp, points, colour);
 80018ee:	79fb      	ldrb	r3, [r7, #7]
 80018f0:	3312      	adds	r3, #18
 80018f2:	b2d8      	uxtb	r0, r3
 80018f4:	68fa      	ldr	r2, [r7, #12]
 80018f6:	797c      	ldrb	r4, [r7, #5]
 80018f8:	79b9      	ldrb	r1, [r7, #6]
 80018fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80018fe:	9300      	str	r3, [sp, #0]
 8001900:	4623      	mov	r3, r4
 8001902:	f7ff fec9 	bl	8001698 <print_decimal>
 8001906:	e035      	b.n	8001974 <print_float+0x1a8>
    }
    else if(value < 9)
 8001908:	4921      	ldr	r1, [pc, #132]	; (8001990 <print_float+0x1c4>)
 800190a:	6838      	ldr	r0, [r7, #0]
 800190c:	f7ff f8d8 	bl	8000ac0 <__aeabi_fcmplt>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d100      	bne.n	8001918 <print_float+0x14c>
        {
            PCD8544_set_cursor(x_pos, y_pos);
            PCD8544_print_char(0x20, colour);
        }
    }
}
 8001916:	e02d      	b.n	8001974 <print_float+0x1a8>
        print_decimal((x_pos + 12), y_pos, tmp, points, colour);
 8001918:	79fb      	ldrb	r3, [r7, #7]
 800191a:	330c      	adds	r3, #12
 800191c:	b2d8      	uxtb	r0, r3
 800191e:	68fa      	ldr	r2, [r7, #12]
 8001920:	797c      	ldrb	r4, [r7, #5]
 8001922:	79b9      	ldrb	r1, [r7, #6]
 8001924:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001928:	9300      	str	r3, [sp, #0]
 800192a:	4623      	mov	r3, r4
 800192c:	f7ff feb4 	bl	8001698 <print_decimal>
        if((value) < 0)
 8001930:	f04f 0100 	mov.w	r1, #0
 8001934:	6838      	ldr	r0, [r7, #0]
 8001936:	f7ff f8c3 	bl	8000ac0 <__aeabi_fcmplt>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d00c      	beq.n	800195a <print_float+0x18e>
            PCD8544_set_cursor(x_pos, y_pos);
 8001940:	79ba      	ldrb	r2, [r7, #6]
 8001942:	79fb      	ldrb	r3, [r7, #7]
 8001944:	4611      	mov	r1, r2
 8001946:	4618      	mov	r0, r3
 8001948:	f7ff f9f2 	bl	8000d30 <PCD8544_set_cursor>
            PCD8544_print_char(0x2D, colour);
 800194c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001950:	4619      	mov	r1, r3
 8001952:	202d      	movs	r0, #45	; 0x2d
 8001954:	f7ff fa08 	bl	8000d68 <PCD8544_print_char>
}
 8001958:	e00c      	b.n	8001974 <print_float+0x1a8>
            PCD8544_set_cursor(x_pos, y_pos);
 800195a:	79ba      	ldrb	r2, [r7, #6]
 800195c:	79fb      	ldrb	r3, [r7, #7]
 800195e:	4611      	mov	r1, r2
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff f9e5 	bl	8000d30 <PCD8544_set_cursor>
            PCD8544_print_char(0x20, colour);
 8001966:	f897 3020 	ldrb.w	r3, [r7, #32]
 800196a:	4619      	mov	r1, r3
 800196c:	2020      	movs	r0, #32
 800196e:	f7ff f9fb 	bl	8000d68 <PCD8544_print_char>
}
 8001972:	e7ff      	b.n	8001974 <print_float+0x1a8>
 8001974:	bf00      	nop
 8001976:	3714      	adds	r7, #20
 8001978:	46bd      	mov	sp, r7
 800197a:	bd90      	pop	{r4, r7, pc}
 800197c:	461c4000 	.word	0x461c4000
 8001980:	461c3c00 	.word	0x461c3c00
 8001984:	47c34f80 	.word	0x47c34f80
 8001988:	4479c000 	.word	0x4479c000
 800198c:	42c60000 	.word	0x42c60000
 8001990:	41100000 	.word	0x41100000
 8001994:	00000000 	.word	0x00000000

08001998 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001998:	b590      	push	{r4, r7, lr}
 800199a:	b08d      	sub	sp, #52	; 0x34
 800199c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800199e:	f000 fa4f 	bl	8001e40 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019a2:	f000 f905 	bl	8001bb0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019a6:	f000 f947 	bl	8001c38 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
     unsigned char g = 0;
 80019aa:	2300      	movs	r3, #0
 80019ac:	76fb      	strb	r3, [r7, #27]
     const unsigned char txt1[11] = {"Wellcome To"};
 80019ae:	4a78      	ldr	r2, [pc, #480]	; (8001b90 <main+0x1f8>)
 80019b0:	f107 030c 	add.w	r3, r7, #12
 80019b4:	ca07      	ldmia	r2, {r0, r1, r2}
 80019b6:	c303      	stmia	r3!, {r0, r1}
 80019b8:	801a      	strh	r2, [r3, #0]
 80019ba:	3302      	adds	r3, #2
 80019bc:	0c12      	lsrs	r2, r2, #16
 80019be:	701a      	strb	r2, [r3, #0]
     const unsigned char txt2[11] = {" Rang Dong "};
 80019c0:	4a74      	ldr	r2, [pc, #464]	; (8001b94 <main+0x1fc>)
 80019c2:	463b      	mov	r3, r7
 80019c4:	ca07      	ldmia	r2, {r0, r1, r2}
 80019c6:	c303      	stmia	r3!, {r0, r1}
 80019c8:	801a      	strh	r2, [r3, #0]
 80019ca:	3302      	adds	r3, #2
 80019cc:	0c12      	lsrs	r2, r2, #16
 80019ce:	701a      	strb	r2, [r3, #0]
     signed char c = -9;
 80019d0:	23f7      	movs	r3, #247	; 0xf7
 80019d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
     char mode =1,cnt;
 80019d6:	2301      	movs	r3, #1
 80019d8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
     signed int i = -66;
 80019dc:	f06f 0341 	mvn.w	r3, #65	; 0x41
 80019e0:	623b      	str	r3, [r7, #32]
     float f = -0.04;
 80019e2:	4b6d      	ldr	r3, [pc, #436]	; (8001b98 <main+0x200>)
 80019e4:	61fb      	str	r3, [r7, #28]
     LCD5110_setup();
 80019e6:	f000 f965 	bl	8001cb4 <LCD5110_setup>
     PCD8544_backlight_state(ON);
 80019ea:	2001      	movs	r0, #1
 80019ec:	f7ff f968 	bl	8000cc0 <PCD8544_backlight_state>
     HAL_Delay(2000);
 80019f0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80019f4:	f000 fa86 	bl	8001f04 <HAL_Delay>
     PCD8544_backlight_state(OFF);
 80019f8:	2000      	movs	r0, #0
 80019fa:	f7ff f961 	bl	8000cc0 <PCD8544_backlight_state>
     HAL_Delay(2000);
 80019fe:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001a02:	f000 fa7f 	bl	8001f04 <HAL_Delay>
     PCD8544_clear_screen(WHITE);
 8001a06:	2001      	movs	r0, #1
 8001a08:	f7ff fa08 	bl	8000e1c <PCD8544_clear_screen>
     PCD8544_backlight_state(ON);
 8001a0c:	2001      	movs	r0, #1
 8001a0e:	f7ff f957 	bl	8000cc0 <PCD8544_backlight_state>
//         PCD8544_print_char(txt2[g], WHITE);
//         HAL_Delay(150);
//     }
//        HAL_Delay(4000);

     PCD8544_clear_screen(WHITE);
 8001a12:	2001      	movs	r0, #1
 8001a14:	f7ff fa02 	bl	8000e1c <PCD8544_clear_screen>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1)
  {
	        switch(mode)
 8001a18:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d002      	beq.n	8001a26 <main+0x8e>
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d04f      	beq.n	8001ac4 <main+0x12c>
 8001a24:	e0a7      	b.n	8001b76 <main+0x1de>
	        {case 1: {
						PCD8544_print_string(1, 0, "    Hien Thi    ", BLACK);
 8001a26:	2300      	movs	r3, #0
 8001a28:	4a5c      	ldr	r2, [pc, #368]	; (8001b9c <main+0x204>)
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	2001      	movs	r0, #1
 8001a2e:	f7ff fa1d 	bl	8000e6c <PCD8544_print_string>
						PCD8544_print_string(1, 2, " Nhiet Do:", WHITE);
 8001a32:	2301      	movs	r3, #1
 8001a34:	4a5a      	ldr	r2, [pc, #360]	; (8001ba0 <main+0x208>)
 8001a36:	2102      	movs	r1, #2
 8001a38:	2001      	movs	r0, #1
 8001a3a:	f7ff fa17 	bl	8000e6c <PCD8544_print_string>
						PCD8544_print_string(1, 3, " Do Am:", WHITE);
 8001a3e:	2301      	movs	r3, #1
 8001a40:	4a58      	ldr	r2, [pc, #352]	; (8001ba4 <main+0x20c>)
 8001a42:	2103      	movs	r1, #3
 8001a44:	2001      	movs	r0, #1
 8001a46:	f7ff fa11 	bl	8000e6c <PCD8544_print_string>
						PCD8544_print_string(1, 4, " Protect:", WHITE);
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	4a56      	ldr	r2, [pc, #344]	; (8001ba8 <main+0x210>)
 8001a4e:	2104      	movs	r1, #4
 8001a50:	2001      	movs	r0, #1
 8001a52:	f7ff fa0b 	bl	8000e6c <PCD8544_print_string>
						print_chr(53, 2, c, WHITE);
 8001a56:	f997 2027 	ldrsb.w	r2, [r7, #39]	; 0x27
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	2102      	movs	r1, #2
 8001a5e:	2035      	movs	r0, #53	; 0x35
 8001a60:	f7ff fa2c 	bl	8000ebc <print_chr>
						print_int(53, 3, i, WHITE);
 8001a64:	2301      	movs	r3, #1
 8001a66:	6a3a      	ldr	r2, [r7, #32]
 8001a68:	2103      	movs	r1, #3
 8001a6a:	2035      	movs	r0, #53	; 0x35
 8001a6c:	f7ff fb4c 	bl	8001108 <print_int>
						print_float(53, 4, f, 2, WHITE);
 8001a70:	2301      	movs	r3, #1
 8001a72:	9300      	str	r3, [sp, #0]
 8001a74:	2302      	movs	r3, #2
 8001a76:	69fa      	ldr	r2, [r7, #28]
 8001a78:	2104      	movs	r1, #4
 8001a7a:	2035      	movs	r0, #53	; 0x35
 8001a7c:	f7ff fea6 	bl	80017cc <print_float>
						c++;
 8001a80:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	3301      	adds	r3, #1
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						i++;
 8001a8e:	6a3b      	ldr	r3, [r7, #32]
 8001a90:	3301      	adds	r3, #1
 8001a92:	623b      	str	r3, [r7, #32]
						f += 0.01;
 8001a94:	69f8      	ldr	r0, [r7, #28]
 8001a96:	f7fe fcbf 	bl	8000418 <__aeabi_f2d>
 8001a9a:	a33b      	add	r3, pc, #236	; (adr r3, 8001b88 <main+0x1f0>)
 8001a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa0:	f7fe fb5c 	bl	800015c <__adddf3>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	460c      	mov	r4, r1
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	4621      	mov	r1, r4
 8001aac:	f7fe fd0c 	bl	80004c8 <__aeabi_d2f>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	61fb      	str	r3, [r7, #28]
						HAL_Delay(4000);
 8001ab4:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8001ab8:	f000 fa24 	bl	8001f04 <HAL_Delay>
//						cnt=0;
//						cnt++; if(cnt>=10)
							mode =2;
 8001abc:	2302      	movs	r3, #2
 8001abe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
						break;
 8001ac2:	e05d      	b.n	8001b80 <main+0x1e8>
	                 }
	         case 2: {
						PCD8544_print_string(1, 0, "    Cai Dat    ", BLACK);
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	4a39      	ldr	r2, [pc, #228]	; (8001bac <main+0x214>)
 8001ac8:	2100      	movs	r1, #0
 8001aca:	2001      	movs	r0, #1
 8001acc:	f7ff f9ce 	bl	8000e6c <PCD8544_print_string>
						PCD8544_print_string(1, 2, " Nhiet Do:", WHITE);
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	4a33      	ldr	r2, [pc, #204]	; (8001ba0 <main+0x208>)
 8001ad4:	2102      	movs	r1, #2
 8001ad6:	2001      	movs	r0, #1
 8001ad8:	f7ff f9c8 	bl	8000e6c <PCD8544_print_string>
						PCD8544_print_string(1, 3, " Do Am:", WHITE);
 8001adc:	2301      	movs	r3, #1
 8001ade:	4a31      	ldr	r2, [pc, #196]	; (8001ba4 <main+0x20c>)
 8001ae0:	2103      	movs	r1, #3
 8001ae2:	2001      	movs	r0, #1
 8001ae4:	f7ff f9c2 	bl	8000e6c <PCD8544_print_string>
						PCD8544_print_string(1, 4, " Protect:", WHITE);
 8001ae8:	2301      	movs	r3, #1
 8001aea:	4a2f      	ldr	r2, [pc, #188]	; (8001ba8 <main+0x210>)
 8001aec:	2104      	movs	r1, #4
 8001aee:	2001      	movs	r0, #1
 8001af0:	f7ff f9bc 	bl	8000e6c <PCD8544_print_string>
						print_chr(53, 2, c, WHITE);
 8001af4:	f997 2027 	ldrsb.w	r2, [r7, #39]	; 0x27
 8001af8:	2301      	movs	r3, #1
 8001afa:	2102      	movs	r1, #2
 8001afc:	2035      	movs	r0, #53	; 0x35
 8001afe:	f7ff f9dd 	bl	8000ebc <print_chr>
						print_int(53, 3, i, WHITE);
 8001b02:	2301      	movs	r3, #1
 8001b04:	6a3a      	ldr	r2, [r7, #32]
 8001b06:	2103      	movs	r1, #3
 8001b08:	2035      	movs	r0, #53	; 0x35
 8001b0a:	f7ff fafd 	bl	8001108 <print_int>
						print_float(53, 4, f, 2, WHITE);
 8001b0e:	2301      	movs	r3, #1
 8001b10:	9300      	str	r3, [sp, #0]
 8001b12:	2302      	movs	r3, #2
 8001b14:	69fa      	ldr	r2, [r7, #28]
 8001b16:	2104      	movs	r1, #4
 8001b18:	2035      	movs	r0, #53	; 0x35
 8001b1a:	f7ff fe57 	bl	80017cc <print_float>
						c++;
 8001b1e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	3301      	adds	r3, #1
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						i++;
 8001b2c:	6a3b      	ldr	r3, [r7, #32]
 8001b2e:	3301      	adds	r3, #1
 8001b30:	623b      	str	r3, [r7, #32]
						f += 0.01;
 8001b32:	69f8      	ldr	r0, [r7, #28]
 8001b34:	f7fe fc70 	bl	8000418 <__aeabi_f2d>
 8001b38:	a313      	add	r3, pc, #76	; (adr r3, 8001b88 <main+0x1f0>)
 8001b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b3e:	f7fe fb0d 	bl	800015c <__adddf3>
 8001b42:	4603      	mov	r3, r0
 8001b44:	460c      	mov	r4, r1
 8001b46:	4618      	mov	r0, r3
 8001b48:	4621      	mov	r1, r4
 8001b4a:	f7fe fcbd 	bl	80004c8 <__aeabi_d2f>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	61fb      	str	r3, [r7, #28]
						HAL_Delay(400);
 8001b52:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001b56:	f000 f9d5 	bl	8001f04 <HAL_Delay>
						cnt=0;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	76bb      	strb	r3, [r7, #26]
						cnt++; if(cnt>=10)mode++;
 8001b5e:	7ebb      	ldrb	r3, [r7, #26]
 8001b60:	3301      	adds	r3, #1
 8001b62:	76bb      	strb	r3, [r7, #26]
 8001b64:	7ebb      	ldrb	r3, [r7, #26]
 8001b66:	2b09      	cmp	r3, #9
 8001b68:	d909      	bls.n	8001b7e <main+0x1e6>
 8001b6a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001b6e:	3301      	adds	r3, #1
 8001b70:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
						break;
 8001b74:	e003      	b.n	8001b7e <main+0x1e6>
	        	     }
	         default: mode=1;break;
 8001b76:	2301      	movs	r3, #1
 8001b78:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001b7c:	e000      	b.n	8001b80 <main+0x1e8>
						break;
 8001b7e:	bf00      	nop
	        switch(mode)
 8001b80:	e74a      	b.n	8001a18 <main+0x80>
 8001b82:	bf00      	nop
 8001b84:	f3af 8000 	nop.w
 8001b88:	47ae147b 	.word	0x47ae147b
 8001b8c:	3f847ae1 	.word	0x3f847ae1
 8001b90:	08002c80 	.word	0x08002c80
 8001b94:	08002c8c 	.word	0x08002c8c
 8001b98:	bd23d70a 	.word	0xbd23d70a
 8001b9c:	08002c3c 	.word	0x08002c3c
 8001ba0:	08002c50 	.word	0x08002c50
 8001ba4:	08002c5c 	.word	0x08002c5c
 8001ba8:	08002c64 	.word	0x08002c64
 8001bac:	08002c70 	.word	0x08002c70

08001bb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b090      	sub	sp, #64	; 0x40
 8001bb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bb6:	f107 0318 	add.w	r3, r7, #24
 8001bba:	2228      	movs	r2, #40	; 0x28
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f001 f826 	bl	8002c10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bc4:	1d3b      	adds	r3, r7, #4
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	601a      	str	r2, [r3, #0]
 8001bca:	605a      	str	r2, [r3, #4]
 8001bcc:	609a      	str	r2, [r3, #8]
 8001bce:	60da      	str	r2, [r3, #12]
 8001bd0:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001bd6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bda:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001be0:	2301      	movs	r3, #1
 8001be2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001be4:	2302      	movs	r3, #2
 8001be6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001be8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bf2:	f107 0318 	add.w	r3, r7, #24
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f000 fbfc 	bl	80023f4 <HAL_RCC_OscConfig>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <SystemClock_Config+0x56>
  {
    Error_Handler();
 8001c02:	f000 f860 	bl	8001cc6 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c06:	230f      	movs	r3, #15
 8001c08:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001c0e:	2380      	movs	r3, #128	; 0x80
 8001c10:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c16:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001c1c:	1d3b      	adds	r3, r7, #4
 8001c1e:	2100      	movs	r1, #0
 8001c20:	4618      	mov	r0, r3
 8001c22:	f000 fe67 	bl	80028f4 <HAL_RCC_ClockConfig>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001c2c:	f000 f84b 	bl	8001cc6 <Error_Handler>
  }
}
 8001c30:	bf00      	nop
 8001c32:	3740      	adds	r7, #64	; 0x40
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b086      	sub	sp, #24
 8001c3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c3e:	f107 0308 	add.w	r3, r7, #8
 8001c42:	2200      	movs	r2, #0
 8001c44:	601a      	str	r2, [r3, #0]
 8001c46:	605a      	str	r2, [r3, #4]
 8001c48:	609a      	str	r2, [r3, #8]
 8001c4a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c4c:	4b17      	ldr	r3, [pc, #92]	; (8001cac <MX_GPIO_Init+0x74>)
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	4a16      	ldr	r2, [pc, #88]	; (8001cac <MX_GPIO_Init+0x74>)
 8001c52:	f043 0320 	orr.w	r3, r3, #32
 8001c56:	6193      	str	r3, [r2, #24]
 8001c58:	4b14      	ldr	r3, [pc, #80]	; (8001cac <MX_GPIO_Init+0x74>)
 8001c5a:	699b      	ldr	r3, [r3, #24]
 8001c5c:	f003 0320 	and.w	r3, r3, #32
 8001c60:	607b      	str	r3, [r7, #4]
 8001c62:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c64:	4b11      	ldr	r3, [pc, #68]	; (8001cac <MX_GPIO_Init+0x74>)
 8001c66:	699b      	ldr	r3, [r3, #24]
 8001c68:	4a10      	ldr	r2, [pc, #64]	; (8001cac <MX_GPIO_Init+0x74>)
 8001c6a:	f043 0304 	orr.w	r3, r3, #4
 8001c6e:	6193      	str	r3, [r2, #24]
 8001c70:	4b0e      	ldr	r3, [pc, #56]	; (8001cac <MX_GPIO_Init+0x74>)
 8001c72:	699b      	ldr	r3, [r3, #24]
 8001c74:	f003 0304 	and.w	r3, r3, #4
 8001c78:	603b      	str	r3, [r7, #0]
 8001c7a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RST_Pin|DC_Pin|LIGHT_Pin|CS_Pin 
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	21b7      	movs	r1, #183	; 0xb7
 8001c80:	480b      	ldr	r0, [pc, #44]	; (8001cb0 <MX_GPIO_Init+0x78>)
 8001c82:	f000 fb9f 	bl	80023c4 <HAL_GPIO_WritePin>
                          |SCLK_Pin|MOSI_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : RST_Pin DC_Pin LIGHT_Pin CS_Pin 
                           SCLK_Pin MOSI_Pin */
  GPIO_InitStruct.Pin = RST_Pin|DC_Pin|LIGHT_Pin|CS_Pin 
 8001c86:	23b7      	movs	r3, #183	; 0xb7
 8001c88:	60bb      	str	r3, [r7, #8]
                          |SCLK_Pin|MOSI_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c92:	2303      	movs	r3, #3
 8001c94:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c96:	f107 0308 	add.w	r3, r7, #8
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	4804      	ldr	r0, [pc, #16]	; (8001cb0 <MX_GPIO_Init+0x78>)
 8001c9e:	f000 fa37 	bl	8002110 <HAL_GPIO_Init>

}
 8001ca2:	bf00      	nop
 8001ca4:	3718      	adds	r7, #24
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	40010800 	.word	0x40010800

08001cb4 <LCD5110_setup>:

/* USER CODE BEGIN 4 */

void LCD5110_setup()
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
    PCD8544_init();
 8001cb8:	f7fe ffd8 	bl	8000c6c <PCD8544_init>
    PCD8544_clear_screen(WHITE);
 8001cbc:	2001      	movs	r0, #1
 8001cbe:	f7ff f8ad 	bl	8000e1c <PCD8544_clear_screen>
}
 8001cc2:	bf00      	nop
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8001cca:	bf00      	nop
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bc80      	pop	{r7}
 8001cd0:	4770      	bx	lr
	...

08001cd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b085      	sub	sp, #20
 8001cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001cda:	4b15      	ldr	r3, [pc, #84]	; (8001d30 <HAL_MspInit+0x5c>)
 8001cdc:	699b      	ldr	r3, [r3, #24]
 8001cde:	4a14      	ldr	r2, [pc, #80]	; (8001d30 <HAL_MspInit+0x5c>)
 8001ce0:	f043 0301 	orr.w	r3, r3, #1
 8001ce4:	6193      	str	r3, [r2, #24]
 8001ce6:	4b12      	ldr	r3, [pc, #72]	; (8001d30 <HAL_MspInit+0x5c>)
 8001ce8:	699b      	ldr	r3, [r3, #24]
 8001cea:	f003 0301 	and.w	r3, r3, #1
 8001cee:	60bb      	str	r3, [r7, #8]
 8001cf0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cf2:	4b0f      	ldr	r3, [pc, #60]	; (8001d30 <HAL_MspInit+0x5c>)
 8001cf4:	69db      	ldr	r3, [r3, #28]
 8001cf6:	4a0e      	ldr	r2, [pc, #56]	; (8001d30 <HAL_MspInit+0x5c>)
 8001cf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cfc:	61d3      	str	r3, [r2, #28]
 8001cfe:	4b0c      	ldr	r3, [pc, #48]	; (8001d30 <HAL_MspInit+0x5c>)
 8001d00:	69db      	ldr	r3, [r3, #28]
 8001d02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d06:	607b      	str	r3, [r7, #4]
 8001d08:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001d0a:	4b0a      	ldr	r3, [pc, #40]	; (8001d34 <HAL_MspInit+0x60>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	60fb      	str	r3, [r7, #12]
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001d16:	60fb      	str	r3, [r7, #12]
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d1e:	60fb      	str	r3, [r7, #12]
 8001d20:	4a04      	ldr	r2, [pc, #16]	; (8001d34 <HAL_MspInit+0x60>)
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d26:	bf00      	nop
 8001d28:	3714      	adds	r7, #20
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bc80      	pop	{r7}
 8001d2e:	4770      	bx	lr
 8001d30:	40021000 	.word	0x40021000
 8001d34:	40010000 	.word	0x40010000

08001d38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001d3c:	bf00      	nop
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bc80      	pop	{r7}
 8001d42:	4770      	bx	lr

08001d44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d48:	e7fe      	b.n	8001d48 <HardFault_Handler+0x4>

08001d4a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d4e:	e7fe      	b.n	8001d4e <MemManage_Handler+0x4>

08001d50 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d54:	e7fe      	b.n	8001d54 <BusFault_Handler+0x4>

08001d56 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d56:	b480      	push	{r7}
 8001d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d5a:	e7fe      	b.n	8001d5a <UsageFault_Handler+0x4>

08001d5c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d60:	bf00      	nop
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bc80      	pop	{r7}
 8001d66:	4770      	bx	lr

08001d68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d6c:	bf00      	nop
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bc80      	pop	{r7}
 8001d72:	4770      	bx	lr

08001d74 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d78:	bf00      	nop
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bc80      	pop	{r7}
 8001d7e:	4770      	bx	lr

08001d80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d84:	f000 f8a2 	bl	8001ecc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d88:	bf00      	nop
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001d90:	4b15      	ldr	r3, [pc, #84]	; (8001de8 <SystemInit+0x5c>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a14      	ldr	r2, [pc, #80]	; (8001de8 <SystemInit+0x5c>)
 8001d96:	f043 0301 	orr.w	r3, r3, #1
 8001d9a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001d9c:	4b12      	ldr	r3, [pc, #72]	; (8001de8 <SystemInit+0x5c>)
 8001d9e:	685a      	ldr	r2, [r3, #4]
 8001da0:	4911      	ldr	r1, [pc, #68]	; (8001de8 <SystemInit+0x5c>)
 8001da2:	4b12      	ldr	r3, [pc, #72]	; (8001dec <SystemInit+0x60>)
 8001da4:	4013      	ands	r3, r2
 8001da6:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001da8:	4b0f      	ldr	r3, [pc, #60]	; (8001de8 <SystemInit+0x5c>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a0e      	ldr	r2, [pc, #56]	; (8001de8 <SystemInit+0x5c>)
 8001dae:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001db2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001db6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001db8:	4b0b      	ldr	r3, [pc, #44]	; (8001de8 <SystemInit+0x5c>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a0a      	ldr	r2, [pc, #40]	; (8001de8 <SystemInit+0x5c>)
 8001dbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dc2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001dc4:	4b08      	ldr	r3, [pc, #32]	; (8001de8 <SystemInit+0x5c>)
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	4a07      	ldr	r2, [pc, #28]	; (8001de8 <SystemInit+0x5c>)
 8001dca:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001dce:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001dd0:	4b05      	ldr	r3, [pc, #20]	; (8001de8 <SystemInit+0x5c>)
 8001dd2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001dd6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001dd8:	4b05      	ldr	r3, [pc, #20]	; (8001df0 <SystemInit+0x64>)
 8001dda:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001dde:	609a      	str	r2, [r3, #8]
#endif 
}
 8001de0:	bf00      	nop
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bc80      	pop	{r7}
 8001de6:	4770      	bx	lr
 8001de8:	40021000 	.word	0x40021000
 8001dec:	f8ff0000 	.word	0xf8ff0000
 8001df0:	e000ed00 	.word	0xe000ed00

08001df4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001df4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001df6:	e003      	b.n	8001e00 <LoopCopyDataInit>

08001df8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001df8:	4b0b      	ldr	r3, [pc, #44]	; (8001e28 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001dfa:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001dfc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001dfe:	3104      	adds	r1, #4

08001e00 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001e00:	480a      	ldr	r0, [pc, #40]	; (8001e2c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001e02:	4b0b      	ldr	r3, [pc, #44]	; (8001e30 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001e04:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001e06:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001e08:	d3f6      	bcc.n	8001df8 <CopyDataInit>
  ldr r2, =_sbss
 8001e0a:	4a0a      	ldr	r2, [pc, #40]	; (8001e34 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001e0c:	e002      	b.n	8001e14 <LoopFillZerobss>

08001e0e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001e0e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001e10:	f842 3b04 	str.w	r3, [r2], #4

08001e14 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001e14:	4b08      	ldr	r3, [pc, #32]	; (8001e38 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001e16:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001e18:	d3f9      	bcc.n	8001e0e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001e1a:	f7ff ffb7 	bl	8001d8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e1e:	f000 fed3 	bl	8002bc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e22:	f7ff fdb9 	bl	8001998 <main>
  bx lr
 8001e26:	4770      	bx	lr
  ldr r3, =_sidata
 8001e28:	08002ea4 	.word	0x08002ea4
  ldr r0, =_sdata
 8001e2c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001e30:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8001e34:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8001e38:	20000224 	.word	0x20000224

08001e3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e3c:	e7fe      	b.n	8001e3c <ADC1_2_IRQHandler>
	...

08001e40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e44:	4b08      	ldr	r3, [pc, #32]	; (8001e68 <HAL_Init+0x28>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a07      	ldr	r2, [pc, #28]	; (8001e68 <HAL_Init+0x28>)
 8001e4a:	f043 0310 	orr.w	r3, r3, #16
 8001e4e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e50:	2003      	movs	r0, #3
 8001e52:	f000 f929 	bl	80020a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e56:	2000      	movs	r0, #0
 8001e58:	f000 f808 	bl	8001e6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e5c:	f7ff ff3a 	bl	8001cd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	40022000 	.word	0x40022000

08001e6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e74:	4b12      	ldr	r3, [pc, #72]	; (8001ec0 <HAL_InitTick+0x54>)
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	4b12      	ldr	r3, [pc, #72]	; (8001ec4 <HAL_InitTick+0x58>)
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e82:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f000 f933 	bl	80020f6 <HAL_SYSTICK_Config>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e00e      	b.n	8001eb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2b0f      	cmp	r3, #15
 8001e9e:	d80a      	bhi.n	8001eb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	6879      	ldr	r1, [r7, #4]
 8001ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ea8:	f000 f909 	bl	80020be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001eac:	4a06      	ldr	r2, [pc, #24]	; (8001ec8 <HAL_InitTick+0x5c>)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	e000      	b.n	8001eb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3708      	adds	r7, #8
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	20000000 	.word	0x20000000
 8001ec4:	20000008 	.word	0x20000008
 8001ec8:	20000004 	.word	0x20000004

08001ecc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ed0:	4b05      	ldr	r3, [pc, #20]	; (8001ee8 <HAL_IncTick+0x1c>)
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	4b05      	ldr	r3, [pc, #20]	; (8001eec <HAL_IncTick+0x20>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4413      	add	r3, r2
 8001edc:	4a03      	ldr	r2, [pc, #12]	; (8001eec <HAL_IncTick+0x20>)
 8001ede:	6013      	str	r3, [r2, #0]
}
 8001ee0:	bf00      	nop
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bc80      	pop	{r7}
 8001ee6:	4770      	bx	lr
 8001ee8:	20000008 	.word	0x20000008
 8001eec:	20000220 	.word	0x20000220

08001ef0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ef4:	4b02      	ldr	r3, [pc, #8]	; (8001f00 <HAL_GetTick+0x10>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bc80      	pop	{r7}
 8001efe:	4770      	bx	lr
 8001f00:	20000220 	.word	0x20000220

08001f04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f0c:	f7ff fff0 	bl	8001ef0 <HAL_GetTick>
 8001f10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f1c:	d005      	beq.n	8001f2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f1e:	4b09      	ldr	r3, [pc, #36]	; (8001f44 <HAL_Delay+0x40>)
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	461a      	mov	r2, r3
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	4413      	add	r3, r2
 8001f28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f2a:	bf00      	nop
 8001f2c:	f7ff ffe0 	bl	8001ef0 <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	68fa      	ldr	r2, [r7, #12]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d8f7      	bhi.n	8001f2c <HAL_Delay+0x28>
  {
  }
}
 8001f3c:	bf00      	nop
 8001f3e:	3710      	adds	r7, #16
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	20000008 	.word	0x20000008

08001f48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b085      	sub	sp, #20
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f003 0307 	and.w	r3, r3, #7
 8001f56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f58:	4b0c      	ldr	r3, [pc, #48]	; (8001f8c <__NVIC_SetPriorityGrouping+0x44>)
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f5e:	68ba      	ldr	r2, [r7, #8]
 8001f60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f64:	4013      	ands	r3, r2
 8001f66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f7a:	4a04      	ldr	r2, [pc, #16]	; (8001f8c <__NVIC_SetPriorityGrouping+0x44>)
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	60d3      	str	r3, [r2, #12]
}
 8001f80:	bf00      	nop
 8001f82:	3714      	adds	r7, #20
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bc80      	pop	{r7}
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	e000ed00 	.word	0xe000ed00

08001f90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f94:	4b04      	ldr	r3, [pc, #16]	; (8001fa8 <__NVIC_GetPriorityGrouping+0x18>)
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	0a1b      	lsrs	r3, r3, #8
 8001f9a:	f003 0307 	and.w	r3, r3, #7
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bc80      	pop	{r7}
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	e000ed00 	.word	0xe000ed00

08001fac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	6039      	str	r1, [r7, #0]
 8001fb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	db0a      	blt.n	8001fd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	b2da      	uxtb	r2, r3
 8001fc4:	490c      	ldr	r1, [pc, #48]	; (8001ff8 <__NVIC_SetPriority+0x4c>)
 8001fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fca:	0112      	lsls	r2, r2, #4
 8001fcc:	b2d2      	uxtb	r2, r2
 8001fce:	440b      	add	r3, r1
 8001fd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fd4:	e00a      	b.n	8001fec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	b2da      	uxtb	r2, r3
 8001fda:	4908      	ldr	r1, [pc, #32]	; (8001ffc <__NVIC_SetPriority+0x50>)
 8001fdc:	79fb      	ldrb	r3, [r7, #7]
 8001fde:	f003 030f 	and.w	r3, r3, #15
 8001fe2:	3b04      	subs	r3, #4
 8001fe4:	0112      	lsls	r2, r2, #4
 8001fe6:	b2d2      	uxtb	r2, r2
 8001fe8:	440b      	add	r3, r1
 8001fea:	761a      	strb	r2, [r3, #24]
}
 8001fec:	bf00      	nop
 8001fee:	370c      	adds	r7, #12
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bc80      	pop	{r7}
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	e000e100 	.word	0xe000e100
 8001ffc:	e000ed00 	.word	0xe000ed00

08002000 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002000:	b480      	push	{r7}
 8002002:	b089      	sub	sp, #36	; 0x24
 8002004:	af00      	add	r7, sp, #0
 8002006:	60f8      	str	r0, [r7, #12]
 8002008:	60b9      	str	r1, [r7, #8]
 800200a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	f003 0307 	and.w	r3, r3, #7
 8002012:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	f1c3 0307 	rsb	r3, r3, #7
 800201a:	2b04      	cmp	r3, #4
 800201c:	bf28      	it	cs
 800201e:	2304      	movcs	r3, #4
 8002020:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	3304      	adds	r3, #4
 8002026:	2b06      	cmp	r3, #6
 8002028:	d902      	bls.n	8002030 <NVIC_EncodePriority+0x30>
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	3b03      	subs	r3, #3
 800202e:	e000      	b.n	8002032 <NVIC_EncodePriority+0x32>
 8002030:	2300      	movs	r3, #0
 8002032:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002034:	f04f 32ff 	mov.w	r2, #4294967295
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	fa02 f303 	lsl.w	r3, r2, r3
 800203e:	43da      	mvns	r2, r3
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	401a      	ands	r2, r3
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002048:	f04f 31ff 	mov.w	r1, #4294967295
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	fa01 f303 	lsl.w	r3, r1, r3
 8002052:	43d9      	mvns	r1, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002058:	4313      	orrs	r3, r2
         );
}
 800205a:	4618      	mov	r0, r3
 800205c:	3724      	adds	r7, #36	; 0x24
 800205e:	46bd      	mov	sp, r7
 8002060:	bc80      	pop	{r7}
 8002062:	4770      	bx	lr

08002064 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	3b01      	subs	r3, #1
 8002070:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002074:	d301      	bcc.n	800207a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002076:	2301      	movs	r3, #1
 8002078:	e00f      	b.n	800209a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800207a:	4a0a      	ldr	r2, [pc, #40]	; (80020a4 <SysTick_Config+0x40>)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	3b01      	subs	r3, #1
 8002080:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002082:	210f      	movs	r1, #15
 8002084:	f04f 30ff 	mov.w	r0, #4294967295
 8002088:	f7ff ff90 	bl	8001fac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800208c:	4b05      	ldr	r3, [pc, #20]	; (80020a4 <SysTick_Config+0x40>)
 800208e:	2200      	movs	r2, #0
 8002090:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002092:	4b04      	ldr	r3, [pc, #16]	; (80020a4 <SysTick_Config+0x40>)
 8002094:	2207      	movs	r2, #7
 8002096:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	e000e010 	.word	0xe000e010

080020a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f7ff ff49 	bl	8001f48 <__NVIC_SetPriorityGrouping>
}
 80020b6:	bf00      	nop
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}

080020be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020be:	b580      	push	{r7, lr}
 80020c0:	b086      	sub	sp, #24
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	4603      	mov	r3, r0
 80020c6:	60b9      	str	r1, [r7, #8]
 80020c8:	607a      	str	r2, [r7, #4]
 80020ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020cc:	2300      	movs	r3, #0
 80020ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020d0:	f7ff ff5e 	bl	8001f90 <__NVIC_GetPriorityGrouping>
 80020d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	68b9      	ldr	r1, [r7, #8]
 80020da:	6978      	ldr	r0, [r7, #20]
 80020dc:	f7ff ff90 	bl	8002000 <NVIC_EncodePriority>
 80020e0:	4602      	mov	r2, r0
 80020e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020e6:	4611      	mov	r1, r2
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7ff ff5f 	bl	8001fac <__NVIC_SetPriority>
}
 80020ee:	bf00      	nop
 80020f0:	3718      	adds	r7, #24
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b082      	sub	sp, #8
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f7ff ffb0 	bl	8002064 <SysTick_Config>
 8002104:	4603      	mov	r3, r0
}
 8002106:	4618      	mov	r0, r3
 8002108:	3708      	adds	r7, #8
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
	...

08002110 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002110:	b480      	push	{r7}
 8002112:	b08b      	sub	sp, #44	; 0x2c
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800211a:	2300      	movs	r3, #0
 800211c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800211e:	2300      	movs	r3, #0
 8002120:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002122:	e127      	b.n	8002374 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002124:	2201      	movs	r2, #1
 8002126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002128:	fa02 f303 	lsl.w	r3, r2, r3
 800212c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	69fa      	ldr	r2, [r7, #28]
 8002134:	4013      	ands	r3, r2
 8002136:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	429a      	cmp	r2, r3
 800213e:	f040 8116 	bne.w	800236e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	2b12      	cmp	r3, #18
 8002148:	d034      	beq.n	80021b4 <HAL_GPIO_Init+0xa4>
 800214a:	2b12      	cmp	r3, #18
 800214c:	d80d      	bhi.n	800216a <HAL_GPIO_Init+0x5a>
 800214e:	2b02      	cmp	r3, #2
 8002150:	d02b      	beq.n	80021aa <HAL_GPIO_Init+0x9a>
 8002152:	2b02      	cmp	r3, #2
 8002154:	d804      	bhi.n	8002160 <HAL_GPIO_Init+0x50>
 8002156:	2b00      	cmp	r3, #0
 8002158:	d031      	beq.n	80021be <HAL_GPIO_Init+0xae>
 800215a:	2b01      	cmp	r3, #1
 800215c:	d01c      	beq.n	8002198 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800215e:	e048      	b.n	80021f2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002160:	2b03      	cmp	r3, #3
 8002162:	d043      	beq.n	80021ec <HAL_GPIO_Init+0xdc>
 8002164:	2b11      	cmp	r3, #17
 8002166:	d01b      	beq.n	80021a0 <HAL_GPIO_Init+0x90>
          break;
 8002168:	e043      	b.n	80021f2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800216a:	4a89      	ldr	r2, [pc, #548]	; (8002390 <HAL_GPIO_Init+0x280>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d026      	beq.n	80021be <HAL_GPIO_Init+0xae>
 8002170:	4a87      	ldr	r2, [pc, #540]	; (8002390 <HAL_GPIO_Init+0x280>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d806      	bhi.n	8002184 <HAL_GPIO_Init+0x74>
 8002176:	4a87      	ldr	r2, [pc, #540]	; (8002394 <HAL_GPIO_Init+0x284>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d020      	beq.n	80021be <HAL_GPIO_Init+0xae>
 800217c:	4a86      	ldr	r2, [pc, #536]	; (8002398 <HAL_GPIO_Init+0x288>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d01d      	beq.n	80021be <HAL_GPIO_Init+0xae>
          break;
 8002182:	e036      	b.n	80021f2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002184:	4a85      	ldr	r2, [pc, #532]	; (800239c <HAL_GPIO_Init+0x28c>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d019      	beq.n	80021be <HAL_GPIO_Init+0xae>
 800218a:	4a85      	ldr	r2, [pc, #532]	; (80023a0 <HAL_GPIO_Init+0x290>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d016      	beq.n	80021be <HAL_GPIO_Init+0xae>
 8002190:	4a84      	ldr	r2, [pc, #528]	; (80023a4 <HAL_GPIO_Init+0x294>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d013      	beq.n	80021be <HAL_GPIO_Init+0xae>
          break;
 8002196:	e02c      	b.n	80021f2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	623b      	str	r3, [r7, #32]
          break;
 800219e:	e028      	b.n	80021f2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	3304      	adds	r3, #4
 80021a6:	623b      	str	r3, [r7, #32]
          break;
 80021a8:	e023      	b.n	80021f2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	3308      	adds	r3, #8
 80021b0:	623b      	str	r3, [r7, #32]
          break;
 80021b2:	e01e      	b.n	80021f2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	330c      	adds	r3, #12
 80021ba:	623b      	str	r3, [r7, #32]
          break;
 80021bc:	e019      	b.n	80021f2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d102      	bne.n	80021cc <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80021c6:	2304      	movs	r3, #4
 80021c8:	623b      	str	r3, [r7, #32]
          break;
 80021ca:	e012      	b.n	80021f2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d105      	bne.n	80021e0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021d4:	2308      	movs	r3, #8
 80021d6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	69fa      	ldr	r2, [r7, #28]
 80021dc:	611a      	str	r2, [r3, #16]
          break;
 80021de:	e008      	b.n	80021f2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021e0:	2308      	movs	r3, #8
 80021e2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	69fa      	ldr	r2, [r7, #28]
 80021e8:	615a      	str	r2, [r3, #20]
          break;
 80021ea:	e002      	b.n	80021f2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80021ec:	2300      	movs	r3, #0
 80021ee:	623b      	str	r3, [r7, #32]
          break;
 80021f0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80021f2:	69bb      	ldr	r3, [r7, #24]
 80021f4:	2bff      	cmp	r3, #255	; 0xff
 80021f6:	d801      	bhi.n	80021fc <HAL_GPIO_Init+0xec>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	e001      	b.n	8002200 <HAL_GPIO_Init+0xf0>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	3304      	adds	r3, #4
 8002200:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002202:	69bb      	ldr	r3, [r7, #24]
 8002204:	2bff      	cmp	r3, #255	; 0xff
 8002206:	d802      	bhi.n	800220e <HAL_GPIO_Init+0xfe>
 8002208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	e002      	b.n	8002214 <HAL_GPIO_Init+0x104>
 800220e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002210:	3b08      	subs	r3, #8
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	210f      	movs	r1, #15
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	fa01 f303 	lsl.w	r3, r1, r3
 8002222:	43db      	mvns	r3, r3
 8002224:	401a      	ands	r2, r3
 8002226:	6a39      	ldr	r1, [r7, #32]
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	fa01 f303 	lsl.w	r3, r1, r3
 800222e:	431a      	orrs	r2, r3
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800223c:	2b00      	cmp	r3, #0
 800223e:	f000 8096 	beq.w	800236e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002242:	4b59      	ldr	r3, [pc, #356]	; (80023a8 <HAL_GPIO_Init+0x298>)
 8002244:	699b      	ldr	r3, [r3, #24]
 8002246:	4a58      	ldr	r2, [pc, #352]	; (80023a8 <HAL_GPIO_Init+0x298>)
 8002248:	f043 0301 	orr.w	r3, r3, #1
 800224c:	6193      	str	r3, [r2, #24]
 800224e:	4b56      	ldr	r3, [pc, #344]	; (80023a8 <HAL_GPIO_Init+0x298>)
 8002250:	699b      	ldr	r3, [r3, #24]
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	60bb      	str	r3, [r7, #8]
 8002258:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800225a:	4a54      	ldr	r2, [pc, #336]	; (80023ac <HAL_GPIO_Init+0x29c>)
 800225c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225e:	089b      	lsrs	r3, r3, #2
 8002260:	3302      	adds	r3, #2
 8002262:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002266:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226a:	f003 0303 	and.w	r3, r3, #3
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	220f      	movs	r2, #15
 8002272:	fa02 f303 	lsl.w	r3, r2, r3
 8002276:	43db      	mvns	r3, r3
 8002278:	68fa      	ldr	r2, [r7, #12]
 800227a:	4013      	ands	r3, r2
 800227c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a4b      	ldr	r2, [pc, #300]	; (80023b0 <HAL_GPIO_Init+0x2a0>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d013      	beq.n	80022ae <HAL_GPIO_Init+0x19e>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a4a      	ldr	r2, [pc, #296]	; (80023b4 <HAL_GPIO_Init+0x2a4>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d00d      	beq.n	80022aa <HAL_GPIO_Init+0x19a>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a49      	ldr	r2, [pc, #292]	; (80023b8 <HAL_GPIO_Init+0x2a8>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d007      	beq.n	80022a6 <HAL_GPIO_Init+0x196>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a48      	ldr	r2, [pc, #288]	; (80023bc <HAL_GPIO_Init+0x2ac>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d101      	bne.n	80022a2 <HAL_GPIO_Init+0x192>
 800229e:	2303      	movs	r3, #3
 80022a0:	e006      	b.n	80022b0 <HAL_GPIO_Init+0x1a0>
 80022a2:	2304      	movs	r3, #4
 80022a4:	e004      	b.n	80022b0 <HAL_GPIO_Init+0x1a0>
 80022a6:	2302      	movs	r3, #2
 80022a8:	e002      	b.n	80022b0 <HAL_GPIO_Init+0x1a0>
 80022aa:	2301      	movs	r3, #1
 80022ac:	e000      	b.n	80022b0 <HAL_GPIO_Init+0x1a0>
 80022ae:	2300      	movs	r3, #0
 80022b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022b2:	f002 0203 	and.w	r2, r2, #3
 80022b6:	0092      	lsls	r2, r2, #2
 80022b8:	4093      	lsls	r3, r2
 80022ba:	68fa      	ldr	r2, [r7, #12]
 80022bc:	4313      	orrs	r3, r2
 80022be:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80022c0:	493a      	ldr	r1, [pc, #232]	; (80023ac <HAL_GPIO_Init+0x29c>)
 80022c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c4:	089b      	lsrs	r3, r3, #2
 80022c6:	3302      	adds	r3, #2
 80022c8:	68fa      	ldr	r2, [r7, #12]
 80022ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d006      	beq.n	80022e8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80022da:	4b39      	ldr	r3, [pc, #228]	; (80023c0 <HAL_GPIO_Init+0x2b0>)
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	4938      	ldr	r1, [pc, #224]	; (80023c0 <HAL_GPIO_Init+0x2b0>)
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	600b      	str	r3, [r1, #0]
 80022e6:	e006      	b.n	80022f6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80022e8:	4b35      	ldr	r3, [pc, #212]	; (80023c0 <HAL_GPIO_Init+0x2b0>)
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	43db      	mvns	r3, r3
 80022f0:	4933      	ldr	r1, [pc, #204]	; (80023c0 <HAL_GPIO_Init+0x2b0>)
 80022f2:	4013      	ands	r3, r2
 80022f4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d006      	beq.n	8002310 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002302:	4b2f      	ldr	r3, [pc, #188]	; (80023c0 <HAL_GPIO_Init+0x2b0>)
 8002304:	685a      	ldr	r2, [r3, #4]
 8002306:	492e      	ldr	r1, [pc, #184]	; (80023c0 <HAL_GPIO_Init+0x2b0>)
 8002308:	69bb      	ldr	r3, [r7, #24]
 800230a:	4313      	orrs	r3, r2
 800230c:	604b      	str	r3, [r1, #4]
 800230e:	e006      	b.n	800231e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002310:	4b2b      	ldr	r3, [pc, #172]	; (80023c0 <HAL_GPIO_Init+0x2b0>)
 8002312:	685a      	ldr	r2, [r3, #4]
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	43db      	mvns	r3, r3
 8002318:	4929      	ldr	r1, [pc, #164]	; (80023c0 <HAL_GPIO_Init+0x2b0>)
 800231a:	4013      	ands	r3, r2
 800231c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d006      	beq.n	8002338 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800232a:	4b25      	ldr	r3, [pc, #148]	; (80023c0 <HAL_GPIO_Init+0x2b0>)
 800232c:	689a      	ldr	r2, [r3, #8]
 800232e:	4924      	ldr	r1, [pc, #144]	; (80023c0 <HAL_GPIO_Init+0x2b0>)
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	4313      	orrs	r3, r2
 8002334:	608b      	str	r3, [r1, #8]
 8002336:	e006      	b.n	8002346 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002338:	4b21      	ldr	r3, [pc, #132]	; (80023c0 <HAL_GPIO_Init+0x2b0>)
 800233a:	689a      	ldr	r2, [r3, #8]
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	43db      	mvns	r3, r3
 8002340:	491f      	ldr	r1, [pc, #124]	; (80023c0 <HAL_GPIO_Init+0x2b0>)
 8002342:	4013      	ands	r3, r2
 8002344:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d006      	beq.n	8002360 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002352:	4b1b      	ldr	r3, [pc, #108]	; (80023c0 <HAL_GPIO_Init+0x2b0>)
 8002354:	68da      	ldr	r2, [r3, #12]
 8002356:	491a      	ldr	r1, [pc, #104]	; (80023c0 <HAL_GPIO_Init+0x2b0>)
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	4313      	orrs	r3, r2
 800235c:	60cb      	str	r3, [r1, #12]
 800235e:	e006      	b.n	800236e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002360:	4b17      	ldr	r3, [pc, #92]	; (80023c0 <HAL_GPIO_Init+0x2b0>)
 8002362:	68da      	ldr	r2, [r3, #12]
 8002364:	69bb      	ldr	r3, [r7, #24]
 8002366:	43db      	mvns	r3, r3
 8002368:	4915      	ldr	r1, [pc, #84]	; (80023c0 <HAL_GPIO_Init+0x2b0>)
 800236a:	4013      	ands	r3, r2
 800236c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800236e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002370:	3301      	adds	r3, #1
 8002372:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237a:	fa22 f303 	lsr.w	r3, r2, r3
 800237e:	2b00      	cmp	r3, #0
 8002380:	f47f aed0 	bne.w	8002124 <HAL_GPIO_Init+0x14>
  }
}
 8002384:	bf00      	nop
 8002386:	372c      	adds	r7, #44	; 0x2c
 8002388:	46bd      	mov	sp, r7
 800238a:	bc80      	pop	{r7}
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	10210000 	.word	0x10210000
 8002394:	10110000 	.word	0x10110000
 8002398:	10120000 	.word	0x10120000
 800239c:	10310000 	.word	0x10310000
 80023a0:	10320000 	.word	0x10320000
 80023a4:	10220000 	.word	0x10220000
 80023a8:	40021000 	.word	0x40021000
 80023ac:	40010000 	.word	0x40010000
 80023b0:	40010800 	.word	0x40010800
 80023b4:	40010c00 	.word	0x40010c00
 80023b8:	40011000 	.word	0x40011000
 80023bc:	40011400 	.word	0x40011400
 80023c0:	40010400 	.word	0x40010400

080023c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	460b      	mov	r3, r1
 80023ce:	807b      	strh	r3, [r7, #2]
 80023d0:	4613      	mov	r3, r2
 80023d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023d4:	787b      	ldrb	r3, [r7, #1]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d003      	beq.n	80023e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023da:	887a      	ldrh	r2, [r7, #2]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80023e0:	e003      	b.n	80023ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80023e2:	887b      	ldrh	r3, [r7, #2]
 80023e4:	041a      	lsls	r2, r3, #16
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	611a      	str	r2, [r3, #16]
}
 80023ea:	bf00      	nop
 80023ec:	370c      	adds	r7, #12
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bc80      	pop	{r7}
 80023f2:	4770      	bx	lr

080023f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b086      	sub	sp, #24
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d101      	bne.n	8002406 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e26c      	b.n	80028e0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	2b00      	cmp	r3, #0
 8002410:	f000 8087 	beq.w	8002522 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002414:	4b92      	ldr	r3, [pc, #584]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f003 030c 	and.w	r3, r3, #12
 800241c:	2b04      	cmp	r3, #4
 800241e:	d00c      	beq.n	800243a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002420:	4b8f      	ldr	r3, [pc, #572]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f003 030c 	and.w	r3, r3, #12
 8002428:	2b08      	cmp	r3, #8
 800242a:	d112      	bne.n	8002452 <HAL_RCC_OscConfig+0x5e>
 800242c:	4b8c      	ldr	r3, [pc, #560]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002434:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002438:	d10b      	bne.n	8002452 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800243a:	4b89      	ldr	r3, [pc, #548]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d06c      	beq.n	8002520 <HAL_RCC_OscConfig+0x12c>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d168      	bne.n	8002520 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e246      	b.n	80028e0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800245a:	d106      	bne.n	800246a <HAL_RCC_OscConfig+0x76>
 800245c:	4b80      	ldr	r3, [pc, #512]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a7f      	ldr	r2, [pc, #508]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 8002462:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002466:	6013      	str	r3, [r2, #0]
 8002468:	e02e      	b.n	80024c8 <HAL_RCC_OscConfig+0xd4>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d10c      	bne.n	800248c <HAL_RCC_OscConfig+0x98>
 8002472:	4b7b      	ldr	r3, [pc, #492]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a7a      	ldr	r2, [pc, #488]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 8002478:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800247c:	6013      	str	r3, [r2, #0]
 800247e:	4b78      	ldr	r3, [pc, #480]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a77      	ldr	r2, [pc, #476]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 8002484:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002488:	6013      	str	r3, [r2, #0]
 800248a:	e01d      	b.n	80024c8 <HAL_RCC_OscConfig+0xd4>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002494:	d10c      	bne.n	80024b0 <HAL_RCC_OscConfig+0xbc>
 8002496:	4b72      	ldr	r3, [pc, #456]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a71      	ldr	r2, [pc, #452]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 800249c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024a0:	6013      	str	r3, [r2, #0]
 80024a2:	4b6f      	ldr	r3, [pc, #444]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a6e      	ldr	r2, [pc, #440]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 80024a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024ac:	6013      	str	r3, [r2, #0]
 80024ae:	e00b      	b.n	80024c8 <HAL_RCC_OscConfig+0xd4>
 80024b0:	4b6b      	ldr	r3, [pc, #428]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a6a      	ldr	r2, [pc, #424]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 80024b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024ba:	6013      	str	r3, [r2, #0]
 80024bc:	4b68      	ldr	r3, [pc, #416]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a67      	ldr	r2, [pc, #412]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 80024c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024c6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d013      	beq.n	80024f8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d0:	f7ff fd0e 	bl	8001ef0 <HAL_GetTick>
 80024d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024d6:	e008      	b.n	80024ea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024d8:	f7ff fd0a 	bl	8001ef0 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	2b64      	cmp	r3, #100	; 0x64
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e1fa      	b.n	80028e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ea:	4b5d      	ldr	r3, [pc, #372]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d0f0      	beq.n	80024d8 <HAL_RCC_OscConfig+0xe4>
 80024f6:	e014      	b.n	8002522 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f8:	f7ff fcfa 	bl	8001ef0 <HAL_GetTick>
 80024fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024fe:	e008      	b.n	8002512 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002500:	f7ff fcf6 	bl	8001ef0 <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b64      	cmp	r3, #100	; 0x64
 800250c:	d901      	bls.n	8002512 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e1e6      	b.n	80028e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002512:	4b53      	ldr	r3, [pc, #332]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d1f0      	bne.n	8002500 <HAL_RCC_OscConfig+0x10c>
 800251e:	e000      	b.n	8002522 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002520:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0302 	and.w	r3, r3, #2
 800252a:	2b00      	cmp	r3, #0
 800252c:	d063      	beq.n	80025f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800252e:	4b4c      	ldr	r3, [pc, #304]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f003 030c 	and.w	r3, r3, #12
 8002536:	2b00      	cmp	r3, #0
 8002538:	d00b      	beq.n	8002552 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800253a:	4b49      	ldr	r3, [pc, #292]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f003 030c 	and.w	r3, r3, #12
 8002542:	2b08      	cmp	r3, #8
 8002544:	d11c      	bne.n	8002580 <HAL_RCC_OscConfig+0x18c>
 8002546:	4b46      	ldr	r3, [pc, #280]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d116      	bne.n	8002580 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002552:	4b43      	ldr	r3, [pc, #268]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d005      	beq.n	800256a <HAL_RCC_OscConfig+0x176>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	2b01      	cmp	r3, #1
 8002564:	d001      	beq.n	800256a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e1ba      	b.n	80028e0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800256a:	4b3d      	ldr	r3, [pc, #244]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	695b      	ldr	r3, [r3, #20]
 8002576:	00db      	lsls	r3, r3, #3
 8002578:	4939      	ldr	r1, [pc, #228]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 800257a:	4313      	orrs	r3, r2
 800257c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800257e:	e03a      	b.n	80025f6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	691b      	ldr	r3, [r3, #16]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d020      	beq.n	80025ca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002588:	4b36      	ldr	r3, [pc, #216]	; (8002664 <HAL_RCC_OscConfig+0x270>)
 800258a:	2201      	movs	r2, #1
 800258c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800258e:	f7ff fcaf 	bl	8001ef0 <HAL_GetTick>
 8002592:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002594:	e008      	b.n	80025a8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002596:	f7ff fcab 	bl	8001ef0 <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d901      	bls.n	80025a8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e19b      	b.n	80028e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025a8:	4b2d      	ldr	r3, [pc, #180]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0302 	and.w	r3, r3, #2
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d0f0      	beq.n	8002596 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025b4:	4b2a      	ldr	r3, [pc, #168]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	695b      	ldr	r3, [r3, #20]
 80025c0:	00db      	lsls	r3, r3, #3
 80025c2:	4927      	ldr	r1, [pc, #156]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	600b      	str	r3, [r1, #0]
 80025c8:	e015      	b.n	80025f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025ca:	4b26      	ldr	r3, [pc, #152]	; (8002664 <HAL_RCC_OscConfig+0x270>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d0:	f7ff fc8e 	bl	8001ef0 <HAL_GetTick>
 80025d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025d6:	e008      	b.n	80025ea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025d8:	f7ff fc8a 	bl	8001ef0 <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d901      	bls.n	80025ea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e17a      	b.n	80028e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ea:	4b1d      	ldr	r3, [pc, #116]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d1f0      	bne.n	80025d8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0308 	and.w	r3, r3, #8
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d03a      	beq.n	8002678 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	699b      	ldr	r3, [r3, #24]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d019      	beq.n	800263e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800260a:	4b17      	ldr	r3, [pc, #92]	; (8002668 <HAL_RCC_OscConfig+0x274>)
 800260c:	2201      	movs	r2, #1
 800260e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002610:	f7ff fc6e 	bl	8001ef0 <HAL_GetTick>
 8002614:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002616:	e008      	b.n	800262a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002618:	f7ff fc6a 	bl	8001ef0 <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	2b02      	cmp	r3, #2
 8002624:	d901      	bls.n	800262a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e15a      	b.n	80028e0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800262a:	4b0d      	ldr	r3, [pc, #52]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 800262c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262e:	f003 0302 	and.w	r3, r3, #2
 8002632:	2b00      	cmp	r3, #0
 8002634:	d0f0      	beq.n	8002618 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002636:	2001      	movs	r0, #1
 8002638:	f000 faa8 	bl	8002b8c <RCC_Delay>
 800263c:	e01c      	b.n	8002678 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800263e:	4b0a      	ldr	r3, [pc, #40]	; (8002668 <HAL_RCC_OscConfig+0x274>)
 8002640:	2200      	movs	r2, #0
 8002642:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002644:	f7ff fc54 	bl	8001ef0 <HAL_GetTick>
 8002648:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800264a:	e00f      	b.n	800266c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800264c:	f7ff fc50 	bl	8001ef0 <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	2b02      	cmp	r3, #2
 8002658:	d908      	bls.n	800266c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e140      	b.n	80028e0 <HAL_RCC_OscConfig+0x4ec>
 800265e:	bf00      	nop
 8002660:	40021000 	.word	0x40021000
 8002664:	42420000 	.word	0x42420000
 8002668:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800266c:	4b9e      	ldr	r3, [pc, #632]	; (80028e8 <HAL_RCC_OscConfig+0x4f4>)
 800266e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002670:	f003 0302 	and.w	r3, r3, #2
 8002674:	2b00      	cmp	r3, #0
 8002676:	d1e9      	bne.n	800264c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0304 	and.w	r3, r3, #4
 8002680:	2b00      	cmp	r3, #0
 8002682:	f000 80a6 	beq.w	80027d2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002686:	2300      	movs	r3, #0
 8002688:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800268a:	4b97      	ldr	r3, [pc, #604]	; (80028e8 <HAL_RCC_OscConfig+0x4f4>)
 800268c:	69db      	ldr	r3, [r3, #28]
 800268e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d10d      	bne.n	80026b2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002696:	4b94      	ldr	r3, [pc, #592]	; (80028e8 <HAL_RCC_OscConfig+0x4f4>)
 8002698:	69db      	ldr	r3, [r3, #28]
 800269a:	4a93      	ldr	r2, [pc, #588]	; (80028e8 <HAL_RCC_OscConfig+0x4f4>)
 800269c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026a0:	61d3      	str	r3, [r2, #28]
 80026a2:	4b91      	ldr	r3, [pc, #580]	; (80028e8 <HAL_RCC_OscConfig+0x4f4>)
 80026a4:	69db      	ldr	r3, [r3, #28]
 80026a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026aa:	60bb      	str	r3, [r7, #8]
 80026ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026ae:	2301      	movs	r3, #1
 80026b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026b2:	4b8e      	ldr	r3, [pc, #568]	; (80028ec <HAL_RCC_OscConfig+0x4f8>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d118      	bne.n	80026f0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026be:	4b8b      	ldr	r3, [pc, #556]	; (80028ec <HAL_RCC_OscConfig+0x4f8>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a8a      	ldr	r2, [pc, #552]	; (80028ec <HAL_RCC_OscConfig+0x4f8>)
 80026c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026ca:	f7ff fc11 	bl	8001ef0 <HAL_GetTick>
 80026ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026d0:	e008      	b.n	80026e4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026d2:	f7ff fc0d 	bl	8001ef0 <HAL_GetTick>
 80026d6:	4602      	mov	r2, r0
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	2b64      	cmp	r3, #100	; 0x64
 80026de:	d901      	bls.n	80026e4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	e0fd      	b.n	80028e0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026e4:	4b81      	ldr	r3, [pc, #516]	; (80028ec <HAL_RCC_OscConfig+0x4f8>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d0f0      	beq.n	80026d2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d106      	bne.n	8002706 <HAL_RCC_OscConfig+0x312>
 80026f8:	4b7b      	ldr	r3, [pc, #492]	; (80028e8 <HAL_RCC_OscConfig+0x4f4>)
 80026fa:	6a1b      	ldr	r3, [r3, #32]
 80026fc:	4a7a      	ldr	r2, [pc, #488]	; (80028e8 <HAL_RCC_OscConfig+0x4f4>)
 80026fe:	f043 0301 	orr.w	r3, r3, #1
 8002702:	6213      	str	r3, [r2, #32]
 8002704:	e02d      	b.n	8002762 <HAL_RCC_OscConfig+0x36e>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d10c      	bne.n	8002728 <HAL_RCC_OscConfig+0x334>
 800270e:	4b76      	ldr	r3, [pc, #472]	; (80028e8 <HAL_RCC_OscConfig+0x4f4>)
 8002710:	6a1b      	ldr	r3, [r3, #32]
 8002712:	4a75      	ldr	r2, [pc, #468]	; (80028e8 <HAL_RCC_OscConfig+0x4f4>)
 8002714:	f023 0301 	bic.w	r3, r3, #1
 8002718:	6213      	str	r3, [r2, #32]
 800271a:	4b73      	ldr	r3, [pc, #460]	; (80028e8 <HAL_RCC_OscConfig+0x4f4>)
 800271c:	6a1b      	ldr	r3, [r3, #32]
 800271e:	4a72      	ldr	r2, [pc, #456]	; (80028e8 <HAL_RCC_OscConfig+0x4f4>)
 8002720:	f023 0304 	bic.w	r3, r3, #4
 8002724:	6213      	str	r3, [r2, #32]
 8002726:	e01c      	b.n	8002762 <HAL_RCC_OscConfig+0x36e>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	2b05      	cmp	r3, #5
 800272e:	d10c      	bne.n	800274a <HAL_RCC_OscConfig+0x356>
 8002730:	4b6d      	ldr	r3, [pc, #436]	; (80028e8 <HAL_RCC_OscConfig+0x4f4>)
 8002732:	6a1b      	ldr	r3, [r3, #32]
 8002734:	4a6c      	ldr	r2, [pc, #432]	; (80028e8 <HAL_RCC_OscConfig+0x4f4>)
 8002736:	f043 0304 	orr.w	r3, r3, #4
 800273a:	6213      	str	r3, [r2, #32]
 800273c:	4b6a      	ldr	r3, [pc, #424]	; (80028e8 <HAL_RCC_OscConfig+0x4f4>)
 800273e:	6a1b      	ldr	r3, [r3, #32]
 8002740:	4a69      	ldr	r2, [pc, #420]	; (80028e8 <HAL_RCC_OscConfig+0x4f4>)
 8002742:	f043 0301 	orr.w	r3, r3, #1
 8002746:	6213      	str	r3, [r2, #32]
 8002748:	e00b      	b.n	8002762 <HAL_RCC_OscConfig+0x36e>
 800274a:	4b67      	ldr	r3, [pc, #412]	; (80028e8 <HAL_RCC_OscConfig+0x4f4>)
 800274c:	6a1b      	ldr	r3, [r3, #32]
 800274e:	4a66      	ldr	r2, [pc, #408]	; (80028e8 <HAL_RCC_OscConfig+0x4f4>)
 8002750:	f023 0301 	bic.w	r3, r3, #1
 8002754:	6213      	str	r3, [r2, #32]
 8002756:	4b64      	ldr	r3, [pc, #400]	; (80028e8 <HAL_RCC_OscConfig+0x4f4>)
 8002758:	6a1b      	ldr	r3, [r3, #32]
 800275a:	4a63      	ldr	r2, [pc, #396]	; (80028e8 <HAL_RCC_OscConfig+0x4f4>)
 800275c:	f023 0304 	bic.w	r3, r3, #4
 8002760:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d015      	beq.n	8002796 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800276a:	f7ff fbc1 	bl	8001ef0 <HAL_GetTick>
 800276e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002770:	e00a      	b.n	8002788 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002772:	f7ff fbbd 	bl	8001ef0 <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002780:	4293      	cmp	r3, r2
 8002782:	d901      	bls.n	8002788 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	e0ab      	b.n	80028e0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002788:	4b57      	ldr	r3, [pc, #348]	; (80028e8 <HAL_RCC_OscConfig+0x4f4>)
 800278a:	6a1b      	ldr	r3, [r3, #32]
 800278c:	f003 0302 	and.w	r3, r3, #2
 8002790:	2b00      	cmp	r3, #0
 8002792:	d0ee      	beq.n	8002772 <HAL_RCC_OscConfig+0x37e>
 8002794:	e014      	b.n	80027c0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002796:	f7ff fbab 	bl	8001ef0 <HAL_GetTick>
 800279a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800279c:	e00a      	b.n	80027b4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800279e:	f7ff fba7 	bl	8001ef0 <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d901      	bls.n	80027b4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	e095      	b.n	80028e0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027b4:	4b4c      	ldr	r3, [pc, #304]	; (80028e8 <HAL_RCC_OscConfig+0x4f4>)
 80027b6:	6a1b      	ldr	r3, [r3, #32]
 80027b8:	f003 0302 	and.w	r3, r3, #2
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d1ee      	bne.n	800279e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80027c0:	7dfb      	ldrb	r3, [r7, #23]
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d105      	bne.n	80027d2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027c6:	4b48      	ldr	r3, [pc, #288]	; (80028e8 <HAL_RCC_OscConfig+0x4f4>)
 80027c8:	69db      	ldr	r3, [r3, #28]
 80027ca:	4a47      	ldr	r2, [pc, #284]	; (80028e8 <HAL_RCC_OscConfig+0x4f4>)
 80027cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027d0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	69db      	ldr	r3, [r3, #28]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	f000 8081 	beq.w	80028de <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027dc:	4b42      	ldr	r3, [pc, #264]	; (80028e8 <HAL_RCC_OscConfig+0x4f4>)
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f003 030c 	and.w	r3, r3, #12
 80027e4:	2b08      	cmp	r3, #8
 80027e6:	d061      	beq.n	80028ac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	69db      	ldr	r3, [r3, #28]
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d146      	bne.n	800287e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027f0:	4b3f      	ldr	r3, [pc, #252]	; (80028f0 <HAL_RCC_OscConfig+0x4fc>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f6:	f7ff fb7b 	bl	8001ef0 <HAL_GetTick>
 80027fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027fc:	e008      	b.n	8002810 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027fe:	f7ff fb77 	bl	8001ef0 <HAL_GetTick>
 8002802:	4602      	mov	r2, r0
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	2b02      	cmp	r3, #2
 800280a:	d901      	bls.n	8002810 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	e067      	b.n	80028e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002810:	4b35      	ldr	r3, [pc, #212]	; (80028e8 <HAL_RCC_OscConfig+0x4f4>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d1f0      	bne.n	80027fe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a1b      	ldr	r3, [r3, #32]
 8002820:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002824:	d108      	bne.n	8002838 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002826:	4b30      	ldr	r3, [pc, #192]	; (80028e8 <HAL_RCC_OscConfig+0x4f4>)
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	492d      	ldr	r1, [pc, #180]	; (80028e8 <HAL_RCC_OscConfig+0x4f4>)
 8002834:	4313      	orrs	r3, r2
 8002836:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002838:	4b2b      	ldr	r3, [pc, #172]	; (80028e8 <HAL_RCC_OscConfig+0x4f4>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6a19      	ldr	r1, [r3, #32]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002848:	430b      	orrs	r3, r1
 800284a:	4927      	ldr	r1, [pc, #156]	; (80028e8 <HAL_RCC_OscConfig+0x4f4>)
 800284c:	4313      	orrs	r3, r2
 800284e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002850:	4b27      	ldr	r3, [pc, #156]	; (80028f0 <HAL_RCC_OscConfig+0x4fc>)
 8002852:	2201      	movs	r2, #1
 8002854:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002856:	f7ff fb4b 	bl	8001ef0 <HAL_GetTick>
 800285a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800285c:	e008      	b.n	8002870 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800285e:	f7ff fb47 	bl	8001ef0 <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	2b02      	cmp	r3, #2
 800286a:	d901      	bls.n	8002870 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800286c:	2303      	movs	r3, #3
 800286e:	e037      	b.n	80028e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002870:	4b1d      	ldr	r3, [pc, #116]	; (80028e8 <HAL_RCC_OscConfig+0x4f4>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d0f0      	beq.n	800285e <HAL_RCC_OscConfig+0x46a>
 800287c:	e02f      	b.n	80028de <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800287e:	4b1c      	ldr	r3, [pc, #112]	; (80028f0 <HAL_RCC_OscConfig+0x4fc>)
 8002880:	2200      	movs	r2, #0
 8002882:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002884:	f7ff fb34 	bl	8001ef0 <HAL_GetTick>
 8002888:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800288a:	e008      	b.n	800289e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800288c:	f7ff fb30 	bl	8001ef0 <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	2b02      	cmp	r3, #2
 8002898:	d901      	bls.n	800289e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e020      	b.n	80028e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800289e:	4b12      	ldr	r3, [pc, #72]	; (80028e8 <HAL_RCC_OscConfig+0x4f4>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d1f0      	bne.n	800288c <HAL_RCC_OscConfig+0x498>
 80028aa:	e018      	b.n	80028de <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	69db      	ldr	r3, [r3, #28]
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d101      	bne.n	80028b8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e013      	b.n	80028e0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80028b8:	4b0b      	ldr	r3, [pc, #44]	; (80028e8 <HAL_RCC_OscConfig+0x4f4>)
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a1b      	ldr	r3, [r3, #32]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d106      	bne.n	80028da <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d001      	beq.n	80028de <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e000      	b.n	80028e0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80028de:	2300      	movs	r3, #0
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3718      	adds	r7, #24
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	40021000 	.word	0x40021000
 80028ec:	40007000 	.word	0x40007000
 80028f0:	42420060 	.word	0x42420060

080028f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d101      	bne.n	8002908 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e0d0      	b.n	8002aaa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002908:	4b6a      	ldr	r3, [pc, #424]	; (8002ab4 <HAL_RCC_ClockConfig+0x1c0>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0307 	and.w	r3, r3, #7
 8002910:	683a      	ldr	r2, [r7, #0]
 8002912:	429a      	cmp	r2, r3
 8002914:	d910      	bls.n	8002938 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002916:	4b67      	ldr	r3, [pc, #412]	; (8002ab4 <HAL_RCC_ClockConfig+0x1c0>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f023 0207 	bic.w	r2, r3, #7
 800291e:	4965      	ldr	r1, [pc, #404]	; (8002ab4 <HAL_RCC_ClockConfig+0x1c0>)
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	4313      	orrs	r3, r2
 8002924:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002926:	4b63      	ldr	r3, [pc, #396]	; (8002ab4 <HAL_RCC_ClockConfig+0x1c0>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0307 	and.w	r3, r3, #7
 800292e:	683a      	ldr	r2, [r7, #0]
 8002930:	429a      	cmp	r2, r3
 8002932:	d001      	beq.n	8002938 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e0b8      	b.n	8002aaa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0302 	and.w	r3, r3, #2
 8002940:	2b00      	cmp	r3, #0
 8002942:	d020      	beq.n	8002986 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0304 	and.w	r3, r3, #4
 800294c:	2b00      	cmp	r3, #0
 800294e:	d005      	beq.n	800295c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002950:	4b59      	ldr	r3, [pc, #356]	; (8002ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	4a58      	ldr	r2, [pc, #352]	; (8002ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8002956:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800295a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0308 	and.w	r3, r3, #8
 8002964:	2b00      	cmp	r3, #0
 8002966:	d005      	beq.n	8002974 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002968:	4b53      	ldr	r3, [pc, #332]	; (8002ab8 <HAL_RCC_ClockConfig+0x1c4>)
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	4a52      	ldr	r2, [pc, #328]	; (8002ab8 <HAL_RCC_ClockConfig+0x1c4>)
 800296e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002972:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002974:	4b50      	ldr	r3, [pc, #320]	; (8002ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	494d      	ldr	r1, [pc, #308]	; (8002ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8002982:	4313      	orrs	r3, r2
 8002984:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0301 	and.w	r3, r3, #1
 800298e:	2b00      	cmp	r3, #0
 8002990:	d040      	beq.n	8002a14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	2b01      	cmp	r3, #1
 8002998:	d107      	bne.n	80029aa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800299a:	4b47      	ldr	r3, [pc, #284]	; (8002ab8 <HAL_RCC_ClockConfig+0x1c4>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d115      	bne.n	80029d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e07f      	b.n	8002aaa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d107      	bne.n	80029c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029b2:	4b41      	ldr	r3, [pc, #260]	; (8002ab8 <HAL_RCC_ClockConfig+0x1c4>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d109      	bne.n	80029d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e073      	b.n	8002aaa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029c2:	4b3d      	ldr	r3, [pc, #244]	; (8002ab8 <HAL_RCC_ClockConfig+0x1c4>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0302 	and.w	r3, r3, #2
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d101      	bne.n	80029d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e06b      	b.n	8002aaa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029d2:	4b39      	ldr	r3, [pc, #228]	; (8002ab8 <HAL_RCC_ClockConfig+0x1c4>)
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f023 0203 	bic.w	r2, r3, #3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	4936      	ldr	r1, [pc, #216]	; (8002ab8 <HAL_RCC_ClockConfig+0x1c4>)
 80029e0:	4313      	orrs	r3, r2
 80029e2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029e4:	f7ff fa84 	bl	8001ef0 <HAL_GetTick>
 80029e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ea:	e00a      	b.n	8002a02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029ec:	f7ff fa80 	bl	8001ef0 <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e053      	b.n	8002aaa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a02:	4b2d      	ldr	r3, [pc, #180]	; (8002ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	f003 020c 	and.w	r2, r3, #12
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d1eb      	bne.n	80029ec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a14:	4b27      	ldr	r3, [pc, #156]	; (8002ab4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0307 	and.w	r3, r3, #7
 8002a1c:	683a      	ldr	r2, [r7, #0]
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d210      	bcs.n	8002a44 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a22:	4b24      	ldr	r3, [pc, #144]	; (8002ab4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f023 0207 	bic.w	r2, r3, #7
 8002a2a:	4922      	ldr	r1, [pc, #136]	; (8002ab4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a32:	4b20      	ldr	r3, [pc, #128]	; (8002ab4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0307 	and.w	r3, r3, #7
 8002a3a:	683a      	ldr	r2, [r7, #0]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d001      	beq.n	8002a44 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e032      	b.n	8002aaa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0304 	and.w	r3, r3, #4
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d008      	beq.n	8002a62 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a50:	4b19      	ldr	r3, [pc, #100]	; (8002ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	4916      	ldr	r1, [pc, #88]	; (8002ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0308 	and.w	r3, r3, #8
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d009      	beq.n	8002a82 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a6e:	4b12      	ldr	r3, [pc, #72]	; (8002ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	691b      	ldr	r3, [r3, #16]
 8002a7a:	00db      	lsls	r3, r3, #3
 8002a7c:	490e      	ldr	r1, [pc, #56]	; (8002ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a82:	f000 f821 	bl	8002ac8 <HAL_RCC_GetSysClockFreq>
 8002a86:	4601      	mov	r1, r0
 8002a88:	4b0b      	ldr	r3, [pc, #44]	; (8002ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	091b      	lsrs	r3, r3, #4
 8002a8e:	f003 030f 	and.w	r3, r3, #15
 8002a92:	4a0a      	ldr	r2, [pc, #40]	; (8002abc <HAL_RCC_ClockConfig+0x1c8>)
 8002a94:	5cd3      	ldrb	r3, [r2, r3]
 8002a96:	fa21 f303 	lsr.w	r3, r1, r3
 8002a9a:	4a09      	ldr	r2, [pc, #36]	; (8002ac0 <HAL_RCC_ClockConfig+0x1cc>)
 8002a9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a9e:	4b09      	ldr	r3, [pc, #36]	; (8002ac4 <HAL_RCC_ClockConfig+0x1d0>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f7ff f9e2 	bl	8001e6c <HAL_InitTick>

  return HAL_OK;
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3710      	adds	r7, #16
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	40022000 	.word	0x40022000
 8002ab8:	40021000 	.word	0x40021000
 8002abc:	08002e8c 	.word	0x08002e8c
 8002ac0:	20000000 	.word	0x20000000
 8002ac4:	20000004 	.word	0x20000004

08002ac8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ac8:	b490      	push	{r4, r7}
 8002aca:	b08a      	sub	sp, #40	; 0x28
 8002acc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002ace:	4b2a      	ldr	r3, [pc, #168]	; (8002b78 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002ad0:	1d3c      	adds	r4, r7, #4
 8002ad2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ad4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002ad8:	4b28      	ldr	r3, [pc, #160]	; (8002b7c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002ada:	881b      	ldrh	r3, [r3, #0]
 8002adc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	61fb      	str	r3, [r7, #28]
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	61bb      	str	r3, [r7, #24]
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	627b      	str	r3, [r7, #36]	; 0x24
 8002aea:	2300      	movs	r3, #0
 8002aec:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002aee:	2300      	movs	r3, #0
 8002af0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002af2:	4b23      	ldr	r3, [pc, #140]	; (8002b80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	f003 030c 	and.w	r3, r3, #12
 8002afe:	2b04      	cmp	r3, #4
 8002b00:	d002      	beq.n	8002b08 <HAL_RCC_GetSysClockFreq+0x40>
 8002b02:	2b08      	cmp	r3, #8
 8002b04:	d003      	beq.n	8002b0e <HAL_RCC_GetSysClockFreq+0x46>
 8002b06:	e02d      	b.n	8002b64 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b08:	4b1e      	ldr	r3, [pc, #120]	; (8002b84 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b0a:	623b      	str	r3, [r7, #32]
      break;
 8002b0c:	e02d      	b.n	8002b6a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	0c9b      	lsrs	r3, r3, #18
 8002b12:	f003 030f 	and.w	r3, r3, #15
 8002b16:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002b1a:	4413      	add	r3, r2
 8002b1c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002b20:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d013      	beq.n	8002b54 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b2c:	4b14      	ldr	r3, [pc, #80]	; (8002b80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	0c5b      	lsrs	r3, r3, #17
 8002b32:	f003 0301 	and.w	r3, r3, #1
 8002b36:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002b3a:	4413      	add	r3, r2
 8002b3c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002b40:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	4a0f      	ldr	r2, [pc, #60]	; (8002b84 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b46:	fb02 f203 	mul.w	r2, r2, r3
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b50:	627b      	str	r3, [r7, #36]	; 0x24
 8002b52:	e004      	b.n	8002b5e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	4a0c      	ldr	r2, [pc, #48]	; (8002b88 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b58:	fb02 f303 	mul.w	r3, r2, r3
 8002b5c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b60:	623b      	str	r3, [r7, #32]
      break;
 8002b62:	e002      	b.n	8002b6a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b64:	4b07      	ldr	r3, [pc, #28]	; (8002b84 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b66:	623b      	str	r3, [r7, #32]
      break;
 8002b68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b6a:	6a3b      	ldr	r3, [r7, #32]
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3728      	adds	r7, #40	; 0x28
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bc90      	pop	{r4, r7}
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop
 8002b78:	08002c98 	.word	0x08002c98
 8002b7c:	08002ca8 	.word	0x08002ca8
 8002b80:	40021000 	.word	0x40021000
 8002b84:	007a1200 	.word	0x007a1200
 8002b88:	003d0900 	.word	0x003d0900

08002b8c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b085      	sub	sp, #20
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002b94:	4b0a      	ldr	r3, [pc, #40]	; (8002bc0 <RCC_Delay+0x34>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a0a      	ldr	r2, [pc, #40]	; (8002bc4 <RCC_Delay+0x38>)
 8002b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b9e:	0a5b      	lsrs	r3, r3, #9
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	fb02 f303 	mul.w	r3, r2, r3
 8002ba6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002ba8:	bf00      	nop
  }
  while (Delay --);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	1e5a      	subs	r2, r3, #1
 8002bae:	60fa      	str	r2, [r7, #12]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d1f9      	bne.n	8002ba8 <RCC_Delay+0x1c>
}
 8002bb4:	bf00      	nop
 8002bb6:	3714      	adds	r7, #20
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bc80      	pop	{r7}
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	20000000 	.word	0x20000000
 8002bc4:	10624dd3 	.word	0x10624dd3

08002bc8 <__libc_init_array>:
 8002bc8:	b570      	push	{r4, r5, r6, lr}
 8002bca:	2500      	movs	r5, #0
 8002bcc:	4e0c      	ldr	r6, [pc, #48]	; (8002c00 <__libc_init_array+0x38>)
 8002bce:	4c0d      	ldr	r4, [pc, #52]	; (8002c04 <__libc_init_array+0x3c>)
 8002bd0:	1ba4      	subs	r4, r4, r6
 8002bd2:	10a4      	asrs	r4, r4, #2
 8002bd4:	42a5      	cmp	r5, r4
 8002bd6:	d109      	bne.n	8002bec <__libc_init_array+0x24>
 8002bd8:	f000 f822 	bl	8002c20 <_init>
 8002bdc:	2500      	movs	r5, #0
 8002bde:	4e0a      	ldr	r6, [pc, #40]	; (8002c08 <__libc_init_array+0x40>)
 8002be0:	4c0a      	ldr	r4, [pc, #40]	; (8002c0c <__libc_init_array+0x44>)
 8002be2:	1ba4      	subs	r4, r4, r6
 8002be4:	10a4      	asrs	r4, r4, #2
 8002be6:	42a5      	cmp	r5, r4
 8002be8:	d105      	bne.n	8002bf6 <__libc_init_array+0x2e>
 8002bea:	bd70      	pop	{r4, r5, r6, pc}
 8002bec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002bf0:	4798      	blx	r3
 8002bf2:	3501      	adds	r5, #1
 8002bf4:	e7ee      	b.n	8002bd4 <__libc_init_array+0xc>
 8002bf6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002bfa:	4798      	blx	r3
 8002bfc:	3501      	adds	r5, #1
 8002bfe:	e7f2      	b.n	8002be6 <__libc_init_array+0x1e>
 8002c00:	08002e9c 	.word	0x08002e9c
 8002c04:	08002e9c 	.word	0x08002e9c
 8002c08:	08002e9c 	.word	0x08002e9c
 8002c0c:	08002ea0 	.word	0x08002ea0

08002c10 <memset>:
 8002c10:	4603      	mov	r3, r0
 8002c12:	4402      	add	r2, r0
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d100      	bne.n	8002c1a <memset+0xa>
 8002c18:	4770      	bx	lr
 8002c1a:	f803 1b01 	strb.w	r1, [r3], #1
 8002c1e:	e7f9      	b.n	8002c14 <memset+0x4>

08002c20 <_init>:
 8002c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c22:	bf00      	nop
 8002c24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c26:	bc08      	pop	{r3}
 8002c28:	469e      	mov	lr, r3
 8002c2a:	4770      	bx	lr

08002c2c <_fini>:
 8002c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c2e:	bf00      	nop
 8002c30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c32:	bc08      	pop	{r3}
 8002c34:	469e      	mov	lr, r3
 8002c36:	4770      	bx	lr
