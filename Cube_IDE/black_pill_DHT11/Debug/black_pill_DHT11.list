
black_pill_DHT11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002dbc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08002ec8  08002ec8  00012ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002fa8  08002fa8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002fa8  08002fa8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002fa8  08002fa8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002fa8  08002fa8  00012fa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002fac  08002fac  00012fac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002fb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  20000070  08003020  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000012c  08003020  0002012c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a73b  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a24  00000000  00000000  0002a7d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000bc8  00000000  00000000  0002c1f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000af0  00000000  00000000  0002cdc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001516d  00000000  00000000  0002d8b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007e6e  00000000  00000000  00042a1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00072a44  00000000  00000000  0004a88b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bd2cf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037dc  00000000  00000000  000bd34c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002eb0 	.word	0x08002eb0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002eb0 	.word	0x08002eb0

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fc1c 	bl	800098c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f85a 	bl	800020c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f918 	bl	800038c <MX_GPIO_Init>
  MX_TIM4_Init();
 800015c:	f000 f89c 	bl	8000298 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000160:	f000 f8ea 	bl	8000338 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim4);
 8000164:	481f      	ldr	r0, [pc, #124]	; (80001e4 <main+0x98>)
 8000166:	f001 fb62 	bl	800182e <HAL_TIM_Base_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1)
  {
			DHT_Start();
 800016a:	f000 f9c3 	bl	80004f4 <DHT_Start>
			Respones_State = DHT_Check_Response();
 800016e:	f000 f9d9 	bl	8000524 <DHT_Check_Response>
 8000172:	4603      	mov	r3, r0
 8000174:	461a      	mov	r2, r3
 8000176:	4b1c      	ldr	r3, [pc, #112]	; (80001e8 <main+0x9c>)
 8000178:	701a      	strb	r2, [r3, #0]
			int_RH = DHT_Read_Data();
 800017a:	f000 f9fd 	bl	8000578 <DHT_Read_Data>
 800017e:	4603      	mov	r3, r0
 8000180:	461a      	mov	r2, r3
 8000182:	4b1a      	ldr	r3, [pc, #104]	; (80001ec <main+0xa0>)
 8000184:	701a      	strb	r2, [r3, #0]
			dec_RH = DHT_Read_Data();
 8000186:	f000 f9f7 	bl	8000578 <DHT_Read_Data>
 800018a:	4603      	mov	r3, r0
 800018c:	461a      	mov	r2, r3
 800018e:	4b18      	ldr	r3, [pc, #96]	; (80001f0 <main+0xa4>)
 8000190:	701a      	strb	r2, [r3, #0]
			int_T  = DHT_Read_Data();
 8000192:	f000 f9f1 	bl	8000578 <DHT_Read_Data>
 8000196:	4603      	mov	r3, r0
 8000198:	461a      	mov	r2, r3
 800019a:	4b16      	ldr	r3, [pc, #88]	; (80001f4 <main+0xa8>)
 800019c:	701a      	strb	r2, [r3, #0]
			dec_T	 = DHT_Read_Data();
 800019e:	f000 f9eb 	bl	8000578 <DHT_Read_Data>
 80001a2:	4603      	mov	r3, r0
 80001a4:	461a      	mov	r2, r3
 80001a6:	4b14      	ldr	r3, [pc, #80]	; (80001f8 <main+0xac>)
 80001a8:	701a      	strb	r2, [r3, #0]
			Check_Sum = DHT_Read_Data();
 80001aa:	f000 f9e5 	bl	8000578 <DHT_Read_Data>
 80001ae:	4603      	mov	r3, r0
 80001b0:	461a      	mov	r2, r3
 80001b2:	4b12      	ldr	r3, [pc, #72]	; (80001fc <main+0xb0>)
 80001b4:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80001b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001ba:	4811      	ldr	r0, [pc, #68]	; (8000200 <main+0xb4>)
 80001bc:	f000 fed7 	bl	8000f6e <HAL_GPIO_TogglePin>
			printf("nhiet do: %d\r\n", int_RH);
 80001c0:	4b0a      	ldr	r3, [pc, #40]	; (80001ec <main+0xa0>)
 80001c2:	781b      	ldrb	r3, [r3, #0]
 80001c4:	4619      	mov	r1, r3
 80001c6:	480f      	ldr	r0, [pc, #60]	; (8000204 <main+0xb8>)
 80001c8:	f001 ff84 	bl	80020d4 <iprintf>
			printf("Do am: %d\r\n", int_T);
 80001cc:	4b09      	ldr	r3, [pc, #36]	; (80001f4 <main+0xa8>)
 80001ce:	781b      	ldrb	r3, [r3, #0]
 80001d0:	4619      	mov	r1, r3
 80001d2:	480d      	ldr	r0, [pc, #52]	; (8000208 <main+0xbc>)
 80001d4:	f001 ff7e 	bl	80020d4 <iprintf>
//			temp1 = (int_T/10)+48;
//			temp2 = (int_T-(temp1-48)*10)+48;
//			HAL_UART_Transmit(&huart1,&temp1,1,1000);
//			HAL_UART_Transmit(&huart1,&temp2,1,1000);
//			char str[]="\r\n"; HAL_UART_Transmit(&huart1,(uint8_t *)&str,sizeof(str),1000);
			HAL_Delay(2000);
 80001d8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80001dc:	f000 fc38 	bl	8000a50 <HAL_Delay>
			DHT_Start();
 80001e0:	e7c3      	b.n	800016a <main+0x1e>
 80001e2:	bf00      	nop
 80001e4:	2000009c 	.word	0x2000009c
 80001e8:	20000098 	.word	0x20000098
 80001ec:	20000121 	.word	0x20000121
 80001f0:	200000dc 	.word	0x200000dc
 80001f4:	20000120 	.word	0x20000120
 80001f8:	200000dd 	.word	0x200000dd
 80001fc:	20000099 	.word	0x20000099
 8000200:	40010c00 	.word	0x40010c00
 8000204:	08002ec8 	.word	0x08002ec8
 8000208:	08002ed8 	.word	0x08002ed8

0800020c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	b090      	sub	sp, #64	; 0x40
 8000210:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000212:	f107 0318 	add.w	r3, r7, #24
 8000216:	2228      	movs	r2, #40	; 0x28
 8000218:	2100      	movs	r1, #0
 800021a:	4618      	mov	r0, r3
 800021c:	f001 ff52 	bl	80020c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000220:	1d3b      	adds	r3, r7, #4
 8000222:	2200      	movs	r2, #0
 8000224:	601a      	str	r2, [r3, #0]
 8000226:	605a      	str	r2, [r3, #4]
 8000228:	609a      	str	r2, [r3, #8]
 800022a:	60da      	str	r2, [r3, #12]
 800022c:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800022e:	2301      	movs	r3, #1
 8000230:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000232:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000236:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000238:	2300      	movs	r3, #0
 800023a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800023c:	2301      	movs	r3, #1
 800023e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000240:	2302      	movs	r3, #2
 8000242:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000244:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000248:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800024a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800024e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000250:	f107 0318 	add.w	r3, r7, #24
 8000254:	4618      	mov	r0, r3
 8000256:	f000 fea3 	bl	8000fa0 <HAL_RCC_OscConfig>
 800025a:	4603      	mov	r3, r0
 800025c:	2b00      	cmp	r3, #0
 800025e:	d001      	beq.n	8000264 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000260:	f000 f9d8 	bl	8000614 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000264:	230f      	movs	r3, #15
 8000266:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000268:	2302      	movs	r3, #2
 800026a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800026c:	2300      	movs	r3, #0
 800026e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000270:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000274:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000276:	2300      	movs	r3, #0
 8000278:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800027a:	1d3b      	adds	r3, r7, #4
 800027c:	2102      	movs	r1, #2
 800027e:	4618      	mov	r0, r3
 8000280:	f001 f90e 	bl	80014a0 <HAL_RCC_ClockConfig>
 8000284:	4603      	mov	r3, r0
 8000286:	2b00      	cmp	r3, #0
 8000288:	d001      	beq.n	800028e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800028a:	f000 f9c3 	bl	8000614 <Error_Handler>
  }
}
 800028e:	bf00      	nop
 8000290:	3740      	adds	r7, #64	; 0x40
 8000292:	46bd      	mov	sp, r7
 8000294:	bd80      	pop	{r7, pc}
	...

08000298 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b086      	sub	sp, #24
 800029c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */
  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800029e:	f107 0308 	add.w	r3, r7, #8
 80002a2:	2200      	movs	r2, #0
 80002a4:	601a      	str	r2, [r3, #0]
 80002a6:	605a      	str	r2, [r3, #4]
 80002a8:	609a      	str	r2, [r3, #8]
 80002aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002ac:	463b      	mov	r3, r7
 80002ae:	2200      	movs	r2, #0
 80002b0:	601a      	str	r2, [r3, #0]
 80002b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */
  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80002b4:	4b1e      	ldr	r3, [pc, #120]	; (8000330 <MX_TIM4_Init+0x98>)
 80002b6:	4a1f      	ldr	r2, [pc, #124]	; (8000334 <MX_TIM4_Init+0x9c>)
 80002b8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 80002ba:	4b1d      	ldr	r3, [pc, #116]	; (8000330 <MX_TIM4_Init+0x98>)
 80002bc:	2247      	movs	r2, #71	; 0x47
 80002be:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002c0:	4b1b      	ldr	r3, [pc, #108]	; (8000330 <MX_TIM4_Init+0x98>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xffff-1;
 80002c6:	4b1a      	ldr	r3, [pc, #104]	; (8000330 <MX_TIM4_Init+0x98>)
 80002c8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80002cc:	60da      	str	r2, [r3, #12]
  htim4.Init.RepetitionCounter = 0;
 80002ce:	4b18      	ldr	r3, [pc, #96]	; (8000330 <MX_TIM4_Init+0x98>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	615a      	str	r2, [r3, #20]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002d4:	4b16      	ldr	r3, [pc, #88]	; (8000330 <MX_TIM4_Init+0x98>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002da:	4b15      	ldr	r3, [pc, #84]	; (8000330 <MX_TIM4_Init+0x98>)
 80002dc:	2200      	movs	r2, #0
 80002de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80002e0:	4813      	ldr	r0, [pc, #76]	; (8000330 <MX_TIM4_Init+0x98>)
 80002e2:	f001 fa79 	bl	80017d8 <HAL_TIM_Base_Init>
 80002e6:	4603      	mov	r3, r0
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d001      	beq.n	80002f0 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80002ec:	f000 f992 	bl	8000614 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80002f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80002f6:	f107 0308 	add.w	r3, r7, #8
 80002fa:	4619      	mov	r1, r3
 80002fc:	480c      	ldr	r0, [pc, #48]	; (8000330 <MX_TIM4_Init+0x98>)
 80002fe:	f001 fab9 	bl	8001874 <HAL_TIM_ConfigClockSource>
 8000302:	4603      	mov	r3, r0
 8000304:	2b00      	cmp	r3, #0
 8000306:	d001      	beq.n	800030c <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 8000308:	f000 f984 	bl	8000614 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800030c:	2300      	movs	r3, #0
 800030e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000310:	2300      	movs	r3, #0
 8000312:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000314:	463b      	mov	r3, r7
 8000316:	4619      	mov	r1, r3
 8000318:	4805      	ldr	r0, [pc, #20]	; (8000330 <MX_TIM4_Init+0x98>)
 800031a:	f001 fc5b 	bl	8001bd4 <HAL_TIMEx_MasterConfigSynchronization>
 800031e:	4603      	mov	r3, r0
 8000320:	2b00      	cmp	r3, #0
 8000322:	d001      	beq.n	8000328 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8000324:	f000 f976 	bl	8000614 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  /* USER CODE END TIM4_Init 2 */

}
 8000328:	bf00      	nop
 800032a:	3718      	adds	r7, #24
 800032c:	46bd      	mov	sp, r7
 800032e:	bd80      	pop	{r7, pc}
 8000330:	2000009c 	.word	0x2000009c
 8000334:	40000800 	.word	0x40000800

08000338 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_Init 0 */
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */
  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800033c:	4b11      	ldr	r3, [pc, #68]	; (8000384 <MX_USART1_UART_Init+0x4c>)
 800033e:	4a12      	ldr	r2, [pc, #72]	; (8000388 <MX_USART1_UART_Init+0x50>)
 8000340:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000342:	4b10      	ldr	r3, [pc, #64]	; (8000384 <MX_USART1_UART_Init+0x4c>)
 8000344:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000348:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800034a:	4b0e      	ldr	r3, [pc, #56]	; (8000384 <MX_USART1_UART_Init+0x4c>)
 800034c:	2200      	movs	r2, #0
 800034e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000350:	4b0c      	ldr	r3, [pc, #48]	; (8000384 <MX_USART1_UART_Init+0x4c>)
 8000352:	2200      	movs	r2, #0
 8000354:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000356:	4b0b      	ldr	r3, [pc, #44]	; (8000384 <MX_USART1_UART_Init+0x4c>)
 8000358:	2200      	movs	r2, #0
 800035a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800035c:	4b09      	ldr	r3, [pc, #36]	; (8000384 <MX_USART1_UART_Init+0x4c>)
 800035e:	220c      	movs	r2, #12
 8000360:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000362:	4b08      	ldr	r3, [pc, #32]	; (8000384 <MX_USART1_UART_Init+0x4c>)
 8000364:	2200      	movs	r2, #0
 8000366:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000368:	4b06      	ldr	r3, [pc, #24]	; (8000384 <MX_USART1_UART_Init+0x4c>)
 800036a:	2200      	movs	r2, #0
 800036c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800036e:	4805      	ldr	r0, [pc, #20]	; (8000384 <MX_USART1_UART_Init+0x4c>)
 8000370:	f001 fc74 	bl	8001c5c <HAL_UART_Init>
 8000374:	4603      	mov	r3, r0
 8000376:	2b00      	cmp	r3, #0
 8000378:	d001      	beq.n	800037e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800037a:	f000 f94b 	bl	8000614 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  /* USER CODE END USART1_Init 2 */

}
 800037e:	bf00      	nop
 8000380:	bd80      	pop	{r7, pc}
 8000382:	bf00      	nop
 8000384:	200000e0 	.word	0x200000e0
 8000388:	40013800 	.word	0x40013800

0800038c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b088      	sub	sp, #32
 8000390:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000392:	f107 0310 	add.w	r3, r7, #16
 8000396:	2200      	movs	r2, #0
 8000398:	601a      	str	r2, [r3, #0]
 800039a:	605a      	str	r2, [r3, #4]
 800039c:	609a      	str	r2, [r3, #8]
 800039e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003a0:	4b27      	ldr	r3, [pc, #156]	; (8000440 <MX_GPIO_Init+0xb4>)
 80003a2:	699b      	ldr	r3, [r3, #24]
 80003a4:	4a26      	ldr	r2, [pc, #152]	; (8000440 <MX_GPIO_Init+0xb4>)
 80003a6:	f043 0320 	orr.w	r3, r3, #32
 80003aa:	6193      	str	r3, [r2, #24]
 80003ac:	4b24      	ldr	r3, [pc, #144]	; (8000440 <MX_GPIO_Init+0xb4>)
 80003ae:	699b      	ldr	r3, [r3, #24]
 80003b0:	f003 0320 	and.w	r3, r3, #32
 80003b4:	60fb      	str	r3, [r7, #12]
 80003b6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003b8:	4b21      	ldr	r3, [pc, #132]	; (8000440 <MX_GPIO_Init+0xb4>)
 80003ba:	699b      	ldr	r3, [r3, #24]
 80003bc:	4a20      	ldr	r2, [pc, #128]	; (8000440 <MX_GPIO_Init+0xb4>)
 80003be:	f043 0304 	orr.w	r3, r3, #4
 80003c2:	6193      	str	r3, [r2, #24]
 80003c4:	4b1e      	ldr	r3, [pc, #120]	; (8000440 <MX_GPIO_Init+0xb4>)
 80003c6:	699b      	ldr	r3, [r3, #24]
 80003c8:	f003 0304 	and.w	r3, r3, #4
 80003cc:	60bb      	str	r3, [r7, #8]
 80003ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003d0:	4b1b      	ldr	r3, [pc, #108]	; (8000440 <MX_GPIO_Init+0xb4>)
 80003d2:	699b      	ldr	r3, [r3, #24]
 80003d4:	4a1a      	ldr	r2, [pc, #104]	; (8000440 <MX_GPIO_Init+0xb4>)
 80003d6:	f043 0308 	orr.w	r3, r3, #8
 80003da:	6193      	str	r3, [r2, #24]
 80003dc:	4b18      	ldr	r3, [pc, #96]	; (8000440 <MX_GPIO_Init+0xb4>)
 80003de:	699b      	ldr	r3, [r3, #24]
 80003e0:	f003 0308 	and.w	r3, r3, #8
 80003e4:	607b      	str	r3, [r7, #4]
 80003e6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_RESET);
 80003e8:	2200      	movs	r2, #0
 80003ea:	2120      	movs	r1, #32
 80003ec:	4815      	ldr	r0, [pc, #84]	; (8000444 <MX_GPIO_Init+0xb8>)
 80003ee:	f000 fda6 	bl	8000f3e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80003f2:	2200      	movs	r2, #0
 80003f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003f8:	4813      	ldr	r0, [pc, #76]	; (8000448 <MX_GPIO_Init+0xbc>)
 80003fa:	f000 fda0 	bl	8000f3e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 80003fe:	2320      	movs	r3, #32
 8000400:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000402:	2301      	movs	r3, #1
 8000404:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000406:	2300      	movs	r3, #0
 8000408:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800040a:	2302      	movs	r3, #2
 800040c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 800040e:	f107 0310 	add.w	r3, r7, #16
 8000412:	4619      	mov	r1, r3
 8000414:	480b      	ldr	r0, [pc, #44]	; (8000444 <MX_GPIO_Init+0xb8>)
 8000416:	f000 fc21 	bl	8000c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800041a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800041e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000420:	2301      	movs	r3, #1
 8000422:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000424:	2300      	movs	r3, #0
 8000426:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000428:	2302      	movs	r3, #2
 800042a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800042c:	f107 0310 	add.w	r3, r7, #16
 8000430:	4619      	mov	r1, r3
 8000432:	4805      	ldr	r0, [pc, #20]	; (8000448 <MX_GPIO_Init+0xbc>)
 8000434:	f000 fc12 	bl	8000c5c <HAL_GPIO_Init>

}
 8000438:	bf00      	nop
 800043a:	3720      	adds	r7, #32
 800043c:	46bd      	mov	sp, r7
 800043e:	bd80      	pop	{r7, pc}
 8000440:	40021000 	.word	0x40021000
 8000444:	40010800 	.word	0x40010800
 8000448:	40010c00 	.word	0x40010c00

0800044c <Delay_us>:

/* USER CODE BEGIN 4 */
void Delay_us(uint16_t time_us)
{
 800044c:	b480      	push	{r7}
 800044e:	b083      	sub	sp, #12
 8000450:	af00      	add	r7, sp, #0
 8000452:	4603      	mov	r3, r0
 8000454:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 8000456:	4b08      	ldr	r3, [pc, #32]	; (8000478 <Delay_us+0x2c>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	2200      	movs	r2, #0
 800045c:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim4) <= time_us)
 800045e:	bf00      	nop
 8000460:	4b05      	ldr	r3, [pc, #20]	; (8000478 <Delay_us+0x2c>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000466:	88fb      	ldrh	r3, [r7, #6]
 8000468:	429a      	cmp	r2, r3
 800046a:	d9f9      	bls.n	8000460 <Delay_us+0x14>
	{

	}
}
 800046c:	bf00      	nop
 800046e:	370c      	adds	r7, #12
 8000470:	46bd      	mov	sp, r7
 8000472:	bc80      	pop	{r7}
 8000474:	4770      	bx	lr
 8000476:	bf00      	nop
 8000478:	2000009c 	.word	0x2000009c

0800047c <Set_Pin_Output>:

void Set_Pin_Output(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b086      	sub	sp, #24
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
 8000484:	460b      	mov	r3, r1
 8000486:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000488:	f107 0308 	add.w	r3, r7, #8
 800048c:	2200      	movs	r2, #0
 800048e:	601a      	str	r2, [r3, #0]
 8000490:	605a      	str	r2, [r3, #4]
 8000492:	609a      	str	r2, [r3, #8]
 8000494:	60da      	str	r2, [r3, #12]

	GPIO_InitStruct.Pin = GPIO_Pin;
 8000496:	887b      	ldrh	r3, [r7, #2]
 8000498:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800049a:	2301      	movs	r3, #1
 800049c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800049e:	2300      	movs	r3, #0
 80004a0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004a2:	2302      	movs	r3, #2
 80004a4:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80004a6:	f107 0308 	add.w	r3, r7, #8
 80004aa:	4619      	mov	r1, r3
 80004ac:	6878      	ldr	r0, [r7, #4]
 80004ae:	f000 fbd5 	bl	8000c5c <HAL_GPIO_Init>
}
 80004b2:	bf00      	nop
 80004b4:	3718      	adds	r7, #24
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bd80      	pop	{r7, pc}

080004ba <Set_Pin_Input>:

void Set_Pin_Input(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80004ba:	b580      	push	{r7, lr}
 80004bc:	b086      	sub	sp, #24
 80004be:	af00      	add	r7, sp, #0
 80004c0:	6078      	str	r0, [r7, #4]
 80004c2:	460b      	mov	r3, r1
 80004c4:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c6:	f107 0308 	add.w	r3, r7, #8
 80004ca:	2200      	movs	r2, #0
 80004cc:	601a      	str	r2, [r3, #0]
 80004ce:	605a      	str	r2, [r3, #4]
 80004d0:	609a      	str	r2, [r3, #8]
 80004d2:	60da      	str	r2, [r3, #12]

	GPIO_InitStruct.Pin = GPIO_Pin;
 80004d4:	887b      	ldrh	r3, [r7, #2]
 80004d6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004d8:	2300      	movs	r3, #0
 80004da:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004dc:	2300      	movs	r3, #0
 80004de:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80004e0:	f107 0308 	add.w	r3, r7, #8
 80004e4:	4619      	mov	r1, r3
 80004e6:	6878      	ldr	r0, [r7, #4]
 80004e8:	f000 fbb8 	bl	8000c5c <HAL_GPIO_Init>
}
 80004ec:	bf00      	nop
 80004ee:	3718      	adds	r7, #24
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}

080004f4 <DHT_Start>:

void DHT_Start()
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
	Set_Pin_Output(DHT11_GPIO_Port, DHT11_Pin);
 80004f8:	2120      	movs	r1, #32
 80004fa:	4809      	ldr	r0, [pc, #36]	; (8000520 <DHT_Start+0x2c>)
 80004fc:	f7ff ffbe 	bl	800047c <Set_Pin_Output>

	HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_RESET);
 8000500:	2200      	movs	r2, #0
 8000502:	2120      	movs	r1, #32
 8000504:	4806      	ldr	r0, [pc, #24]	; (8000520 <DHT_Start+0x2c>)
 8000506:	f000 fd1a 	bl	8000f3e <HAL_GPIO_WritePin>
	Delay_us(18000);	// delay 18ms
 800050a:	f244 6050 	movw	r0, #18000	; 0x4650
 800050e:	f7ff ff9d 	bl	800044c <Delay_us>

	Set_Pin_Input(DHT11_GPIO_Port, DHT11_Pin);
 8000512:	2120      	movs	r1, #32
 8000514:	4802      	ldr	r0, [pc, #8]	; (8000520 <DHT_Start+0x2c>)
 8000516:	f7ff ffd0 	bl	80004ba <Set_Pin_Input>

}
 800051a:	bf00      	nop
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	40010800 	.word	0x40010800

08000524 <DHT_Check_Response>:

uint8_t DHT_Check_Response()
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
	uint8_t response=0;
 800052a:	2300      	movs	r3, #0
 800052c:	71fb      	strb	r3, [r7, #7]
	// wait for 40 us because length's signal is LOW 80us
	Delay_us(40);
 800052e:	2028      	movs	r0, #40	; 0x28
 8000530:	f7ff ff8c 	bl	800044c <Delay_us>
	if(!HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin))       // if LOW is ok
 8000534:	2120      	movs	r1, #32
 8000536:	480f      	ldr	r0, [pc, #60]	; (8000574 <DHT_Check_Response+0x50>)
 8000538:	f000 fcea 	bl	8000f10 <HAL_GPIO_ReadPin>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d10b      	bne.n	800055a <DHT_Check_Response+0x36>
	{
		// wait for 40 us because length's signal is LOW 80us
		Delay_us(80);
 8000542:	2050      	movs	r0, #80	; 0x50
 8000544:	f7ff ff82 	bl	800044c <Delay_us>
		if(HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin))
 8000548:	2120      	movs	r1, #32
 800054a:	480a      	ldr	r0, [pc, #40]	; (8000574 <DHT_Check_Response+0x50>)
 800054c:	f000 fce0 	bl	8000f10 <HAL_GPIO_ReadPin>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d001      	beq.n	800055a <DHT_Check_Response+0x36>
		{
			response =1;
 8000556:	2301      	movs	r3, #1
 8000558:	71fb      	strb	r3, [r7, #7]
		}
	}
	// waint Data_Pin pull LOW
	while(HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin))
 800055a:	bf00      	nop
 800055c:	2120      	movs	r1, #32
 800055e:	4805      	ldr	r0, [pc, #20]	; (8000574 <DHT_Check_Response+0x50>)
 8000560:	f000 fcd6 	bl	8000f10 <HAL_GPIO_ReadPin>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d1f8      	bne.n	800055c <DHT_Check_Response+0x38>
	{

	}
	return response;
 800056a:	79fb      	ldrb	r3, [r7, #7]
}
 800056c:	4618      	mov	r0, r3
 800056e:	3708      	adds	r7, #8
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	40010800 	.word	0x40010800

08000578 <DHT_Read_Data>:

uint8_t DHT_Read_Data()
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
	uint8_t data=0x00;
 800057e:	2300      	movs	r3, #0
 8000580:	71fb      	strb	r3, [r7, #7]
	for(int i=0; i<8; i++)
 8000582:	2300      	movs	r3, #0
 8000584:	603b      	str	r3, [r7, #0]
 8000586:	e028      	b.n	80005da <DHT_Read_Data+0x62>
	{
		// wait Data_Pin Set LOW
		while(!HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin))
 8000588:	bf00      	nop
 800058a:	2120      	movs	r1, #32
 800058c:	4817      	ldr	r0, [pc, #92]	; (80005ec <DHT_Read_Data+0x74>)
 800058e:	f000 fcbf 	bl	8000f10 <HAL_GPIO_ReadPin>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d0f8      	beq.n	800058a <DHT_Read_Data+0x12>
		{

		}
		Delay_us(40); // wait 40us between 28us and 70 us
 8000598:	2028      	movs	r0, #40	; 0x28
 800059a:	f7ff ff57 	bl	800044c <Delay_us>
		// if bit == 1
		if(HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin))
 800059e:	2120      	movs	r1, #32
 80005a0:	4812      	ldr	r0, [pc, #72]	; (80005ec <DHT_Read_Data+0x74>)
 80005a2:	f000 fcb5 	bl	8000f10 <HAL_GPIO_ReadPin>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d00b      	beq.n	80005c4 <DHT_Read_Data+0x4c>
		{
			data |= (1<<(7-i));
 80005ac:	683b      	ldr	r3, [r7, #0]
 80005ae:	f1c3 0307 	rsb	r3, r3, #7
 80005b2:	2201      	movs	r2, #1
 80005b4:	fa02 f303 	lsl.w	r3, r2, r3
 80005b8:	b25a      	sxtb	r2, r3
 80005ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005be:	4313      	orrs	r3, r2
 80005c0:	b25b      	sxtb	r3, r3
 80005c2:	71fb      	strb	r3, [r7, #7]
		}
		else
		{

		}
		while ((HAL_GPIO_ReadPin (DHT11_GPIO_Port, DHT11_Pin)));  // wait for the pin to go low
 80005c4:	bf00      	nop
 80005c6:	2120      	movs	r1, #32
 80005c8:	4808      	ldr	r0, [pc, #32]	; (80005ec <DHT_Read_Data+0x74>)
 80005ca:	f000 fca1 	bl	8000f10 <HAL_GPIO_ReadPin>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d1f8      	bne.n	80005c6 <DHT_Read_Data+0x4e>
	for(int i=0; i<8; i++)
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	3301      	adds	r3, #1
 80005d8:	603b      	str	r3, [r7, #0]
 80005da:	683b      	ldr	r3, [r7, #0]
 80005dc:	2b07      	cmp	r3, #7
 80005de:	ddd3      	ble.n	8000588 <DHT_Read_Data+0x10>
	}
	return data;
 80005e0:	79fb      	ldrb	r3, [r7, #7]
}
 80005e2:	4618      	mov	r0, r3
 80005e4:	3708      	adds	r7, #8
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40010800 	.word	0x40010800

080005f0 <__io_putchar>:
 * @brief Retargets the C library printf function to the USART.
 * @param None
 * @retval None
 */
PUTCHAR_PROTOTYPE
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
 /* Place your implementation of fputc here */
 /* e.g. write a character to the USART */
 HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 100);
 80005f8:	1d39      	adds	r1, r7, #4
 80005fa:	2364      	movs	r3, #100	; 0x64
 80005fc:	2201      	movs	r2, #1
 80005fe:	4804      	ldr	r0, [pc, #16]	; (8000610 <__io_putchar+0x20>)
 8000600:	f001 fb79 	bl	8001cf6 <HAL_UART_Transmit>
 return ch;
 8000604:	687b      	ldr	r3, [r7, #4]
}
 8000606:	4618      	mov	r0, r3
 8000608:	3708      	adds	r7, #8
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	200000e0 	.word	0x200000e0

08000614 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8000618:	bf00      	nop
 800061a:	46bd      	mov	sp, r7
 800061c:	bc80      	pop	{r7}
 800061e:	4770      	bx	lr

08000620 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000620:	b480      	push	{r7}
 8000622:	b085      	sub	sp, #20
 8000624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000626:	4b15      	ldr	r3, [pc, #84]	; (800067c <HAL_MspInit+0x5c>)
 8000628:	699b      	ldr	r3, [r3, #24]
 800062a:	4a14      	ldr	r2, [pc, #80]	; (800067c <HAL_MspInit+0x5c>)
 800062c:	f043 0301 	orr.w	r3, r3, #1
 8000630:	6193      	str	r3, [r2, #24]
 8000632:	4b12      	ldr	r3, [pc, #72]	; (800067c <HAL_MspInit+0x5c>)
 8000634:	699b      	ldr	r3, [r3, #24]
 8000636:	f003 0301 	and.w	r3, r3, #1
 800063a:	60bb      	str	r3, [r7, #8]
 800063c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800063e:	4b0f      	ldr	r3, [pc, #60]	; (800067c <HAL_MspInit+0x5c>)
 8000640:	69db      	ldr	r3, [r3, #28]
 8000642:	4a0e      	ldr	r2, [pc, #56]	; (800067c <HAL_MspInit+0x5c>)
 8000644:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000648:	61d3      	str	r3, [r2, #28]
 800064a:	4b0c      	ldr	r3, [pc, #48]	; (800067c <HAL_MspInit+0x5c>)
 800064c:	69db      	ldr	r3, [r3, #28]
 800064e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000656:	4b0a      	ldr	r3, [pc, #40]	; (8000680 <HAL_MspInit+0x60>)
 8000658:	685b      	ldr	r3, [r3, #4]
 800065a:	60fb      	str	r3, [r7, #12]
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000662:	60fb      	str	r3, [r7, #12]
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800066a:	60fb      	str	r3, [r7, #12]
 800066c:	4a04      	ldr	r2, [pc, #16]	; (8000680 <HAL_MspInit+0x60>)
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000672:	bf00      	nop
 8000674:	3714      	adds	r7, #20
 8000676:	46bd      	mov	sp, r7
 8000678:	bc80      	pop	{r7}
 800067a:	4770      	bx	lr
 800067c:	40021000 	.word	0x40021000
 8000680:	40010000 	.word	0x40010000

08000684 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000684:	b480      	push	{r7}
 8000686:	b085      	sub	sp, #20
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a09      	ldr	r2, [pc, #36]	; (80006b8 <HAL_TIM_Base_MspInit+0x34>)
 8000692:	4293      	cmp	r3, r2
 8000694:	d10b      	bne.n	80006ae <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000696:	4b09      	ldr	r3, [pc, #36]	; (80006bc <HAL_TIM_Base_MspInit+0x38>)
 8000698:	69db      	ldr	r3, [r3, #28]
 800069a:	4a08      	ldr	r2, [pc, #32]	; (80006bc <HAL_TIM_Base_MspInit+0x38>)
 800069c:	f043 0304 	orr.w	r3, r3, #4
 80006a0:	61d3      	str	r3, [r2, #28]
 80006a2:	4b06      	ldr	r3, [pc, #24]	; (80006bc <HAL_TIM_Base_MspInit+0x38>)
 80006a4:	69db      	ldr	r3, [r3, #28]
 80006a6:	f003 0304 	and.w	r3, r3, #4
 80006aa:	60fb      	str	r3, [r7, #12]
 80006ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80006ae:	bf00      	nop
 80006b0:	3714      	adds	r7, #20
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bc80      	pop	{r7}
 80006b6:	4770      	bx	lr
 80006b8:	40000800 	.word	0x40000800
 80006bc:	40021000 	.word	0x40021000

080006c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b088      	sub	sp, #32
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c8:	f107 0310 	add.w	r3, r7, #16
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	4a1c      	ldr	r2, [pc, #112]	; (800074c <HAL_UART_MspInit+0x8c>)
 80006dc:	4293      	cmp	r3, r2
 80006de:	d131      	bne.n	8000744 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80006e0:	4b1b      	ldr	r3, [pc, #108]	; (8000750 <HAL_UART_MspInit+0x90>)
 80006e2:	699b      	ldr	r3, [r3, #24]
 80006e4:	4a1a      	ldr	r2, [pc, #104]	; (8000750 <HAL_UART_MspInit+0x90>)
 80006e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ea:	6193      	str	r3, [r2, #24]
 80006ec:	4b18      	ldr	r3, [pc, #96]	; (8000750 <HAL_UART_MspInit+0x90>)
 80006ee:	699b      	ldr	r3, [r3, #24]
 80006f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006f4:	60fb      	str	r3, [r7, #12]
 80006f6:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f8:	4b15      	ldr	r3, [pc, #84]	; (8000750 <HAL_UART_MspInit+0x90>)
 80006fa:	699b      	ldr	r3, [r3, #24]
 80006fc:	4a14      	ldr	r2, [pc, #80]	; (8000750 <HAL_UART_MspInit+0x90>)
 80006fe:	f043 0304 	orr.w	r3, r3, #4
 8000702:	6193      	str	r3, [r2, #24]
 8000704:	4b12      	ldr	r3, [pc, #72]	; (8000750 <HAL_UART_MspInit+0x90>)
 8000706:	699b      	ldr	r3, [r3, #24]
 8000708:	f003 0304 	and.w	r3, r3, #4
 800070c:	60bb      	str	r3, [r7, #8]
 800070e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000710:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000714:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000716:	2302      	movs	r3, #2
 8000718:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800071a:	2303      	movs	r3, #3
 800071c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800071e:	f107 0310 	add.w	r3, r7, #16
 8000722:	4619      	mov	r1, r3
 8000724:	480b      	ldr	r0, [pc, #44]	; (8000754 <HAL_UART_MspInit+0x94>)
 8000726:	f000 fa99 	bl	8000c5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800072a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800072e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000730:	2300      	movs	r3, #0
 8000732:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000734:	2300      	movs	r3, #0
 8000736:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000738:	f107 0310 	add.w	r3, r7, #16
 800073c:	4619      	mov	r1, r3
 800073e:	4805      	ldr	r0, [pc, #20]	; (8000754 <HAL_UART_MspInit+0x94>)
 8000740:	f000 fa8c 	bl	8000c5c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000744:	bf00      	nop
 8000746:	3720      	adds	r7, #32
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	40013800 	.word	0x40013800
 8000750:	40021000 	.word	0x40021000
 8000754:	40010800 	.word	0x40010800

08000758 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800075c:	bf00      	nop
 800075e:	46bd      	mov	sp, r7
 8000760:	bc80      	pop	{r7}
 8000762:	4770      	bx	lr

08000764 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000768:	e7fe      	b.n	8000768 <HardFault_Handler+0x4>

0800076a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800076a:	b480      	push	{r7}
 800076c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800076e:	e7fe      	b.n	800076e <MemManage_Handler+0x4>

08000770 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000774:	e7fe      	b.n	8000774 <BusFault_Handler+0x4>

08000776 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000776:	b480      	push	{r7}
 8000778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800077a:	e7fe      	b.n	800077a <UsageFault_Handler+0x4>

0800077c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000780:	bf00      	nop
 8000782:	46bd      	mov	sp, r7
 8000784:	bc80      	pop	{r7}
 8000786:	4770      	bx	lr

08000788 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800078c:	bf00      	nop
 800078e:	46bd      	mov	sp, r7
 8000790:	bc80      	pop	{r7}
 8000792:	4770      	bx	lr

08000794 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000798:	bf00      	nop
 800079a:	46bd      	mov	sp, r7
 800079c:	bc80      	pop	{r7}
 800079e:	4770      	bx	lr

080007a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007a4:	f000 f938 	bl	8000a18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007a8:	bf00      	nop
 80007aa:	bd80      	pop	{r7, pc}

080007ac <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b086      	sub	sp, #24
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	60f8      	str	r0, [r7, #12]
 80007b4:	60b9      	str	r1, [r7, #8]
 80007b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007b8:	2300      	movs	r3, #0
 80007ba:	617b      	str	r3, [r7, #20]
 80007bc:	e00a      	b.n	80007d4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80007be:	f3af 8000 	nop.w
 80007c2:	4601      	mov	r1, r0
 80007c4:	68bb      	ldr	r3, [r7, #8]
 80007c6:	1c5a      	adds	r2, r3, #1
 80007c8:	60ba      	str	r2, [r7, #8]
 80007ca:	b2ca      	uxtb	r2, r1
 80007cc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007ce:	697b      	ldr	r3, [r7, #20]
 80007d0:	3301      	adds	r3, #1
 80007d2:	617b      	str	r3, [r7, #20]
 80007d4:	697a      	ldr	r2, [r7, #20]
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	429a      	cmp	r2, r3
 80007da:	dbf0      	blt.n	80007be <_read+0x12>
	}

return len;
 80007dc:	687b      	ldr	r3, [r7, #4]
}
 80007de:	4618      	mov	r0, r3
 80007e0:	3718      	adds	r7, #24
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}

080007e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80007e6:	b580      	push	{r7, lr}
 80007e8:	b086      	sub	sp, #24
 80007ea:	af00      	add	r7, sp, #0
 80007ec:	60f8      	str	r0, [r7, #12]
 80007ee:	60b9      	str	r1, [r7, #8]
 80007f0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007f2:	2300      	movs	r3, #0
 80007f4:	617b      	str	r3, [r7, #20]
 80007f6:	e009      	b.n	800080c <_write+0x26>
	{
		__io_putchar(*ptr++);
 80007f8:	68bb      	ldr	r3, [r7, #8]
 80007fa:	1c5a      	adds	r2, r3, #1
 80007fc:	60ba      	str	r2, [r7, #8]
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	4618      	mov	r0, r3
 8000802:	f7ff fef5 	bl	80005f0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000806:	697b      	ldr	r3, [r7, #20]
 8000808:	3301      	adds	r3, #1
 800080a:	617b      	str	r3, [r7, #20]
 800080c:	697a      	ldr	r2, [r7, #20]
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	429a      	cmp	r2, r3
 8000812:	dbf1      	blt.n	80007f8 <_write+0x12>
	}
	return len;
 8000814:	687b      	ldr	r3, [r7, #4]
}
 8000816:	4618      	mov	r0, r3
 8000818:	3718      	adds	r7, #24
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}

0800081e <_close>:

int _close(int file)
{
 800081e:	b480      	push	{r7}
 8000820:	b083      	sub	sp, #12
 8000822:	af00      	add	r7, sp, #0
 8000824:	6078      	str	r0, [r7, #4]
	return -1;
 8000826:	f04f 33ff 	mov.w	r3, #4294967295
}
 800082a:	4618      	mov	r0, r3
 800082c:	370c      	adds	r7, #12
 800082e:	46bd      	mov	sp, r7
 8000830:	bc80      	pop	{r7}
 8000832:	4770      	bx	lr

08000834 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
 800083c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000844:	605a      	str	r2, [r3, #4]
	return 0;
 8000846:	2300      	movs	r3, #0
}
 8000848:	4618      	mov	r0, r3
 800084a:	370c      	adds	r7, #12
 800084c:	46bd      	mov	sp, r7
 800084e:	bc80      	pop	{r7}
 8000850:	4770      	bx	lr

08000852 <_isatty>:

int _isatty(int file)
{
 8000852:	b480      	push	{r7}
 8000854:	b083      	sub	sp, #12
 8000856:	af00      	add	r7, sp, #0
 8000858:	6078      	str	r0, [r7, #4]
	return 1;
 800085a:	2301      	movs	r3, #1
}
 800085c:	4618      	mov	r0, r3
 800085e:	370c      	adds	r7, #12
 8000860:	46bd      	mov	sp, r7
 8000862:	bc80      	pop	{r7}
 8000864:	4770      	bx	lr

08000866 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000866:	b480      	push	{r7}
 8000868:	b085      	sub	sp, #20
 800086a:	af00      	add	r7, sp, #0
 800086c:	60f8      	str	r0, [r7, #12]
 800086e:	60b9      	str	r1, [r7, #8]
 8000870:	607a      	str	r2, [r7, #4]
	return 0;
 8000872:	2300      	movs	r3, #0
}
 8000874:	4618      	mov	r0, r3
 8000876:	3714      	adds	r7, #20
 8000878:	46bd      	mov	sp, r7
 800087a:	bc80      	pop	{r7}
 800087c:	4770      	bx	lr
	...

08000880 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b084      	sub	sp, #16
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000888:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <_sbrk+0x50>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d102      	bne.n	8000896 <_sbrk+0x16>
		heap_end = &end;
 8000890:	4b0f      	ldr	r3, [pc, #60]	; (80008d0 <_sbrk+0x50>)
 8000892:	4a10      	ldr	r2, [pc, #64]	; (80008d4 <_sbrk+0x54>)
 8000894:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000896:	4b0e      	ldr	r3, [pc, #56]	; (80008d0 <_sbrk+0x50>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800089c:	4b0c      	ldr	r3, [pc, #48]	; (80008d0 <_sbrk+0x50>)
 800089e:	681a      	ldr	r2, [r3, #0]
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	4413      	add	r3, r2
 80008a4:	466a      	mov	r2, sp
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d907      	bls.n	80008ba <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80008aa:	f001 fbe1 	bl	8002070 <__errno>
 80008ae:	4602      	mov	r2, r0
 80008b0:	230c      	movs	r3, #12
 80008b2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80008b4:	f04f 33ff 	mov.w	r3, #4294967295
 80008b8:	e006      	b.n	80008c8 <_sbrk+0x48>
	}

	heap_end += incr;
 80008ba:	4b05      	ldr	r3, [pc, #20]	; (80008d0 <_sbrk+0x50>)
 80008bc:	681a      	ldr	r2, [r3, #0]
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	4413      	add	r3, r2
 80008c2:	4a03      	ldr	r2, [pc, #12]	; (80008d0 <_sbrk+0x50>)
 80008c4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80008c6:	68fb      	ldr	r3, [r7, #12]
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3710      	adds	r7, #16
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	2000008c 	.word	0x2000008c
 80008d4:	20000130 	.word	0x20000130

080008d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80008dc:	4b15      	ldr	r3, [pc, #84]	; (8000934 <SystemInit+0x5c>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a14      	ldr	r2, [pc, #80]	; (8000934 <SystemInit+0x5c>)
 80008e2:	f043 0301 	orr.w	r3, r3, #1
 80008e6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80008e8:	4b12      	ldr	r3, [pc, #72]	; (8000934 <SystemInit+0x5c>)
 80008ea:	685a      	ldr	r2, [r3, #4]
 80008ec:	4911      	ldr	r1, [pc, #68]	; (8000934 <SystemInit+0x5c>)
 80008ee:	4b12      	ldr	r3, [pc, #72]	; (8000938 <SystemInit+0x60>)
 80008f0:	4013      	ands	r3, r2
 80008f2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80008f4:	4b0f      	ldr	r3, [pc, #60]	; (8000934 <SystemInit+0x5c>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a0e      	ldr	r2, [pc, #56]	; (8000934 <SystemInit+0x5c>)
 80008fa:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80008fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000902:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000904:	4b0b      	ldr	r3, [pc, #44]	; (8000934 <SystemInit+0x5c>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a0a      	ldr	r2, [pc, #40]	; (8000934 <SystemInit+0x5c>)
 800090a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800090e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000910:	4b08      	ldr	r3, [pc, #32]	; (8000934 <SystemInit+0x5c>)
 8000912:	685b      	ldr	r3, [r3, #4]
 8000914:	4a07      	ldr	r2, [pc, #28]	; (8000934 <SystemInit+0x5c>)
 8000916:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800091a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800091c:	4b05      	ldr	r3, [pc, #20]	; (8000934 <SystemInit+0x5c>)
 800091e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000922:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000924:	4b05      	ldr	r3, [pc, #20]	; (800093c <SystemInit+0x64>)
 8000926:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800092a:	609a      	str	r2, [r3, #8]
#endif 
}
 800092c:	bf00      	nop
 800092e:	46bd      	mov	sp, r7
 8000930:	bc80      	pop	{r7}
 8000932:	4770      	bx	lr
 8000934:	40021000 	.word	0x40021000
 8000938:	f8ff0000 	.word	0xf8ff0000
 800093c:	e000ed00 	.word	0xe000ed00

08000940 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000940:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000942:	e003      	b.n	800094c <LoopCopyDataInit>

08000944 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000944:	4b0b      	ldr	r3, [pc, #44]	; (8000974 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000946:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000948:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800094a:	3104      	adds	r1, #4

0800094c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800094c:	480a      	ldr	r0, [pc, #40]	; (8000978 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800094e:	4b0b      	ldr	r3, [pc, #44]	; (800097c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000950:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000952:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000954:	d3f6      	bcc.n	8000944 <CopyDataInit>
  ldr r2, =_sbss
 8000956:	4a0a      	ldr	r2, [pc, #40]	; (8000980 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000958:	e002      	b.n	8000960 <LoopFillZerobss>

0800095a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800095a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800095c:	f842 3b04 	str.w	r3, [r2], #4

08000960 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000960:	4b08      	ldr	r3, [pc, #32]	; (8000984 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000962:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000964:	d3f9      	bcc.n	800095a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000966:	f7ff ffb7 	bl	80008d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800096a:	f001 fb87 	bl	800207c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800096e:	f7ff fbed 	bl	800014c <main>
  bx lr
 8000972:	4770      	bx	lr
  ldr r3, =_sidata
 8000974:	08002fb0 	.word	0x08002fb0
  ldr r0, =_sdata
 8000978:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800097c:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8000980:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8000984:	2000012c 	.word	0x2000012c

08000988 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000988:	e7fe      	b.n	8000988 <ADC1_2_IRQHandler>
	...

0800098c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000990:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <HAL_Init+0x28>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a07      	ldr	r2, [pc, #28]	; (80009b4 <HAL_Init+0x28>)
 8000996:	f043 0310 	orr.w	r3, r3, #16
 800099a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800099c:	2003      	movs	r0, #3
 800099e:	f000 f929 	bl	8000bf4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009a2:	2000      	movs	r0, #0
 80009a4:	f000 f808 	bl	80009b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009a8:	f7ff fe3a 	bl	8000620 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009ac:	2300      	movs	r3, #0
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40022000 	.word	0x40022000

080009b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009c0:	4b12      	ldr	r3, [pc, #72]	; (8000a0c <HAL_InitTick+0x54>)
 80009c2:	681a      	ldr	r2, [r3, #0]
 80009c4:	4b12      	ldr	r3, [pc, #72]	; (8000a10 <HAL_InitTick+0x58>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	4619      	mov	r1, r3
 80009ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80009d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009d6:	4618      	mov	r0, r3
 80009d8:	f000 f933 	bl	8000c42 <HAL_SYSTICK_Config>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009e2:	2301      	movs	r3, #1
 80009e4:	e00e      	b.n	8000a04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	2b0f      	cmp	r3, #15
 80009ea:	d80a      	bhi.n	8000a02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009ec:	2200      	movs	r2, #0
 80009ee:	6879      	ldr	r1, [r7, #4]
 80009f0:	f04f 30ff 	mov.w	r0, #4294967295
 80009f4:	f000 f909 	bl	8000c0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009f8:	4a06      	ldr	r2, [pc, #24]	; (8000a14 <HAL_InitTick+0x5c>)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009fe:	2300      	movs	r3, #0
 8000a00:	e000      	b.n	8000a04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a02:	2301      	movs	r3, #1
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	3708      	adds	r7, #8
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	20000000 	.word	0x20000000
 8000a10:	20000008 	.word	0x20000008
 8000a14:	20000004 	.word	0x20000004

08000a18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a1c:	4b05      	ldr	r3, [pc, #20]	; (8000a34 <HAL_IncTick+0x1c>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	461a      	mov	r2, r3
 8000a22:	4b05      	ldr	r3, [pc, #20]	; (8000a38 <HAL_IncTick+0x20>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	4413      	add	r3, r2
 8000a28:	4a03      	ldr	r2, [pc, #12]	; (8000a38 <HAL_IncTick+0x20>)
 8000a2a:	6013      	str	r3, [r2, #0]
}
 8000a2c:	bf00      	nop
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bc80      	pop	{r7}
 8000a32:	4770      	bx	lr
 8000a34:	20000008 	.word	0x20000008
 8000a38:	20000124 	.word	0x20000124

08000a3c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a40:	4b02      	ldr	r3, [pc, #8]	; (8000a4c <HAL_GetTick+0x10>)
 8000a42:	681b      	ldr	r3, [r3, #0]
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bc80      	pop	{r7}
 8000a4a:	4770      	bx	lr
 8000a4c:	20000124 	.word	0x20000124

08000a50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a58:	f7ff fff0 	bl	8000a3c <HAL_GetTick>
 8000a5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a68:	d005      	beq.n	8000a76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a6a:	4b09      	ldr	r3, [pc, #36]	; (8000a90 <HAL_Delay+0x40>)
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	461a      	mov	r2, r3
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	4413      	add	r3, r2
 8000a74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a76:	bf00      	nop
 8000a78:	f7ff ffe0 	bl	8000a3c <HAL_GetTick>
 8000a7c:	4602      	mov	r2, r0
 8000a7e:	68bb      	ldr	r3, [r7, #8]
 8000a80:	1ad3      	subs	r3, r2, r3
 8000a82:	68fa      	ldr	r2, [r7, #12]
 8000a84:	429a      	cmp	r2, r3
 8000a86:	d8f7      	bhi.n	8000a78 <HAL_Delay+0x28>
  {
  }
}
 8000a88:	bf00      	nop
 8000a8a:	3710      	adds	r7, #16
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	20000008 	.word	0x20000008

08000a94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b085      	sub	sp, #20
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	f003 0307 	and.w	r3, r3, #7
 8000aa2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000aa4:	4b0c      	ldr	r3, [pc, #48]	; (8000ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8000aa6:	68db      	ldr	r3, [r3, #12]
 8000aa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aaa:	68ba      	ldr	r2, [r7, #8]
 8000aac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000abc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ac0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ac4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ac6:	4a04      	ldr	r2, [pc, #16]	; (8000ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	60d3      	str	r3, [r2, #12]
}
 8000acc:	bf00      	nop
 8000ace:	3714      	adds	r7, #20
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bc80      	pop	{r7}
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	e000ed00 	.word	0xe000ed00

08000adc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ae0:	4b04      	ldr	r3, [pc, #16]	; (8000af4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ae2:	68db      	ldr	r3, [r3, #12]
 8000ae4:	0a1b      	lsrs	r3, r3, #8
 8000ae6:	f003 0307 	and.w	r3, r3, #7
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bc80      	pop	{r7}
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	e000ed00 	.word	0xe000ed00

08000af8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4603      	mov	r3, r0
 8000b00:	6039      	str	r1, [r7, #0]
 8000b02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	db0a      	blt.n	8000b22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	b2da      	uxtb	r2, r3
 8000b10:	490c      	ldr	r1, [pc, #48]	; (8000b44 <__NVIC_SetPriority+0x4c>)
 8000b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b16:	0112      	lsls	r2, r2, #4
 8000b18:	b2d2      	uxtb	r2, r2
 8000b1a:	440b      	add	r3, r1
 8000b1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b20:	e00a      	b.n	8000b38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	b2da      	uxtb	r2, r3
 8000b26:	4908      	ldr	r1, [pc, #32]	; (8000b48 <__NVIC_SetPriority+0x50>)
 8000b28:	79fb      	ldrb	r3, [r7, #7]
 8000b2a:	f003 030f 	and.w	r3, r3, #15
 8000b2e:	3b04      	subs	r3, #4
 8000b30:	0112      	lsls	r2, r2, #4
 8000b32:	b2d2      	uxtb	r2, r2
 8000b34:	440b      	add	r3, r1
 8000b36:	761a      	strb	r2, [r3, #24]
}
 8000b38:	bf00      	nop
 8000b3a:	370c      	adds	r7, #12
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bc80      	pop	{r7}
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	e000e100 	.word	0xe000e100
 8000b48:	e000ed00 	.word	0xe000ed00

08000b4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b089      	sub	sp, #36	; 0x24
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	60f8      	str	r0, [r7, #12]
 8000b54:	60b9      	str	r1, [r7, #8]
 8000b56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	f003 0307 	and.w	r3, r3, #7
 8000b5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b60:	69fb      	ldr	r3, [r7, #28]
 8000b62:	f1c3 0307 	rsb	r3, r3, #7
 8000b66:	2b04      	cmp	r3, #4
 8000b68:	bf28      	it	cs
 8000b6a:	2304      	movcs	r3, #4
 8000b6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b6e:	69fb      	ldr	r3, [r7, #28]
 8000b70:	3304      	adds	r3, #4
 8000b72:	2b06      	cmp	r3, #6
 8000b74:	d902      	bls.n	8000b7c <NVIC_EncodePriority+0x30>
 8000b76:	69fb      	ldr	r3, [r7, #28]
 8000b78:	3b03      	subs	r3, #3
 8000b7a:	e000      	b.n	8000b7e <NVIC_EncodePriority+0x32>
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b80:	f04f 32ff 	mov.w	r2, #4294967295
 8000b84:	69bb      	ldr	r3, [r7, #24]
 8000b86:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8a:	43da      	mvns	r2, r3
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	401a      	ands	r2, r3
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b94:	f04f 31ff 	mov.w	r1, #4294967295
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b9e:	43d9      	mvns	r1, r3
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba4:	4313      	orrs	r3, r2
         );
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	3724      	adds	r7, #36	; 0x24
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bc80      	pop	{r7}
 8000bae:	4770      	bx	lr

08000bb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	3b01      	subs	r3, #1
 8000bbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bc0:	d301      	bcc.n	8000bc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	e00f      	b.n	8000be6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bc6:	4a0a      	ldr	r2, [pc, #40]	; (8000bf0 <SysTick_Config+0x40>)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	3b01      	subs	r3, #1
 8000bcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bce:	210f      	movs	r1, #15
 8000bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd4:	f7ff ff90 	bl	8000af8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bd8:	4b05      	ldr	r3, [pc, #20]	; (8000bf0 <SysTick_Config+0x40>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bde:	4b04      	ldr	r3, [pc, #16]	; (8000bf0 <SysTick_Config+0x40>)
 8000be0:	2207      	movs	r2, #7
 8000be2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000be4:	2300      	movs	r3, #0
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	e000e010 	.word	0xe000e010

08000bf4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bfc:	6878      	ldr	r0, [r7, #4]
 8000bfe:	f7ff ff49 	bl	8000a94 <__NVIC_SetPriorityGrouping>
}
 8000c02:	bf00      	nop
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}

08000c0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	b086      	sub	sp, #24
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	4603      	mov	r3, r0
 8000c12:	60b9      	str	r1, [r7, #8]
 8000c14:	607a      	str	r2, [r7, #4]
 8000c16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c1c:	f7ff ff5e 	bl	8000adc <__NVIC_GetPriorityGrouping>
 8000c20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c22:	687a      	ldr	r2, [r7, #4]
 8000c24:	68b9      	ldr	r1, [r7, #8]
 8000c26:	6978      	ldr	r0, [r7, #20]
 8000c28:	f7ff ff90 	bl	8000b4c <NVIC_EncodePriority>
 8000c2c:	4602      	mov	r2, r0
 8000c2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c32:	4611      	mov	r1, r2
 8000c34:	4618      	mov	r0, r3
 8000c36:	f7ff ff5f 	bl	8000af8 <__NVIC_SetPriority>
}
 8000c3a:	bf00      	nop
 8000c3c:	3718      	adds	r7, #24
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}

08000c42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c42:	b580      	push	{r7, lr}
 8000c44:	b082      	sub	sp, #8
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c4a:	6878      	ldr	r0, [r7, #4]
 8000c4c:	f7ff ffb0 	bl	8000bb0 <SysTick_Config>
 8000c50:	4603      	mov	r3, r0
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
	...

08000c5c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b08b      	sub	sp, #44	; 0x2c
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
 8000c64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c66:	2300      	movs	r3, #0
 8000c68:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c6e:	e127      	b.n	8000ec0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c70:	2201      	movs	r2, #1
 8000c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c74:	fa02 f303 	lsl.w	r3, r2, r3
 8000c78:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	69fa      	ldr	r2, [r7, #28]
 8000c80:	4013      	ands	r3, r2
 8000c82:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c84:	69ba      	ldr	r2, [r7, #24]
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	429a      	cmp	r2, r3
 8000c8a:	f040 8116 	bne.w	8000eba <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	2b12      	cmp	r3, #18
 8000c94:	d034      	beq.n	8000d00 <HAL_GPIO_Init+0xa4>
 8000c96:	2b12      	cmp	r3, #18
 8000c98:	d80d      	bhi.n	8000cb6 <HAL_GPIO_Init+0x5a>
 8000c9a:	2b02      	cmp	r3, #2
 8000c9c:	d02b      	beq.n	8000cf6 <HAL_GPIO_Init+0x9a>
 8000c9e:	2b02      	cmp	r3, #2
 8000ca0:	d804      	bhi.n	8000cac <HAL_GPIO_Init+0x50>
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d031      	beq.n	8000d0a <HAL_GPIO_Init+0xae>
 8000ca6:	2b01      	cmp	r3, #1
 8000ca8:	d01c      	beq.n	8000ce4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000caa:	e048      	b.n	8000d3e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000cac:	2b03      	cmp	r3, #3
 8000cae:	d043      	beq.n	8000d38 <HAL_GPIO_Init+0xdc>
 8000cb0:	2b11      	cmp	r3, #17
 8000cb2:	d01b      	beq.n	8000cec <HAL_GPIO_Init+0x90>
          break;
 8000cb4:	e043      	b.n	8000d3e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000cb6:	4a89      	ldr	r2, [pc, #548]	; (8000edc <HAL_GPIO_Init+0x280>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d026      	beq.n	8000d0a <HAL_GPIO_Init+0xae>
 8000cbc:	4a87      	ldr	r2, [pc, #540]	; (8000edc <HAL_GPIO_Init+0x280>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d806      	bhi.n	8000cd0 <HAL_GPIO_Init+0x74>
 8000cc2:	4a87      	ldr	r2, [pc, #540]	; (8000ee0 <HAL_GPIO_Init+0x284>)
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d020      	beq.n	8000d0a <HAL_GPIO_Init+0xae>
 8000cc8:	4a86      	ldr	r2, [pc, #536]	; (8000ee4 <HAL_GPIO_Init+0x288>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d01d      	beq.n	8000d0a <HAL_GPIO_Init+0xae>
          break;
 8000cce:	e036      	b.n	8000d3e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000cd0:	4a85      	ldr	r2, [pc, #532]	; (8000ee8 <HAL_GPIO_Init+0x28c>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d019      	beq.n	8000d0a <HAL_GPIO_Init+0xae>
 8000cd6:	4a85      	ldr	r2, [pc, #532]	; (8000eec <HAL_GPIO_Init+0x290>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	d016      	beq.n	8000d0a <HAL_GPIO_Init+0xae>
 8000cdc:	4a84      	ldr	r2, [pc, #528]	; (8000ef0 <HAL_GPIO_Init+0x294>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d013      	beq.n	8000d0a <HAL_GPIO_Init+0xae>
          break;
 8000ce2:	e02c      	b.n	8000d3e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	68db      	ldr	r3, [r3, #12]
 8000ce8:	623b      	str	r3, [r7, #32]
          break;
 8000cea:	e028      	b.n	8000d3e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	68db      	ldr	r3, [r3, #12]
 8000cf0:	3304      	adds	r3, #4
 8000cf2:	623b      	str	r3, [r7, #32]
          break;
 8000cf4:	e023      	b.n	8000d3e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	68db      	ldr	r3, [r3, #12]
 8000cfa:	3308      	adds	r3, #8
 8000cfc:	623b      	str	r3, [r7, #32]
          break;
 8000cfe:	e01e      	b.n	8000d3e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	68db      	ldr	r3, [r3, #12]
 8000d04:	330c      	adds	r3, #12
 8000d06:	623b      	str	r3, [r7, #32]
          break;
 8000d08:	e019      	b.n	8000d3e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	689b      	ldr	r3, [r3, #8]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d102      	bne.n	8000d18 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d12:	2304      	movs	r3, #4
 8000d14:	623b      	str	r3, [r7, #32]
          break;
 8000d16:	e012      	b.n	8000d3e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	689b      	ldr	r3, [r3, #8]
 8000d1c:	2b01      	cmp	r3, #1
 8000d1e:	d105      	bne.n	8000d2c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d20:	2308      	movs	r3, #8
 8000d22:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	69fa      	ldr	r2, [r7, #28]
 8000d28:	611a      	str	r2, [r3, #16]
          break;
 8000d2a:	e008      	b.n	8000d3e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d2c:	2308      	movs	r3, #8
 8000d2e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	69fa      	ldr	r2, [r7, #28]
 8000d34:	615a      	str	r2, [r3, #20]
          break;
 8000d36:	e002      	b.n	8000d3e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	623b      	str	r3, [r7, #32]
          break;
 8000d3c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d3e:	69bb      	ldr	r3, [r7, #24]
 8000d40:	2bff      	cmp	r3, #255	; 0xff
 8000d42:	d801      	bhi.n	8000d48 <HAL_GPIO_Init+0xec>
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	e001      	b.n	8000d4c <HAL_GPIO_Init+0xf0>
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	3304      	adds	r3, #4
 8000d4c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d4e:	69bb      	ldr	r3, [r7, #24]
 8000d50:	2bff      	cmp	r3, #255	; 0xff
 8000d52:	d802      	bhi.n	8000d5a <HAL_GPIO_Init+0xfe>
 8000d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d56:	009b      	lsls	r3, r3, #2
 8000d58:	e002      	b.n	8000d60 <HAL_GPIO_Init+0x104>
 8000d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d5c:	3b08      	subs	r3, #8
 8000d5e:	009b      	lsls	r3, r3, #2
 8000d60:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	210f      	movs	r1, #15
 8000d68:	693b      	ldr	r3, [r7, #16]
 8000d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d6e:	43db      	mvns	r3, r3
 8000d70:	401a      	ands	r2, r3
 8000d72:	6a39      	ldr	r1, [r7, #32]
 8000d74:	693b      	ldr	r3, [r7, #16]
 8000d76:	fa01 f303 	lsl.w	r3, r1, r3
 8000d7a:	431a      	orrs	r2, r3
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	f000 8096 	beq.w	8000eba <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d8e:	4b59      	ldr	r3, [pc, #356]	; (8000ef4 <HAL_GPIO_Init+0x298>)
 8000d90:	699b      	ldr	r3, [r3, #24]
 8000d92:	4a58      	ldr	r2, [pc, #352]	; (8000ef4 <HAL_GPIO_Init+0x298>)
 8000d94:	f043 0301 	orr.w	r3, r3, #1
 8000d98:	6193      	str	r3, [r2, #24]
 8000d9a:	4b56      	ldr	r3, [pc, #344]	; (8000ef4 <HAL_GPIO_Init+0x298>)
 8000d9c:	699b      	ldr	r3, [r3, #24]
 8000d9e:	f003 0301 	and.w	r3, r3, #1
 8000da2:	60bb      	str	r3, [r7, #8]
 8000da4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000da6:	4a54      	ldr	r2, [pc, #336]	; (8000ef8 <HAL_GPIO_Init+0x29c>)
 8000da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000daa:	089b      	lsrs	r3, r3, #2
 8000dac:	3302      	adds	r3, #2
 8000dae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000db2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db6:	f003 0303 	and.w	r3, r3, #3
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	220f      	movs	r2, #15
 8000dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc2:	43db      	mvns	r3, r3
 8000dc4:	68fa      	ldr	r2, [r7, #12]
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4a4b      	ldr	r2, [pc, #300]	; (8000efc <HAL_GPIO_Init+0x2a0>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d013      	beq.n	8000dfa <HAL_GPIO_Init+0x19e>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4a4a      	ldr	r2, [pc, #296]	; (8000f00 <HAL_GPIO_Init+0x2a4>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d00d      	beq.n	8000df6 <HAL_GPIO_Init+0x19a>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4a49      	ldr	r2, [pc, #292]	; (8000f04 <HAL_GPIO_Init+0x2a8>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d007      	beq.n	8000df2 <HAL_GPIO_Init+0x196>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4a48      	ldr	r2, [pc, #288]	; (8000f08 <HAL_GPIO_Init+0x2ac>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d101      	bne.n	8000dee <HAL_GPIO_Init+0x192>
 8000dea:	2303      	movs	r3, #3
 8000dec:	e006      	b.n	8000dfc <HAL_GPIO_Init+0x1a0>
 8000dee:	2304      	movs	r3, #4
 8000df0:	e004      	b.n	8000dfc <HAL_GPIO_Init+0x1a0>
 8000df2:	2302      	movs	r3, #2
 8000df4:	e002      	b.n	8000dfc <HAL_GPIO_Init+0x1a0>
 8000df6:	2301      	movs	r3, #1
 8000df8:	e000      	b.n	8000dfc <HAL_GPIO_Init+0x1a0>
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000dfe:	f002 0203 	and.w	r2, r2, #3
 8000e02:	0092      	lsls	r2, r2, #2
 8000e04:	4093      	lsls	r3, r2
 8000e06:	68fa      	ldr	r2, [r7, #12]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e0c:	493a      	ldr	r1, [pc, #232]	; (8000ef8 <HAL_GPIO_Init+0x29c>)
 8000e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e10:	089b      	lsrs	r3, r3, #2
 8000e12:	3302      	adds	r3, #2
 8000e14:	68fa      	ldr	r2, [r7, #12]
 8000e16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d006      	beq.n	8000e34 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e26:	4b39      	ldr	r3, [pc, #228]	; (8000f0c <HAL_GPIO_Init+0x2b0>)
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	4938      	ldr	r1, [pc, #224]	; (8000f0c <HAL_GPIO_Init+0x2b0>)
 8000e2c:	69bb      	ldr	r3, [r7, #24]
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	600b      	str	r3, [r1, #0]
 8000e32:	e006      	b.n	8000e42 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e34:	4b35      	ldr	r3, [pc, #212]	; (8000f0c <HAL_GPIO_Init+0x2b0>)
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	69bb      	ldr	r3, [r7, #24]
 8000e3a:	43db      	mvns	r3, r3
 8000e3c:	4933      	ldr	r1, [pc, #204]	; (8000f0c <HAL_GPIO_Init+0x2b0>)
 8000e3e:	4013      	ands	r3, r2
 8000e40:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d006      	beq.n	8000e5c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e4e:	4b2f      	ldr	r3, [pc, #188]	; (8000f0c <HAL_GPIO_Init+0x2b0>)
 8000e50:	685a      	ldr	r2, [r3, #4]
 8000e52:	492e      	ldr	r1, [pc, #184]	; (8000f0c <HAL_GPIO_Init+0x2b0>)
 8000e54:	69bb      	ldr	r3, [r7, #24]
 8000e56:	4313      	orrs	r3, r2
 8000e58:	604b      	str	r3, [r1, #4]
 8000e5a:	e006      	b.n	8000e6a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e5c:	4b2b      	ldr	r3, [pc, #172]	; (8000f0c <HAL_GPIO_Init+0x2b0>)
 8000e5e:	685a      	ldr	r2, [r3, #4]
 8000e60:	69bb      	ldr	r3, [r7, #24]
 8000e62:	43db      	mvns	r3, r3
 8000e64:	4929      	ldr	r1, [pc, #164]	; (8000f0c <HAL_GPIO_Init+0x2b0>)
 8000e66:	4013      	ands	r3, r2
 8000e68:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d006      	beq.n	8000e84 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e76:	4b25      	ldr	r3, [pc, #148]	; (8000f0c <HAL_GPIO_Init+0x2b0>)
 8000e78:	689a      	ldr	r2, [r3, #8]
 8000e7a:	4924      	ldr	r1, [pc, #144]	; (8000f0c <HAL_GPIO_Init+0x2b0>)
 8000e7c:	69bb      	ldr	r3, [r7, #24]
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	608b      	str	r3, [r1, #8]
 8000e82:	e006      	b.n	8000e92 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e84:	4b21      	ldr	r3, [pc, #132]	; (8000f0c <HAL_GPIO_Init+0x2b0>)
 8000e86:	689a      	ldr	r2, [r3, #8]
 8000e88:	69bb      	ldr	r3, [r7, #24]
 8000e8a:	43db      	mvns	r3, r3
 8000e8c:	491f      	ldr	r1, [pc, #124]	; (8000f0c <HAL_GPIO_Init+0x2b0>)
 8000e8e:	4013      	ands	r3, r2
 8000e90:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d006      	beq.n	8000eac <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e9e:	4b1b      	ldr	r3, [pc, #108]	; (8000f0c <HAL_GPIO_Init+0x2b0>)
 8000ea0:	68da      	ldr	r2, [r3, #12]
 8000ea2:	491a      	ldr	r1, [pc, #104]	; (8000f0c <HAL_GPIO_Init+0x2b0>)
 8000ea4:	69bb      	ldr	r3, [r7, #24]
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	60cb      	str	r3, [r1, #12]
 8000eaa:	e006      	b.n	8000eba <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000eac:	4b17      	ldr	r3, [pc, #92]	; (8000f0c <HAL_GPIO_Init+0x2b0>)
 8000eae:	68da      	ldr	r2, [r3, #12]
 8000eb0:	69bb      	ldr	r3, [r7, #24]
 8000eb2:	43db      	mvns	r3, r3
 8000eb4:	4915      	ldr	r1, [pc, #84]	; (8000f0c <HAL_GPIO_Init+0x2b0>)
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec6:	fa22 f303 	lsr.w	r3, r2, r3
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	f47f aed0 	bne.w	8000c70 <HAL_GPIO_Init+0x14>
  }
}
 8000ed0:	bf00      	nop
 8000ed2:	372c      	adds	r7, #44	; 0x2c
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bc80      	pop	{r7}
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	10210000 	.word	0x10210000
 8000ee0:	10110000 	.word	0x10110000
 8000ee4:	10120000 	.word	0x10120000
 8000ee8:	10310000 	.word	0x10310000
 8000eec:	10320000 	.word	0x10320000
 8000ef0:	10220000 	.word	0x10220000
 8000ef4:	40021000 	.word	0x40021000
 8000ef8:	40010000 	.word	0x40010000
 8000efc:	40010800 	.word	0x40010800
 8000f00:	40010c00 	.word	0x40010c00
 8000f04:	40011000 	.word	0x40011000
 8000f08:	40011400 	.word	0x40011400
 8000f0c:	40010400 	.word	0x40010400

08000f10 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b085      	sub	sp, #20
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	460b      	mov	r3, r1
 8000f1a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	689a      	ldr	r2, [r3, #8]
 8000f20:	887b      	ldrh	r3, [r7, #2]
 8000f22:	4013      	ands	r3, r2
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d002      	beq.n	8000f2e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	73fb      	strb	r3, [r7, #15]
 8000f2c:	e001      	b.n	8000f32 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3714      	adds	r7, #20
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bc80      	pop	{r7}
 8000f3c:	4770      	bx	lr

08000f3e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	b083      	sub	sp, #12
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	6078      	str	r0, [r7, #4]
 8000f46:	460b      	mov	r3, r1
 8000f48:	807b      	strh	r3, [r7, #2]
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f4e:	787b      	ldrb	r3, [r7, #1]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d003      	beq.n	8000f5c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f54:	887a      	ldrh	r2, [r7, #2]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000f5a:	e003      	b.n	8000f64 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f5c:	887b      	ldrh	r3, [r7, #2]
 8000f5e:	041a      	lsls	r2, r3, #16
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	611a      	str	r2, [r3, #16]
}
 8000f64:	bf00      	nop
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bc80      	pop	{r7}
 8000f6c:	4770      	bx	lr

08000f6e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	b083      	sub	sp, #12
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	6078      	str	r0, [r7, #4]
 8000f76:	460b      	mov	r3, r1
 8000f78:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	68da      	ldr	r2, [r3, #12]
 8000f7e:	887b      	ldrh	r3, [r7, #2]
 8000f80:	4013      	ands	r3, r2
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d003      	beq.n	8000f8e <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f86:	887a      	ldrh	r2, [r7, #2]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8000f8c:	e002      	b.n	8000f94 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f8e:	887a      	ldrh	r2, [r7, #2]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	611a      	str	r2, [r3, #16]
}
 8000f94:	bf00      	nop
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bc80      	pop	{r7}
 8000f9c:	4770      	bx	lr
	...

08000fa0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b086      	sub	sp, #24
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d101      	bne.n	8000fb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e26c      	b.n	800148c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f003 0301 	and.w	r3, r3, #1
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	f000 8087 	beq.w	80010ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000fc0:	4b92      	ldr	r3, [pc, #584]	; (800120c <HAL_RCC_OscConfig+0x26c>)
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f003 030c 	and.w	r3, r3, #12
 8000fc8:	2b04      	cmp	r3, #4
 8000fca:	d00c      	beq.n	8000fe6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000fcc:	4b8f      	ldr	r3, [pc, #572]	; (800120c <HAL_RCC_OscConfig+0x26c>)
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f003 030c 	and.w	r3, r3, #12
 8000fd4:	2b08      	cmp	r3, #8
 8000fd6:	d112      	bne.n	8000ffe <HAL_RCC_OscConfig+0x5e>
 8000fd8:	4b8c      	ldr	r3, [pc, #560]	; (800120c <HAL_RCC_OscConfig+0x26c>)
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fe0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fe4:	d10b      	bne.n	8000ffe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fe6:	4b89      	ldr	r3, [pc, #548]	; (800120c <HAL_RCC_OscConfig+0x26c>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d06c      	beq.n	80010cc <HAL_RCC_OscConfig+0x12c>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d168      	bne.n	80010cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e246      	b.n	800148c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001006:	d106      	bne.n	8001016 <HAL_RCC_OscConfig+0x76>
 8001008:	4b80      	ldr	r3, [pc, #512]	; (800120c <HAL_RCC_OscConfig+0x26c>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a7f      	ldr	r2, [pc, #508]	; (800120c <HAL_RCC_OscConfig+0x26c>)
 800100e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001012:	6013      	str	r3, [r2, #0]
 8001014:	e02e      	b.n	8001074 <HAL_RCC_OscConfig+0xd4>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d10c      	bne.n	8001038 <HAL_RCC_OscConfig+0x98>
 800101e:	4b7b      	ldr	r3, [pc, #492]	; (800120c <HAL_RCC_OscConfig+0x26c>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a7a      	ldr	r2, [pc, #488]	; (800120c <HAL_RCC_OscConfig+0x26c>)
 8001024:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001028:	6013      	str	r3, [r2, #0]
 800102a:	4b78      	ldr	r3, [pc, #480]	; (800120c <HAL_RCC_OscConfig+0x26c>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a77      	ldr	r2, [pc, #476]	; (800120c <HAL_RCC_OscConfig+0x26c>)
 8001030:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001034:	6013      	str	r3, [r2, #0]
 8001036:	e01d      	b.n	8001074 <HAL_RCC_OscConfig+0xd4>
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001040:	d10c      	bne.n	800105c <HAL_RCC_OscConfig+0xbc>
 8001042:	4b72      	ldr	r3, [pc, #456]	; (800120c <HAL_RCC_OscConfig+0x26c>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4a71      	ldr	r2, [pc, #452]	; (800120c <HAL_RCC_OscConfig+0x26c>)
 8001048:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800104c:	6013      	str	r3, [r2, #0]
 800104e:	4b6f      	ldr	r3, [pc, #444]	; (800120c <HAL_RCC_OscConfig+0x26c>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a6e      	ldr	r2, [pc, #440]	; (800120c <HAL_RCC_OscConfig+0x26c>)
 8001054:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001058:	6013      	str	r3, [r2, #0]
 800105a:	e00b      	b.n	8001074 <HAL_RCC_OscConfig+0xd4>
 800105c:	4b6b      	ldr	r3, [pc, #428]	; (800120c <HAL_RCC_OscConfig+0x26c>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a6a      	ldr	r2, [pc, #424]	; (800120c <HAL_RCC_OscConfig+0x26c>)
 8001062:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001066:	6013      	str	r3, [r2, #0]
 8001068:	4b68      	ldr	r3, [pc, #416]	; (800120c <HAL_RCC_OscConfig+0x26c>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a67      	ldr	r2, [pc, #412]	; (800120c <HAL_RCC_OscConfig+0x26c>)
 800106e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001072:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d013      	beq.n	80010a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800107c:	f7ff fcde 	bl	8000a3c <HAL_GetTick>
 8001080:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001082:	e008      	b.n	8001096 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001084:	f7ff fcda 	bl	8000a3c <HAL_GetTick>
 8001088:	4602      	mov	r2, r0
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	2b64      	cmp	r3, #100	; 0x64
 8001090:	d901      	bls.n	8001096 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001092:	2303      	movs	r3, #3
 8001094:	e1fa      	b.n	800148c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001096:	4b5d      	ldr	r3, [pc, #372]	; (800120c <HAL_RCC_OscConfig+0x26c>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d0f0      	beq.n	8001084 <HAL_RCC_OscConfig+0xe4>
 80010a2:	e014      	b.n	80010ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010a4:	f7ff fcca 	bl	8000a3c <HAL_GetTick>
 80010a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010aa:	e008      	b.n	80010be <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010ac:	f7ff fcc6 	bl	8000a3c <HAL_GetTick>
 80010b0:	4602      	mov	r2, r0
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	2b64      	cmp	r3, #100	; 0x64
 80010b8:	d901      	bls.n	80010be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80010ba:	2303      	movs	r3, #3
 80010bc:	e1e6      	b.n	800148c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010be:	4b53      	ldr	r3, [pc, #332]	; (800120c <HAL_RCC_OscConfig+0x26c>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d1f0      	bne.n	80010ac <HAL_RCC_OscConfig+0x10c>
 80010ca:	e000      	b.n	80010ce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f003 0302 	and.w	r3, r3, #2
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d063      	beq.n	80011a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80010da:	4b4c      	ldr	r3, [pc, #304]	; (800120c <HAL_RCC_OscConfig+0x26c>)
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f003 030c 	and.w	r3, r3, #12
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d00b      	beq.n	80010fe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80010e6:	4b49      	ldr	r3, [pc, #292]	; (800120c <HAL_RCC_OscConfig+0x26c>)
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f003 030c 	and.w	r3, r3, #12
 80010ee:	2b08      	cmp	r3, #8
 80010f0:	d11c      	bne.n	800112c <HAL_RCC_OscConfig+0x18c>
 80010f2:	4b46      	ldr	r3, [pc, #280]	; (800120c <HAL_RCC_OscConfig+0x26c>)
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d116      	bne.n	800112c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010fe:	4b43      	ldr	r3, [pc, #268]	; (800120c <HAL_RCC_OscConfig+0x26c>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f003 0302 	and.w	r3, r3, #2
 8001106:	2b00      	cmp	r3, #0
 8001108:	d005      	beq.n	8001116 <HAL_RCC_OscConfig+0x176>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	691b      	ldr	r3, [r3, #16]
 800110e:	2b01      	cmp	r3, #1
 8001110:	d001      	beq.n	8001116 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	e1ba      	b.n	800148c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001116:	4b3d      	ldr	r3, [pc, #244]	; (800120c <HAL_RCC_OscConfig+0x26c>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	695b      	ldr	r3, [r3, #20]
 8001122:	00db      	lsls	r3, r3, #3
 8001124:	4939      	ldr	r1, [pc, #228]	; (800120c <HAL_RCC_OscConfig+0x26c>)
 8001126:	4313      	orrs	r3, r2
 8001128:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800112a:	e03a      	b.n	80011a2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	691b      	ldr	r3, [r3, #16]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d020      	beq.n	8001176 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001134:	4b36      	ldr	r3, [pc, #216]	; (8001210 <HAL_RCC_OscConfig+0x270>)
 8001136:	2201      	movs	r2, #1
 8001138:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800113a:	f7ff fc7f 	bl	8000a3c <HAL_GetTick>
 800113e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001140:	e008      	b.n	8001154 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001142:	f7ff fc7b 	bl	8000a3c <HAL_GetTick>
 8001146:	4602      	mov	r2, r0
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	1ad3      	subs	r3, r2, r3
 800114c:	2b02      	cmp	r3, #2
 800114e:	d901      	bls.n	8001154 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001150:	2303      	movs	r3, #3
 8001152:	e19b      	b.n	800148c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001154:	4b2d      	ldr	r3, [pc, #180]	; (800120c <HAL_RCC_OscConfig+0x26c>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f003 0302 	and.w	r3, r3, #2
 800115c:	2b00      	cmp	r3, #0
 800115e:	d0f0      	beq.n	8001142 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001160:	4b2a      	ldr	r3, [pc, #168]	; (800120c <HAL_RCC_OscConfig+0x26c>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	695b      	ldr	r3, [r3, #20]
 800116c:	00db      	lsls	r3, r3, #3
 800116e:	4927      	ldr	r1, [pc, #156]	; (800120c <HAL_RCC_OscConfig+0x26c>)
 8001170:	4313      	orrs	r3, r2
 8001172:	600b      	str	r3, [r1, #0]
 8001174:	e015      	b.n	80011a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001176:	4b26      	ldr	r3, [pc, #152]	; (8001210 <HAL_RCC_OscConfig+0x270>)
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800117c:	f7ff fc5e 	bl	8000a3c <HAL_GetTick>
 8001180:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001182:	e008      	b.n	8001196 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001184:	f7ff fc5a 	bl	8000a3c <HAL_GetTick>
 8001188:	4602      	mov	r2, r0
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	2b02      	cmp	r3, #2
 8001190:	d901      	bls.n	8001196 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001192:	2303      	movs	r3, #3
 8001194:	e17a      	b.n	800148c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001196:	4b1d      	ldr	r3, [pc, #116]	; (800120c <HAL_RCC_OscConfig+0x26c>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f003 0302 	and.w	r3, r3, #2
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d1f0      	bne.n	8001184 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f003 0308 	and.w	r3, r3, #8
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d03a      	beq.n	8001224 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	699b      	ldr	r3, [r3, #24]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d019      	beq.n	80011ea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011b6:	4b17      	ldr	r3, [pc, #92]	; (8001214 <HAL_RCC_OscConfig+0x274>)
 80011b8:	2201      	movs	r2, #1
 80011ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011bc:	f7ff fc3e 	bl	8000a3c <HAL_GetTick>
 80011c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011c2:	e008      	b.n	80011d6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011c4:	f7ff fc3a 	bl	8000a3c <HAL_GetTick>
 80011c8:	4602      	mov	r2, r0
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	2b02      	cmp	r3, #2
 80011d0:	d901      	bls.n	80011d6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80011d2:	2303      	movs	r3, #3
 80011d4:	e15a      	b.n	800148c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011d6:	4b0d      	ldr	r3, [pc, #52]	; (800120c <HAL_RCC_OscConfig+0x26c>)
 80011d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011da:	f003 0302 	and.w	r3, r3, #2
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d0f0      	beq.n	80011c4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80011e2:	2001      	movs	r0, #1
 80011e4:	f000 fada 	bl	800179c <RCC_Delay>
 80011e8:	e01c      	b.n	8001224 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011ea:	4b0a      	ldr	r3, [pc, #40]	; (8001214 <HAL_RCC_OscConfig+0x274>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011f0:	f7ff fc24 	bl	8000a3c <HAL_GetTick>
 80011f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011f6:	e00f      	b.n	8001218 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011f8:	f7ff fc20 	bl	8000a3c <HAL_GetTick>
 80011fc:	4602      	mov	r2, r0
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	2b02      	cmp	r3, #2
 8001204:	d908      	bls.n	8001218 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001206:	2303      	movs	r3, #3
 8001208:	e140      	b.n	800148c <HAL_RCC_OscConfig+0x4ec>
 800120a:	bf00      	nop
 800120c:	40021000 	.word	0x40021000
 8001210:	42420000 	.word	0x42420000
 8001214:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001218:	4b9e      	ldr	r3, [pc, #632]	; (8001494 <HAL_RCC_OscConfig+0x4f4>)
 800121a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800121c:	f003 0302 	and.w	r3, r3, #2
 8001220:	2b00      	cmp	r3, #0
 8001222:	d1e9      	bne.n	80011f8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f003 0304 	and.w	r3, r3, #4
 800122c:	2b00      	cmp	r3, #0
 800122e:	f000 80a6 	beq.w	800137e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001232:	2300      	movs	r3, #0
 8001234:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001236:	4b97      	ldr	r3, [pc, #604]	; (8001494 <HAL_RCC_OscConfig+0x4f4>)
 8001238:	69db      	ldr	r3, [r3, #28]
 800123a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800123e:	2b00      	cmp	r3, #0
 8001240:	d10d      	bne.n	800125e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001242:	4b94      	ldr	r3, [pc, #592]	; (8001494 <HAL_RCC_OscConfig+0x4f4>)
 8001244:	69db      	ldr	r3, [r3, #28]
 8001246:	4a93      	ldr	r2, [pc, #588]	; (8001494 <HAL_RCC_OscConfig+0x4f4>)
 8001248:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800124c:	61d3      	str	r3, [r2, #28]
 800124e:	4b91      	ldr	r3, [pc, #580]	; (8001494 <HAL_RCC_OscConfig+0x4f4>)
 8001250:	69db      	ldr	r3, [r3, #28]
 8001252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001256:	60bb      	str	r3, [r7, #8]
 8001258:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800125a:	2301      	movs	r3, #1
 800125c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800125e:	4b8e      	ldr	r3, [pc, #568]	; (8001498 <HAL_RCC_OscConfig+0x4f8>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001266:	2b00      	cmp	r3, #0
 8001268:	d118      	bne.n	800129c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800126a:	4b8b      	ldr	r3, [pc, #556]	; (8001498 <HAL_RCC_OscConfig+0x4f8>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a8a      	ldr	r2, [pc, #552]	; (8001498 <HAL_RCC_OscConfig+0x4f8>)
 8001270:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001274:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001276:	f7ff fbe1 	bl	8000a3c <HAL_GetTick>
 800127a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800127c:	e008      	b.n	8001290 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800127e:	f7ff fbdd 	bl	8000a3c <HAL_GetTick>
 8001282:	4602      	mov	r2, r0
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	2b64      	cmp	r3, #100	; 0x64
 800128a:	d901      	bls.n	8001290 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800128c:	2303      	movs	r3, #3
 800128e:	e0fd      	b.n	800148c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001290:	4b81      	ldr	r3, [pc, #516]	; (8001498 <HAL_RCC_OscConfig+0x4f8>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001298:	2b00      	cmp	r3, #0
 800129a:	d0f0      	beq.n	800127e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d106      	bne.n	80012b2 <HAL_RCC_OscConfig+0x312>
 80012a4:	4b7b      	ldr	r3, [pc, #492]	; (8001494 <HAL_RCC_OscConfig+0x4f4>)
 80012a6:	6a1b      	ldr	r3, [r3, #32]
 80012a8:	4a7a      	ldr	r2, [pc, #488]	; (8001494 <HAL_RCC_OscConfig+0x4f4>)
 80012aa:	f043 0301 	orr.w	r3, r3, #1
 80012ae:	6213      	str	r3, [r2, #32]
 80012b0:	e02d      	b.n	800130e <HAL_RCC_OscConfig+0x36e>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	68db      	ldr	r3, [r3, #12]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d10c      	bne.n	80012d4 <HAL_RCC_OscConfig+0x334>
 80012ba:	4b76      	ldr	r3, [pc, #472]	; (8001494 <HAL_RCC_OscConfig+0x4f4>)
 80012bc:	6a1b      	ldr	r3, [r3, #32]
 80012be:	4a75      	ldr	r2, [pc, #468]	; (8001494 <HAL_RCC_OscConfig+0x4f4>)
 80012c0:	f023 0301 	bic.w	r3, r3, #1
 80012c4:	6213      	str	r3, [r2, #32]
 80012c6:	4b73      	ldr	r3, [pc, #460]	; (8001494 <HAL_RCC_OscConfig+0x4f4>)
 80012c8:	6a1b      	ldr	r3, [r3, #32]
 80012ca:	4a72      	ldr	r2, [pc, #456]	; (8001494 <HAL_RCC_OscConfig+0x4f4>)
 80012cc:	f023 0304 	bic.w	r3, r3, #4
 80012d0:	6213      	str	r3, [r2, #32]
 80012d2:	e01c      	b.n	800130e <HAL_RCC_OscConfig+0x36e>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	2b05      	cmp	r3, #5
 80012da:	d10c      	bne.n	80012f6 <HAL_RCC_OscConfig+0x356>
 80012dc:	4b6d      	ldr	r3, [pc, #436]	; (8001494 <HAL_RCC_OscConfig+0x4f4>)
 80012de:	6a1b      	ldr	r3, [r3, #32]
 80012e0:	4a6c      	ldr	r2, [pc, #432]	; (8001494 <HAL_RCC_OscConfig+0x4f4>)
 80012e2:	f043 0304 	orr.w	r3, r3, #4
 80012e6:	6213      	str	r3, [r2, #32]
 80012e8:	4b6a      	ldr	r3, [pc, #424]	; (8001494 <HAL_RCC_OscConfig+0x4f4>)
 80012ea:	6a1b      	ldr	r3, [r3, #32]
 80012ec:	4a69      	ldr	r2, [pc, #420]	; (8001494 <HAL_RCC_OscConfig+0x4f4>)
 80012ee:	f043 0301 	orr.w	r3, r3, #1
 80012f2:	6213      	str	r3, [r2, #32]
 80012f4:	e00b      	b.n	800130e <HAL_RCC_OscConfig+0x36e>
 80012f6:	4b67      	ldr	r3, [pc, #412]	; (8001494 <HAL_RCC_OscConfig+0x4f4>)
 80012f8:	6a1b      	ldr	r3, [r3, #32]
 80012fa:	4a66      	ldr	r2, [pc, #408]	; (8001494 <HAL_RCC_OscConfig+0x4f4>)
 80012fc:	f023 0301 	bic.w	r3, r3, #1
 8001300:	6213      	str	r3, [r2, #32]
 8001302:	4b64      	ldr	r3, [pc, #400]	; (8001494 <HAL_RCC_OscConfig+0x4f4>)
 8001304:	6a1b      	ldr	r3, [r3, #32]
 8001306:	4a63      	ldr	r2, [pc, #396]	; (8001494 <HAL_RCC_OscConfig+0x4f4>)
 8001308:	f023 0304 	bic.w	r3, r3, #4
 800130c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	68db      	ldr	r3, [r3, #12]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d015      	beq.n	8001342 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001316:	f7ff fb91 	bl	8000a3c <HAL_GetTick>
 800131a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800131c:	e00a      	b.n	8001334 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800131e:	f7ff fb8d 	bl	8000a3c <HAL_GetTick>
 8001322:	4602      	mov	r2, r0
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	f241 3288 	movw	r2, #5000	; 0x1388
 800132c:	4293      	cmp	r3, r2
 800132e:	d901      	bls.n	8001334 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001330:	2303      	movs	r3, #3
 8001332:	e0ab      	b.n	800148c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001334:	4b57      	ldr	r3, [pc, #348]	; (8001494 <HAL_RCC_OscConfig+0x4f4>)
 8001336:	6a1b      	ldr	r3, [r3, #32]
 8001338:	f003 0302 	and.w	r3, r3, #2
 800133c:	2b00      	cmp	r3, #0
 800133e:	d0ee      	beq.n	800131e <HAL_RCC_OscConfig+0x37e>
 8001340:	e014      	b.n	800136c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001342:	f7ff fb7b 	bl	8000a3c <HAL_GetTick>
 8001346:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001348:	e00a      	b.n	8001360 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800134a:	f7ff fb77 	bl	8000a3c <HAL_GetTick>
 800134e:	4602      	mov	r2, r0
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	f241 3288 	movw	r2, #5000	; 0x1388
 8001358:	4293      	cmp	r3, r2
 800135a:	d901      	bls.n	8001360 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800135c:	2303      	movs	r3, #3
 800135e:	e095      	b.n	800148c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001360:	4b4c      	ldr	r3, [pc, #304]	; (8001494 <HAL_RCC_OscConfig+0x4f4>)
 8001362:	6a1b      	ldr	r3, [r3, #32]
 8001364:	f003 0302 	and.w	r3, r3, #2
 8001368:	2b00      	cmp	r3, #0
 800136a:	d1ee      	bne.n	800134a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800136c:	7dfb      	ldrb	r3, [r7, #23]
 800136e:	2b01      	cmp	r3, #1
 8001370:	d105      	bne.n	800137e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001372:	4b48      	ldr	r3, [pc, #288]	; (8001494 <HAL_RCC_OscConfig+0x4f4>)
 8001374:	69db      	ldr	r3, [r3, #28]
 8001376:	4a47      	ldr	r2, [pc, #284]	; (8001494 <HAL_RCC_OscConfig+0x4f4>)
 8001378:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800137c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	69db      	ldr	r3, [r3, #28]
 8001382:	2b00      	cmp	r3, #0
 8001384:	f000 8081 	beq.w	800148a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001388:	4b42      	ldr	r3, [pc, #264]	; (8001494 <HAL_RCC_OscConfig+0x4f4>)
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f003 030c 	and.w	r3, r3, #12
 8001390:	2b08      	cmp	r3, #8
 8001392:	d061      	beq.n	8001458 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	69db      	ldr	r3, [r3, #28]
 8001398:	2b02      	cmp	r3, #2
 800139a:	d146      	bne.n	800142a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800139c:	4b3f      	ldr	r3, [pc, #252]	; (800149c <HAL_RCC_OscConfig+0x4fc>)
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a2:	f7ff fb4b 	bl	8000a3c <HAL_GetTick>
 80013a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013a8:	e008      	b.n	80013bc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013aa:	f7ff fb47 	bl	8000a3c <HAL_GetTick>
 80013ae:	4602      	mov	r2, r0
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d901      	bls.n	80013bc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80013b8:	2303      	movs	r3, #3
 80013ba:	e067      	b.n	800148c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013bc:	4b35      	ldr	r3, [pc, #212]	; (8001494 <HAL_RCC_OscConfig+0x4f4>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d1f0      	bne.n	80013aa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6a1b      	ldr	r3, [r3, #32]
 80013cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013d0:	d108      	bne.n	80013e4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80013d2:	4b30      	ldr	r3, [pc, #192]	; (8001494 <HAL_RCC_OscConfig+0x4f4>)
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	492d      	ldr	r1, [pc, #180]	; (8001494 <HAL_RCC_OscConfig+0x4f4>)
 80013e0:	4313      	orrs	r3, r2
 80013e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013e4:	4b2b      	ldr	r3, [pc, #172]	; (8001494 <HAL_RCC_OscConfig+0x4f4>)
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6a19      	ldr	r1, [r3, #32]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f4:	430b      	orrs	r3, r1
 80013f6:	4927      	ldr	r1, [pc, #156]	; (8001494 <HAL_RCC_OscConfig+0x4f4>)
 80013f8:	4313      	orrs	r3, r2
 80013fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013fc:	4b27      	ldr	r3, [pc, #156]	; (800149c <HAL_RCC_OscConfig+0x4fc>)
 80013fe:	2201      	movs	r2, #1
 8001400:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001402:	f7ff fb1b 	bl	8000a3c <HAL_GetTick>
 8001406:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001408:	e008      	b.n	800141c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800140a:	f7ff fb17 	bl	8000a3c <HAL_GetTick>
 800140e:	4602      	mov	r2, r0
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	2b02      	cmp	r3, #2
 8001416:	d901      	bls.n	800141c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001418:	2303      	movs	r3, #3
 800141a:	e037      	b.n	800148c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800141c:	4b1d      	ldr	r3, [pc, #116]	; (8001494 <HAL_RCC_OscConfig+0x4f4>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001424:	2b00      	cmp	r3, #0
 8001426:	d0f0      	beq.n	800140a <HAL_RCC_OscConfig+0x46a>
 8001428:	e02f      	b.n	800148a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800142a:	4b1c      	ldr	r3, [pc, #112]	; (800149c <HAL_RCC_OscConfig+0x4fc>)
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001430:	f7ff fb04 	bl	8000a3c <HAL_GetTick>
 8001434:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001436:	e008      	b.n	800144a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001438:	f7ff fb00 	bl	8000a3c <HAL_GetTick>
 800143c:	4602      	mov	r2, r0
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	2b02      	cmp	r3, #2
 8001444:	d901      	bls.n	800144a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001446:	2303      	movs	r3, #3
 8001448:	e020      	b.n	800148c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800144a:	4b12      	ldr	r3, [pc, #72]	; (8001494 <HAL_RCC_OscConfig+0x4f4>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d1f0      	bne.n	8001438 <HAL_RCC_OscConfig+0x498>
 8001456:	e018      	b.n	800148a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	69db      	ldr	r3, [r3, #28]
 800145c:	2b01      	cmp	r3, #1
 800145e:	d101      	bne.n	8001464 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001460:	2301      	movs	r3, #1
 8001462:	e013      	b.n	800148c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001464:	4b0b      	ldr	r3, [pc, #44]	; (8001494 <HAL_RCC_OscConfig+0x4f4>)
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6a1b      	ldr	r3, [r3, #32]
 8001474:	429a      	cmp	r2, r3
 8001476:	d106      	bne.n	8001486 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001482:	429a      	cmp	r2, r3
 8001484:	d001      	beq.n	800148a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e000      	b.n	800148c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800148a:	2300      	movs	r3, #0
}
 800148c:	4618      	mov	r0, r3
 800148e:	3718      	adds	r7, #24
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	40021000 	.word	0x40021000
 8001498:	40007000 	.word	0x40007000
 800149c:	42420060 	.word	0x42420060

080014a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d101      	bne.n	80014b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014b0:	2301      	movs	r3, #1
 80014b2:	e0d0      	b.n	8001656 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80014b4:	4b6a      	ldr	r3, [pc, #424]	; (8001660 <HAL_RCC_ClockConfig+0x1c0>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 0307 	and.w	r3, r3, #7
 80014bc:	683a      	ldr	r2, [r7, #0]
 80014be:	429a      	cmp	r2, r3
 80014c0:	d910      	bls.n	80014e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014c2:	4b67      	ldr	r3, [pc, #412]	; (8001660 <HAL_RCC_ClockConfig+0x1c0>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f023 0207 	bic.w	r2, r3, #7
 80014ca:	4965      	ldr	r1, [pc, #404]	; (8001660 <HAL_RCC_ClockConfig+0x1c0>)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	4313      	orrs	r3, r2
 80014d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014d2:	4b63      	ldr	r3, [pc, #396]	; (8001660 <HAL_RCC_ClockConfig+0x1c0>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 0307 	and.w	r3, r3, #7
 80014da:	683a      	ldr	r2, [r7, #0]
 80014dc:	429a      	cmp	r2, r3
 80014de:	d001      	beq.n	80014e4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	e0b8      	b.n	8001656 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f003 0302 	and.w	r3, r3, #2
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d020      	beq.n	8001532 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 0304 	and.w	r3, r3, #4
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d005      	beq.n	8001508 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014fc:	4b59      	ldr	r3, [pc, #356]	; (8001664 <HAL_RCC_ClockConfig+0x1c4>)
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	4a58      	ldr	r2, [pc, #352]	; (8001664 <HAL_RCC_ClockConfig+0x1c4>)
 8001502:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001506:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f003 0308 	and.w	r3, r3, #8
 8001510:	2b00      	cmp	r3, #0
 8001512:	d005      	beq.n	8001520 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001514:	4b53      	ldr	r3, [pc, #332]	; (8001664 <HAL_RCC_ClockConfig+0x1c4>)
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	4a52      	ldr	r2, [pc, #328]	; (8001664 <HAL_RCC_ClockConfig+0x1c4>)
 800151a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800151e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001520:	4b50      	ldr	r3, [pc, #320]	; (8001664 <HAL_RCC_ClockConfig+0x1c4>)
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	494d      	ldr	r1, [pc, #308]	; (8001664 <HAL_RCC_ClockConfig+0x1c4>)
 800152e:	4313      	orrs	r3, r2
 8001530:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0301 	and.w	r3, r3, #1
 800153a:	2b00      	cmp	r3, #0
 800153c:	d040      	beq.n	80015c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	2b01      	cmp	r3, #1
 8001544:	d107      	bne.n	8001556 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001546:	4b47      	ldr	r3, [pc, #284]	; (8001664 <HAL_RCC_ClockConfig+0x1c4>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d115      	bne.n	800157e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e07f      	b.n	8001656 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	2b02      	cmp	r3, #2
 800155c:	d107      	bne.n	800156e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800155e:	4b41      	ldr	r3, [pc, #260]	; (8001664 <HAL_RCC_ClockConfig+0x1c4>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d109      	bne.n	800157e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e073      	b.n	8001656 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800156e:	4b3d      	ldr	r3, [pc, #244]	; (8001664 <HAL_RCC_ClockConfig+0x1c4>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	2b00      	cmp	r3, #0
 8001578:	d101      	bne.n	800157e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e06b      	b.n	8001656 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800157e:	4b39      	ldr	r3, [pc, #228]	; (8001664 <HAL_RCC_ClockConfig+0x1c4>)
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f023 0203 	bic.w	r2, r3, #3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	4936      	ldr	r1, [pc, #216]	; (8001664 <HAL_RCC_ClockConfig+0x1c4>)
 800158c:	4313      	orrs	r3, r2
 800158e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001590:	f7ff fa54 	bl	8000a3c <HAL_GetTick>
 8001594:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001596:	e00a      	b.n	80015ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001598:	f7ff fa50 	bl	8000a3c <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e053      	b.n	8001656 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015ae:	4b2d      	ldr	r3, [pc, #180]	; (8001664 <HAL_RCC_ClockConfig+0x1c4>)
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f003 020c 	and.w	r2, r3, #12
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	429a      	cmp	r2, r3
 80015be:	d1eb      	bne.n	8001598 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80015c0:	4b27      	ldr	r3, [pc, #156]	; (8001660 <HAL_RCC_ClockConfig+0x1c0>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 0307 	and.w	r3, r3, #7
 80015c8:	683a      	ldr	r2, [r7, #0]
 80015ca:	429a      	cmp	r2, r3
 80015cc:	d210      	bcs.n	80015f0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ce:	4b24      	ldr	r3, [pc, #144]	; (8001660 <HAL_RCC_ClockConfig+0x1c0>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f023 0207 	bic.w	r2, r3, #7
 80015d6:	4922      	ldr	r1, [pc, #136]	; (8001660 <HAL_RCC_ClockConfig+0x1c0>)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	4313      	orrs	r3, r2
 80015dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015de:	4b20      	ldr	r3, [pc, #128]	; (8001660 <HAL_RCC_ClockConfig+0x1c0>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0307 	and.w	r3, r3, #7
 80015e6:	683a      	ldr	r2, [r7, #0]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d001      	beq.n	80015f0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	e032      	b.n	8001656 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0304 	and.w	r3, r3, #4
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d008      	beq.n	800160e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015fc:	4b19      	ldr	r3, [pc, #100]	; (8001664 <HAL_RCC_ClockConfig+0x1c4>)
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	4916      	ldr	r1, [pc, #88]	; (8001664 <HAL_RCC_ClockConfig+0x1c4>)
 800160a:	4313      	orrs	r3, r2
 800160c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 0308 	and.w	r3, r3, #8
 8001616:	2b00      	cmp	r3, #0
 8001618:	d009      	beq.n	800162e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800161a:	4b12      	ldr	r3, [pc, #72]	; (8001664 <HAL_RCC_ClockConfig+0x1c4>)
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	691b      	ldr	r3, [r3, #16]
 8001626:	00db      	lsls	r3, r3, #3
 8001628:	490e      	ldr	r1, [pc, #56]	; (8001664 <HAL_RCC_ClockConfig+0x1c4>)
 800162a:	4313      	orrs	r3, r2
 800162c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800162e:	f000 f821 	bl	8001674 <HAL_RCC_GetSysClockFreq>
 8001632:	4601      	mov	r1, r0
 8001634:	4b0b      	ldr	r3, [pc, #44]	; (8001664 <HAL_RCC_ClockConfig+0x1c4>)
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	091b      	lsrs	r3, r3, #4
 800163a:	f003 030f 	and.w	r3, r3, #15
 800163e:	4a0a      	ldr	r2, [pc, #40]	; (8001668 <HAL_RCC_ClockConfig+0x1c8>)
 8001640:	5cd3      	ldrb	r3, [r2, r3]
 8001642:	fa21 f303 	lsr.w	r3, r1, r3
 8001646:	4a09      	ldr	r2, [pc, #36]	; (800166c <HAL_RCC_ClockConfig+0x1cc>)
 8001648:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800164a:	4b09      	ldr	r3, [pc, #36]	; (8001670 <HAL_RCC_ClockConfig+0x1d0>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4618      	mov	r0, r3
 8001650:	f7ff f9b2 	bl	80009b8 <HAL_InitTick>

  return HAL_OK;
 8001654:	2300      	movs	r3, #0
}
 8001656:	4618      	mov	r0, r3
 8001658:	3710      	adds	r7, #16
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40022000 	.word	0x40022000
 8001664:	40021000 	.word	0x40021000
 8001668:	08002ef8 	.word	0x08002ef8
 800166c:	20000000 	.word	0x20000000
 8001670:	20000004 	.word	0x20000004

08001674 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001674:	b490      	push	{r4, r7}
 8001676:	b08a      	sub	sp, #40	; 0x28
 8001678:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800167a:	4b2a      	ldr	r3, [pc, #168]	; (8001724 <HAL_RCC_GetSysClockFreq+0xb0>)
 800167c:	1d3c      	adds	r4, r7, #4
 800167e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001680:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001684:	4b28      	ldr	r3, [pc, #160]	; (8001728 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001686:	881b      	ldrh	r3, [r3, #0]
 8001688:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800168a:	2300      	movs	r3, #0
 800168c:	61fb      	str	r3, [r7, #28]
 800168e:	2300      	movs	r3, #0
 8001690:	61bb      	str	r3, [r7, #24]
 8001692:	2300      	movs	r3, #0
 8001694:	627b      	str	r3, [r7, #36]	; 0x24
 8001696:	2300      	movs	r3, #0
 8001698:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800169a:	2300      	movs	r3, #0
 800169c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800169e:	4b23      	ldr	r3, [pc, #140]	; (800172c <HAL_RCC_GetSysClockFreq+0xb8>)
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	f003 030c 	and.w	r3, r3, #12
 80016aa:	2b04      	cmp	r3, #4
 80016ac:	d002      	beq.n	80016b4 <HAL_RCC_GetSysClockFreq+0x40>
 80016ae:	2b08      	cmp	r3, #8
 80016b0:	d003      	beq.n	80016ba <HAL_RCC_GetSysClockFreq+0x46>
 80016b2:	e02d      	b.n	8001710 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80016b4:	4b1e      	ldr	r3, [pc, #120]	; (8001730 <HAL_RCC_GetSysClockFreq+0xbc>)
 80016b6:	623b      	str	r3, [r7, #32]
      break;
 80016b8:	e02d      	b.n	8001716 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	0c9b      	lsrs	r3, r3, #18
 80016be:	f003 030f 	and.w	r3, r3, #15
 80016c2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80016c6:	4413      	add	r3, r2
 80016c8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80016cc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d013      	beq.n	8001700 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80016d8:	4b14      	ldr	r3, [pc, #80]	; (800172c <HAL_RCC_GetSysClockFreq+0xb8>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	0c5b      	lsrs	r3, r3, #17
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80016e6:	4413      	add	r3, r2
 80016e8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80016ec:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	4a0f      	ldr	r2, [pc, #60]	; (8001730 <HAL_RCC_GetSysClockFreq+0xbc>)
 80016f2:	fb02 f203 	mul.w	r2, r2, r3
 80016f6:	69bb      	ldr	r3, [r7, #24]
 80016f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80016fc:	627b      	str	r3, [r7, #36]	; 0x24
 80016fe:	e004      	b.n	800170a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	4a0c      	ldr	r2, [pc, #48]	; (8001734 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001704:	fb02 f303 	mul.w	r3, r2, r3
 8001708:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800170a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170c:	623b      	str	r3, [r7, #32]
      break;
 800170e:	e002      	b.n	8001716 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001710:	4b07      	ldr	r3, [pc, #28]	; (8001730 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001712:	623b      	str	r3, [r7, #32]
      break;
 8001714:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001716:	6a3b      	ldr	r3, [r7, #32]
}
 8001718:	4618      	mov	r0, r3
 800171a:	3728      	adds	r7, #40	; 0x28
 800171c:	46bd      	mov	sp, r7
 800171e:	bc90      	pop	{r4, r7}
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	08002ee4 	.word	0x08002ee4
 8001728:	08002ef4 	.word	0x08002ef4
 800172c:	40021000 	.word	0x40021000
 8001730:	007a1200 	.word	0x007a1200
 8001734:	003d0900 	.word	0x003d0900

08001738 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800173c:	4b02      	ldr	r3, [pc, #8]	; (8001748 <HAL_RCC_GetHCLKFreq+0x10>)
 800173e:	681b      	ldr	r3, [r3, #0]
}
 8001740:	4618      	mov	r0, r3
 8001742:	46bd      	mov	sp, r7
 8001744:	bc80      	pop	{r7}
 8001746:	4770      	bx	lr
 8001748:	20000000 	.word	0x20000000

0800174c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001750:	f7ff fff2 	bl	8001738 <HAL_RCC_GetHCLKFreq>
 8001754:	4601      	mov	r1, r0
 8001756:	4b05      	ldr	r3, [pc, #20]	; (800176c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	0a1b      	lsrs	r3, r3, #8
 800175c:	f003 0307 	and.w	r3, r3, #7
 8001760:	4a03      	ldr	r2, [pc, #12]	; (8001770 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001762:	5cd3      	ldrb	r3, [r2, r3]
 8001764:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001768:	4618      	mov	r0, r3
 800176a:	bd80      	pop	{r7, pc}
 800176c:	40021000 	.word	0x40021000
 8001770:	08002f08 	.word	0x08002f08

08001774 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001778:	f7ff ffde 	bl	8001738 <HAL_RCC_GetHCLKFreq>
 800177c:	4601      	mov	r1, r0
 800177e:	4b05      	ldr	r3, [pc, #20]	; (8001794 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	0adb      	lsrs	r3, r3, #11
 8001784:	f003 0307 	and.w	r3, r3, #7
 8001788:	4a03      	ldr	r2, [pc, #12]	; (8001798 <HAL_RCC_GetPCLK2Freq+0x24>)
 800178a:	5cd3      	ldrb	r3, [r2, r3]
 800178c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001790:	4618      	mov	r0, r3
 8001792:	bd80      	pop	{r7, pc}
 8001794:	40021000 	.word	0x40021000
 8001798:	08002f08 	.word	0x08002f08

0800179c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800179c:	b480      	push	{r7}
 800179e:	b085      	sub	sp, #20
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80017a4:	4b0a      	ldr	r3, [pc, #40]	; (80017d0 <RCC_Delay+0x34>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a0a      	ldr	r2, [pc, #40]	; (80017d4 <RCC_Delay+0x38>)
 80017aa:	fba2 2303 	umull	r2, r3, r2, r3
 80017ae:	0a5b      	lsrs	r3, r3, #9
 80017b0:	687a      	ldr	r2, [r7, #4]
 80017b2:	fb02 f303 	mul.w	r3, r2, r3
 80017b6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80017b8:	bf00      	nop
  }
  while (Delay --);
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	1e5a      	subs	r2, r3, #1
 80017be:	60fa      	str	r2, [r7, #12]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d1f9      	bne.n	80017b8 <RCC_Delay+0x1c>
}
 80017c4:	bf00      	nop
 80017c6:	3714      	adds	r7, #20
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bc80      	pop	{r7}
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	20000000 	.word	0x20000000
 80017d4:	10624dd3 	.word	0x10624dd3

080017d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d101      	bne.n	80017ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e01d      	b.n	8001826 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d106      	bne.n	8001804 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2200      	movs	r2, #0
 80017fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f7fe ff40 	bl	8000684 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2202      	movs	r2, #2
 8001808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	3304      	adds	r3, #4
 8001814:	4619      	mov	r1, r3
 8001816:	4610      	mov	r0, r2
 8001818:	f000 f8e4 	bl	80019e4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2201      	movs	r2, #1
 8001820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001824:	2300      	movs	r3, #0
}
 8001826:	4618      	mov	r0, r3
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800182e:	b480      	push	{r7}
 8001830:	b085      	sub	sp, #20
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2202      	movs	r2, #2
 800183a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	f003 0307 	and.w	r3, r3, #7
 8001848:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	2b06      	cmp	r3, #6
 800184e:	d007      	beq.n	8001860 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f042 0201 	orr.w	r2, r2, #1
 800185e:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2201      	movs	r2, #1
 8001864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8001868:	2300      	movs	r3, #0
}
 800186a:	4618      	mov	r0, r3
 800186c:	3714      	adds	r7, #20
 800186e:	46bd      	mov	sp, r7
 8001870:	bc80      	pop	{r7}
 8001872:	4770      	bx	lr

08001874 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001884:	2b01      	cmp	r3, #1
 8001886:	d101      	bne.n	800188c <HAL_TIM_ConfigClockSource+0x18>
 8001888:	2302      	movs	r3, #2
 800188a:	e0a6      	b.n	80019da <HAL_TIM_ConfigClockSource+0x166>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2201      	movs	r2, #1
 8001890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2202      	movs	r2, #2
 8001898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80018aa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80018b2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	68fa      	ldr	r2, [r7, #12]
 80018ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2b40      	cmp	r3, #64	; 0x40
 80018c2:	d067      	beq.n	8001994 <HAL_TIM_ConfigClockSource+0x120>
 80018c4:	2b40      	cmp	r3, #64	; 0x40
 80018c6:	d80b      	bhi.n	80018e0 <HAL_TIM_ConfigClockSource+0x6c>
 80018c8:	2b10      	cmp	r3, #16
 80018ca:	d073      	beq.n	80019b4 <HAL_TIM_ConfigClockSource+0x140>
 80018cc:	2b10      	cmp	r3, #16
 80018ce:	d802      	bhi.n	80018d6 <HAL_TIM_ConfigClockSource+0x62>
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d06f      	beq.n	80019b4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80018d4:	e078      	b.n	80019c8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80018d6:	2b20      	cmp	r3, #32
 80018d8:	d06c      	beq.n	80019b4 <HAL_TIM_ConfigClockSource+0x140>
 80018da:	2b30      	cmp	r3, #48	; 0x30
 80018dc:	d06a      	beq.n	80019b4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80018de:	e073      	b.n	80019c8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80018e0:	2b70      	cmp	r3, #112	; 0x70
 80018e2:	d00d      	beq.n	8001900 <HAL_TIM_ConfigClockSource+0x8c>
 80018e4:	2b70      	cmp	r3, #112	; 0x70
 80018e6:	d804      	bhi.n	80018f2 <HAL_TIM_ConfigClockSource+0x7e>
 80018e8:	2b50      	cmp	r3, #80	; 0x50
 80018ea:	d033      	beq.n	8001954 <HAL_TIM_ConfigClockSource+0xe0>
 80018ec:	2b60      	cmp	r3, #96	; 0x60
 80018ee:	d041      	beq.n	8001974 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80018f0:	e06a      	b.n	80019c8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80018f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018f6:	d066      	beq.n	80019c6 <HAL_TIM_ConfigClockSource+0x152>
 80018f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80018fc:	d017      	beq.n	800192e <HAL_TIM_ConfigClockSource+0xba>
      break;
 80018fe:	e063      	b.n	80019c8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6818      	ldr	r0, [r3, #0]
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	6899      	ldr	r1, [r3, #8]
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685a      	ldr	r2, [r3, #4]
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	f000 f941 	bl	8001b96 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001922:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	68fa      	ldr	r2, [r7, #12]
 800192a:	609a      	str	r2, [r3, #8]
      break;
 800192c:	e04c      	b.n	80019c8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6818      	ldr	r0, [r3, #0]
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	6899      	ldr	r1, [r3, #8]
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685a      	ldr	r2, [r3, #4]
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	68db      	ldr	r3, [r3, #12]
 800193e:	f000 f92a 	bl	8001b96 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	689a      	ldr	r2, [r3, #8]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001950:	609a      	str	r2, [r3, #8]
      break;
 8001952:	e039      	b.n	80019c8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6818      	ldr	r0, [r3, #0]
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	6859      	ldr	r1, [r3, #4]
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	461a      	mov	r2, r3
 8001962:	f000 f8a1 	bl	8001aa8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	2150      	movs	r1, #80	; 0x50
 800196c:	4618      	mov	r0, r3
 800196e:	f000 f8f8 	bl	8001b62 <TIM_ITRx_SetConfig>
      break;
 8001972:	e029      	b.n	80019c8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6818      	ldr	r0, [r3, #0]
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	6859      	ldr	r1, [r3, #4]
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	461a      	mov	r2, r3
 8001982:	f000 f8bf 	bl	8001b04 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	2160      	movs	r1, #96	; 0x60
 800198c:	4618      	mov	r0, r3
 800198e:	f000 f8e8 	bl	8001b62 <TIM_ITRx_SetConfig>
      break;
 8001992:	e019      	b.n	80019c8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6818      	ldr	r0, [r3, #0]
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	6859      	ldr	r1, [r3, #4]
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	461a      	mov	r2, r3
 80019a2:	f000 f881 	bl	8001aa8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	2140      	movs	r1, #64	; 0x40
 80019ac:	4618      	mov	r0, r3
 80019ae:	f000 f8d8 	bl	8001b62 <TIM_ITRx_SetConfig>
      break;
 80019b2:	e009      	b.n	80019c8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4619      	mov	r1, r3
 80019be:	4610      	mov	r0, r2
 80019c0:	f000 f8cf 	bl	8001b62 <TIM_ITRx_SetConfig>
      break;
 80019c4:	e000      	b.n	80019c8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80019c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2201      	movs	r2, #1
 80019cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2200      	movs	r2, #0
 80019d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3710      	adds	r7, #16
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
	...

080019e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b085      	sub	sp, #20
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	4a29      	ldr	r2, [pc, #164]	; (8001a9c <TIM_Base_SetConfig+0xb8>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d00b      	beq.n	8001a14 <TIM_Base_SetConfig+0x30>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a02:	d007      	beq.n	8001a14 <TIM_Base_SetConfig+0x30>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	4a26      	ldr	r2, [pc, #152]	; (8001aa0 <TIM_Base_SetConfig+0xbc>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d003      	beq.n	8001a14 <TIM_Base_SetConfig+0x30>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	4a25      	ldr	r2, [pc, #148]	; (8001aa4 <TIM_Base_SetConfig+0xc0>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d108      	bne.n	8001a26 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	68fa      	ldr	r2, [r7, #12]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a1c      	ldr	r2, [pc, #112]	; (8001a9c <TIM_Base_SetConfig+0xb8>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d00b      	beq.n	8001a46 <TIM_Base_SetConfig+0x62>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a34:	d007      	beq.n	8001a46 <TIM_Base_SetConfig+0x62>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4a19      	ldr	r2, [pc, #100]	; (8001aa0 <TIM_Base_SetConfig+0xbc>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d003      	beq.n	8001a46 <TIM_Base_SetConfig+0x62>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a18      	ldr	r2, [pc, #96]	; (8001aa4 <TIM_Base_SetConfig+0xc0>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d108      	bne.n	8001a58 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	68db      	ldr	r3, [r3, #12]
 8001a52:	68fa      	ldr	r2, [r7, #12]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	695b      	ldr	r3, [r3, #20]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	68fa      	ldr	r2, [r7, #12]
 8001a6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	689a      	ldr	r2, [r3, #8]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	4a07      	ldr	r2, [pc, #28]	; (8001a9c <TIM_Base_SetConfig+0xb8>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d103      	bne.n	8001a8c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	691a      	ldr	r2, [r3, #16]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2201      	movs	r2, #1
 8001a90:	615a      	str	r2, [r3, #20]
}
 8001a92:	bf00      	nop
 8001a94:	3714      	adds	r7, #20
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bc80      	pop	{r7}
 8001a9a:	4770      	bx	lr
 8001a9c:	40012c00 	.word	0x40012c00
 8001aa0:	40000400 	.word	0x40000400
 8001aa4:	40000800 	.word	0x40000800

08001aa8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b087      	sub	sp, #28
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	60b9      	str	r1, [r7, #8]
 8001ab2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	6a1b      	ldr	r3, [r3, #32]
 8001ab8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	6a1b      	ldr	r3, [r3, #32]
 8001abe:	f023 0201 	bic.w	r2, r3, #1
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	699b      	ldr	r3, [r3, #24]
 8001aca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ad2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	011b      	lsls	r3, r3, #4
 8001ad8:	693a      	ldr	r2, [r7, #16]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	f023 030a 	bic.w	r3, r3, #10
 8001ae4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001ae6:	697a      	ldr	r2, [r7, #20]
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	693a      	ldr	r2, [r7, #16]
 8001af2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	697a      	ldr	r2, [r7, #20]
 8001af8:	621a      	str	r2, [r3, #32]
}
 8001afa:	bf00      	nop
 8001afc:	371c      	adds	r7, #28
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bc80      	pop	{r7}
 8001b02:	4770      	bx	lr

08001b04 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b087      	sub	sp, #28
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	60b9      	str	r1, [r7, #8]
 8001b0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	6a1b      	ldr	r3, [r3, #32]
 8001b14:	f023 0210 	bic.w	r2, r3, #16
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	699b      	ldr	r3, [r3, #24]
 8001b20:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	6a1b      	ldr	r3, [r3, #32]
 8001b26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001b2e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	031b      	lsls	r3, r3, #12
 8001b34:	697a      	ldr	r2, [r7, #20]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001b40:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	011b      	lsls	r3, r3, #4
 8001b46:	693a      	ldr	r2, [r7, #16]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	697a      	ldr	r2, [r7, #20]
 8001b50:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	693a      	ldr	r2, [r7, #16]
 8001b56:	621a      	str	r2, [r3, #32]
}
 8001b58:	bf00      	nop
 8001b5a:	371c      	adds	r7, #28
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bc80      	pop	{r7}
 8001b60:	4770      	bx	lr

08001b62 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001b62:	b480      	push	{r7}
 8001b64:	b085      	sub	sp, #20
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
 8001b6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001b7a:	683a      	ldr	r2, [r7, #0]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	f043 0307 	orr.w	r3, r3, #7
 8001b84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	68fa      	ldr	r2, [r7, #12]
 8001b8a:	609a      	str	r2, [r3, #8]
}
 8001b8c:	bf00      	nop
 8001b8e:	3714      	adds	r7, #20
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bc80      	pop	{r7}
 8001b94:	4770      	bx	lr

08001b96 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001b96:	b480      	push	{r7}
 8001b98:	b087      	sub	sp, #28
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	60f8      	str	r0, [r7, #12]
 8001b9e:	60b9      	str	r1, [r7, #8]
 8001ba0:	607a      	str	r2, [r7, #4]
 8001ba2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001bb0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	021a      	lsls	r2, r3, #8
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	431a      	orrs	r2, r3
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	697a      	ldr	r2, [r7, #20]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	697a      	ldr	r2, [r7, #20]
 8001bc8:	609a      	str	r2, [r3, #8]
}
 8001bca:	bf00      	nop
 8001bcc:	371c      	adds	r7, #28
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bc80      	pop	{r7}
 8001bd2:	4770      	bx	lr

08001bd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b085      	sub	sp, #20
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d101      	bne.n	8001bec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001be8:	2302      	movs	r3, #2
 8001bea:	e032      	b.n	8001c52 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2202      	movs	r2, #2
 8001bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	68fa      	ldr	r2, [r7, #12]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c24:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	68ba      	ldr	r2, [r7, #8]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	68fa      	ldr	r2, [r7, #12]
 8001c36:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	68ba      	ldr	r2, [r7, #8]
 8001c3e:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2201      	movs	r2, #1
 8001c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3714      	adds	r7, #20
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bc80      	pop	{r7}
 8001c5a:	4770      	bx	lr

08001c5c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d101      	bne.n	8001c6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e03f      	b.n	8001cee <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d106      	bne.n	8001c88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f7fe fd1c 	bl	80006c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2224      	movs	r2, #36	; 0x24
 8001c8c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	68da      	ldr	r2, [r3, #12]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c9e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f000 f90b 	bl	8001ebc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	691a      	ldr	r2, [r3, #16]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001cb4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	695a      	ldr	r2, [r3, #20]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001cc4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	68da      	ldr	r2, [r3, #12]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001cd4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2220      	movs	r2, #32
 8001ce0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2220      	movs	r2, #32
 8001ce8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b088      	sub	sp, #32
 8001cfa:	af02      	add	r7, sp, #8
 8001cfc:	60f8      	str	r0, [r7, #12]
 8001cfe:	60b9      	str	r1, [r7, #8]
 8001d00:	603b      	str	r3, [r7, #0]
 8001d02:	4613      	mov	r3, r2
 8001d04:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001d06:	2300      	movs	r3, #0
 8001d08:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	2b20      	cmp	r3, #32
 8001d14:	f040 8083 	bne.w	8001e1e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d002      	beq.n	8001d24 <HAL_UART_Transmit+0x2e>
 8001d1e:	88fb      	ldrh	r3, [r7, #6]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d101      	bne.n	8001d28 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e07b      	b.n	8001e20 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d101      	bne.n	8001d36 <HAL_UART_Transmit+0x40>
 8001d32:	2302      	movs	r3, #2
 8001d34:	e074      	b.n	8001e20 <HAL_UART_Transmit+0x12a>
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2201      	movs	r2, #1
 8001d3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2200      	movs	r2, #0
 8001d42:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2221      	movs	r2, #33	; 0x21
 8001d48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001d4c:	f7fe fe76 	bl	8000a3c <HAL_GetTick>
 8001d50:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	88fa      	ldrh	r2, [r7, #6]
 8001d56:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	88fa      	ldrh	r2, [r7, #6]
 8001d5c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001d5e:	e042      	b.n	8001de6 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	3b01      	subs	r3, #1
 8001d68:	b29a      	uxth	r2, r3
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d76:	d122      	bne.n	8001dbe <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	9300      	str	r3, [sp, #0]
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	2180      	movs	r1, #128	; 0x80
 8001d82:	68f8      	ldr	r0, [r7, #12]
 8001d84:	f000 f850 	bl	8001e28 <UART_WaitOnFlagUntilTimeout>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e046      	b.n	8001e20 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	881b      	ldrh	r3, [r3, #0]
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001da4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	691b      	ldr	r3, [r3, #16]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d103      	bne.n	8001db6 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	3302      	adds	r3, #2
 8001db2:	60bb      	str	r3, [r7, #8]
 8001db4:	e017      	b.n	8001de6 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	3301      	adds	r3, #1
 8001dba:	60bb      	str	r3, [r7, #8]
 8001dbc:	e013      	b.n	8001de6 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	9300      	str	r3, [sp, #0]
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	2180      	movs	r1, #128	; 0x80
 8001dc8:	68f8      	ldr	r0, [r7, #12]
 8001dca:	f000 f82d 	bl	8001e28 <UART_WaitOnFlagUntilTimeout>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	e023      	b.n	8001e20 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	1c5a      	adds	r2, r3, #1
 8001ddc:	60ba      	str	r2, [r7, #8]
 8001dde:	781a      	ldrb	r2, [r3, #0]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001dea:	b29b      	uxth	r3, r3
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d1b7      	bne.n	8001d60 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	9300      	str	r3, [sp, #0]
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	2200      	movs	r2, #0
 8001df8:	2140      	movs	r1, #64	; 0x40
 8001dfa:	68f8      	ldr	r0, [r7, #12]
 8001dfc:	f000 f814 	bl	8001e28 <UART_WaitOnFlagUntilTimeout>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e00a      	b.n	8001e20 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2220      	movs	r2, #32
 8001e0e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2200      	movs	r2, #0
 8001e16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	e000      	b.n	8001e20 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8001e1e:	2302      	movs	r3, #2
  }
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3718      	adds	r7, #24
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	60f8      	str	r0, [r7, #12]
 8001e30:	60b9      	str	r1, [r7, #8]
 8001e32:	603b      	str	r3, [r7, #0]
 8001e34:	4613      	mov	r3, r2
 8001e36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e38:	e02c      	b.n	8001e94 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e40:	d028      	beq.n	8001e94 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d007      	beq.n	8001e58 <UART_WaitOnFlagUntilTimeout+0x30>
 8001e48:	f7fe fdf8 	bl	8000a3c <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	69ba      	ldr	r2, [r7, #24]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d21d      	bcs.n	8001e94 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	68da      	ldr	r2, [r3, #12]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001e66:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	695a      	ldr	r2, [r3, #20]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f022 0201 	bic.w	r2, r2, #1
 8001e76:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2220      	movs	r2, #32
 8001e7c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2220      	movs	r2, #32
 8001e84:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001e90:	2303      	movs	r3, #3
 8001e92:	e00f      	b.n	8001eb4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	68ba      	ldr	r2, [r7, #8]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	bf0c      	ite	eq
 8001ea4:	2301      	moveq	r3, #1
 8001ea6:	2300      	movne	r3, #0
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	461a      	mov	r2, r3
 8001eac:	79fb      	ldrb	r3, [r7, #7]
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d0c3      	beq.n	8001e3a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001eb2:	2300      	movs	r3, #0
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3710      	adds	r7, #16
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}

08001ebc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	691b      	ldr	r3, [r3, #16]
 8001eca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	68da      	ldr	r2, [r3, #12]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	430a      	orrs	r2, r1
 8001ed8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	689a      	ldr	r2, [r3, #8]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	691b      	ldr	r3, [r3, #16]
 8001ee2:	431a      	orrs	r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	695b      	ldr	r3, [r3, #20]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	68db      	ldr	r3, [r3, #12]
 8001ef2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001ef6:	f023 030c 	bic.w	r3, r3, #12
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	6812      	ldr	r2, [r2, #0]
 8001efe:	68f9      	ldr	r1, [r7, #12]
 8001f00:	430b      	orrs	r3, r1
 8001f02:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	695b      	ldr	r3, [r3, #20]
 8001f0a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	699a      	ldr	r2, [r3, #24]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	430a      	orrs	r2, r1
 8001f18:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a52      	ldr	r2, [pc, #328]	; (8002068 <UART_SetConfig+0x1ac>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d14e      	bne.n	8001fc2 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001f24:	f7ff fc26 	bl	8001774 <HAL_RCC_GetPCLK2Freq>
 8001f28:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001f2a:	68ba      	ldr	r2, [r7, #8]
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	4413      	add	r3, r2
 8001f32:	009a      	lsls	r2, r3, #2
 8001f34:	441a      	add	r2, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f40:	4a4a      	ldr	r2, [pc, #296]	; (800206c <UART_SetConfig+0x1b0>)
 8001f42:	fba2 2303 	umull	r2, r3, r2, r3
 8001f46:	095b      	lsrs	r3, r3, #5
 8001f48:	0119      	lsls	r1, r3, #4
 8001f4a:	68ba      	ldr	r2, [r7, #8]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	4413      	add	r3, r2
 8001f52:	009a      	lsls	r2, r3, #2
 8001f54:	441a      	add	r2, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f60:	4b42      	ldr	r3, [pc, #264]	; (800206c <UART_SetConfig+0x1b0>)
 8001f62:	fba3 0302 	umull	r0, r3, r3, r2
 8001f66:	095b      	lsrs	r3, r3, #5
 8001f68:	2064      	movs	r0, #100	; 0x64
 8001f6a:	fb00 f303 	mul.w	r3, r0, r3
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	011b      	lsls	r3, r3, #4
 8001f72:	3332      	adds	r3, #50	; 0x32
 8001f74:	4a3d      	ldr	r2, [pc, #244]	; (800206c <UART_SetConfig+0x1b0>)
 8001f76:	fba2 2303 	umull	r2, r3, r2, r3
 8001f7a:	095b      	lsrs	r3, r3, #5
 8001f7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f80:	4419      	add	r1, r3
 8001f82:	68ba      	ldr	r2, [r7, #8]
 8001f84:	4613      	mov	r3, r2
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	4413      	add	r3, r2
 8001f8a:	009a      	lsls	r2, r3, #2
 8001f8c:	441a      	add	r2, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f98:	4b34      	ldr	r3, [pc, #208]	; (800206c <UART_SetConfig+0x1b0>)
 8001f9a:	fba3 0302 	umull	r0, r3, r3, r2
 8001f9e:	095b      	lsrs	r3, r3, #5
 8001fa0:	2064      	movs	r0, #100	; 0x64
 8001fa2:	fb00 f303 	mul.w	r3, r0, r3
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	011b      	lsls	r3, r3, #4
 8001faa:	3332      	adds	r3, #50	; 0x32
 8001fac:	4a2f      	ldr	r2, [pc, #188]	; (800206c <UART_SetConfig+0x1b0>)
 8001fae:	fba2 2303 	umull	r2, r3, r2, r3
 8001fb2:	095b      	lsrs	r3, r3, #5
 8001fb4:	f003 020f 	and.w	r2, r3, #15
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	440a      	add	r2, r1
 8001fbe:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8001fc0:	e04d      	b.n	800205e <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8001fc2:	f7ff fbc3 	bl	800174c <HAL_RCC_GetPCLK1Freq>
 8001fc6:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001fc8:	68ba      	ldr	r2, [r7, #8]
 8001fca:	4613      	mov	r3, r2
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	4413      	add	r3, r2
 8001fd0:	009a      	lsls	r2, r3, #2
 8001fd2:	441a      	add	r2, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fde:	4a23      	ldr	r2, [pc, #140]	; (800206c <UART_SetConfig+0x1b0>)
 8001fe0:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe4:	095b      	lsrs	r3, r3, #5
 8001fe6:	0119      	lsls	r1, r3, #4
 8001fe8:	68ba      	ldr	r2, [r7, #8]
 8001fea:	4613      	mov	r3, r2
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	4413      	add	r3, r2
 8001ff0:	009a      	lsls	r2, r3, #2
 8001ff2:	441a      	add	r2, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ffe:	4b1b      	ldr	r3, [pc, #108]	; (800206c <UART_SetConfig+0x1b0>)
 8002000:	fba3 0302 	umull	r0, r3, r3, r2
 8002004:	095b      	lsrs	r3, r3, #5
 8002006:	2064      	movs	r0, #100	; 0x64
 8002008:	fb00 f303 	mul.w	r3, r0, r3
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	011b      	lsls	r3, r3, #4
 8002010:	3332      	adds	r3, #50	; 0x32
 8002012:	4a16      	ldr	r2, [pc, #88]	; (800206c <UART_SetConfig+0x1b0>)
 8002014:	fba2 2303 	umull	r2, r3, r2, r3
 8002018:	095b      	lsrs	r3, r3, #5
 800201a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800201e:	4419      	add	r1, r3
 8002020:	68ba      	ldr	r2, [r7, #8]
 8002022:	4613      	mov	r3, r2
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	4413      	add	r3, r2
 8002028:	009a      	lsls	r2, r3, #2
 800202a:	441a      	add	r2, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	fbb2 f2f3 	udiv	r2, r2, r3
 8002036:	4b0d      	ldr	r3, [pc, #52]	; (800206c <UART_SetConfig+0x1b0>)
 8002038:	fba3 0302 	umull	r0, r3, r3, r2
 800203c:	095b      	lsrs	r3, r3, #5
 800203e:	2064      	movs	r0, #100	; 0x64
 8002040:	fb00 f303 	mul.w	r3, r0, r3
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	011b      	lsls	r3, r3, #4
 8002048:	3332      	adds	r3, #50	; 0x32
 800204a:	4a08      	ldr	r2, [pc, #32]	; (800206c <UART_SetConfig+0x1b0>)
 800204c:	fba2 2303 	umull	r2, r3, r2, r3
 8002050:	095b      	lsrs	r3, r3, #5
 8002052:	f003 020f 	and.w	r2, r3, #15
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	440a      	add	r2, r1
 800205c:	609a      	str	r2, [r3, #8]
}
 800205e:	bf00      	nop
 8002060:	3710      	adds	r7, #16
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	40013800 	.word	0x40013800
 800206c:	51eb851f 	.word	0x51eb851f

08002070 <__errno>:
 8002070:	4b01      	ldr	r3, [pc, #4]	; (8002078 <__errno+0x8>)
 8002072:	6818      	ldr	r0, [r3, #0]
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	2000000c 	.word	0x2000000c

0800207c <__libc_init_array>:
 800207c:	b570      	push	{r4, r5, r6, lr}
 800207e:	2500      	movs	r5, #0
 8002080:	4e0c      	ldr	r6, [pc, #48]	; (80020b4 <__libc_init_array+0x38>)
 8002082:	4c0d      	ldr	r4, [pc, #52]	; (80020b8 <__libc_init_array+0x3c>)
 8002084:	1ba4      	subs	r4, r4, r6
 8002086:	10a4      	asrs	r4, r4, #2
 8002088:	42a5      	cmp	r5, r4
 800208a:	d109      	bne.n	80020a0 <__libc_init_array+0x24>
 800208c:	f000 ff10 	bl	8002eb0 <_init>
 8002090:	2500      	movs	r5, #0
 8002092:	4e0a      	ldr	r6, [pc, #40]	; (80020bc <__libc_init_array+0x40>)
 8002094:	4c0a      	ldr	r4, [pc, #40]	; (80020c0 <__libc_init_array+0x44>)
 8002096:	1ba4      	subs	r4, r4, r6
 8002098:	10a4      	asrs	r4, r4, #2
 800209a:	42a5      	cmp	r5, r4
 800209c:	d105      	bne.n	80020aa <__libc_init_array+0x2e>
 800209e:	bd70      	pop	{r4, r5, r6, pc}
 80020a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80020a4:	4798      	blx	r3
 80020a6:	3501      	adds	r5, #1
 80020a8:	e7ee      	b.n	8002088 <__libc_init_array+0xc>
 80020aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80020ae:	4798      	blx	r3
 80020b0:	3501      	adds	r5, #1
 80020b2:	e7f2      	b.n	800209a <__libc_init_array+0x1e>
 80020b4:	08002fa8 	.word	0x08002fa8
 80020b8:	08002fa8 	.word	0x08002fa8
 80020bc:	08002fa8 	.word	0x08002fa8
 80020c0:	08002fac 	.word	0x08002fac

080020c4 <memset>:
 80020c4:	4603      	mov	r3, r0
 80020c6:	4402      	add	r2, r0
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d100      	bne.n	80020ce <memset+0xa>
 80020cc:	4770      	bx	lr
 80020ce:	f803 1b01 	strb.w	r1, [r3], #1
 80020d2:	e7f9      	b.n	80020c8 <memset+0x4>

080020d4 <iprintf>:
 80020d4:	b40f      	push	{r0, r1, r2, r3}
 80020d6:	4b0a      	ldr	r3, [pc, #40]	; (8002100 <iprintf+0x2c>)
 80020d8:	b513      	push	{r0, r1, r4, lr}
 80020da:	681c      	ldr	r4, [r3, #0]
 80020dc:	b124      	cbz	r4, 80020e8 <iprintf+0x14>
 80020de:	69a3      	ldr	r3, [r4, #24]
 80020e0:	b913      	cbnz	r3, 80020e8 <iprintf+0x14>
 80020e2:	4620      	mov	r0, r4
 80020e4:	f000 f84e 	bl	8002184 <__sinit>
 80020e8:	ab05      	add	r3, sp, #20
 80020ea:	9a04      	ldr	r2, [sp, #16]
 80020ec:	68a1      	ldr	r1, [r4, #8]
 80020ee:	4620      	mov	r0, r4
 80020f0:	9301      	str	r3, [sp, #4]
 80020f2:	f000 f953 	bl	800239c <_vfiprintf_r>
 80020f6:	b002      	add	sp, #8
 80020f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80020fc:	b004      	add	sp, #16
 80020fe:	4770      	bx	lr
 8002100:	2000000c 	.word	0x2000000c

08002104 <std>:
 8002104:	2300      	movs	r3, #0
 8002106:	b510      	push	{r4, lr}
 8002108:	4604      	mov	r4, r0
 800210a:	e9c0 3300 	strd	r3, r3, [r0]
 800210e:	6083      	str	r3, [r0, #8]
 8002110:	8181      	strh	r1, [r0, #12]
 8002112:	6643      	str	r3, [r0, #100]	; 0x64
 8002114:	81c2      	strh	r2, [r0, #14]
 8002116:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800211a:	6183      	str	r3, [r0, #24]
 800211c:	4619      	mov	r1, r3
 800211e:	2208      	movs	r2, #8
 8002120:	305c      	adds	r0, #92	; 0x5c
 8002122:	f7ff ffcf 	bl	80020c4 <memset>
 8002126:	4b05      	ldr	r3, [pc, #20]	; (800213c <std+0x38>)
 8002128:	6224      	str	r4, [r4, #32]
 800212a:	6263      	str	r3, [r4, #36]	; 0x24
 800212c:	4b04      	ldr	r3, [pc, #16]	; (8002140 <std+0x3c>)
 800212e:	62a3      	str	r3, [r4, #40]	; 0x28
 8002130:	4b04      	ldr	r3, [pc, #16]	; (8002144 <std+0x40>)
 8002132:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002134:	4b04      	ldr	r3, [pc, #16]	; (8002148 <std+0x44>)
 8002136:	6323      	str	r3, [r4, #48]	; 0x30
 8002138:	bd10      	pop	{r4, pc}
 800213a:	bf00      	nop
 800213c:	080028f9 	.word	0x080028f9
 8002140:	0800291b 	.word	0x0800291b
 8002144:	08002953 	.word	0x08002953
 8002148:	08002977 	.word	0x08002977

0800214c <_cleanup_r>:
 800214c:	4901      	ldr	r1, [pc, #4]	; (8002154 <_cleanup_r+0x8>)
 800214e:	f000 b885 	b.w	800225c <_fwalk_reent>
 8002152:	bf00      	nop
 8002154:	08002c51 	.word	0x08002c51

08002158 <__sfmoreglue>:
 8002158:	b570      	push	{r4, r5, r6, lr}
 800215a:	2568      	movs	r5, #104	; 0x68
 800215c:	1e4a      	subs	r2, r1, #1
 800215e:	4355      	muls	r5, r2
 8002160:	460e      	mov	r6, r1
 8002162:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002166:	f000 f897 	bl	8002298 <_malloc_r>
 800216a:	4604      	mov	r4, r0
 800216c:	b140      	cbz	r0, 8002180 <__sfmoreglue+0x28>
 800216e:	2100      	movs	r1, #0
 8002170:	e9c0 1600 	strd	r1, r6, [r0]
 8002174:	300c      	adds	r0, #12
 8002176:	60a0      	str	r0, [r4, #8]
 8002178:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800217c:	f7ff ffa2 	bl	80020c4 <memset>
 8002180:	4620      	mov	r0, r4
 8002182:	bd70      	pop	{r4, r5, r6, pc}

08002184 <__sinit>:
 8002184:	6983      	ldr	r3, [r0, #24]
 8002186:	b510      	push	{r4, lr}
 8002188:	4604      	mov	r4, r0
 800218a:	bb33      	cbnz	r3, 80021da <__sinit+0x56>
 800218c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8002190:	6503      	str	r3, [r0, #80]	; 0x50
 8002192:	4b12      	ldr	r3, [pc, #72]	; (80021dc <__sinit+0x58>)
 8002194:	4a12      	ldr	r2, [pc, #72]	; (80021e0 <__sinit+0x5c>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	6282      	str	r2, [r0, #40]	; 0x28
 800219a:	4298      	cmp	r0, r3
 800219c:	bf04      	itt	eq
 800219e:	2301      	moveq	r3, #1
 80021a0:	6183      	streq	r3, [r0, #24]
 80021a2:	f000 f81f 	bl	80021e4 <__sfp>
 80021a6:	6060      	str	r0, [r4, #4]
 80021a8:	4620      	mov	r0, r4
 80021aa:	f000 f81b 	bl	80021e4 <__sfp>
 80021ae:	60a0      	str	r0, [r4, #8]
 80021b0:	4620      	mov	r0, r4
 80021b2:	f000 f817 	bl	80021e4 <__sfp>
 80021b6:	2200      	movs	r2, #0
 80021b8:	60e0      	str	r0, [r4, #12]
 80021ba:	2104      	movs	r1, #4
 80021bc:	6860      	ldr	r0, [r4, #4]
 80021be:	f7ff ffa1 	bl	8002104 <std>
 80021c2:	2201      	movs	r2, #1
 80021c4:	2109      	movs	r1, #9
 80021c6:	68a0      	ldr	r0, [r4, #8]
 80021c8:	f7ff ff9c 	bl	8002104 <std>
 80021cc:	2202      	movs	r2, #2
 80021ce:	2112      	movs	r1, #18
 80021d0:	68e0      	ldr	r0, [r4, #12]
 80021d2:	f7ff ff97 	bl	8002104 <std>
 80021d6:	2301      	movs	r3, #1
 80021d8:	61a3      	str	r3, [r4, #24]
 80021da:	bd10      	pop	{r4, pc}
 80021dc:	08002f10 	.word	0x08002f10
 80021e0:	0800214d 	.word	0x0800214d

080021e4 <__sfp>:
 80021e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021e6:	4b1b      	ldr	r3, [pc, #108]	; (8002254 <__sfp+0x70>)
 80021e8:	4607      	mov	r7, r0
 80021ea:	681e      	ldr	r6, [r3, #0]
 80021ec:	69b3      	ldr	r3, [r6, #24]
 80021ee:	b913      	cbnz	r3, 80021f6 <__sfp+0x12>
 80021f0:	4630      	mov	r0, r6
 80021f2:	f7ff ffc7 	bl	8002184 <__sinit>
 80021f6:	3648      	adds	r6, #72	; 0x48
 80021f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80021fc:	3b01      	subs	r3, #1
 80021fe:	d503      	bpl.n	8002208 <__sfp+0x24>
 8002200:	6833      	ldr	r3, [r6, #0]
 8002202:	b133      	cbz	r3, 8002212 <__sfp+0x2e>
 8002204:	6836      	ldr	r6, [r6, #0]
 8002206:	e7f7      	b.n	80021f8 <__sfp+0x14>
 8002208:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800220c:	b16d      	cbz	r5, 800222a <__sfp+0x46>
 800220e:	3468      	adds	r4, #104	; 0x68
 8002210:	e7f4      	b.n	80021fc <__sfp+0x18>
 8002212:	2104      	movs	r1, #4
 8002214:	4638      	mov	r0, r7
 8002216:	f7ff ff9f 	bl	8002158 <__sfmoreglue>
 800221a:	6030      	str	r0, [r6, #0]
 800221c:	2800      	cmp	r0, #0
 800221e:	d1f1      	bne.n	8002204 <__sfp+0x20>
 8002220:	230c      	movs	r3, #12
 8002222:	4604      	mov	r4, r0
 8002224:	603b      	str	r3, [r7, #0]
 8002226:	4620      	mov	r0, r4
 8002228:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800222a:	4b0b      	ldr	r3, [pc, #44]	; (8002258 <__sfp+0x74>)
 800222c:	6665      	str	r5, [r4, #100]	; 0x64
 800222e:	e9c4 5500 	strd	r5, r5, [r4]
 8002232:	60a5      	str	r5, [r4, #8]
 8002234:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8002238:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800223c:	2208      	movs	r2, #8
 800223e:	4629      	mov	r1, r5
 8002240:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002244:	f7ff ff3e 	bl	80020c4 <memset>
 8002248:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800224c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002250:	e7e9      	b.n	8002226 <__sfp+0x42>
 8002252:	bf00      	nop
 8002254:	08002f10 	.word	0x08002f10
 8002258:	ffff0001 	.word	0xffff0001

0800225c <_fwalk_reent>:
 800225c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002260:	4680      	mov	r8, r0
 8002262:	4689      	mov	r9, r1
 8002264:	2600      	movs	r6, #0
 8002266:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800226a:	b914      	cbnz	r4, 8002272 <_fwalk_reent+0x16>
 800226c:	4630      	mov	r0, r6
 800226e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002272:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8002276:	3f01      	subs	r7, #1
 8002278:	d501      	bpl.n	800227e <_fwalk_reent+0x22>
 800227a:	6824      	ldr	r4, [r4, #0]
 800227c:	e7f5      	b.n	800226a <_fwalk_reent+0xe>
 800227e:	89ab      	ldrh	r3, [r5, #12]
 8002280:	2b01      	cmp	r3, #1
 8002282:	d907      	bls.n	8002294 <_fwalk_reent+0x38>
 8002284:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002288:	3301      	adds	r3, #1
 800228a:	d003      	beq.n	8002294 <_fwalk_reent+0x38>
 800228c:	4629      	mov	r1, r5
 800228e:	4640      	mov	r0, r8
 8002290:	47c8      	blx	r9
 8002292:	4306      	orrs	r6, r0
 8002294:	3568      	adds	r5, #104	; 0x68
 8002296:	e7ee      	b.n	8002276 <_fwalk_reent+0x1a>

08002298 <_malloc_r>:
 8002298:	b570      	push	{r4, r5, r6, lr}
 800229a:	1ccd      	adds	r5, r1, #3
 800229c:	f025 0503 	bic.w	r5, r5, #3
 80022a0:	3508      	adds	r5, #8
 80022a2:	2d0c      	cmp	r5, #12
 80022a4:	bf38      	it	cc
 80022a6:	250c      	movcc	r5, #12
 80022a8:	2d00      	cmp	r5, #0
 80022aa:	4606      	mov	r6, r0
 80022ac:	db01      	blt.n	80022b2 <_malloc_r+0x1a>
 80022ae:	42a9      	cmp	r1, r5
 80022b0:	d903      	bls.n	80022ba <_malloc_r+0x22>
 80022b2:	230c      	movs	r3, #12
 80022b4:	6033      	str	r3, [r6, #0]
 80022b6:	2000      	movs	r0, #0
 80022b8:	bd70      	pop	{r4, r5, r6, pc}
 80022ba:	f000 fd77 	bl	8002dac <__malloc_lock>
 80022be:	4a21      	ldr	r2, [pc, #132]	; (8002344 <_malloc_r+0xac>)
 80022c0:	6814      	ldr	r4, [r2, #0]
 80022c2:	4621      	mov	r1, r4
 80022c4:	b991      	cbnz	r1, 80022ec <_malloc_r+0x54>
 80022c6:	4c20      	ldr	r4, [pc, #128]	; (8002348 <_malloc_r+0xb0>)
 80022c8:	6823      	ldr	r3, [r4, #0]
 80022ca:	b91b      	cbnz	r3, 80022d4 <_malloc_r+0x3c>
 80022cc:	4630      	mov	r0, r6
 80022ce:	f000 fb03 	bl	80028d8 <_sbrk_r>
 80022d2:	6020      	str	r0, [r4, #0]
 80022d4:	4629      	mov	r1, r5
 80022d6:	4630      	mov	r0, r6
 80022d8:	f000 fafe 	bl	80028d8 <_sbrk_r>
 80022dc:	1c43      	adds	r3, r0, #1
 80022de:	d124      	bne.n	800232a <_malloc_r+0x92>
 80022e0:	230c      	movs	r3, #12
 80022e2:	4630      	mov	r0, r6
 80022e4:	6033      	str	r3, [r6, #0]
 80022e6:	f000 fd62 	bl	8002dae <__malloc_unlock>
 80022ea:	e7e4      	b.n	80022b6 <_malloc_r+0x1e>
 80022ec:	680b      	ldr	r3, [r1, #0]
 80022ee:	1b5b      	subs	r3, r3, r5
 80022f0:	d418      	bmi.n	8002324 <_malloc_r+0x8c>
 80022f2:	2b0b      	cmp	r3, #11
 80022f4:	d90f      	bls.n	8002316 <_malloc_r+0x7e>
 80022f6:	600b      	str	r3, [r1, #0]
 80022f8:	18cc      	adds	r4, r1, r3
 80022fa:	50cd      	str	r5, [r1, r3]
 80022fc:	4630      	mov	r0, r6
 80022fe:	f000 fd56 	bl	8002dae <__malloc_unlock>
 8002302:	f104 000b 	add.w	r0, r4, #11
 8002306:	1d23      	adds	r3, r4, #4
 8002308:	f020 0007 	bic.w	r0, r0, #7
 800230c:	1ac3      	subs	r3, r0, r3
 800230e:	d0d3      	beq.n	80022b8 <_malloc_r+0x20>
 8002310:	425a      	negs	r2, r3
 8002312:	50e2      	str	r2, [r4, r3]
 8002314:	e7d0      	b.n	80022b8 <_malloc_r+0x20>
 8002316:	684b      	ldr	r3, [r1, #4]
 8002318:	428c      	cmp	r4, r1
 800231a:	bf16      	itet	ne
 800231c:	6063      	strne	r3, [r4, #4]
 800231e:	6013      	streq	r3, [r2, #0]
 8002320:	460c      	movne	r4, r1
 8002322:	e7eb      	b.n	80022fc <_malloc_r+0x64>
 8002324:	460c      	mov	r4, r1
 8002326:	6849      	ldr	r1, [r1, #4]
 8002328:	e7cc      	b.n	80022c4 <_malloc_r+0x2c>
 800232a:	1cc4      	adds	r4, r0, #3
 800232c:	f024 0403 	bic.w	r4, r4, #3
 8002330:	42a0      	cmp	r0, r4
 8002332:	d005      	beq.n	8002340 <_malloc_r+0xa8>
 8002334:	1a21      	subs	r1, r4, r0
 8002336:	4630      	mov	r0, r6
 8002338:	f000 face 	bl	80028d8 <_sbrk_r>
 800233c:	3001      	adds	r0, #1
 800233e:	d0cf      	beq.n	80022e0 <_malloc_r+0x48>
 8002340:	6025      	str	r5, [r4, #0]
 8002342:	e7db      	b.n	80022fc <_malloc_r+0x64>
 8002344:	20000090 	.word	0x20000090
 8002348:	20000094 	.word	0x20000094

0800234c <__sfputc_r>:
 800234c:	6893      	ldr	r3, [r2, #8]
 800234e:	b410      	push	{r4}
 8002350:	3b01      	subs	r3, #1
 8002352:	2b00      	cmp	r3, #0
 8002354:	6093      	str	r3, [r2, #8]
 8002356:	da07      	bge.n	8002368 <__sfputc_r+0x1c>
 8002358:	6994      	ldr	r4, [r2, #24]
 800235a:	42a3      	cmp	r3, r4
 800235c:	db01      	blt.n	8002362 <__sfputc_r+0x16>
 800235e:	290a      	cmp	r1, #10
 8002360:	d102      	bne.n	8002368 <__sfputc_r+0x1c>
 8002362:	bc10      	pop	{r4}
 8002364:	f000 bb0c 	b.w	8002980 <__swbuf_r>
 8002368:	6813      	ldr	r3, [r2, #0]
 800236a:	1c58      	adds	r0, r3, #1
 800236c:	6010      	str	r0, [r2, #0]
 800236e:	7019      	strb	r1, [r3, #0]
 8002370:	4608      	mov	r0, r1
 8002372:	bc10      	pop	{r4}
 8002374:	4770      	bx	lr

08002376 <__sfputs_r>:
 8002376:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002378:	4606      	mov	r6, r0
 800237a:	460f      	mov	r7, r1
 800237c:	4614      	mov	r4, r2
 800237e:	18d5      	adds	r5, r2, r3
 8002380:	42ac      	cmp	r4, r5
 8002382:	d101      	bne.n	8002388 <__sfputs_r+0x12>
 8002384:	2000      	movs	r0, #0
 8002386:	e007      	b.n	8002398 <__sfputs_r+0x22>
 8002388:	463a      	mov	r2, r7
 800238a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800238e:	4630      	mov	r0, r6
 8002390:	f7ff ffdc 	bl	800234c <__sfputc_r>
 8002394:	1c43      	adds	r3, r0, #1
 8002396:	d1f3      	bne.n	8002380 <__sfputs_r+0xa>
 8002398:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800239c <_vfiprintf_r>:
 800239c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023a0:	460c      	mov	r4, r1
 80023a2:	b09d      	sub	sp, #116	; 0x74
 80023a4:	4617      	mov	r7, r2
 80023a6:	461d      	mov	r5, r3
 80023a8:	4606      	mov	r6, r0
 80023aa:	b118      	cbz	r0, 80023b4 <_vfiprintf_r+0x18>
 80023ac:	6983      	ldr	r3, [r0, #24]
 80023ae:	b90b      	cbnz	r3, 80023b4 <_vfiprintf_r+0x18>
 80023b0:	f7ff fee8 	bl	8002184 <__sinit>
 80023b4:	4b7c      	ldr	r3, [pc, #496]	; (80025a8 <_vfiprintf_r+0x20c>)
 80023b6:	429c      	cmp	r4, r3
 80023b8:	d158      	bne.n	800246c <_vfiprintf_r+0xd0>
 80023ba:	6874      	ldr	r4, [r6, #4]
 80023bc:	89a3      	ldrh	r3, [r4, #12]
 80023be:	0718      	lsls	r0, r3, #28
 80023c0:	d55e      	bpl.n	8002480 <_vfiprintf_r+0xe4>
 80023c2:	6923      	ldr	r3, [r4, #16]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d05b      	beq.n	8002480 <_vfiprintf_r+0xe4>
 80023c8:	2300      	movs	r3, #0
 80023ca:	9309      	str	r3, [sp, #36]	; 0x24
 80023cc:	2320      	movs	r3, #32
 80023ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80023d2:	2330      	movs	r3, #48	; 0x30
 80023d4:	f04f 0b01 	mov.w	fp, #1
 80023d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80023dc:	9503      	str	r5, [sp, #12]
 80023de:	46b8      	mov	r8, r7
 80023e0:	4645      	mov	r5, r8
 80023e2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80023e6:	b10b      	cbz	r3, 80023ec <_vfiprintf_r+0x50>
 80023e8:	2b25      	cmp	r3, #37	; 0x25
 80023ea:	d154      	bne.n	8002496 <_vfiprintf_r+0xfa>
 80023ec:	ebb8 0a07 	subs.w	sl, r8, r7
 80023f0:	d00b      	beq.n	800240a <_vfiprintf_r+0x6e>
 80023f2:	4653      	mov	r3, sl
 80023f4:	463a      	mov	r2, r7
 80023f6:	4621      	mov	r1, r4
 80023f8:	4630      	mov	r0, r6
 80023fa:	f7ff ffbc 	bl	8002376 <__sfputs_r>
 80023fe:	3001      	adds	r0, #1
 8002400:	f000 80c2 	beq.w	8002588 <_vfiprintf_r+0x1ec>
 8002404:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002406:	4453      	add	r3, sl
 8002408:	9309      	str	r3, [sp, #36]	; 0x24
 800240a:	f898 3000 	ldrb.w	r3, [r8]
 800240e:	2b00      	cmp	r3, #0
 8002410:	f000 80ba 	beq.w	8002588 <_vfiprintf_r+0x1ec>
 8002414:	2300      	movs	r3, #0
 8002416:	f04f 32ff 	mov.w	r2, #4294967295
 800241a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800241e:	9304      	str	r3, [sp, #16]
 8002420:	9307      	str	r3, [sp, #28]
 8002422:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002426:	931a      	str	r3, [sp, #104]	; 0x68
 8002428:	46a8      	mov	r8, r5
 800242a:	2205      	movs	r2, #5
 800242c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8002430:	485e      	ldr	r0, [pc, #376]	; (80025ac <_vfiprintf_r+0x210>)
 8002432:	f000 fcad 	bl	8002d90 <memchr>
 8002436:	9b04      	ldr	r3, [sp, #16]
 8002438:	bb78      	cbnz	r0, 800249a <_vfiprintf_r+0xfe>
 800243a:	06d9      	lsls	r1, r3, #27
 800243c:	bf44      	itt	mi
 800243e:	2220      	movmi	r2, #32
 8002440:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002444:	071a      	lsls	r2, r3, #28
 8002446:	bf44      	itt	mi
 8002448:	222b      	movmi	r2, #43	; 0x2b
 800244a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800244e:	782a      	ldrb	r2, [r5, #0]
 8002450:	2a2a      	cmp	r2, #42	; 0x2a
 8002452:	d02a      	beq.n	80024aa <_vfiprintf_r+0x10e>
 8002454:	46a8      	mov	r8, r5
 8002456:	2000      	movs	r0, #0
 8002458:	250a      	movs	r5, #10
 800245a:	9a07      	ldr	r2, [sp, #28]
 800245c:	4641      	mov	r1, r8
 800245e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002462:	3b30      	subs	r3, #48	; 0x30
 8002464:	2b09      	cmp	r3, #9
 8002466:	d969      	bls.n	800253c <_vfiprintf_r+0x1a0>
 8002468:	b360      	cbz	r0, 80024c4 <_vfiprintf_r+0x128>
 800246a:	e024      	b.n	80024b6 <_vfiprintf_r+0x11a>
 800246c:	4b50      	ldr	r3, [pc, #320]	; (80025b0 <_vfiprintf_r+0x214>)
 800246e:	429c      	cmp	r4, r3
 8002470:	d101      	bne.n	8002476 <_vfiprintf_r+0xda>
 8002472:	68b4      	ldr	r4, [r6, #8]
 8002474:	e7a2      	b.n	80023bc <_vfiprintf_r+0x20>
 8002476:	4b4f      	ldr	r3, [pc, #316]	; (80025b4 <_vfiprintf_r+0x218>)
 8002478:	429c      	cmp	r4, r3
 800247a:	bf08      	it	eq
 800247c:	68f4      	ldreq	r4, [r6, #12]
 800247e:	e79d      	b.n	80023bc <_vfiprintf_r+0x20>
 8002480:	4621      	mov	r1, r4
 8002482:	4630      	mov	r0, r6
 8002484:	f000 fae0 	bl	8002a48 <__swsetup_r>
 8002488:	2800      	cmp	r0, #0
 800248a:	d09d      	beq.n	80023c8 <_vfiprintf_r+0x2c>
 800248c:	f04f 30ff 	mov.w	r0, #4294967295
 8002490:	b01d      	add	sp, #116	; 0x74
 8002492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002496:	46a8      	mov	r8, r5
 8002498:	e7a2      	b.n	80023e0 <_vfiprintf_r+0x44>
 800249a:	4a44      	ldr	r2, [pc, #272]	; (80025ac <_vfiprintf_r+0x210>)
 800249c:	4645      	mov	r5, r8
 800249e:	1a80      	subs	r0, r0, r2
 80024a0:	fa0b f000 	lsl.w	r0, fp, r0
 80024a4:	4318      	orrs	r0, r3
 80024a6:	9004      	str	r0, [sp, #16]
 80024a8:	e7be      	b.n	8002428 <_vfiprintf_r+0x8c>
 80024aa:	9a03      	ldr	r2, [sp, #12]
 80024ac:	1d11      	adds	r1, r2, #4
 80024ae:	6812      	ldr	r2, [r2, #0]
 80024b0:	9103      	str	r1, [sp, #12]
 80024b2:	2a00      	cmp	r2, #0
 80024b4:	db01      	blt.n	80024ba <_vfiprintf_r+0x11e>
 80024b6:	9207      	str	r2, [sp, #28]
 80024b8:	e004      	b.n	80024c4 <_vfiprintf_r+0x128>
 80024ba:	4252      	negs	r2, r2
 80024bc:	f043 0302 	orr.w	r3, r3, #2
 80024c0:	9207      	str	r2, [sp, #28]
 80024c2:	9304      	str	r3, [sp, #16]
 80024c4:	f898 3000 	ldrb.w	r3, [r8]
 80024c8:	2b2e      	cmp	r3, #46	; 0x2e
 80024ca:	d10e      	bne.n	80024ea <_vfiprintf_r+0x14e>
 80024cc:	f898 3001 	ldrb.w	r3, [r8, #1]
 80024d0:	2b2a      	cmp	r3, #42	; 0x2a
 80024d2:	d138      	bne.n	8002546 <_vfiprintf_r+0x1aa>
 80024d4:	9b03      	ldr	r3, [sp, #12]
 80024d6:	f108 0802 	add.w	r8, r8, #2
 80024da:	1d1a      	adds	r2, r3, #4
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	9203      	str	r2, [sp, #12]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	bfb8      	it	lt
 80024e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80024e8:	9305      	str	r3, [sp, #20]
 80024ea:	4d33      	ldr	r5, [pc, #204]	; (80025b8 <_vfiprintf_r+0x21c>)
 80024ec:	2203      	movs	r2, #3
 80024ee:	f898 1000 	ldrb.w	r1, [r8]
 80024f2:	4628      	mov	r0, r5
 80024f4:	f000 fc4c 	bl	8002d90 <memchr>
 80024f8:	b140      	cbz	r0, 800250c <_vfiprintf_r+0x170>
 80024fa:	2340      	movs	r3, #64	; 0x40
 80024fc:	1b40      	subs	r0, r0, r5
 80024fe:	fa03 f000 	lsl.w	r0, r3, r0
 8002502:	9b04      	ldr	r3, [sp, #16]
 8002504:	f108 0801 	add.w	r8, r8, #1
 8002508:	4303      	orrs	r3, r0
 800250a:	9304      	str	r3, [sp, #16]
 800250c:	f898 1000 	ldrb.w	r1, [r8]
 8002510:	2206      	movs	r2, #6
 8002512:	482a      	ldr	r0, [pc, #168]	; (80025bc <_vfiprintf_r+0x220>)
 8002514:	f108 0701 	add.w	r7, r8, #1
 8002518:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800251c:	f000 fc38 	bl	8002d90 <memchr>
 8002520:	2800      	cmp	r0, #0
 8002522:	d037      	beq.n	8002594 <_vfiprintf_r+0x1f8>
 8002524:	4b26      	ldr	r3, [pc, #152]	; (80025c0 <_vfiprintf_r+0x224>)
 8002526:	bb1b      	cbnz	r3, 8002570 <_vfiprintf_r+0x1d4>
 8002528:	9b03      	ldr	r3, [sp, #12]
 800252a:	3307      	adds	r3, #7
 800252c:	f023 0307 	bic.w	r3, r3, #7
 8002530:	3308      	adds	r3, #8
 8002532:	9303      	str	r3, [sp, #12]
 8002534:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002536:	444b      	add	r3, r9
 8002538:	9309      	str	r3, [sp, #36]	; 0x24
 800253a:	e750      	b.n	80023de <_vfiprintf_r+0x42>
 800253c:	fb05 3202 	mla	r2, r5, r2, r3
 8002540:	2001      	movs	r0, #1
 8002542:	4688      	mov	r8, r1
 8002544:	e78a      	b.n	800245c <_vfiprintf_r+0xc0>
 8002546:	2300      	movs	r3, #0
 8002548:	250a      	movs	r5, #10
 800254a:	4619      	mov	r1, r3
 800254c:	f108 0801 	add.w	r8, r8, #1
 8002550:	9305      	str	r3, [sp, #20]
 8002552:	4640      	mov	r0, r8
 8002554:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002558:	3a30      	subs	r2, #48	; 0x30
 800255a:	2a09      	cmp	r2, #9
 800255c:	d903      	bls.n	8002566 <_vfiprintf_r+0x1ca>
 800255e:	2b00      	cmp	r3, #0
 8002560:	d0c3      	beq.n	80024ea <_vfiprintf_r+0x14e>
 8002562:	9105      	str	r1, [sp, #20]
 8002564:	e7c1      	b.n	80024ea <_vfiprintf_r+0x14e>
 8002566:	fb05 2101 	mla	r1, r5, r1, r2
 800256a:	2301      	movs	r3, #1
 800256c:	4680      	mov	r8, r0
 800256e:	e7f0      	b.n	8002552 <_vfiprintf_r+0x1b6>
 8002570:	ab03      	add	r3, sp, #12
 8002572:	9300      	str	r3, [sp, #0]
 8002574:	4622      	mov	r2, r4
 8002576:	4b13      	ldr	r3, [pc, #76]	; (80025c4 <_vfiprintf_r+0x228>)
 8002578:	a904      	add	r1, sp, #16
 800257a:	4630      	mov	r0, r6
 800257c:	f3af 8000 	nop.w
 8002580:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002584:	4681      	mov	r9, r0
 8002586:	d1d5      	bne.n	8002534 <_vfiprintf_r+0x198>
 8002588:	89a3      	ldrh	r3, [r4, #12]
 800258a:	065b      	lsls	r3, r3, #25
 800258c:	f53f af7e 	bmi.w	800248c <_vfiprintf_r+0xf0>
 8002590:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002592:	e77d      	b.n	8002490 <_vfiprintf_r+0xf4>
 8002594:	ab03      	add	r3, sp, #12
 8002596:	9300      	str	r3, [sp, #0]
 8002598:	4622      	mov	r2, r4
 800259a:	4b0a      	ldr	r3, [pc, #40]	; (80025c4 <_vfiprintf_r+0x228>)
 800259c:	a904      	add	r1, sp, #16
 800259e:	4630      	mov	r0, r6
 80025a0:	f000 f888 	bl	80026b4 <_printf_i>
 80025a4:	e7ec      	b.n	8002580 <_vfiprintf_r+0x1e4>
 80025a6:	bf00      	nop
 80025a8:	08002f34 	.word	0x08002f34
 80025ac:	08002f74 	.word	0x08002f74
 80025b0:	08002f54 	.word	0x08002f54
 80025b4:	08002f14 	.word	0x08002f14
 80025b8:	08002f7a 	.word	0x08002f7a
 80025bc:	08002f7e 	.word	0x08002f7e
 80025c0:	00000000 	.word	0x00000000
 80025c4:	08002377 	.word	0x08002377

080025c8 <_printf_common>:
 80025c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80025cc:	4691      	mov	r9, r2
 80025ce:	461f      	mov	r7, r3
 80025d0:	688a      	ldr	r2, [r1, #8]
 80025d2:	690b      	ldr	r3, [r1, #16]
 80025d4:	4606      	mov	r6, r0
 80025d6:	4293      	cmp	r3, r2
 80025d8:	bfb8      	it	lt
 80025da:	4613      	movlt	r3, r2
 80025dc:	f8c9 3000 	str.w	r3, [r9]
 80025e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80025e4:	460c      	mov	r4, r1
 80025e6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80025ea:	b112      	cbz	r2, 80025f2 <_printf_common+0x2a>
 80025ec:	3301      	adds	r3, #1
 80025ee:	f8c9 3000 	str.w	r3, [r9]
 80025f2:	6823      	ldr	r3, [r4, #0]
 80025f4:	0699      	lsls	r1, r3, #26
 80025f6:	bf42      	ittt	mi
 80025f8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80025fc:	3302      	addmi	r3, #2
 80025fe:	f8c9 3000 	strmi.w	r3, [r9]
 8002602:	6825      	ldr	r5, [r4, #0]
 8002604:	f015 0506 	ands.w	r5, r5, #6
 8002608:	d107      	bne.n	800261a <_printf_common+0x52>
 800260a:	f104 0a19 	add.w	sl, r4, #25
 800260e:	68e3      	ldr	r3, [r4, #12]
 8002610:	f8d9 2000 	ldr.w	r2, [r9]
 8002614:	1a9b      	subs	r3, r3, r2
 8002616:	42ab      	cmp	r3, r5
 8002618:	dc29      	bgt.n	800266e <_printf_common+0xa6>
 800261a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800261e:	6822      	ldr	r2, [r4, #0]
 8002620:	3300      	adds	r3, #0
 8002622:	bf18      	it	ne
 8002624:	2301      	movne	r3, #1
 8002626:	0692      	lsls	r2, r2, #26
 8002628:	d42e      	bmi.n	8002688 <_printf_common+0xc0>
 800262a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800262e:	4639      	mov	r1, r7
 8002630:	4630      	mov	r0, r6
 8002632:	47c0      	blx	r8
 8002634:	3001      	adds	r0, #1
 8002636:	d021      	beq.n	800267c <_printf_common+0xb4>
 8002638:	6823      	ldr	r3, [r4, #0]
 800263a:	68e5      	ldr	r5, [r4, #12]
 800263c:	f003 0306 	and.w	r3, r3, #6
 8002640:	2b04      	cmp	r3, #4
 8002642:	bf18      	it	ne
 8002644:	2500      	movne	r5, #0
 8002646:	f8d9 2000 	ldr.w	r2, [r9]
 800264a:	f04f 0900 	mov.w	r9, #0
 800264e:	bf08      	it	eq
 8002650:	1aad      	subeq	r5, r5, r2
 8002652:	68a3      	ldr	r3, [r4, #8]
 8002654:	6922      	ldr	r2, [r4, #16]
 8002656:	bf08      	it	eq
 8002658:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800265c:	4293      	cmp	r3, r2
 800265e:	bfc4      	itt	gt
 8002660:	1a9b      	subgt	r3, r3, r2
 8002662:	18ed      	addgt	r5, r5, r3
 8002664:	341a      	adds	r4, #26
 8002666:	454d      	cmp	r5, r9
 8002668:	d11a      	bne.n	80026a0 <_printf_common+0xd8>
 800266a:	2000      	movs	r0, #0
 800266c:	e008      	b.n	8002680 <_printf_common+0xb8>
 800266e:	2301      	movs	r3, #1
 8002670:	4652      	mov	r2, sl
 8002672:	4639      	mov	r1, r7
 8002674:	4630      	mov	r0, r6
 8002676:	47c0      	blx	r8
 8002678:	3001      	adds	r0, #1
 800267a:	d103      	bne.n	8002684 <_printf_common+0xbc>
 800267c:	f04f 30ff 	mov.w	r0, #4294967295
 8002680:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002684:	3501      	adds	r5, #1
 8002686:	e7c2      	b.n	800260e <_printf_common+0x46>
 8002688:	2030      	movs	r0, #48	; 0x30
 800268a:	18e1      	adds	r1, r4, r3
 800268c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002690:	1c5a      	adds	r2, r3, #1
 8002692:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002696:	4422      	add	r2, r4
 8002698:	3302      	adds	r3, #2
 800269a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800269e:	e7c4      	b.n	800262a <_printf_common+0x62>
 80026a0:	2301      	movs	r3, #1
 80026a2:	4622      	mov	r2, r4
 80026a4:	4639      	mov	r1, r7
 80026a6:	4630      	mov	r0, r6
 80026a8:	47c0      	blx	r8
 80026aa:	3001      	adds	r0, #1
 80026ac:	d0e6      	beq.n	800267c <_printf_common+0xb4>
 80026ae:	f109 0901 	add.w	r9, r9, #1
 80026b2:	e7d8      	b.n	8002666 <_printf_common+0x9e>

080026b4 <_printf_i>:
 80026b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80026b8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80026bc:	460c      	mov	r4, r1
 80026be:	7e09      	ldrb	r1, [r1, #24]
 80026c0:	b085      	sub	sp, #20
 80026c2:	296e      	cmp	r1, #110	; 0x6e
 80026c4:	4617      	mov	r7, r2
 80026c6:	4606      	mov	r6, r0
 80026c8:	4698      	mov	r8, r3
 80026ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80026cc:	f000 80b3 	beq.w	8002836 <_printf_i+0x182>
 80026d0:	d822      	bhi.n	8002718 <_printf_i+0x64>
 80026d2:	2963      	cmp	r1, #99	; 0x63
 80026d4:	d036      	beq.n	8002744 <_printf_i+0x90>
 80026d6:	d80a      	bhi.n	80026ee <_printf_i+0x3a>
 80026d8:	2900      	cmp	r1, #0
 80026da:	f000 80b9 	beq.w	8002850 <_printf_i+0x19c>
 80026de:	2958      	cmp	r1, #88	; 0x58
 80026e0:	f000 8083 	beq.w	80027ea <_printf_i+0x136>
 80026e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80026e8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80026ec:	e032      	b.n	8002754 <_printf_i+0xa0>
 80026ee:	2964      	cmp	r1, #100	; 0x64
 80026f0:	d001      	beq.n	80026f6 <_printf_i+0x42>
 80026f2:	2969      	cmp	r1, #105	; 0x69
 80026f4:	d1f6      	bne.n	80026e4 <_printf_i+0x30>
 80026f6:	6820      	ldr	r0, [r4, #0]
 80026f8:	6813      	ldr	r3, [r2, #0]
 80026fa:	0605      	lsls	r5, r0, #24
 80026fc:	f103 0104 	add.w	r1, r3, #4
 8002700:	d52a      	bpl.n	8002758 <_printf_i+0xa4>
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	6011      	str	r1, [r2, #0]
 8002706:	2b00      	cmp	r3, #0
 8002708:	da03      	bge.n	8002712 <_printf_i+0x5e>
 800270a:	222d      	movs	r2, #45	; 0x2d
 800270c:	425b      	negs	r3, r3
 800270e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002712:	486f      	ldr	r0, [pc, #444]	; (80028d0 <_printf_i+0x21c>)
 8002714:	220a      	movs	r2, #10
 8002716:	e039      	b.n	800278c <_printf_i+0xd8>
 8002718:	2973      	cmp	r1, #115	; 0x73
 800271a:	f000 809d 	beq.w	8002858 <_printf_i+0x1a4>
 800271e:	d808      	bhi.n	8002732 <_printf_i+0x7e>
 8002720:	296f      	cmp	r1, #111	; 0x6f
 8002722:	d020      	beq.n	8002766 <_printf_i+0xb2>
 8002724:	2970      	cmp	r1, #112	; 0x70
 8002726:	d1dd      	bne.n	80026e4 <_printf_i+0x30>
 8002728:	6823      	ldr	r3, [r4, #0]
 800272a:	f043 0320 	orr.w	r3, r3, #32
 800272e:	6023      	str	r3, [r4, #0]
 8002730:	e003      	b.n	800273a <_printf_i+0x86>
 8002732:	2975      	cmp	r1, #117	; 0x75
 8002734:	d017      	beq.n	8002766 <_printf_i+0xb2>
 8002736:	2978      	cmp	r1, #120	; 0x78
 8002738:	d1d4      	bne.n	80026e4 <_printf_i+0x30>
 800273a:	2378      	movs	r3, #120	; 0x78
 800273c:	4865      	ldr	r0, [pc, #404]	; (80028d4 <_printf_i+0x220>)
 800273e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002742:	e055      	b.n	80027f0 <_printf_i+0x13c>
 8002744:	6813      	ldr	r3, [r2, #0]
 8002746:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800274a:	1d19      	adds	r1, r3, #4
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	6011      	str	r1, [r2, #0]
 8002750:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002754:	2301      	movs	r3, #1
 8002756:	e08c      	b.n	8002872 <_printf_i+0x1be>
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800275e:	6011      	str	r1, [r2, #0]
 8002760:	bf18      	it	ne
 8002762:	b21b      	sxthne	r3, r3
 8002764:	e7cf      	b.n	8002706 <_printf_i+0x52>
 8002766:	6813      	ldr	r3, [r2, #0]
 8002768:	6825      	ldr	r5, [r4, #0]
 800276a:	1d18      	adds	r0, r3, #4
 800276c:	6010      	str	r0, [r2, #0]
 800276e:	0628      	lsls	r0, r5, #24
 8002770:	d501      	bpl.n	8002776 <_printf_i+0xc2>
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	e002      	b.n	800277c <_printf_i+0xc8>
 8002776:	0668      	lsls	r0, r5, #25
 8002778:	d5fb      	bpl.n	8002772 <_printf_i+0xbe>
 800277a:	881b      	ldrh	r3, [r3, #0]
 800277c:	296f      	cmp	r1, #111	; 0x6f
 800277e:	bf14      	ite	ne
 8002780:	220a      	movne	r2, #10
 8002782:	2208      	moveq	r2, #8
 8002784:	4852      	ldr	r0, [pc, #328]	; (80028d0 <_printf_i+0x21c>)
 8002786:	2100      	movs	r1, #0
 8002788:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800278c:	6865      	ldr	r5, [r4, #4]
 800278e:	2d00      	cmp	r5, #0
 8002790:	60a5      	str	r5, [r4, #8]
 8002792:	f2c0 8095 	blt.w	80028c0 <_printf_i+0x20c>
 8002796:	6821      	ldr	r1, [r4, #0]
 8002798:	f021 0104 	bic.w	r1, r1, #4
 800279c:	6021      	str	r1, [r4, #0]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d13d      	bne.n	800281e <_printf_i+0x16a>
 80027a2:	2d00      	cmp	r5, #0
 80027a4:	f040 808e 	bne.w	80028c4 <_printf_i+0x210>
 80027a8:	4665      	mov	r5, ip
 80027aa:	2a08      	cmp	r2, #8
 80027ac:	d10b      	bne.n	80027c6 <_printf_i+0x112>
 80027ae:	6823      	ldr	r3, [r4, #0]
 80027b0:	07db      	lsls	r3, r3, #31
 80027b2:	d508      	bpl.n	80027c6 <_printf_i+0x112>
 80027b4:	6923      	ldr	r3, [r4, #16]
 80027b6:	6862      	ldr	r2, [r4, #4]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	bfde      	ittt	le
 80027bc:	2330      	movle	r3, #48	; 0x30
 80027be:	f805 3c01 	strble.w	r3, [r5, #-1]
 80027c2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80027c6:	ebac 0305 	sub.w	r3, ip, r5
 80027ca:	6123      	str	r3, [r4, #16]
 80027cc:	f8cd 8000 	str.w	r8, [sp]
 80027d0:	463b      	mov	r3, r7
 80027d2:	aa03      	add	r2, sp, #12
 80027d4:	4621      	mov	r1, r4
 80027d6:	4630      	mov	r0, r6
 80027d8:	f7ff fef6 	bl	80025c8 <_printf_common>
 80027dc:	3001      	adds	r0, #1
 80027de:	d14d      	bne.n	800287c <_printf_i+0x1c8>
 80027e0:	f04f 30ff 	mov.w	r0, #4294967295
 80027e4:	b005      	add	sp, #20
 80027e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80027ea:	4839      	ldr	r0, [pc, #228]	; (80028d0 <_printf_i+0x21c>)
 80027ec:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80027f0:	6813      	ldr	r3, [r2, #0]
 80027f2:	6821      	ldr	r1, [r4, #0]
 80027f4:	1d1d      	adds	r5, r3, #4
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	6015      	str	r5, [r2, #0]
 80027fa:	060a      	lsls	r2, r1, #24
 80027fc:	d50b      	bpl.n	8002816 <_printf_i+0x162>
 80027fe:	07ca      	lsls	r2, r1, #31
 8002800:	bf44      	itt	mi
 8002802:	f041 0120 	orrmi.w	r1, r1, #32
 8002806:	6021      	strmi	r1, [r4, #0]
 8002808:	b91b      	cbnz	r3, 8002812 <_printf_i+0x15e>
 800280a:	6822      	ldr	r2, [r4, #0]
 800280c:	f022 0220 	bic.w	r2, r2, #32
 8002810:	6022      	str	r2, [r4, #0]
 8002812:	2210      	movs	r2, #16
 8002814:	e7b7      	b.n	8002786 <_printf_i+0xd2>
 8002816:	064d      	lsls	r5, r1, #25
 8002818:	bf48      	it	mi
 800281a:	b29b      	uxthmi	r3, r3
 800281c:	e7ef      	b.n	80027fe <_printf_i+0x14a>
 800281e:	4665      	mov	r5, ip
 8002820:	fbb3 f1f2 	udiv	r1, r3, r2
 8002824:	fb02 3311 	mls	r3, r2, r1, r3
 8002828:	5cc3      	ldrb	r3, [r0, r3]
 800282a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800282e:	460b      	mov	r3, r1
 8002830:	2900      	cmp	r1, #0
 8002832:	d1f5      	bne.n	8002820 <_printf_i+0x16c>
 8002834:	e7b9      	b.n	80027aa <_printf_i+0xf6>
 8002836:	6813      	ldr	r3, [r2, #0]
 8002838:	6825      	ldr	r5, [r4, #0]
 800283a:	1d18      	adds	r0, r3, #4
 800283c:	6961      	ldr	r1, [r4, #20]
 800283e:	6010      	str	r0, [r2, #0]
 8002840:	0628      	lsls	r0, r5, #24
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	d501      	bpl.n	800284a <_printf_i+0x196>
 8002846:	6019      	str	r1, [r3, #0]
 8002848:	e002      	b.n	8002850 <_printf_i+0x19c>
 800284a:	066a      	lsls	r2, r5, #25
 800284c:	d5fb      	bpl.n	8002846 <_printf_i+0x192>
 800284e:	8019      	strh	r1, [r3, #0]
 8002850:	2300      	movs	r3, #0
 8002852:	4665      	mov	r5, ip
 8002854:	6123      	str	r3, [r4, #16]
 8002856:	e7b9      	b.n	80027cc <_printf_i+0x118>
 8002858:	6813      	ldr	r3, [r2, #0]
 800285a:	1d19      	adds	r1, r3, #4
 800285c:	6011      	str	r1, [r2, #0]
 800285e:	681d      	ldr	r5, [r3, #0]
 8002860:	6862      	ldr	r2, [r4, #4]
 8002862:	2100      	movs	r1, #0
 8002864:	4628      	mov	r0, r5
 8002866:	f000 fa93 	bl	8002d90 <memchr>
 800286a:	b108      	cbz	r0, 8002870 <_printf_i+0x1bc>
 800286c:	1b40      	subs	r0, r0, r5
 800286e:	6060      	str	r0, [r4, #4]
 8002870:	6863      	ldr	r3, [r4, #4]
 8002872:	6123      	str	r3, [r4, #16]
 8002874:	2300      	movs	r3, #0
 8002876:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800287a:	e7a7      	b.n	80027cc <_printf_i+0x118>
 800287c:	6923      	ldr	r3, [r4, #16]
 800287e:	462a      	mov	r2, r5
 8002880:	4639      	mov	r1, r7
 8002882:	4630      	mov	r0, r6
 8002884:	47c0      	blx	r8
 8002886:	3001      	adds	r0, #1
 8002888:	d0aa      	beq.n	80027e0 <_printf_i+0x12c>
 800288a:	6823      	ldr	r3, [r4, #0]
 800288c:	079b      	lsls	r3, r3, #30
 800288e:	d413      	bmi.n	80028b8 <_printf_i+0x204>
 8002890:	68e0      	ldr	r0, [r4, #12]
 8002892:	9b03      	ldr	r3, [sp, #12]
 8002894:	4298      	cmp	r0, r3
 8002896:	bfb8      	it	lt
 8002898:	4618      	movlt	r0, r3
 800289a:	e7a3      	b.n	80027e4 <_printf_i+0x130>
 800289c:	2301      	movs	r3, #1
 800289e:	464a      	mov	r2, r9
 80028a0:	4639      	mov	r1, r7
 80028a2:	4630      	mov	r0, r6
 80028a4:	47c0      	blx	r8
 80028a6:	3001      	adds	r0, #1
 80028a8:	d09a      	beq.n	80027e0 <_printf_i+0x12c>
 80028aa:	3501      	adds	r5, #1
 80028ac:	68e3      	ldr	r3, [r4, #12]
 80028ae:	9a03      	ldr	r2, [sp, #12]
 80028b0:	1a9b      	subs	r3, r3, r2
 80028b2:	42ab      	cmp	r3, r5
 80028b4:	dcf2      	bgt.n	800289c <_printf_i+0x1e8>
 80028b6:	e7eb      	b.n	8002890 <_printf_i+0x1dc>
 80028b8:	2500      	movs	r5, #0
 80028ba:	f104 0919 	add.w	r9, r4, #25
 80028be:	e7f5      	b.n	80028ac <_printf_i+0x1f8>
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d1ac      	bne.n	800281e <_printf_i+0x16a>
 80028c4:	7803      	ldrb	r3, [r0, #0]
 80028c6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80028ca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80028ce:	e76c      	b.n	80027aa <_printf_i+0xf6>
 80028d0:	08002f85 	.word	0x08002f85
 80028d4:	08002f96 	.word	0x08002f96

080028d8 <_sbrk_r>:
 80028d8:	b538      	push	{r3, r4, r5, lr}
 80028da:	2300      	movs	r3, #0
 80028dc:	4c05      	ldr	r4, [pc, #20]	; (80028f4 <_sbrk_r+0x1c>)
 80028de:	4605      	mov	r5, r0
 80028e0:	4608      	mov	r0, r1
 80028e2:	6023      	str	r3, [r4, #0]
 80028e4:	f7fd ffcc 	bl	8000880 <_sbrk>
 80028e8:	1c43      	adds	r3, r0, #1
 80028ea:	d102      	bne.n	80028f2 <_sbrk_r+0x1a>
 80028ec:	6823      	ldr	r3, [r4, #0]
 80028ee:	b103      	cbz	r3, 80028f2 <_sbrk_r+0x1a>
 80028f0:	602b      	str	r3, [r5, #0]
 80028f2:	bd38      	pop	{r3, r4, r5, pc}
 80028f4:	20000128 	.word	0x20000128

080028f8 <__sread>:
 80028f8:	b510      	push	{r4, lr}
 80028fa:	460c      	mov	r4, r1
 80028fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002900:	f000 faa2 	bl	8002e48 <_read_r>
 8002904:	2800      	cmp	r0, #0
 8002906:	bfab      	itete	ge
 8002908:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800290a:	89a3      	ldrhlt	r3, [r4, #12]
 800290c:	181b      	addge	r3, r3, r0
 800290e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002912:	bfac      	ite	ge
 8002914:	6563      	strge	r3, [r4, #84]	; 0x54
 8002916:	81a3      	strhlt	r3, [r4, #12]
 8002918:	bd10      	pop	{r4, pc}

0800291a <__swrite>:
 800291a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800291e:	461f      	mov	r7, r3
 8002920:	898b      	ldrh	r3, [r1, #12]
 8002922:	4605      	mov	r5, r0
 8002924:	05db      	lsls	r3, r3, #23
 8002926:	460c      	mov	r4, r1
 8002928:	4616      	mov	r6, r2
 800292a:	d505      	bpl.n	8002938 <__swrite+0x1e>
 800292c:	2302      	movs	r3, #2
 800292e:	2200      	movs	r2, #0
 8002930:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002934:	f000 f9b6 	bl	8002ca4 <_lseek_r>
 8002938:	89a3      	ldrh	r3, [r4, #12]
 800293a:	4632      	mov	r2, r6
 800293c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002940:	81a3      	strh	r3, [r4, #12]
 8002942:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002946:	463b      	mov	r3, r7
 8002948:	4628      	mov	r0, r5
 800294a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800294e:	f000 b869 	b.w	8002a24 <_write_r>

08002952 <__sseek>:
 8002952:	b510      	push	{r4, lr}
 8002954:	460c      	mov	r4, r1
 8002956:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800295a:	f000 f9a3 	bl	8002ca4 <_lseek_r>
 800295e:	1c43      	adds	r3, r0, #1
 8002960:	89a3      	ldrh	r3, [r4, #12]
 8002962:	bf15      	itete	ne
 8002964:	6560      	strne	r0, [r4, #84]	; 0x54
 8002966:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800296a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800296e:	81a3      	strheq	r3, [r4, #12]
 8002970:	bf18      	it	ne
 8002972:	81a3      	strhne	r3, [r4, #12]
 8002974:	bd10      	pop	{r4, pc}

08002976 <__sclose>:
 8002976:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800297a:	f000 b8d3 	b.w	8002b24 <_close_r>
	...

08002980 <__swbuf_r>:
 8002980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002982:	460e      	mov	r6, r1
 8002984:	4614      	mov	r4, r2
 8002986:	4605      	mov	r5, r0
 8002988:	b118      	cbz	r0, 8002992 <__swbuf_r+0x12>
 800298a:	6983      	ldr	r3, [r0, #24]
 800298c:	b90b      	cbnz	r3, 8002992 <__swbuf_r+0x12>
 800298e:	f7ff fbf9 	bl	8002184 <__sinit>
 8002992:	4b21      	ldr	r3, [pc, #132]	; (8002a18 <__swbuf_r+0x98>)
 8002994:	429c      	cmp	r4, r3
 8002996:	d12a      	bne.n	80029ee <__swbuf_r+0x6e>
 8002998:	686c      	ldr	r4, [r5, #4]
 800299a:	69a3      	ldr	r3, [r4, #24]
 800299c:	60a3      	str	r3, [r4, #8]
 800299e:	89a3      	ldrh	r3, [r4, #12]
 80029a0:	071a      	lsls	r2, r3, #28
 80029a2:	d52e      	bpl.n	8002a02 <__swbuf_r+0x82>
 80029a4:	6923      	ldr	r3, [r4, #16]
 80029a6:	b363      	cbz	r3, 8002a02 <__swbuf_r+0x82>
 80029a8:	6923      	ldr	r3, [r4, #16]
 80029aa:	6820      	ldr	r0, [r4, #0]
 80029ac:	b2f6      	uxtb	r6, r6
 80029ae:	1ac0      	subs	r0, r0, r3
 80029b0:	6963      	ldr	r3, [r4, #20]
 80029b2:	4637      	mov	r7, r6
 80029b4:	4283      	cmp	r3, r0
 80029b6:	dc04      	bgt.n	80029c2 <__swbuf_r+0x42>
 80029b8:	4621      	mov	r1, r4
 80029ba:	4628      	mov	r0, r5
 80029bc:	f000 f948 	bl	8002c50 <_fflush_r>
 80029c0:	bb28      	cbnz	r0, 8002a0e <__swbuf_r+0x8e>
 80029c2:	68a3      	ldr	r3, [r4, #8]
 80029c4:	3001      	adds	r0, #1
 80029c6:	3b01      	subs	r3, #1
 80029c8:	60a3      	str	r3, [r4, #8]
 80029ca:	6823      	ldr	r3, [r4, #0]
 80029cc:	1c5a      	adds	r2, r3, #1
 80029ce:	6022      	str	r2, [r4, #0]
 80029d0:	701e      	strb	r6, [r3, #0]
 80029d2:	6963      	ldr	r3, [r4, #20]
 80029d4:	4283      	cmp	r3, r0
 80029d6:	d004      	beq.n	80029e2 <__swbuf_r+0x62>
 80029d8:	89a3      	ldrh	r3, [r4, #12]
 80029da:	07db      	lsls	r3, r3, #31
 80029dc:	d519      	bpl.n	8002a12 <__swbuf_r+0x92>
 80029de:	2e0a      	cmp	r6, #10
 80029e0:	d117      	bne.n	8002a12 <__swbuf_r+0x92>
 80029e2:	4621      	mov	r1, r4
 80029e4:	4628      	mov	r0, r5
 80029e6:	f000 f933 	bl	8002c50 <_fflush_r>
 80029ea:	b190      	cbz	r0, 8002a12 <__swbuf_r+0x92>
 80029ec:	e00f      	b.n	8002a0e <__swbuf_r+0x8e>
 80029ee:	4b0b      	ldr	r3, [pc, #44]	; (8002a1c <__swbuf_r+0x9c>)
 80029f0:	429c      	cmp	r4, r3
 80029f2:	d101      	bne.n	80029f8 <__swbuf_r+0x78>
 80029f4:	68ac      	ldr	r4, [r5, #8]
 80029f6:	e7d0      	b.n	800299a <__swbuf_r+0x1a>
 80029f8:	4b09      	ldr	r3, [pc, #36]	; (8002a20 <__swbuf_r+0xa0>)
 80029fa:	429c      	cmp	r4, r3
 80029fc:	bf08      	it	eq
 80029fe:	68ec      	ldreq	r4, [r5, #12]
 8002a00:	e7cb      	b.n	800299a <__swbuf_r+0x1a>
 8002a02:	4621      	mov	r1, r4
 8002a04:	4628      	mov	r0, r5
 8002a06:	f000 f81f 	bl	8002a48 <__swsetup_r>
 8002a0a:	2800      	cmp	r0, #0
 8002a0c:	d0cc      	beq.n	80029a8 <__swbuf_r+0x28>
 8002a0e:	f04f 37ff 	mov.w	r7, #4294967295
 8002a12:	4638      	mov	r0, r7
 8002a14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a16:	bf00      	nop
 8002a18:	08002f34 	.word	0x08002f34
 8002a1c:	08002f54 	.word	0x08002f54
 8002a20:	08002f14 	.word	0x08002f14

08002a24 <_write_r>:
 8002a24:	b538      	push	{r3, r4, r5, lr}
 8002a26:	4605      	mov	r5, r0
 8002a28:	4608      	mov	r0, r1
 8002a2a:	4611      	mov	r1, r2
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	4c05      	ldr	r4, [pc, #20]	; (8002a44 <_write_r+0x20>)
 8002a30:	6022      	str	r2, [r4, #0]
 8002a32:	461a      	mov	r2, r3
 8002a34:	f7fd fed7 	bl	80007e6 <_write>
 8002a38:	1c43      	adds	r3, r0, #1
 8002a3a:	d102      	bne.n	8002a42 <_write_r+0x1e>
 8002a3c:	6823      	ldr	r3, [r4, #0]
 8002a3e:	b103      	cbz	r3, 8002a42 <_write_r+0x1e>
 8002a40:	602b      	str	r3, [r5, #0]
 8002a42:	bd38      	pop	{r3, r4, r5, pc}
 8002a44:	20000128 	.word	0x20000128

08002a48 <__swsetup_r>:
 8002a48:	4b32      	ldr	r3, [pc, #200]	; (8002b14 <__swsetup_r+0xcc>)
 8002a4a:	b570      	push	{r4, r5, r6, lr}
 8002a4c:	681d      	ldr	r5, [r3, #0]
 8002a4e:	4606      	mov	r6, r0
 8002a50:	460c      	mov	r4, r1
 8002a52:	b125      	cbz	r5, 8002a5e <__swsetup_r+0x16>
 8002a54:	69ab      	ldr	r3, [r5, #24]
 8002a56:	b913      	cbnz	r3, 8002a5e <__swsetup_r+0x16>
 8002a58:	4628      	mov	r0, r5
 8002a5a:	f7ff fb93 	bl	8002184 <__sinit>
 8002a5e:	4b2e      	ldr	r3, [pc, #184]	; (8002b18 <__swsetup_r+0xd0>)
 8002a60:	429c      	cmp	r4, r3
 8002a62:	d10f      	bne.n	8002a84 <__swsetup_r+0x3c>
 8002a64:	686c      	ldr	r4, [r5, #4]
 8002a66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002a6a:	b29a      	uxth	r2, r3
 8002a6c:	0715      	lsls	r5, r2, #28
 8002a6e:	d42c      	bmi.n	8002aca <__swsetup_r+0x82>
 8002a70:	06d0      	lsls	r0, r2, #27
 8002a72:	d411      	bmi.n	8002a98 <__swsetup_r+0x50>
 8002a74:	2209      	movs	r2, #9
 8002a76:	6032      	str	r2, [r6, #0]
 8002a78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a7c:	81a3      	strh	r3, [r4, #12]
 8002a7e:	f04f 30ff 	mov.w	r0, #4294967295
 8002a82:	e03e      	b.n	8002b02 <__swsetup_r+0xba>
 8002a84:	4b25      	ldr	r3, [pc, #148]	; (8002b1c <__swsetup_r+0xd4>)
 8002a86:	429c      	cmp	r4, r3
 8002a88:	d101      	bne.n	8002a8e <__swsetup_r+0x46>
 8002a8a:	68ac      	ldr	r4, [r5, #8]
 8002a8c:	e7eb      	b.n	8002a66 <__swsetup_r+0x1e>
 8002a8e:	4b24      	ldr	r3, [pc, #144]	; (8002b20 <__swsetup_r+0xd8>)
 8002a90:	429c      	cmp	r4, r3
 8002a92:	bf08      	it	eq
 8002a94:	68ec      	ldreq	r4, [r5, #12]
 8002a96:	e7e6      	b.n	8002a66 <__swsetup_r+0x1e>
 8002a98:	0751      	lsls	r1, r2, #29
 8002a9a:	d512      	bpl.n	8002ac2 <__swsetup_r+0x7a>
 8002a9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002a9e:	b141      	cbz	r1, 8002ab2 <__swsetup_r+0x6a>
 8002aa0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002aa4:	4299      	cmp	r1, r3
 8002aa6:	d002      	beq.n	8002aae <__swsetup_r+0x66>
 8002aa8:	4630      	mov	r0, r6
 8002aaa:	f000 f981 	bl	8002db0 <_free_r>
 8002aae:	2300      	movs	r3, #0
 8002ab0:	6363      	str	r3, [r4, #52]	; 0x34
 8002ab2:	89a3      	ldrh	r3, [r4, #12]
 8002ab4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002ab8:	81a3      	strh	r3, [r4, #12]
 8002aba:	2300      	movs	r3, #0
 8002abc:	6063      	str	r3, [r4, #4]
 8002abe:	6923      	ldr	r3, [r4, #16]
 8002ac0:	6023      	str	r3, [r4, #0]
 8002ac2:	89a3      	ldrh	r3, [r4, #12]
 8002ac4:	f043 0308 	orr.w	r3, r3, #8
 8002ac8:	81a3      	strh	r3, [r4, #12]
 8002aca:	6923      	ldr	r3, [r4, #16]
 8002acc:	b94b      	cbnz	r3, 8002ae2 <__swsetup_r+0x9a>
 8002ace:	89a3      	ldrh	r3, [r4, #12]
 8002ad0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002ad4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ad8:	d003      	beq.n	8002ae2 <__swsetup_r+0x9a>
 8002ada:	4621      	mov	r1, r4
 8002adc:	4630      	mov	r0, r6
 8002ade:	f000 f917 	bl	8002d10 <__smakebuf_r>
 8002ae2:	89a2      	ldrh	r2, [r4, #12]
 8002ae4:	f012 0301 	ands.w	r3, r2, #1
 8002ae8:	d00c      	beq.n	8002b04 <__swsetup_r+0xbc>
 8002aea:	2300      	movs	r3, #0
 8002aec:	60a3      	str	r3, [r4, #8]
 8002aee:	6963      	ldr	r3, [r4, #20]
 8002af0:	425b      	negs	r3, r3
 8002af2:	61a3      	str	r3, [r4, #24]
 8002af4:	6923      	ldr	r3, [r4, #16]
 8002af6:	b953      	cbnz	r3, 8002b0e <__swsetup_r+0xc6>
 8002af8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002afc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8002b00:	d1ba      	bne.n	8002a78 <__swsetup_r+0x30>
 8002b02:	bd70      	pop	{r4, r5, r6, pc}
 8002b04:	0792      	lsls	r2, r2, #30
 8002b06:	bf58      	it	pl
 8002b08:	6963      	ldrpl	r3, [r4, #20]
 8002b0a:	60a3      	str	r3, [r4, #8]
 8002b0c:	e7f2      	b.n	8002af4 <__swsetup_r+0xac>
 8002b0e:	2000      	movs	r0, #0
 8002b10:	e7f7      	b.n	8002b02 <__swsetup_r+0xba>
 8002b12:	bf00      	nop
 8002b14:	2000000c 	.word	0x2000000c
 8002b18:	08002f34 	.word	0x08002f34
 8002b1c:	08002f54 	.word	0x08002f54
 8002b20:	08002f14 	.word	0x08002f14

08002b24 <_close_r>:
 8002b24:	b538      	push	{r3, r4, r5, lr}
 8002b26:	2300      	movs	r3, #0
 8002b28:	4c05      	ldr	r4, [pc, #20]	; (8002b40 <_close_r+0x1c>)
 8002b2a:	4605      	mov	r5, r0
 8002b2c:	4608      	mov	r0, r1
 8002b2e:	6023      	str	r3, [r4, #0]
 8002b30:	f7fd fe75 	bl	800081e <_close>
 8002b34:	1c43      	adds	r3, r0, #1
 8002b36:	d102      	bne.n	8002b3e <_close_r+0x1a>
 8002b38:	6823      	ldr	r3, [r4, #0]
 8002b3a:	b103      	cbz	r3, 8002b3e <_close_r+0x1a>
 8002b3c:	602b      	str	r3, [r5, #0]
 8002b3e:	bd38      	pop	{r3, r4, r5, pc}
 8002b40:	20000128 	.word	0x20000128

08002b44 <__sflush_r>:
 8002b44:	898a      	ldrh	r2, [r1, #12]
 8002b46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b4a:	4605      	mov	r5, r0
 8002b4c:	0710      	lsls	r0, r2, #28
 8002b4e:	460c      	mov	r4, r1
 8002b50:	d458      	bmi.n	8002c04 <__sflush_r+0xc0>
 8002b52:	684b      	ldr	r3, [r1, #4]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	dc05      	bgt.n	8002b64 <__sflush_r+0x20>
 8002b58:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	dc02      	bgt.n	8002b64 <__sflush_r+0x20>
 8002b5e:	2000      	movs	r0, #0
 8002b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002b64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002b66:	2e00      	cmp	r6, #0
 8002b68:	d0f9      	beq.n	8002b5e <__sflush_r+0x1a>
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002b70:	682f      	ldr	r7, [r5, #0]
 8002b72:	6a21      	ldr	r1, [r4, #32]
 8002b74:	602b      	str	r3, [r5, #0]
 8002b76:	d032      	beq.n	8002bde <__sflush_r+0x9a>
 8002b78:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002b7a:	89a3      	ldrh	r3, [r4, #12]
 8002b7c:	075a      	lsls	r2, r3, #29
 8002b7e:	d505      	bpl.n	8002b8c <__sflush_r+0x48>
 8002b80:	6863      	ldr	r3, [r4, #4]
 8002b82:	1ac0      	subs	r0, r0, r3
 8002b84:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002b86:	b10b      	cbz	r3, 8002b8c <__sflush_r+0x48>
 8002b88:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002b8a:	1ac0      	subs	r0, r0, r3
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	4602      	mov	r2, r0
 8002b90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002b92:	6a21      	ldr	r1, [r4, #32]
 8002b94:	4628      	mov	r0, r5
 8002b96:	47b0      	blx	r6
 8002b98:	1c43      	adds	r3, r0, #1
 8002b9a:	89a3      	ldrh	r3, [r4, #12]
 8002b9c:	d106      	bne.n	8002bac <__sflush_r+0x68>
 8002b9e:	6829      	ldr	r1, [r5, #0]
 8002ba0:	291d      	cmp	r1, #29
 8002ba2:	d848      	bhi.n	8002c36 <__sflush_r+0xf2>
 8002ba4:	4a29      	ldr	r2, [pc, #164]	; (8002c4c <__sflush_r+0x108>)
 8002ba6:	40ca      	lsrs	r2, r1
 8002ba8:	07d6      	lsls	r6, r2, #31
 8002baa:	d544      	bpl.n	8002c36 <__sflush_r+0xf2>
 8002bac:	2200      	movs	r2, #0
 8002bae:	6062      	str	r2, [r4, #4]
 8002bb0:	6922      	ldr	r2, [r4, #16]
 8002bb2:	04d9      	lsls	r1, r3, #19
 8002bb4:	6022      	str	r2, [r4, #0]
 8002bb6:	d504      	bpl.n	8002bc2 <__sflush_r+0x7e>
 8002bb8:	1c42      	adds	r2, r0, #1
 8002bba:	d101      	bne.n	8002bc0 <__sflush_r+0x7c>
 8002bbc:	682b      	ldr	r3, [r5, #0]
 8002bbe:	b903      	cbnz	r3, 8002bc2 <__sflush_r+0x7e>
 8002bc0:	6560      	str	r0, [r4, #84]	; 0x54
 8002bc2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002bc4:	602f      	str	r7, [r5, #0]
 8002bc6:	2900      	cmp	r1, #0
 8002bc8:	d0c9      	beq.n	8002b5e <__sflush_r+0x1a>
 8002bca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002bce:	4299      	cmp	r1, r3
 8002bd0:	d002      	beq.n	8002bd8 <__sflush_r+0x94>
 8002bd2:	4628      	mov	r0, r5
 8002bd4:	f000 f8ec 	bl	8002db0 <_free_r>
 8002bd8:	2000      	movs	r0, #0
 8002bda:	6360      	str	r0, [r4, #52]	; 0x34
 8002bdc:	e7c0      	b.n	8002b60 <__sflush_r+0x1c>
 8002bde:	2301      	movs	r3, #1
 8002be0:	4628      	mov	r0, r5
 8002be2:	47b0      	blx	r6
 8002be4:	1c41      	adds	r1, r0, #1
 8002be6:	d1c8      	bne.n	8002b7a <__sflush_r+0x36>
 8002be8:	682b      	ldr	r3, [r5, #0]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d0c5      	beq.n	8002b7a <__sflush_r+0x36>
 8002bee:	2b1d      	cmp	r3, #29
 8002bf0:	d001      	beq.n	8002bf6 <__sflush_r+0xb2>
 8002bf2:	2b16      	cmp	r3, #22
 8002bf4:	d101      	bne.n	8002bfa <__sflush_r+0xb6>
 8002bf6:	602f      	str	r7, [r5, #0]
 8002bf8:	e7b1      	b.n	8002b5e <__sflush_r+0x1a>
 8002bfa:	89a3      	ldrh	r3, [r4, #12]
 8002bfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c00:	81a3      	strh	r3, [r4, #12]
 8002c02:	e7ad      	b.n	8002b60 <__sflush_r+0x1c>
 8002c04:	690f      	ldr	r7, [r1, #16]
 8002c06:	2f00      	cmp	r7, #0
 8002c08:	d0a9      	beq.n	8002b5e <__sflush_r+0x1a>
 8002c0a:	0793      	lsls	r3, r2, #30
 8002c0c:	bf18      	it	ne
 8002c0e:	2300      	movne	r3, #0
 8002c10:	680e      	ldr	r6, [r1, #0]
 8002c12:	bf08      	it	eq
 8002c14:	694b      	ldreq	r3, [r1, #20]
 8002c16:	eba6 0807 	sub.w	r8, r6, r7
 8002c1a:	600f      	str	r7, [r1, #0]
 8002c1c:	608b      	str	r3, [r1, #8]
 8002c1e:	f1b8 0f00 	cmp.w	r8, #0
 8002c22:	dd9c      	ble.n	8002b5e <__sflush_r+0x1a>
 8002c24:	4643      	mov	r3, r8
 8002c26:	463a      	mov	r2, r7
 8002c28:	6a21      	ldr	r1, [r4, #32]
 8002c2a:	4628      	mov	r0, r5
 8002c2c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002c2e:	47b0      	blx	r6
 8002c30:	2800      	cmp	r0, #0
 8002c32:	dc06      	bgt.n	8002c42 <__sflush_r+0xfe>
 8002c34:	89a3      	ldrh	r3, [r4, #12]
 8002c36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c3a:	81a3      	strh	r3, [r4, #12]
 8002c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c40:	e78e      	b.n	8002b60 <__sflush_r+0x1c>
 8002c42:	4407      	add	r7, r0
 8002c44:	eba8 0800 	sub.w	r8, r8, r0
 8002c48:	e7e9      	b.n	8002c1e <__sflush_r+0xda>
 8002c4a:	bf00      	nop
 8002c4c:	20400001 	.word	0x20400001

08002c50 <_fflush_r>:
 8002c50:	b538      	push	{r3, r4, r5, lr}
 8002c52:	690b      	ldr	r3, [r1, #16]
 8002c54:	4605      	mov	r5, r0
 8002c56:	460c      	mov	r4, r1
 8002c58:	b1db      	cbz	r3, 8002c92 <_fflush_r+0x42>
 8002c5a:	b118      	cbz	r0, 8002c64 <_fflush_r+0x14>
 8002c5c:	6983      	ldr	r3, [r0, #24]
 8002c5e:	b90b      	cbnz	r3, 8002c64 <_fflush_r+0x14>
 8002c60:	f7ff fa90 	bl	8002184 <__sinit>
 8002c64:	4b0c      	ldr	r3, [pc, #48]	; (8002c98 <_fflush_r+0x48>)
 8002c66:	429c      	cmp	r4, r3
 8002c68:	d109      	bne.n	8002c7e <_fflush_r+0x2e>
 8002c6a:	686c      	ldr	r4, [r5, #4]
 8002c6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002c70:	b17b      	cbz	r3, 8002c92 <_fflush_r+0x42>
 8002c72:	4621      	mov	r1, r4
 8002c74:	4628      	mov	r0, r5
 8002c76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002c7a:	f7ff bf63 	b.w	8002b44 <__sflush_r>
 8002c7e:	4b07      	ldr	r3, [pc, #28]	; (8002c9c <_fflush_r+0x4c>)
 8002c80:	429c      	cmp	r4, r3
 8002c82:	d101      	bne.n	8002c88 <_fflush_r+0x38>
 8002c84:	68ac      	ldr	r4, [r5, #8]
 8002c86:	e7f1      	b.n	8002c6c <_fflush_r+0x1c>
 8002c88:	4b05      	ldr	r3, [pc, #20]	; (8002ca0 <_fflush_r+0x50>)
 8002c8a:	429c      	cmp	r4, r3
 8002c8c:	bf08      	it	eq
 8002c8e:	68ec      	ldreq	r4, [r5, #12]
 8002c90:	e7ec      	b.n	8002c6c <_fflush_r+0x1c>
 8002c92:	2000      	movs	r0, #0
 8002c94:	bd38      	pop	{r3, r4, r5, pc}
 8002c96:	bf00      	nop
 8002c98:	08002f34 	.word	0x08002f34
 8002c9c:	08002f54 	.word	0x08002f54
 8002ca0:	08002f14 	.word	0x08002f14

08002ca4 <_lseek_r>:
 8002ca4:	b538      	push	{r3, r4, r5, lr}
 8002ca6:	4605      	mov	r5, r0
 8002ca8:	4608      	mov	r0, r1
 8002caa:	4611      	mov	r1, r2
 8002cac:	2200      	movs	r2, #0
 8002cae:	4c05      	ldr	r4, [pc, #20]	; (8002cc4 <_lseek_r+0x20>)
 8002cb0:	6022      	str	r2, [r4, #0]
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	f7fd fdd7 	bl	8000866 <_lseek>
 8002cb8:	1c43      	adds	r3, r0, #1
 8002cba:	d102      	bne.n	8002cc2 <_lseek_r+0x1e>
 8002cbc:	6823      	ldr	r3, [r4, #0]
 8002cbe:	b103      	cbz	r3, 8002cc2 <_lseek_r+0x1e>
 8002cc0:	602b      	str	r3, [r5, #0]
 8002cc2:	bd38      	pop	{r3, r4, r5, pc}
 8002cc4:	20000128 	.word	0x20000128

08002cc8 <__swhatbuf_r>:
 8002cc8:	b570      	push	{r4, r5, r6, lr}
 8002cca:	460e      	mov	r6, r1
 8002ccc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002cd0:	b096      	sub	sp, #88	; 0x58
 8002cd2:	2900      	cmp	r1, #0
 8002cd4:	4614      	mov	r4, r2
 8002cd6:	461d      	mov	r5, r3
 8002cd8:	da07      	bge.n	8002cea <__swhatbuf_r+0x22>
 8002cda:	2300      	movs	r3, #0
 8002cdc:	602b      	str	r3, [r5, #0]
 8002cde:	89b3      	ldrh	r3, [r6, #12]
 8002ce0:	061a      	lsls	r2, r3, #24
 8002ce2:	d410      	bmi.n	8002d06 <__swhatbuf_r+0x3e>
 8002ce4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ce8:	e00e      	b.n	8002d08 <__swhatbuf_r+0x40>
 8002cea:	466a      	mov	r2, sp
 8002cec:	f000 f8be 	bl	8002e6c <_fstat_r>
 8002cf0:	2800      	cmp	r0, #0
 8002cf2:	dbf2      	blt.n	8002cda <__swhatbuf_r+0x12>
 8002cf4:	9a01      	ldr	r2, [sp, #4]
 8002cf6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002cfa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002cfe:	425a      	negs	r2, r3
 8002d00:	415a      	adcs	r2, r3
 8002d02:	602a      	str	r2, [r5, #0]
 8002d04:	e7ee      	b.n	8002ce4 <__swhatbuf_r+0x1c>
 8002d06:	2340      	movs	r3, #64	; 0x40
 8002d08:	2000      	movs	r0, #0
 8002d0a:	6023      	str	r3, [r4, #0]
 8002d0c:	b016      	add	sp, #88	; 0x58
 8002d0e:	bd70      	pop	{r4, r5, r6, pc}

08002d10 <__smakebuf_r>:
 8002d10:	898b      	ldrh	r3, [r1, #12]
 8002d12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002d14:	079d      	lsls	r5, r3, #30
 8002d16:	4606      	mov	r6, r0
 8002d18:	460c      	mov	r4, r1
 8002d1a:	d507      	bpl.n	8002d2c <__smakebuf_r+0x1c>
 8002d1c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002d20:	6023      	str	r3, [r4, #0]
 8002d22:	6123      	str	r3, [r4, #16]
 8002d24:	2301      	movs	r3, #1
 8002d26:	6163      	str	r3, [r4, #20]
 8002d28:	b002      	add	sp, #8
 8002d2a:	bd70      	pop	{r4, r5, r6, pc}
 8002d2c:	ab01      	add	r3, sp, #4
 8002d2e:	466a      	mov	r2, sp
 8002d30:	f7ff ffca 	bl	8002cc8 <__swhatbuf_r>
 8002d34:	9900      	ldr	r1, [sp, #0]
 8002d36:	4605      	mov	r5, r0
 8002d38:	4630      	mov	r0, r6
 8002d3a:	f7ff faad 	bl	8002298 <_malloc_r>
 8002d3e:	b948      	cbnz	r0, 8002d54 <__smakebuf_r+0x44>
 8002d40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002d44:	059a      	lsls	r2, r3, #22
 8002d46:	d4ef      	bmi.n	8002d28 <__smakebuf_r+0x18>
 8002d48:	f023 0303 	bic.w	r3, r3, #3
 8002d4c:	f043 0302 	orr.w	r3, r3, #2
 8002d50:	81a3      	strh	r3, [r4, #12]
 8002d52:	e7e3      	b.n	8002d1c <__smakebuf_r+0xc>
 8002d54:	4b0d      	ldr	r3, [pc, #52]	; (8002d8c <__smakebuf_r+0x7c>)
 8002d56:	62b3      	str	r3, [r6, #40]	; 0x28
 8002d58:	89a3      	ldrh	r3, [r4, #12]
 8002d5a:	6020      	str	r0, [r4, #0]
 8002d5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d60:	81a3      	strh	r3, [r4, #12]
 8002d62:	9b00      	ldr	r3, [sp, #0]
 8002d64:	6120      	str	r0, [r4, #16]
 8002d66:	6163      	str	r3, [r4, #20]
 8002d68:	9b01      	ldr	r3, [sp, #4]
 8002d6a:	b15b      	cbz	r3, 8002d84 <__smakebuf_r+0x74>
 8002d6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002d70:	4630      	mov	r0, r6
 8002d72:	f000 f88d 	bl	8002e90 <_isatty_r>
 8002d76:	b128      	cbz	r0, 8002d84 <__smakebuf_r+0x74>
 8002d78:	89a3      	ldrh	r3, [r4, #12]
 8002d7a:	f023 0303 	bic.w	r3, r3, #3
 8002d7e:	f043 0301 	orr.w	r3, r3, #1
 8002d82:	81a3      	strh	r3, [r4, #12]
 8002d84:	89a3      	ldrh	r3, [r4, #12]
 8002d86:	431d      	orrs	r5, r3
 8002d88:	81a5      	strh	r5, [r4, #12]
 8002d8a:	e7cd      	b.n	8002d28 <__smakebuf_r+0x18>
 8002d8c:	0800214d 	.word	0x0800214d

08002d90 <memchr>:
 8002d90:	b510      	push	{r4, lr}
 8002d92:	b2c9      	uxtb	r1, r1
 8002d94:	4402      	add	r2, r0
 8002d96:	4290      	cmp	r0, r2
 8002d98:	4603      	mov	r3, r0
 8002d9a:	d101      	bne.n	8002da0 <memchr+0x10>
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	e003      	b.n	8002da8 <memchr+0x18>
 8002da0:	781c      	ldrb	r4, [r3, #0]
 8002da2:	3001      	adds	r0, #1
 8002da4:	428c      	cmp	r4, r1
 8002da6:	d1f6      	bne.n	8002d96 <memchr+0x6>
 8002da8:	4618      	mov	r0, r3
 8002daa:	bd10      	pop	{r4, pc}

08002dac <__malloc_lock>:
 8002dac:	4770      	bx	lr

08002dae <__malloc_unlock>:
 8002dae:	4770      	bx	lr

08002db0 <_free_r>:
 8002db0:	b538      	push	{r3, r4, r5, lr}
 8002db2:	4605      	mov	r5, r0
 8002db4:	2900      	cmp	r1, #0
 8002db6:	d043      	beq.n	8002e40 <_free_r+0x90>
 8002db8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002dbc:	1f0c      	subs	r4, r1, #4
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	bfb8      	it	lt
 8002dc2:	18e4      	addlt	r4, r4, r3
 8002dc4:	f7ff fff2 	bl	8002dac <__malloc_lock>
 8002dc8:	4a1e      	ldr	r2, [pc, #120]	; (8002e44 <_free_r+0x94>)
 8002dca:	6813      	ldr	r3, [r2, #0]
 8002dcc:	4610      	mov	r0, r2
 8002dce:	b933      	cbnz	r3, 8002dde <_free_r+0x2e>
 8002dd0:	6063      	str	r3, [r4, #4]
 8002dd2:	6014      	str	r4, [r2, #0]
 8002dd4:	4628      	mov	r0, r5
 8002dd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002dda:	f7ff bfe8 	b.w	8002dae <__malloc_unlock>
 8002dde:	42a3      	cmp	r3, r4
 8002de0:	d90b      	bls.n	8002dfa <_free_r+0x4a>
 8002de2:	6821      	ldr	r1, [r4, #0]
 8002de4:	1862      	adds	r2, r4, r1
 8002de6:	4293      	cmp	r3, r2
 8002de8:	bf01      	itttt	eq
 8002dea:	681a      	ldreq	r2, [r3, #0]
 8002dec:	685b      	ldreq	r3, [r3, #4]
 8002dee:	1852      	addeq	r2, r2, r1
 8002df0:	6022      	streq	r2, [r4, #0]
 8002df2:	6063      	str	r3, [r4, #4]
 8002df4:	6004      	str	r4, [r0, #0]
 8002df6:	e7ed      	b.n	8002dd4 <_free_r+0x24>
 8002df8:	4613      	mov	r3, r2
 8002dfa:	685a      	ldr	r2, [r3, #4]
 8002dfc:	b10a      	cbz	r2, 8002e02 <_free_r+0x52>
 8002dfe:	42a2      	cmp	r2, r4
 8002e00:	d9fa      	bls.n	8002df8 <_free_r+0x48>
 8002e02:	6819      	ldr	r1, [r3, #0]
 8002e04:	1858      	adds	r0, r3, r1
 8002e06:	42a0      	cmp	r0, r4
 8002e08:	d10b      	bne.n	8002e22 <_free_r+0x72>
 8002e0a:	6820      	ldr	r0, [r4, #0]
 8002e0c:	4401      	add	r1, r0
 8002e0e:	1858      	adds	r0, r3, r1
 8002e10:	4282      	cmp	r2, r0
 8002e12:	6019      	str	r1, [r3, #0]
 8002e14:	d1de      	bne.n	8002dd4 <_free_r+0x24>
 8002e16:	6810      	ldr	r0, [r2, #0]
 8002e18:	6852      	ldr	r2, [r2, #4]
 8002e1a:	4401      	add	r1, r0
 8002e1c:	6019      	str	r1, [r3, #0]
 8002e1e:	605a      	str	r2, [r3, #4]
 8002e20:	e7d8      	b.n	8002dd4 <_free_r+0x24>
 8002e22:	d902      	bls.n	8002e2a <_free_r+0x7a>
 8002e24:	230c      	movs	r3, #12
 8002e26:	602b      	str	r3, [r5, #0]
 8002e28:	e7d4      	b.n	8002dd4 <_free_r+0x24>
 8002e2a:	6820      	ldr	r0, [r4, #0]
 8002e2c:	1821      	adds	r1, r4, r0
 8002e2e:	428a      	cmp	r2, r1
 8002e30:	bf01      	itttt	eq
 8002e32:	6811      	ldreq	r1, [r2, #0]
 8002e34:	6852      	ldreq	r2, [r2, #4]
 8002e36:	1809      	addeq	r1, r1, r0
 8002e38:	6021      	streq	r1, [r4, #0]
 8002e3a:	6062      	str	r2, [r4, #4]
 8002e3c:	605c      	str	r4, [r3, #4]
 8002e3e:	e7c9      	b.n	8002dd4 <_free_r+0x24>
 8002e40:	bd38      	pop	{r3, r4, r5, pc}
 8002e42:	bf00      	nop
 8002e44:	20000090 	.word	0x20000090

08002e48 <_read_r>:
 8002e48:	b538      	push	{r3, r4, r5, lr}
 8002e4a:	4605      	mov	r5, r0
 8002e4c:	4608      	mov	r0, r1
 8002e4e:	4611      	mov	r1, r2
 8002e50:	2200      	movs	r2, #0
 8002e52:	4c05      	ldr	r4, [pc, #20]	; (8002e68 <_read_r+0x20>)
 8002e54:	6022      	str	r2, [r4, #0]
 8002e56:	461a      	mov	r2, r3
 8002e58:	f7fd fca8 	bl	80007ac <_read>
 8002e5c:	1c43      	adds	r3, r0, #1
 8002e5e:	d102      	bne.n	8002e66 <_read_r+0x1e>
 8002e60:	6823      	ldr	r3, [r4, #0]
 8002e62:	b103      	cbz	r3, 8002e66 <_read_r+0x1e>
 8002e64:	602b      	str	r3, [r5, #0]
 8002e66:	bd38      	pop	{r3, r4, r5, pc}
 8002e68:	20000128 	.word	0x20000128

08002e6c <_fstat_r>:
 8002e6c:	b538      	push	{r3, r4, r5, lr}
 8002e6e:	2300      	movs	r3, #0
 8002e70:	4c06      	ldr	r4, [pc, #24]	; (8002e8c <_fstat_r+0x20>)
 8002e72:	4605      	mov	r5, r0
 8002e74:	4608      	mov	r0, r1
 8002e76:	4611      	mov	r1, r2
 8002e78:	6023      	str	r3, [r4, #0]
 8002e7a:	f7fd fcdb 	bl	8000834 <_fstat>
 8002e7e:	1c43      	adds	r3, r0, #1
 8002e80:	d102      	bne.n	8002e88 <_fstat_r+0x1c>
 8002e82:	6823      	ldr	r3, [r4, #0]
 8002e84:	b103      	cbz	r3, 8002e88 <_fstat_r+0x1c>
 8002e86:	602b      	str	r3, [r5, #0]
 8002e88:	bd38      	pop	{r3, r4, r5, pc}
 8002e8a:	bf00      	nop
 8002e8c:	20000128 	.word	0x20000128

08002e90 <_isatty_r>:
 8002e90:	b538      	push	{r3, r4, r5, lr}
 8002e92:	2300      	movs	r3, #0
 8002e94:	4c05      	ldr	r4, [pc, #20]	; (8002eac <_isatty_r+0x1c>)
 8002e96:	4605      	mov	r5, r0
 8002e98:	4608      	mov	r0, r1
 8002e9a:	6023      	str	r3, [r4, #0]
 8002e9c:	f7fd fcd9 	bl	8000852 <_isatty>
 8002ea0:	1c43      	adds	r3, r0, #1
 8002ea2:	d102      	bne.n	8002eaa <_isatty_r+0x1a>
 8002ea4:	6823      	ldr	r3, [r4, #0]
 8002ea6:	b103      	cbz	r3, 8002eaa <_isatty_r+0x1a>
 8002ea8:	602b      	str	r3, [r5, #0]
 8002eaa:	bd38      	pop	{r3, r4, r5, pc}
 8002eac:	20000128 	.word	0x20000128

08002eb0 <_init>:
 8002eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eb2:	bf00      	nop
 8002eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eb6:	bc08      	pop	{r3}
 8002eb8:	469e      	mov	lr, r3
 8002eba:	4770      	bx	lr

08002ebc <_fini>:
 8002ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ebe:	bf00      	nop
 8002ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ec2:	bc08      	pop	{r3}
 8002ec4:	469e      	mov	lr, r3
 8002ec6:	4770      	bx	lr
