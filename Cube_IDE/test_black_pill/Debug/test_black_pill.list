
test_black_pill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d8c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000450  08004e98  08004e98  00014e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052e8  080052e8  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  080052e8  080052e8  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080052e8  080052e8  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052e8  080052e8  000152e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080052ec  080052ec  000152ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080052f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000300  2000007c  0800536c  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000037c  0800536c  0002037c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b1f4  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001bfc  00000000  00000000  0002b299  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c90  00000000  00000000  0002ce98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ba8  00000000  00000000  0002db28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001547c  00000000  00000000  0002e6d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000089bc  00000000  00000000  00043b4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00073051  00000000  00000000  0004c508  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bf559  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b38  00000000  00000000  000bf5d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000007c 	.word	0x2000007c
 8000128:	00000000 	.word	0x00000000
 800012c:	08004e80 	.word	0x08004e80

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000080 	.word	0x20000080
 8000148:	08004e80 	.word	0x08004e80

0800014c <setup_LCD_GPIOs>:
#include "5110.h"
#include "main.h"


void setup_LCD_GPIOs()
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_2,1); // Back Light
 8000150:	2201      	movs	r2, #1
 8000152:	2104      	movs	r1, #4
 8000154:	4810      	ldr	r0, [pc, #64]	; (8000198 <setup_LCD_GPIOs+0x4c>)
 8000156:	f002 fabe 	bl	80026d6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,1); // CE(SS)
 800015a:	2201      	movs	r2, #1
 800015c:	2110      	movs	r1, #16
 800015e:	480e      	ldr	r0, [pc, #56]	; (8000198 <setup_LCD_GPIOs+0x4c>)
 8000160:	f002 fab9 	bl	80026d6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,1); // D/C
 8000164:	2201      	movs	r2, #1
 8000166:	2102      	movs	r1, #2
 8000168:	480b      	ldr	r0, [pc, #44]	; (8000198 <setup_LCD_GPIOs+0x4c>)
 800016a:	f002 fab4 	bl	80026d6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,0); // Reset
 800016e:	2200      	movs	r2, #0
 8000170:	2101      	movs	r1, #1
 8000172:	4809      	ldr	r0, [pc, #36]	; (8000198 <setup_LCD_GPIOs+0x4c>)
 8000174:	f002 faaf 	bl	80026d6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,0); // MOSI
 8000178:	2200      	movs	r2, #0
 800017a:	2180      	movs	r1, #128	; 0x80
 800017c:	4806      	ldr	r0, [pc, #24]	; (8000198 <setup_LCD_GPIOs+0x4c>)
 800017e:	f002 faaa 	bl	80026d6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,0); // SCLK
 8000182:	2200      	movs	r2, #0
 8000184:	2120      	movs	r1, #32
 8000186:	4804      	ldr	r0, [pc, #16]	; (8000198 <setup_LCD_GPIOs+0x4c>)
 8000188:	f002 faa5 	bl	80026d6 <HAL_GPIO_WritePin>
			HAL_Delay(10);
 800018c:	200a      	movs	r0, #10
 800018e:	f002 f82b 	bl	80021e8 <HAL_Delay>
}
 8000192:	bf00      	nop
 8000194:	bd80      	pop	{r7, pc}
 8000196:	bf00      	nop
 8000198:	40010800 	.word	0x40010800

0800019c <PCD8544_write>:


void PCD8544_write(unsigned char type, unsigned char value)
{
 800019c:	b580      	push	{r7, lr}
 800019e:	b084      	sub	sp, #16
 80001a0:	af00      	add	r7, sp, #0
 80001a2:	4603      	mov	r3, r0
 80001a4:	460a      	mov	r2, r1
 80001a6:	71fb      	strb	r3, [r7, #7]
 80001a8:	4613      	mov	r3, r2
 80001aa:	71bb      	strb	r3, [r7, #6]
     unsigned char s = 0x08;
 80001ac:	2308      	movs	r3, #8
 80001ae:	73fb      	strb	r3, [r7, #15]

     if(type != 0)
 80001b0:	79fb      	ldrb	r3, [r7, #7]
 80001b2:	2b00      	cmp	r3, #0
 80001b4:	d005      	beq.n	80001c2 <PCD8544_write+0x26>
     {
          // GPIOB_pin_high(DC_pin);
			 HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,1);
 80001b6:	2201      	movs	r2, #1
 80001b8:	2102      	movs	r1, #2
 80001ba:	481d      	ldr	r0, [pc, #116]	; (8000230 <PCD8544_write+0x94>)
 80001bc:	f002 fa8b 	bl	80026d6 <HAL_GPIO_WritePin>
 80001c0:	e004      	b.n	80001cc <PCD8544_write+0x30>
     }
     else
     {
           //GPIOB_pin_low(DC_pin);
			 HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,0);
 80001c2:	2200      	movs	r2, #0
 80001c4:	2102      	movs	r1, #2
 80001c6:	481a      	ldr	r0, [pc, #104]	; (8000230 <PCD8544_write+0x94>)
 80001c8:	f002 fa85 	bl	80026d6 <HAL_GPIO_WritePin>
     }

          //GPIOB_pin_low(CE_pin);
		 HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,0);
 80001cc:	2200      	movs	r2, #0
 80001ce:	2110      	movs	r1, #16
 80001d0:	4817      	ldr	r0, [pc, #92]	; (8000230 <PCD8544_write+0x94>)
 80001d2:	f002 fa80 	bl	80026d6 <HAL_GPIO_WritePin>

     while(s > 0)
 80001d6:	e01e      	b.n	8000216 <PCD8544_write+0x7a>
     {
               //GPIOB_pin_low(SCK_pin);
			     HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,0);
 80001d8:	2200      	movs	r2, #0
 80001da:	2120      	movs	r1, #32
 80001dc:	4814      	ldr	r0, [pc, #80]	; (8000230 <PCD8544_write+0x94>)
 80001de:	f002 fa7a 	bl	80026d6 <HAL_GPIO_WritePin>

         if((value & 0x80) == 0)
 80001e2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	db05      	blt.n	80001f6 <PCD8544_write+0x5a>
         {
                   //GPIOB_pin_low(SDO_pin);
					 HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,0);
 80001ea:	2200      	movs	r2, #0
 80001ec:	2180      	movs	r1, #128	; 0x80
 80001ee:	4810      	ldr	r0, [pc, #64]	; (8000230 <PCD8544_write+0x94>)
 80001f0:	f002 fa71 	bl	80026d6 <HAL_GPIO_WritePin>
 80001f4:	e004      	b.n	8000200 <PCD8544_write+0x64>
         }
         else
         {
                    //GPIOB_pin_high(SDO_pin);
					  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,1);
 80001f6:	2201      	movs	r2, #1
 80001f8:	2180      	movs	r1, #128	; 0x80
 80001fa:	480d      	ldr	r0, [pc, #52]	; (8000230 <PCD8544_write+0x94>)
 80001fc:	f002 fa6b 	bl	80026d6 <HAL_GPIO_WritePin>
         }

         value <<= 1;
 8000200:	79bb      	ldrb	r3, [r7, #6]
 8000202:	005b      	lsls	r3, r3, #1
 8000204:	71bb      	strb	r3, [r7, #6]
               //GPIOB_pin_high(SCK_pin);
				 HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,1);
 8000206:	2201      	movs	r2, #1
 8000208:	2120      	movs	r1, #32
 800020a:	4809      	ldr	r0, [pc, #36]	; (8000230 <PCD8544_write+0x94>)
 800020c:	f002 fa63 	bl	80026d6 <HAL_GPIO_WritePin>
         s--;
 8000210:	7bfb      	ldrb	r3, [r7, #15]
 8000212:	3b01      	subs	r3, #1
 8000214:	73fb      	strb	r3, [r7, #15]
     while(s > 0)
 8000216:	7bfb      	ldrb	r3, [r7, #15]
 8000218:	2b00      	cmp	r3, #0
 800021a:	d1dd      	bne.n	80001d8 <PCD8544_write+0x3c>
     };

       //GPIOB_pin_high(CE_pin);
		 HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,1);
 800021c:	2201      	movs	r2, #1
 800021e:	2110      	movs	r1, #16
 8000220:	4803      	ldr	r0, [pc, #12]	; (8000230 <PCD8544_write+0x94>)
 8000222:	f002 fa58 	bl	80026d6 <HAL_GPIO_WritePin>
}
 8000226:	bf00      	nop
 8000228:	3710      	adds	r7, #16
 800022a:	46bd      	mov	sp, r7
 800022c:	bd80      	pop	{r7, pc}
 800022e:	bf00      	nop
 8000230:	40010800 	.word	0x40010800

08000234 <PCD8544_reset>:


void PCD8544_reset()
{
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
//     GPIOB_pin_low(RST_pin);
//     delay_us(100);
//     GPIOB_pin_high(RST_pin);
				HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,0);
 8000238:	2200      	movs	r2, #0
 800023a:	2101      	movs	r1, #1
 800023c:	4806      	ldr	r0, [pc, #24]	; (8000258 <PCD8544_reset+0x24>)
 800023e:	f002 fa4a 	bl	80026d6 <HAL_GPIO_WritePin>
				HAL_Delay(100);
 8000242:	2064      	movs	r0, #100	; 0x64
 8000244:	f001 ffd0 	bl	80021e8 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,1);
 8000248:	2201      	movs	r2, #1
 800024a:	2101      	movs	r1, #1
 800024c:	4802      	ldr	r0, [pc, #8]	; (8000258 <PCD8544_reset+0x24>)
 800024e:	f002 fa42 	bl	80026d6 <HAL_GPIO_WritePin>
}
 8000252:	bf00      	nop
 8000254:	bd80      	pop	{r7, pc}
 8000256:	bf00      	nop
 8000258:	40010800 	.word	0x40010800

0800025c <PCD8544_init>:


void PCD8544_init()
{
 800025c:	b580      	push	{r7, lr}
 800025e:	af00      	add	r7, sp, #0
    setup_LCD_GPIOs();
 8000260:	f7ff ff74 	bl	800014c <setup_LCD_GPIOs>
    PCD8544_reset();
 8000264:	f7ff ffe6 	bl	8000234 <PCD8544_reset>
    PCD8544_write(CMD, (PCD8544_extended_instruction | PCD8544_function_set));
 8000268:	2121      	movs	r1, #33	; 0x21
 800026a:	2000      	movs	r0, #0
 800026c:	f7ff ff96 	bl	800019c <PCD8544_write>
    PCD8544_write(CMD, (PCD8544_set_bias | 0x02));
 8000270:	2112      	movs	r1, #18
 8000272:	2000      	movs	r0, #0
 8000274:	f7ff ff92 	bl	800019c <PCD8544_write>
    PCD8544_set_contrast(0x39);
 8000278:	2039      	movs	r0, #57	; 0x39
 800027a:	f000 f833 	bl	80002e4 <PCD8544_set_contrast>
    PCD8544_write(CMD, PCD8544_set_temp);
 800027e:	2104      	movs	r1, #4
 8000280:	2000      	movs	r0, #0
 8000282:	f7ff ff8b 	bl	800019c <PCD8544_write>
    PCD8544_write(CMD, (PCD8544_display_normal | PCD8544_display_control));
 8000286:	210c      	movs	r1, #12
 8000288:	2000      	movs	r0, #0
 800028a:	f7ff ff87 	bl	800019c <PCD8544_write>
    PCD8544_write(CMD, PCD8544_function_set);
 800028e:	2120      	movs	r1, #32
 8000290:	2000      	movs	r0, #0
 8000292:	f7ff ff83 	bl	800019c <PCD8544_write>
    PCD8544_write(CMD, PCD8544_display_all_on);
 8000296:	2101      	movs	r1, #1
 8000298:	2000      	movs	r0, #0
 800029a:	f7ff ff7f 	bl	800019c <PCD8544_write>
    PCD8544_write(CMD, PCD8544_display_normal);
 800029e:	2104      	movs	r1, #4
 80002a0:	2000      	movs	r0, #0
 80002a2:	f7ff ff7b 	bl	800019c <PCD8544_write>
    PCD8544_clear_buffer(OFF);
 80002a6:	2000      	movs	r0, #0
 80002a8:	f000 f888 	bl	80003bc <PCD8544_clear_buffer>
}
 80002ac:	bf00      	nop
 80002ae:	bd80      	pop	{r7, pc}

080002b0 <PCD8544_backlight_state>:


void PCD8544_backlight_state(unsigned char value)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b082      	sub	sp, #8
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	4603      	mov	r3, r0
 80002b8:	71fb      	strb	r3, [r7, #7]
     if(value != 0)
 80002ba:	79fb      	ldrb	r3, [r7, #7]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d005      	beq.n	80002cc <PCD8544_backlight_state+0x1c>
     {
         //GPIOB_pin_low(BL_pin);
			  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_2,0);
 80002c0:	2200      	movs	r2, #0
 80002c2:	2104      	movs	r1, #4
 80002c4:	4806      	ldr	r0, [pc, #24]	; (80002e0 <PCD8544_backlight_state+0x30>)
 80002c6:	f002 fa06 	bl	80026d6 <HAL_GPIO_WritePin>
     else
     {
        // GPIOB_pin_high(BL_pin);
			 HAL_GPIO_WritePin(GPIOA,GPIO_PIN_2,1);
     }
}
 80002ca:	e004      	b.n	80002d6 <PCD8544_backlight_state+0x26>
			 HAL_GPIO_WritePin(GPIOA,GPIO_PIN_2,1);
 80002cc:	2201      	movs	r2, #1
 80002ce:	2104      	movs	r1, #4
 80002d0:	4803      	ldr	r0, [pc, #12]	; (80002e0 <PCD8544_backlight_state+0x30>)
 80002d2:	f002 fa00 	bl	80026d6 <HAL_GPIO_WritePin>
}
 80002d6:	bf00      	nop
 80002d8:	3708      	adds	r7, #8
 80002da:	46bd      	mov	sp, r7
 80002dc:	bd80      	pop	{r7, pc}
 80002de:	bf00      	nop
 80002e0:	40010800 	.word	0x40010800

080002e4 <PCD8544_set_contrast>:


void PCD8544_set_contrast(unsigned char value)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b082      	sub	sp, #8
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	4603      	mov	r3, r0
 80002ec:	71fb      	strb	r3, [r7, #7]
    if(value >= 0x7F)
 80002ee:	79fb      	ldrb	r3, [r7, #7]
 80002f0:	2b7e      	cmp	r3, #126	; 0x7e
 80002f2:	d901      	bls.n	80002f8 <PCD8544_set_contrast+0x14>
    {
       value = 0x7F;
 80002f4:	237f      	movs	r3, #127	; 0x7f
 80002f6:	71fb      	strb	r3, [r7, #7]
    }

    PCD8544_write(CMD, (PCD8544_extended_instruction | PCD8544_function_set));
 80002f8:	2121      	movs	r1, #33	; 0x21
 80002fa:	2000      	movs	r0, #0
 80002fc:	f7ff ff4e 	bl	800019c <PCD8544_write>
    PCD8544_write(CMD, (PCD8544_set_VOP | value));
 8000300:	79fb      	ldrb	r3, [r7, #7]
 8000302:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000306:	b2db      	uxtb	r3, r3
 8000308:	4619      	mov	r1, r3
 800030a:	2000      	movs	r0, #0
 800030c:	f7ff ff46 	bl	800019c <PCD8544_write>
    PCD8544_write(CMD, PCD8544_function_set);
 8000310:	2120      	movs	r1, #32
 8000312:	2000      	movs	r0, #0
 8000314:	f7ff ff42 	bl	800019c <PCD8544_write>
}
 8000318:	bf00      	nop
 800031a:	3708      	adds	r7, #8
 800031c:	46bd      	mov	sp, r7
 800031e:	bd80      	pop	{r7, pc}

08000320 <PCD8544_set_cursor>:


void PCD8544_set_cursor(unsigned char x_pos, unsigned char y_pos)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b082      	sub	sp, #8
 8000324:	af00      	add	r7, sp, #0
 8000326:	4603      	mov	r3, r0
 8000328:	460a      	mov	r2, r1
 800032a:	71fb      	strb	r3, [r7, #7]
 800032c:	4613      	mov	r3, r2
 800032e:	71bb      	strb	r3, [r7, #6]
    PCD8544_write(CMD, (PCD8544_set_X_addr | x_pos));
 8000330:	79fb      	ldrb	r3, [r7, #7]
 8000332:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000336:	b2db      	uxtb	r3, r3
 8000338:	4619      	mov	r1, r3
 800033a:	2000      	movs	r0, #0
 800033c:	f7ff ff2e 	bl	800019c <PCD8544_write>
    PCD8544_write(CMD, (PCD8544_set_Y_addr | y_pos));
 8000340:	79bb      	ldrb	r3, [r7, #6]
 8000342:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000346:	b2db      	uxtb	r3, r3
 8000348:	4619      	mov	r1, r3
 800034a:	2000      	movs	r0, #0
 800034c:	f7ff ff26 	bl	800019c <PCD8544_write>
}
 8000350:	bf00      	nop
 8000352:	3708      	adds	r7, #8
 8000354:	46bd      	mov	sp, r7
 8000356:	bd80      	pop	{r7, pc}

08000358 <PCD8544_print_char>:


void PCD8544_print_char(unsigned char ch, unsigned char colour)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b084      	sub	sp, #16
 800035c:	af00      	add	r7, sp, #0
 800035e:	4603      	mov	r3, r0
 8000360:	460a      	mov	r2, r1
 8000362:	71fb      	strb	r3, [r7, #7]
 8000364:	4613      	mov	r3, r2
 8000366:	71bb      	strb	r3, [r7, #6]
     unsigned char s = 0;
 8000368:	2300      	movs	r3, #0
 800036a:	73fb      	strb	r3, [r7, #15]
     unsigned char chr = 0;
 800036c:	2300      	movs	r3, #0
 800036e:	73bb      	strb	r3, [r7, #14]

     for(s = 0; s <= 4; s++)
 8000370:	2300      	movs	r3, #0
 8000372:	73fb      	strb	r3, [r7, #15]
 8000374:	e019      	b.n	80003aa <PCD8544_print_char+0x52>
     {
           chr = font[(ch - 0x20)][s];
 8000376:	79fb      	ldrb	r3, [r7, #7]
 8000378:	f1a3 0220 	sub.w	r2, r3, #32
 800037c:	7bf9      	ldrb	r1, [r7, #15]
 800037e:	480e      	ldr	r0, [pc, #56]	; (80003b8 <PCD8544_print_char+0x60>)
 8000380:	4613      	mov	r3, r2
 8000382:	009b      	lsls	r3, r3, #2
 8000384:	4413      	add	r3, r2
 8000386:	4403      	add	r3, r0
 8000388:	440b      	add	r3, r1
 800038a:	781b      	ldrb	r3, [r3, #0]
 800038c:	73bb      	strb	r3, [r7, #14]
           if(colour == BLACK)
 800038e:	79bb      	ldrb	r3, [r7, #6]
 8000390:	2b00      	cmp	r3, #0
 8000392:	d102      	bne.n	800039a <PCD8544_print_char+0x42>
           {
               chr = ~chr;
 8000394:	7bbb      	ldrb	r3, [r7, #14]
 8000396:	43db      	mvns	r3, r3
 8000398:	73bb      	strb	r3, [r7, #14]
           }
           PCD8544_write(DAT, chr);
 800039a:	7bbb      	ldrb	r3, [r7, #14]
 800039c:	4619      	mov	r1, r3
 800039e:	2001      	movs	r0, #1
 80003a0:	f7ff fefc 	bl	800019c <PCD8544_write>
     for(s = 0; s <= 4; s++)
 80003a4:	7bfb      	ldrb	r3, [r7, #15]
 80003a6:	3301      	adds	r3, #1
 80003a8:	73fb      	strb	r3, [r7, #15]
 80003aa:	7bfb      	ldrb	r3, [r7, #15]
 80003ac:	2b04      	cmp	r3, #4
 80003ae:	d9e2      	bls.n	8000376 <PCD8544_print_char+0x1e>
     }
}
 80003b0:	bf00      	nop
 80003b2:	3710      	adds	r7, #16
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	08005058 	.word	0x08005058

080003bc <PCD8544_clear_buffer>:
    }
}


void PCD8544_clear_buffer(unsigned char colour)
{
 80003bc:	b480      	push	{r7}
 80003be:	b085      	sub	sp, #20
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	4603      	mov	r3, r0
 80003c4:	71fb      	strb	r3, [r7, #7]
    unsigned char x_pos = 0;
 80003c6:	2300      	movs	r3, #0
 80003c8:	73fb      	strb	r3, [r7, #15]
    unsigned char y_pos = 0;
 80003ca:	2300      	movs	r3, #0
 80003cc:	73bb      	strb	r3, [r7, #14]

    for(x_pos; x_pos < X_max; x_pos++)
 80003ce:	e013      	b.n	80003f8 <PCD8544_clear_buffer+0x3c>
    {
        for(y_pos; y_pos < Rows; y_pos++)
        {
            PCD8544_buffer[x_pos][y_pos] = colour;
 80003d0:	7bfa      	ldrb	r2, [r7, #15]
 80003d2:	7bb9      	ldrb	r1, [r7, #14]
 80003d4:	480c      	ldr	r0, [pc, #48]	; (8000408 <PCD8544_clear_buffer+0x4c>)
 80003d6:	4613      	mov	r3, r2
 80003d8:	005b      	lsls	r3, r3, #1
 80003da:	4413      	add	r3, r2
 80003dc:	005b      	lsls	r3, r3, #1
 80003de:	4403      	add	r3, r0
 80003e0:	440b      	add	r3, r1
 80003e2:	79fa      	ldrb	r2, [r7, #7]
 80003e4:	701a      	strb	r2, [r3, #0]
        for(y_pos; y_pos < Rows; y_pos++)
 80003e6:	7bbb      	ldrb	r3, [r7, #14]
 80003e8:	3301      	adds	r3, #1
 80003ea:	73bb      	strb	r3, [r7, #14]
 80003ec:	7bbb      	ldrb	r3, [r7, #14]
 80003ee:	2b05      	cmp	r3, #5
 80003f0:	d9ee      	bls.n	80003d0 <PCD8544_clear_buffer+0x14>
    for(x_pos; x_pos < X_max; x_pos++)
 80003f2:	7bfb      	ldrb	r3, [r7, #15]
 80003f4:	3301      	adds	r3, #1
 80003f6:	73fb      	strb	r3, [r7, #15]
 80003f8:	7bfb      	ldrb	r3, [r7, #15]
 80003fa:	2b53      	cmp	r3, #83	; 0x53
 80003fc:	d9f6      	bls.n	80003ec <PCD8544_clear_buffer+0x30>
        }
    }
}
 80003fe:	bf00      	nop
 8000400:	3714      	adds	r7, #20
 8000402:	46bd      	mov	sp, r7
 8000404:	bc80      	pop	{r7}
 8000406:	4770      	bx	lr
 8000408:	200000a8 	.word	0x200000a8

0800040c <PCD8544_clear_screen>:


void PCD8544_clear_screen(unsigned char colour)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b084      	sub	sp, #16
 8000410:	af00      	add	r7, sp, #0
 8000412:	4603      	mov	r3, r0
 8000414:	71fb      	strb	r3, [r7, #7]
    unsigned char x_pos = 0;
 8000416:	2300      	movs	r3, #0
 8000418:	73fb      	strb	r3, [r7, #15]
    unsigned char y_pos = 0;
 800041a:	2300      	movs	r3, #0
 800041c:	73bb      	strb	r3, [r7, #14]

    for(y_pos = 0; y_pos < Rows; y_pos++)
 800041e:	2300      	movs	r3, #0
 8000420:	73bb      	strb	r3, [r7, #14]
 8000422:	e011      	b.n	8000448 <PCD8544_clear_screen+0x3c>
    {
        for(x_pos = 0; x_pos < X_max; x_pos++)
 8000424:	2300      	movs	r3, #0
 8000426:	73fb      	strb	r3, [r7, #15]
 8000428:	e008      	b.n	800043c <PCD8544_clear_screen+0x30>
        {
            PCD8544_print_string(x_pos, y_pos, " ", colour);
 800042a:	79fb      	ldrb	r3, [r7, #7]
 800042c:	7bb9      	ldrb	r1, [r7, #14]
 800042e:	7bf8      	ldrb	r0, [r7, #15]
 8000430:	4a09      	ldr	r2, [pc, #36]	; (8000458 <PCD8544_clear_screen+0x4c>)
 8000432:	f000 f813 	bl	800045c <PCD8544_print_string>
        for(x_pos = 0; x_pos < X_max; x_pos++)
 8000436:	7bfb      	ldrb	r3, [r7, #15]
 8000438:	3301      	adds	r3, #1
 800043a:	73fb      	strb	r3, [r7, #15]
 800043c:	7bfb      	ldrb	r3, [r7, #15]
 800043e:	2b53      	cmp	r3, #83	; 0x53
 8000440:	d9f3      	bls.n	800042a <PCD8544_clear_screen+0x1e>
    for(y_pos = 0; y_pos < Rows; y_pos++)
 8000442:	7bbb      	ldrb	r3, [r7, #14]
 8000444:	3301      	adds	r3, #1
 8000446:	73bb      	strb	r3, [r7, #14]
 8000448:	7bbb      	ldrb	r3, [r7, #14]
 800044a:	2b05      	cmp	r3, #5
 800044c:	d9ea      	bls.n	8000424 <PCD8544_clear_screen+0x18>
        }
    }
}
 800044e:	bf00      	nop
 8000450:	3710      	adds	r7, #16
 8000452:	46bd      	mov	sp, r7
 8000454:	bd80      	pop	{r7, pc}
 8000456:	bf00      	nop
 8000458:	08004e98 	.word	0x08004e98

0800045c <PCD8544_print_string>:

void PCD8544_print_string(unsigned char x_pos, unsigned char y_pos, unsigned char *ch, unsigned char colour)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b082      	sub	sp, #8
 8000460:	af00      	add	r7, sp, #0
 8000462:	603a      	str	r2, [r7, #0]
 8000464:	461a      	mov	r2, r3
 8000466:	4603      	mov	r3, r0
 8000468:	71fb      	strb	r3, [r7, #7]
 800046a:	460b      	mov	r3, r1
 800046c:	71bb      	strb	r3, [r7, #6]
 800046e:	4613      	mov	r3, r2
 8000470:	717b      	strb	r3, [r7, #5]
    PCD8544_set_cursor(x_pos, y_pos);
 8000472:	79ba      	ldrb	r2, [r7, #6]
 8000474:	79fb      	ldrb	r3, [r7, #7]
 8000476:	4611      	mov	r1, r2
 8000478:	4618      	mov	r0, r3
 800047a:	f7ff ff51 	bl	8000320 <PCD8544_set_cursor>

    do
    {
       PCD8544_print_char(*ch++, colour);
 800047e:	683b      	ldr	r3, [r7, #0]
 8000480:	1c5a      	adds	r2, r3, #1
 8000482:	603a      	str	r2, [r7, #0]
 8000484:	781b      	ldrb	r3, [r3, #0]
 8000486:	797a      	ldrb	r2, [r7, #5]
 8000488:	4611      	mov	r1, r2
 800048a:	4618      	mov	r0, r3
 800048c:	f7ff ff64 	bl	8000358 <PCD8544_print_char>
    }while((*ch >= 0x20) && (*ch <= 0x7F));
 8000490:	683b      	ldr	r3, [r7, #0]
 8000492:	781b      	ldrb	r3, [r3, #0]
 8000494:	2b1f      	cmp	r3, #31
 8000496:	d904      	bls.n	80004a2 <PCD8544_print_string+0x46>
 8000498:	683b      	ldr	r3, [r7, #0]
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	b25b      	sxtb	r3, r3
 800049e:	2b00      	cmp	r3, #0
 80004a0:	daed      	bge.n	800047e <PCD8544_print_string+0x22>
}
 80004a2:	bf00      	nop
 80004a4:	3708      	adds	r7, #8
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}
	...

080004ac <print_int>:
     }
}


void print_int(unsigned char x_pos, unsigned char y_pos, signed long value, unsigned char colour)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b084      	sub	sp, #16
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	603a      	str	r2, [r7, #0]
 80004b4:	461a      	mov	r2, r3
 80004b6:	4603      	mov	r3, r0
 80004b8:	71fb      	strb	r3, [r7, #7]
 80004ba:	460b      	mov	r3, r1
 80004bc:	71bb      	strb	r3, [r7, #6]
 80004be:	4613      	mov	r3, r2
 80004c0:	717b      	strb	r3, [r7, #5]
    unsigned char ch = 0x00;
 80004c2:	2300      	movs	r3, #0
 80004c4:	73fb      	strb	r3, [r7, #15]

    if(value < 0)
 80004c6:	683b      	ldr	r3, [r7, #0]
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	da0e      	bge.n	80004ea <print_int+0x3e>
    {
        PCD8544_set_cursor(x_pos, y_pos);
 80004cc:	79ba      	ldrb	r2, [r7, #6]
 80004ce:	79fb      	ldrb	r3, [r7, #7]
 80004d0:	4611      	mov	r1, r2
 80004d2:	4618      	mov	r0, r3
 80004d4:	f7ff ff24 	bl	8000320 <PCD8544_set_cursor>
        PCD8544_print_char(0x2D, colour);
 80004d8:	797b      	ldrb	r3, [r7, #5]
 80004da:	4619      	mov	r1, r3
 80004dc:	202d      	movs	r0, #45	; 0x2d
 80004de:	f7ff ff3b 	bl	8000358 <PCD8544_print_char>
        value = -value;
 80004e2:	683b      	ldr	r3, [r7, #0]
 80004e4:	425b      	negs	r3, r3
 80004e6:	603b      	str	r3, [r7, #0]
 80004e8:	e00a      	b.n	8000500 <print_int+0x54>
    }
    else
    {
        PCD8544_set_cursor(x_pos, y_pos);
 80004ea:	79ba      	ldrb	r2, [r7, #6]
 80004ec:	79fb      	ldrb	r3, [r7, #7]
 80004ee:	4611      	mov	r1, r2
 80004f0:	4618      	mov	r0, r3
 80004f2:	f7ff ff15 	bl	8000320 <PCD8544_set_cursor>
        PCD8544_print_char(0x20, colour);
 80004f6:	797b      	ldrb	r3, [r7, #5]
 80004f8:	4619      	mov	r1, r3
 80004fa:	2020      	movs	r0, #32
 80004fc:	f7ff ff2c 	bl	8000358 <PCD8544_print_char>
    }

    if(value > 9999)
 8000500:	683b      	ldr	r3, [r7, #0]
 8000502:	f242 720f 	movw	r2, #9999	; 0x270f
 8000506:	4293      	cmp	r3, r2
 8000508:	f340 809f 	ble.w	800064a <print_int+0x19e>
    {
        ch = (value / 10000);
 800050c:	683b      	ldr	r3, [r7, #0]
 800050e:	4a9e      	ldr	r2, [pc, #632]	; (8000788 <print_int+0x2dc>)
 8000510:	fb82 1203 	smull	r1, r2, r2, r3
 8000514:	1312      	asrs	r2, r2, #12
 8000516:	17db      	asrs	r3, r3, #31
 8000518:	1ad3      	subs	r3, r2, r3
 800051a:	73fb      	strb	r3, [r7, #15]
        PCD8544_set_cursor((x_pos + 6), y_pos);
 800051c:	79fb      	ldrb	r3, [r7, #7]
 800051e:	3306      	adds	r3, #6
 8000520:	b2db      	uxtb	r3, r3
 8000522:	79ba      	ldrb	r2, [r7, #6]
 8000524:	4611      	mov	r1, r2
 8000526:	4618      	mov	r0, r3
 8000528:	f7ff fefa 	bl	8000320 <PCD8544_set_cursor>
        PCD8544_print_char((48 + ch), colour);
 800052c:	7bfb      	ldrb	r3, [r7, #15]
 800052e:	3330      	adds	r3, #48	; 0x30
 8000530:	b2db      	uxtb	r3, r3
 8000532:	797a      	ldrb	r2, [r7, #5]
 8000534:	4611      	mov	r1, r2
 8000536:	4618      	mov	r0, r3
 8000538:	f7ff ff0e 	bl	8000358 <PCD8544_print_char>

        ch = ((value % 10000)/ 1000);
 800053c:	683a      	ldr	r2, [r7, #0]
 800053e:	4b92      	ldr	r3, [pc, #584]	; (8000788 <print_int+0x2dc>)
 8000540:	fb83 1302 	smull	r1, r3, r3, r2
 8000544:	1319      	asrs	r1, r3, #12
 8000546:	17d3      	asrs	r3, r2, #31
 8000548:	1acb      	subs	r3, r1, r3
 800054a:	f242 7110 	movw	r1, #10000	; 0x2710
 800054e:	fb01 f303 	mul.w	r3, r1, r3
 8000552:	1ad3      	subs	r3, r2, r3
 8000554:	4a8d      	ldr	r2, [pc, #564]	; (800078c <print_int+0x2e0>)
 8000556:	fb82 1203 	smull	r1, r2, r2, r3
 800055a:	1192      	asrs	r2, r2, #6
 800055c:	17db      	asrs	r3, r3, #31
 800055e:	1ad3      	subs	r3, r2, r3
 8000560:	73fb      	strb	r3, [r7, #15]
        PCD8544_set_cursor((x_pos + 12), y_pos);
 8000562:	79fb      	ldrb	r3, [r7, #7]
 8000564:	330c      	adds	r3, #12
 8000566:	b2db      	uxtb	r3, r3
 8000568:	79ba      	ldrb	r2, [r7, #6]
 800056a:	4611      	mov	r1, r2
 800056c:	4618      	mov	r0, r3
 800056e:	f7ff fed7 	bl	8000320 <PCD8544_set_cursor>
        PCD8544_print_char((48 + ch), colour);
 8000572:	7bfb      	ldrb	r3, [r7, #15]
 8000574:	3330      	adds	r3, #48	; 0x30
 8000576:	b2db      	uxtb	r3, r3
 8000578:	797a      	ldrb	r2, [r7, #5]
 800057a:	4611      	mov	r1, r2
 800057c:	4618      	mov	r0, r3
 800057e:	f7ff feeb 	bl	8000358 <PCD8544_print_char>

        ch = ((value % 1000) / 100);
 8000582:	683a      	ldr	r2, [r7, #0]
 8000584:	4b81      	ldr	r3, [pc, #516]	; (800078c <print_int+0x2e0>)
 8000586:	fb83 1302 	smull	r1, r3, r3, r2
 800058a:	1199      	asrs	r1, r3, #6
 800058c:	17d3      	asrs	r3, r2, #31
 800058e:	1acb      	subs	r3, r1, r3
 8000590:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000594:	fb01 f303 	mul.w	r3, r1, r3
 8000598:	1ad3      	subs	r3, r2, r3
 800059a:	4a7d      	ldr	r2, [pc, #500]	; (8000790 <print_int+0x2e4>)
 800059c:	fb82 1203 	smull	r1, r2, r2, r3
 80005a0:	1152      	asrs	r2, r2, #5
 80005a2:	17db      	asrs	r3, r3, #31
 80005a4:	1ad3      	subs	r3, r2, r3
 80005a6:	73fb      	strb	r3, [r7, #15]
        PCD8544_set_cursor((x_pos + 18), y_pos);
 80005a8:	79fb      	ldrb	r3, [r7, #7]
 80005aa:	3312      	adds	r3, #18
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	79ba      	ldrb	r2, [r7, #6]
 80005b0:	4611      	mov	r1, r2
 80005b2:	4618      	mov	r0, r3
 80005b4:	f7ff feb4 	bl	8000320 <PCD8544_set_cursor>
        PCD8544_print_char((48 + ch), colour);
 80005b8:	7bfb      	ldrb	r3, [r7, #15]
 80005ba:	3330      	adds	r3, #48	; 0x30
 80005bc:	b2db      	uxtb	r3, r3
 80005be:	797a      	ldrb	r2, [r7, #5]
 80005c0:	4611      	mov	r1, r2
 80005c2:	4618      	mov	r0, r3
 80005c4:	f7ff fec8 	bl	8000358 <PCD8544_print_char>

        ch = ((value % 100) / 10);
 80005c8:	683a      	ldr	r2, [r7, #0]
 80005ca:	4b71      	ldr	r3, [pc, #452]	; (8000790 <print_int+0x2e4>)
 80005cc:	fb83 1302 	smull	r1, r3, r3, r2
 80005d0:	1159      	asrs	r1, r3, #5
 80005d2:	17d3      	asrs	r3, r2, #31
 80005d4:	1acb      	subs	r3, r1, r3
 80005d6:	2164      	movs	r1, #100	; 0x64
 80005d8:	fb01 f303 	mul.w	r3, r1, r3
 80005dc:	1ad3      	subs	r3, r2, r3
 80005de:	4a6d      	ldr	r2, [pc, #436]	; (8000794 <print_int+0x2e8>)
 80005e0:	fb82 1203 	smull	r1, r2, r2, r3
 80005e4:	1092      	asrs	r2, r2, #2
 80005e6:	17db      	asrs	r3, r3, #31
 80005e8:	1ad3      	subs	r3, r2, r3
 80005ea:	73fb      	strb	r3, [r7, #15]
        PCD8544_set_cursor((x_pos + 24), y_pos);
 80005ec:	79fb      	ldrb	r3, [r7, #7]
 80005ee:	3318      	adds	r3, #24
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	79ba      	ldrb	r2, [r7, #6]
 80005f4:	4611      	mov	r1, r2
 80005f6:	4618      	mov	r0, r3
 80005f8:	f7ff fe92 	bl	8000320 <PCD8544_set_cursor>
        PCD8544_print_char((48 + ch), colour);
 80005fc:	7bfb      	ldrb	r3, [r7, #15]
 80005fe:	3330      	adds	r3, #48	; 0x30
 8000600:	b2db      	uxtb	r3, r3
 8000602:	797a      	ldrb	r2, [r7, #5]
 8000604:	4611      	mov	r1, r2
 8000606:	4618      	mov	r0, r3
 8000608:	f7ff fea6 	bl	8000358 <PCD8544_print_char>

        ch = (value % 10);
 800060c:	683a      	ldr	r2, [r7, #0]
 800060e:	4b61      	ldr	r3, [pc, #388]	; (8000794 <print_int+0x2e8>)
 8000610:	fb83 1302 	smull	r1, r3, r3, r2
 8000614:	1099      	asrs	r1, r3, #2
 8000616:	17d3      	asrs	r3, r2, #31
 8000618:	1ac9      	subs	r1, r1, r3
 800061a:	460b      	mov	r3, r1
 800061c:	009b      	lsls	r3, r3, #2
 800061e:	440b      	add	r3, r1
 8000620:	005b      	lsls	r3, r3, #1
 8000622:	1ad1      	subs	r1, r2, r3
 8000624:	460b      	mov	r3, r1
 8000626:	73fb      	strb	r3, [r7, #15]
        PCD8544_set_cursor((x_pos + 30), y_pos);
 8000628:	79fb      	ldrb	r3, [r7, #7]
 800062a:	331e      	adds	r3, #30
 800062c:	b2db      	uxtb	r3, r3
 800062e:	79ba      	ldrb	r2, [r7, #6]
 8000630:	4611      	mov	r1, r2
 8000632:	4618      	mov	r0, r3
 8000634:	f7ff fe74 	bl	8000320 <PCD8544_set_cursor>
        PCD8544_print_char((48 + ch), colour);
 8000638:	7bfb      	ldrb	r3, [r7, #15]
 800063a:	3330      	adds	r3, #48	; 0x30
 800063c:	b2db      	uxtb	r3, r3
 800063e:	797a      	ldrb	r2, [r7, #5]
 8000640:	4611      	mov	r1, r2
 8000642:	4618      	mov	r0, r3
 8000644:	f7ff fe88 	bl	8000358 <PCD8544_print_char>
        PCD8544_print_char(0x20, colour);

        PCD8544_set_cursor((x_pos + 30), y_pos);
        PCD8544_print_char(0x20, colour);
    }
}
 8000648:	e1ed      	b.n	8000a26 <print_int+0x57a>
    else if((value > 999) && (value <= 9999))
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000650:	f2c0 80a2 	blt.w	8000798 <print_int+0x2ec>
 8000654:	683b      	ldr	r3, [r7, #0]
 8000656:	f242 720f 	movw	r2, #9999	; 0x270f
 800065a:	4293      	cmp	r3, r2
 800065c:	f300 809c 	bgt.w	8000798 <print_int+0x2ec>
        ch = ((value % 10000)/ 1000);
 8000660:	683a      	ldr	r2, [r7, #0]
 8000662:	4b49      	ldr	r3, [pc, #292]	; (8000788 <print_int+0x2dc>)
 8000664:	fb83 1302 	smull	r1, r3, r3, r2
 8000668:	1319      	asrs	r1, r3, #12
 800066a:	17d3      	asrs	r3, r2, #31
 800066c:	1acb      	subs	r3, r1, r3
 800066e:	f242 7110 	movw	r1, #10000	; 0x2710
 8000672:	fb01 f303 	mul.w	r3, r1, r3
 8000676:	1ad3      	subs	r3, r2, r3
 8000678:	4a44      	ldr	r2, [pc, #272]	; (800078c <print_int+0x2e0>)
 800067a:	fb82 1203 	smull	r1, r2, r2, r3
 800067e:	1192      	asrs	r2, r2, #6
 8000680:	17db      	asrs	r3, r3, #31
 8000682:	1ad3      	subs	r3, r2, r3
 8000684:	73fb      	strb	r3, [r7, #15]
        PCD8544_set_cursor((x_pos + 6), y_pos);
 8000686:	79fb      	ldrb	r3, [r7, #7]
 8000688:	3306      	adds	r3, #6
 800068a:	b2db      	uxtb	r3, r3
 800068c:	79ba      	ldrb	r2, [r7, #6]
 800068e:	4611      	mov	r1, r2
 8000690:	4618      	mov	r0, r3
 8000692:	f7ff fe45 	bl	8000320 <PCD8544_set_cursor>
        PCD8544_print_char((48 + ch), colour);
 8000696:	7bfb      	ldrb	r3, [r7, #15]
 8000698:	3330      	adds	r3, #48	; 0x30
 800069a:	b2db      	uxtb	r3, r3
 800069c:	797a      	ldrb	r2, [r7, #5]
 800069e:	4611      	mov	r1, r2
 80006a0:	4618      	mov	r0, r3
 80006a2:	f7ff fe59 	bl	8000358 <PCD8544_print_char>
        ch = ((value % 1000) / 100);
 80006a6:	683a      	ldr	r2, [r7, #0]
 80006a8:	4b38      	ldr	r3, [pc, #224]	; (800078c <print_int+0x2e0>)
 80006aa:	fb83 1302 	smull	r1, r3, r3, r2
 80006ae:	1199      	asrs	r1, r3, #6
 80006b0:	17d3      	asrs	r3, r2, #31
 80006b2:	1acb      	subs	r3, r1, r3
 80006b4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80006b8:	fb01 f303 	mul.w	r3, r1, r3
 80006bc:	1ad3      	subs	r3, r2, r3
 80006be:	4a34      	ldr	r2, [pc, #208]	; (8000790 <print_int+0x2e4>)
 80006c0:	fb82 1203 	smull	r1, r2, r2, r3
 80006c4:	1152      	asrs	r2, r2, #5
 80006c6:	17db      	asrs	r3, r3, #31
 80006c8:	1ad3      	subs	r3, r2, r3
 80006ca:	73fb      	strb	r3, [r7, #15]
        PCD8544_set_cursor((x_pos + 12), y_pos);
 80006cc:	79fb      	ldrb	r3, [r7, #7]
 80006ce:	330c      	adds	r3, #12
 80006d0:	b2db      	uxtb	r3, r3
 80006d2:	79ba      	ldrb	r2, [r7, #6]
 80006d4:	4611      	mov	r1, r2
 80006d6:	4618      	mov	r0, r3
 80006d8:	f7ff fe22 	bl	8000320 <PCD8544_set_cursor>
        PCD8544_print_char((48 + ch), colour);
 80006dc:	7bfb      	ldrb	r3, [r7, #15]
 80006de:	3330      	adds	r3, #48	; 0x30
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	797a      	ldrb	r2, [r7, #5]
 80006e4:	4611      	mov	r1, r2
 80006e6:	4618      	mov	r0, r3
 80006e8:	f7ff fe36 	bl	8000358 <PCD8544_print_char>
        ch = ((value % 100) / 10);
 80006ec:	683a      	ldr	r2, [r7, #0]
 80006ee:	4b28      	ldr	r3, [pc, #160]	; (8000790 <print_int+0x2e4>)
 80006f0:	fb83 1302 	smull	r1, r3, r3, r2
 80006f4:	1159      	asrs	r1, r3, #5
 80006f6:	17d3      	asrs	r3, r2, #31
 80006f8:	1acb      	subs	r3, r1, r3
 80006fa:	2164      	movs	r1, #100	; 0x64
 80006fc:	fb01 f303 	mul.w	r3, r1, r3
 8000700:	1ad3      	subs	r3, r2, r3
 8000702:	4a24      	ldr	r2, [pc, #144]	; (8000794 <print_int+0x2e8>)
 8000704:	fb82 1203 	smull	r1, r2, r2, r3
 8000708:	1092      	asrs	r2, r2, #2
 800070a:	17db      	asrs	r3, r3, #31
 800070c:	1ad3      	subs	r3, r2, r3
 800070e:	73fb      	strb	r3, [r7, #15]
        PCD8544_set_cursor((x_pos + 18), y_pos);
 8000710:	79fb      	ldrb	r3, [r7, #7]
 8000712:	3312      	adds	r3, #18
 8000714:	b2db      	uxtb	r3, r3
 8000716:	79ba      	ldrb	r2, [r7, #6]
 8000718:	4611      	mov	r1, r2
 800071a:	4618      	mov	r0, r3
 800071c:	f7ff fe00 	bl	8000320 <PCD8544_set_cursor>
        PCD8544_print_char((48 + ch), colour);
 8000720:	7bfb      	ldrb	r3, [r7, #15]
 8000722:	3330      	adds	r3, #48	; 0x30
 8000724:	b2db      	uxtb	r3, r3
 8000726:	797a      	ldrb	r2, [r7, #5]
 8000728:	4611      	mov	r1, r2
 800072a:	4618      	mov	r0, r3
 800072c:	f7ff fe14 	bl	8000358 <PCD8544_print_char>
        ch = (value % 10);
 8000730:	683a      	ldr	r2, [r7, #0]
 8000732:	4b18      	ldr	r3, [pc, #96]	; (8000794 <print_int+0x2e8>)
 8000734:	fb83 1302 	smull	r1, r3, r3, r2
 8000738:	1099      	asrs	r1, r3, #2
 800073a:	17d3      	asrs	r3, r2, #31
 800073c:	1ac9      	subs	r1, r1, r3
 800073e:	460b      	mov	r3, r1
 8000740:	009b      	lsls	r3, r3, #2
 8000742:	440b      	add	r3, r1
 8000744:	005b      	lsls	r3, r3, #1
 8000746:	1ad1      	subs	r1, r2, r3
 8000748:	460b      	mov	r3, r1
 800074a:	73fb      	strb	r3, [r7, #15]
        PCD8544_set_cursor((x_pos + 24), y_pos);
 800074c:	79fb      	ldrb	r3, [r7, #7]
 800074e:	3318      	adds	r3, #24
 8000750:	b2db      	uxtb	r3, r3
 8000752:	79ba      	ldrb	r2, [r7, #6]
 8000754:	4611      	mov	r1, r2
 8000756:	4618      	mov	r0, r3
 8000758:	f7ff fde2 	bl	8000320 <PCD8544_set_cursor>
        PCD8544_print_char((48 + ch), colour);
 800075c:	7bfb      	ldrb	r3, [r7, #15]
 800075e:	3330      	adds	r3, #48	; 0x30
 8000760:	b2db      	uxtb	r3, r3
 8000762:	797a      	ldrb	r2, [r7, #5]
 8000764:	4611      	mov	r1, r2
 8000766:	4618      	mov	r0, r3
 8000768:	f7ff fdf6 	bl	8000358 <PCD8544_print_char>
        PCD8544_set_cursor((x_pos + 30), y_pos);
 800076c:	79fb      	ldrb	r3, [r7, #7]
 800076e:	331e      	adds	r3, #30
 8000770:	b2db      	uxtb	r3, r3
 8000772:	79ba      	ldrb	r2, [r7, #6]
 8000774:	4611      	mov	r1, r2
 8000776:	4618      	mov	r0, r3
 8000778:	f7ff fdd2 	bl	8000320 <PCD8544_set_cursor>
        PCD8544_print_char(0x20, colour);
 800077c:	797b      	ldrb	r3, [r7, #5]
 800077e:	4619      	mov	r1, r3
 8000780:	2020      	movs	r0, #32
 8000782:	f7ff fde9 	bl	8000358 <PCD8544_print_char>
 8000786:	e14e      	b.n	8000a26 <print_int+0x57a>
 8000788:	68db8bad 	.word	0x68db8bad
 800078c:	10624dd3 	.word	0x10624dd3
 8000790:	51eb851f 	.word	0x51eb851f
 8000794:	66666667 	.word	0x66666667
    else if((value > 99) && (value <= 999))
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	2b63      	cmp	r3, #99	; 0x63
 800079c:	f340 8082 	ble.w	80008a4 <print_int+0x3f8>
 80007a0:	683b      	ldr	r3, [r7, #0]
 80007a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80007a6:	da7d      	bge.n	80008a4 <print_int+0x3f8>
        ch = ((value % 1000) / 100);
 80007a8:	683a      	ldr	r2, [r7, #0]
 80007aa:	4ba1      	ldr	r3, [pc, #644]	; (8000a30 <print_int+0x584>)
 80007ac:	fb83 1302 	smull	r1, r3, r3, r2
 80007b0:	1199      	asrs	r1, r3, #6
 80007b2:	17d3      	asrs	r3, r2, #31
 80007b4:	1acb      	subs	r3, r1, r3
 80007b6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80007ba:	fb01 f303 	mul.w	r3, r1, r3
 80007be:	1ad3      	subs	r3, r2, r3
 80007c0:	4a9c      	ldr	r2, [pc, #624]	; (8000a34 <print_int+0x588>)
 80007c2:	fb82 1203 	smull	r1, r2, r2, r3
 80007c6:	1152      	asrs	r2, r2, #5
 80007c8:	17db      	asrs	r3, r3, #31
 80007ca:	1ad3      	subs	r3, r2, r3
 80007cc:	73fb      	strb	r3, [r7, #15]
        PCD8544_set_cursor((x_pos + 6), y_pos);
 80007ce:	79fb      	ldrb	r3, [r7, #7]
 80007d0:	3306      	adds	r3, #6
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	79ba      	ldrb	r2, [r7, #6]
 80007d6:	4611      	mov	r1, r2
 80007d8:	4618      	mov	r0, r3
 80007da:	f7ff fda1 	bl	8000320 <PCD8544_set_cursor>
        PCD8544_print_char((48 + ch), colour);
 80007de:	7bfb      	ldrb	r3, [r7, #15]
 80007e0:	3330      	adds	r3, #48	; 0x30
 80007e2:	b2db      	uxtb	r3, r3
 80007e4:	797a      	ldrb	r2, [r7, #5]
 80007e6:	4611      	mov	r1, r2
 80007e8:	4618      	mov	r0, r3
 80007ea:	f7ff fdb5 	bl	8000358 <PCD8544_print_char>
        ch = ((value % 100) / 10);
 80007ee:	683a      	ldr	r2, [r7, #0]
 80007f0:	4b90      	ldr	r3, [pc, #576]	; (8000a34 <print_int+0x588>)
 80007f2:	fb83 1302 	smull	r1, r3, r3, r2
 80007f6:	1159      	asrs	r1, r3, #5
 80007f8:	17d3      	asrs	r3, r2, #31
 80007fa:	1acb      	subs	r3, r1, r3
 80007fc:	2164      	movs	r1, #100	; 0x64
 80007fe:	fb01 f303 	mul.w	r3, r1, r3
 8000802:	1ad3      	subs	r3, r2, r3
 8000804:	4a8c      	ldr	r2, [pc, #560]	; (8000a38 <print_int+0x58c>)
 8000806:	fb82 1203 	smull	r1, r2, r2, r3
 800080a:	1092      	asrs	r2, r2, #2
 800080c:	17db      	asrs	r3, r3, #31
 800080e:	1ad3      	subs	r3, r2, r3
 8000810:	73fb      	strb	r3, [r7, #15]
        PCD8544_set_cursor((x_pos + 12), y_pos);
 8000812:	79fb      	ldrb	r3, [r7, #7]
 8000814:	330c      	adds	r3, #12
 8000816:	b2db      	uxtb	r3, r3
 8000818:	79ba      	ldrb	r2, [r7, #6]
 800081a:	4611      	mov	r1, r2
 800081c:	4618      	mov	r0, r3
 800081e:	f7ff fd7f 	bl	8000320 <PCD8544_set_cursor>
        PCD8544_print_char((48 + ch), colour);
 8000822:	7bfb      	ldrb	r3, [r7, #15]
 8000824:	3330      	adds	r3, #48	; 0x30
 8000826:	b2db      	uxtb	r3, r3
 8000828:	797a      	ldrb	r2, [r7, #5]
 800082a:	4611      	mov	r1, r2
 800082c:	4618      	mov	r0, r3
 800082e:	f7ff fd93 	bl	8000358 <PCD8544_print_char>
        ch = (value % 10);
 8000832:	683a      	ldr	r2, [r7, #0]
 8000834:	4b80      	ldr	r3, [pc, #512]	; (8000a38 <print_int+0x58c>)
 8000836:	fb83 1302 	smull	r1, r3, r3, r2
 800083a:	1099      	asrs	r1, r3, #2
 800083c:	17d3      	asrs	r3, r2, #31
 800083e:	1ac9      	subs	r1, r1, r3
 8000840:	460b      	mov	r3, r1
 8000842:	009b      	lsls	r3, r3, #2
 8000844:	440b      	add	r3, r1
 8000846:	005b      	lsls	r3, r3, #1
 8000848:	1ad1      	subs	r1, r2, r3
 800084a:	460b      	mov	r3, r1
 800084c:	73fb      	strb	r3, [r7, #15]
        PCD8544_set_cursor((x_pos + 18), y_pos);
 800084e:	79fb      	ldrb	r3, [r7, #7]
 8000850:	3312      	adds	r3, #18
 8000852:	b2db      	uxtb	r3, r3
 8000854:	79ba      	ldrb	r2, [r7, #6]
 8000856:	4611      	mov	r1, r2
 8000858:	4618      	mov	r0, r3
 800085a:	f7ff fd61 	bl	8000320 <PCD8544_set_cursor>
        PCD8544_print_char((48 + ch), colour);
 800085e:	7bfb      	ldrb	r3, [r7, #15]
 8000860:	3330      	adds	r3, #48	; 0x30
 8000862:	b2db      	uxtb	r3, r3
 8000864:	797a      	ldrb	r2, [r7, #5]
 8000866:	4611      	mov	r1, r2
 8000868:	4618      	mov	r0, r3
 800086a:	f7ff fd75 	bl	8000358 <PCD8544_print_char>
        PCD8544_set_cursor((x_pos + 24), y_pos);
 800086e:	79fb      	ldrb	r3, [r7, #7]
 8000870:	3318      	adds	r3, #24
 8000872:	b2db      	uxtb	r3, r3
 8000874:	79ba      	ldrb	r2, [r7, #6]
 8000876:	4611      	mov	r1, r2
 8000878:	4618      	mov	r0, r3
 800087a:	f7ff fd51 	bl	8000320 <PCD8544_set_cursor>
        PCD8544_print_char(0x20, colour);
 800087e:	797b      	ldrb	r3, [r7, #5]
 8000880:	4619      	mov	r1, r3
 8000882:	2020      	movs	r0, #32
 8000884:	f7ff fd68 	bl	8000358 <PCD8544_print_char>
        PCD8544_set_cursor((x_pos + 30), y_pos);
 8000888:	79fb      	ldrb	r3, [r7, #7]
 800088a:	331e      	adds	r3, #30
 800088c:	b2db      	uxtb	r3, r3
 800088e:	79ba      	ldrb	r2, [r7, #6]
 8000890:	4611      	mov	r1, r2
 8000892:	4618      	mov	r0, r3
 8000894:	f7ff fd44 	bl	8000320 <PCD8544_set_cursor>
        PCD8544_print_char(0x20, colour);
 8000898:	797b      	ldrb	r3, [r7, #5]
 800089a:	4619      	mov	r1, r3
 800089c:	2020      	movs	r0, #32
 800089e:	f7ff fd5b 	bl	8000358 <PCD8544_print_char>
 80008a2:	e0c0      	b.n	8000a26 <print_int+0x57a>
    else if((value > 9) && (value <= 99))
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	2b09      	cmp	r3, #9
 80008a8:	dd6a      	ble.n	8000980 <print_int+0x4d4>
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	2b63      	cmp	r3, #99	; 0x63
 80008ae:	dc67      	bgt.n	8000980 <print_int+0x4d4>
        ch = ((value % 100) / 10);
 80008b0:	683a      	ldr	r2, [r7, #0]
 80008b2:	4b60      	ldr	r3, [pc, #384]	; (8000a34 <print_int+0x588>)
 80008b4:	fb83 1302 	smull	r1, r3, r3, r2
 80008b8:	1159      	asrs	r1, r3, #5
 80008ba:	17d3      	asrs	r3, r2, #31
 80008bc:	1acb      	subs	r3, r1, r3
 80008be:	2164      	movs	r1, #100	; 0x64
 80008c0:	fb01 f303 	mul.w	r3, r1, r3
 80008c4:	1ad3      	subs	r3, r2, r3
 80008c6:	4a5c      	ldr	r2, [pc, #368]	; (8000a38 <print_int+0x58c>)
 80008c8:	fb82 1203 	smull	r1, r2, r2, r3
 80008cc:	1092      	asrs	r2, r2, #2
 80008ce:	17db      	asrs	r3, r3, #31
 80008d0:	1ad3      	subs	r3, r2, r3
 80008d2:	73fb      	strb	r3, [r7, #15]
        PCD8544_set_cursor((x_pos + 6), y_pos);
 80008d4:	79fb      	ldrb	r3, [r7, #7]
 80008d6:	3306      	adds	r3, #6
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	79ba      	ldrb	r2, [r7, #6]
 80008dc:	4611      	mov	r1, r2
 80008de:	4618      	mov	r0, r3
 80008e0:	f7ff fd1e 	bl	8000320 <PCD8544_set_cursor>
        PCD8544_print_char((48 + ch), colour);
 80008e4:	7bfb      	ldrb	r3, [r7, #15]
 80008e6:	3330      	adds	r3, #48	; 0x30
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	797a      	ldrb	r2, [r7, #5]
 80008ec:	4611      	mov	r1, r2
 80008ee:	4618      	mov	r0, r3
 80008f0:	f7ff fd32 	bl	8000358 <PCD8544_print_char>
        ch = (value % 10);
 80008f4:	683a      	ldr	r2, [r7, #0]
 80008f6:	4b50      	ldr	r3, [pc, #320]	; (8000a38 <print_int+0x58c>)
 80008f8:	fb83 1302 	smull	r1, r3, r3, r2
 80008fc:	1099      	asrs	r1, r3, #2
 80008fe:	17d3      	asrs	r3, r2, #31
 8000900:	1ac9      	subs	r1, r1, r3
 8000902:	460b      	mov	r3, r1
 8000904:	009b      	lsls	r3, r3, #2
 8000906:	440b      	add	r3, r1
 8000908:	005b      	lsls	r3, r3, #1
 800090a:	1ad1      	subs	r1, r2, r3
 800090c:	460b      	mov	r3, r1
 800090e:	73fb      	strb	r3, [r7, #15]
        PCD8544_set_cursor((x_pos + 12), y_pos);
 8000910:	79fb      	ldrb	r3, [r7, #7]
 8000912:	330c      	adds	r3, #12
 8000914:	b2db      	uxtb	r3, r3
 8000916:	79ba      	ldrb	r2, [r7, #6]
 8000918:	4611      	mov	r1, r2
 800091a:	4618      	mov	r0, r3
 800091c:	f7ff fd00 	bl	8000320 <PCD8544_set_cursor>
        PCD8544_print_char((48 + ch), colour);
 8000920:	7bfb      	ldrb	r3, [r7, #15]
 8000922:	3330      	adds	r3, #48	; 0x30
 8000924:	b2db      	uxtb	r3, r3
 8000926:	797a      	ldrb	r2, [r7, #5]
 8000928:	4611      	mov	r1, r2
 800092a:	4618      	mov	r0, r3
 800092c:	f7ff fd14 	bl	8000358 <PCD8544_print_char>
        PCD8544_set_cursor((x_pos + 18), y_pos);
 8000930:	79fb      	ldrb	r3, [r7, #7]
 8000932:	3312      	adds	r3, #18
 8000934:	b2db      	uxtb	r3, r3
 8000936:	79ba      	ldrb	r2, [r7, #6]
 8000938:	4611      	mov	r1, r2
 800093a:	4618      	mov	r0, r3
 800093c:	f7ff fcf0 	bl	8000320 <PCD8544_set_cursor>
        PCD8544_print_char(0x20, colour);
 8000940:	797b      	ldrb	r3, [r7, #5]
 8000942:	4619      	mov	r1, r3
 8000944:	2020      	movs	r0, #32
 8000946:	f7ff fd07 	bl	8000358 <PCD8544_print_char>
        PCD8544_set_cursor((x_pos + 24), y_pos);
 800094a:	79fb      	ldrb	r3, [r7, #7]
 800094c:	3318      	adds	r3, #24
 800094e:	b2db      	uxtb	r3, r3
 8000950:	79ba      	ldrb	r2, [r7, #6]
 8000952:	4611      	mov	r1, r2
 8000954:	4618      	mov	r0, r3
 8000956:	f7ff fce3 	bl	8000320 <PCD8544_set_cursor>
        PCD8544_print_char(0x20, colour);
 800095a:	797b      	ldrb	r3, [r7, #5]
 800095c:	4619      	mov	r1, r3
 800095e:	2020      	movs	r0, #32
 8000960:	f7ff fcfa 	bl	8000358 <PCD8544_print_char>
        PCD8544_set_cursor((x_pos + 30), y_pos);
 8000964:	79fb      	ldrb	r3, [r7, #7]
 8000966:	331e      	adds	r3, #30
 8000968:	b2db      	uxtb	r3, r3
 800096a:	79ba      	ldrb	r2, [r7, #6]
 800096c:	4611      	mov	r1, r2
 800096e:	4618      	mov	r0, r3
 8000970:	f7ff fcd6 	bl	8000320 <PCD8544_set_cursor>
        PCD8544_print_char(0x20, colour);
 8000974:	797b      	ldrb	r3, [r7, #5]
 8000976:	4619      	mov	r1, r3
 8000978:	2020      	movs	r0, #32
 800097a:	f7ff fced 	bl	8000358 <PCD8544_print_char>
 800097e:	e052      	b.n	8000a26 <print_int+0x57a>
        ch = (value % 10);
 8000980:	683a      	ldr	r2, [r7, #0]
 8000982:	4b2d      	ldr	r3, [pc, #180]	; (8000a38 <print_int+0x58c>)
 8000984:	fb83 1302 	smull	r1, r3, r3, r2
 8000988:	1099      	asrs	r1, r3, #2
 800098a:	17d3      	asrs	r3, r2, #31
 800098c:	1ac9      	subs	r1, r1, r3
 800098e:	460b      	mov	r3, r1
 8000990:	009b      	lsls	r3, r3, #2
 8000992:	440b      	add	r3, r1
 8000994:	005b      	lsls	r3, r3, #1
 8000996:	1ad1      	subs	r1, r2, r3
 8000998:	460b      	mov	r3, r1
 800099a:	73fb      	strb	r3, [r7, #15]
        PCD8544_set_cursor((x_pos + 6), y_pos);
 800099c:	79fb      	ldrb	r3, [r7, #7]
 800099e:	3306      	adds	r3, #6
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	79ba      	ldrb	r2, [r7, #6]
 80009a4:	4611      	mov	r1, r2
 80009a6:	4618      	mov	r0, r3
 80009a8:	f7ff fcba 	bl	8000320 <PCD8544_set_cursor>
        PCD8544_print_char((48 + ch), colour);
 80009ac:	7bfb      	ldrb	r3, [r7, #15]
 80009ae:	3330      	adds	r3, #48	; 0x30
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	797a      	ldrb	r2, [r7, #5]
 80009b4:	4611      	mov	r1, r2
 80009b6:	4618      	mov	r0, r3
 80009b8:	f7ff fcce 	bl	8000358 <PCD8544_print_char>
        PCD8544_set_cursor((x_pos + 12), y_pos);
 80009bc:	79fb      	ldrb	r3, [r7, #7]
 80009be:	330c      	adds	r3, #12
 80009c0:	b2db      	uxtb	r3, r3
 80009c2:	79ba      	ldrb	r2, [r7, #6]
 80009c4:	4611      	mov	r1, r2
 80009c6:	4618      	mov	r0, r3
 80009c8:	f7ff fcaa 	bl	8000320 <PCD8544_set_cursor>
        PCD8544_print_char(0x20, colour);
 80009cc:	797b      	ldrb	r3, [r7, #5]
 80009ce:	4619      	mov	r1, r3
 80009d0:	2020      	movs	r0, #32
 80009d2:	f7ff fcc1 	bl	8000358 <PCD8544_print_char>
        PCD8544_set_cursor((x_pos + 18), y_pos);
 80009d6:	79fb      	ldrb	r3, [r7, #7]
 80009d8:	3312      	adds	r3, #18
 80009da:	b2db      	uxtb	r3, r3
 80009dc:	79ba      	ldrb	r2, [r7, #6]
 80009de:	4611      	mov	r1, r2
 80009e0:	4618      	mov	r0, r3
 80009e2:	f7ff fc9d 	bl	8000320 <PCD8544_set_cursor>
        PCD8544_print_char(0x20, colour);
 80009e6:	797b      	ldrb	r3, [r7, #5]
 80009e8:	4619      	mov	r1, r3
 80009ea:	2020      	movs	r0, #32
 80009ec:	f7ff fcb4 	bl	8000358 <PCD8544_print_char>
        PCD8544_set_cursor((x_pos + 24), y_pos);
 80009f0:	79fb      	ldrb	r3, [r7, #7]
 80009f2:	3318      	adds	r3, #24
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	79ba      	ldrb	r2, [r7, #6]
 80009f8:	4611      	mov	r1, r2
 80009fa:	4618      	mov	r0, r3
 80009fc:	f7ff fc90 	bl	8000320 <PCD8544_set_cursor>
        PCD8544_print_char(0x20, colour);
 8000a00:	797b      	ldrb	r3, [r7, #5]
 8000a02:	4619      	mov	r1, r3
 8000a04:	2020      	movs	r0, #32
 8000a06:	f7ff fca7 	bl	8000358 <PCD8544_print_char>
        PCD8544_set_cursor((x_pos + 30), y_pos);
 8000a0a:	79fb      	ldrb	r3, [r7, #7]
 8000a0c:	331e      	adds	r3, #30
 8000a0e:	b2db      	uxtb	r3, r3
 8000a10:	79ba      	ldrb	r2, [r7, #6]
 8000a12:	4611      	mov	r1, r2
 8000a14:	4618      	mov	r0, r3
 8000a16:	f7ff fc83 	bl	8000320 <PCD8544_set_cursor>
        PCD8544_print_char(0x20, colour);
 8000a1a:	797b      	ldrb	r3, [r7, #5]
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	2020      	movs	r0, #32
 8000a20:	f7ff fc9a 	bl	8000358 <PCD8544_print_char>
}
 8000a24:	e7ff      	b.n	8000a26 <print_int+0x57a>
 8000a26:	bf00      	nop
 8000a28:	3710      	adds	r7, #16
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	10624dd3 	.word	0x10624dd3
 8000a34:	51eb851f 	.word	0x51eb851f
 8000a38:	66666667 	.word	0x66666667

08000a3c <LCD5110_setup>:
    PCD8544_set_cursor(x_pos, row);
    PCD8544_write(DAT, value);
}

void LCD5110_setup()
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
    PCD8544_init();
 8000a40:	f7ff fc0c 	bl	800025c <PCD8544_init>
    PCD8544_clear_screen(WHITE);
 8000a44:	2001      	movs	r0, #1
 8000a46:	f7ff fce1 	bl	800040c <PCD8544_clear_screen>
}
 8000a4a:	bf00      	nop
 8000a4c:	bd80      	pop	{r7, pc}
	...

08000a50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a56:	f001 fb65 	bl	8002124 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a5a:	f000 fe2d 	bl	80016b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a5e:	f000 ffb1 	bl	80019c4 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000a62:	f000 fe6f 	bl	8001744 <MX_TIM1_Init>
  MX_TIM4_Init();
 8000a66:	f000 ff35 	bl	80018d4 <MX_TIM4_Init>
  MX_USART3_UART_Init();
 8000a6a:	f000 ff81 	bl	8001970 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8000a6e:	2100      	movs	r1, #0
 8000a70:	48b9      	ldr	r0, [pc, #740]	; (8000d58 <main+0x308>)
 8000a72:	f002 fae7 	bl	8003044 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 8000a76:	2104      	movs	r1, #4
 8000a78:	48b7      	ldr	r0, [pc, #732]	; (8000d58 <main+0x308>)
 8000a7a:	f002 fae3 	bl	8003044 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);
 8000a7e:	2108      	movs	r1, #8
 8000a80:	48b5      	ldr	r0, [pc, #724]	; (8000d58 <main+0x308>)
 8000a82:	f002 fadf 	bl	8003044 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start(&htim4);
 8000a86:	48b5      	ldr	r0, [pc, #724]	; (8000d5c <main+0x30c>)
 8000a88:	f002 fa85 	bl	8002f96 <HAL_TIM_Base_Start>

// khoi tao cam bien DHT11
		DHT_Start();
 8000a8c:	f001 f8b6 	bl	8001bfc <DHT_Start>
		Respones_State = DHT_Check_Response();
 8000a90:	f001 f8cc 	bl	8001c2c <DHT_Check_Response>
 8000a94:	4603      	mov	r3, r0
 8000a96:	461a      	mov	r2, r3
 8000a98:	4bb1      	ldr	r3, [pc, #708]	; (8000d60 <main+0x310>)
 8000a9a:	701a      	strb	r2, [r3, #0]
		int_RH = DHT_Read_Data();
 8000a9c:	f001 f8f0 	bl	8001c80 <DHT_Read_Data>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	461a      	mov	r2, r3
 8000aa4:	4baf      	ldr	r3, [pc, #700]	; (8000d64 <main+0x314>)
 8000aa6:	701a      	strb	r2, [r3, #0]
		dec_RH = DHT_Read_Data();
 8000aa8:	f001 f8ea 	bl	8001c80 <DHT_Read_Data>
 8000aac:	4603      	mov	r3, r0
 8000aae:	461a      	mov	r2, r3
 8000ab0:	4bad      	ldr	r3, [pc, #692]	; (8000d68 <main+0x318>)
 8000ab2:	701a      	strb	r2, [r3, #0]
		int_T  = DHT_Read_Data();
 8000ab4:	f001 f8e4 	bl	8001c80 <DHT_Read_Data>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	461a      	mov	r2, r3
 8000abc:	4bab      	ldr	r3, [pc, #684]	; (8000d6c <main+0x31c>)
 8000abe:	701a      	strb	r2, [r3, #0]
		dec_T	 = DHT_Read_Data();
 8000ac0:	f001 f8de 	bl	8001c80 <DHT_Read_Data>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	461a      	mov	r2, r3
 8000ac8:	4ba9      	ldr	r3, [pc, #676]	; (8000d70 <main+0x320>)
 8000aca:	701a      	strb	r2, [r3, #0]
		Check_Sum = DHT_Read_Data();
 8000acc:	f001 f8d8 	bl	8001c80 <DHT_Read_Data>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	4ba7      	ldr	r3, [pc, #668]	; (8000d74 <main+0x324>)
 8000ad6:	701a      	strb	r2, [r3, #0]
// khoi tao LCD
		LCD5110_setup();
 8000ad8:	f7ff ffb0 	bl	8000a3c <LCD5110_setup>
		PCD8544_backlight_state(ON);
 8000adc:	2001      	movs	r0, #1
 8000ade:	f7ff fbe7 	bl	80002b0 <PCD8544_backlight_state>
		HAL_Delay(2000);
 8000ae2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000ae6:	f001 fb7f 	bl	80021e8 <HAL_Delay>
		PCD8544_backlight_state(OFF);
 8000aea:	2000      	movs	r0, #0
 8000aec:	f7ff fbe0 	bl	80002b0 <PCD8544_backlight_state>
		HAL_Delay(2000);
 8000af0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000af4:	f001 fb78 	bl	80021e8 <HAL_Delay>
		PCD8544_clear_screen(WHITE);
 8000af8:	2001      	movs	r0, #1
 8000afa:	f7ff fc87 	bl	800040c <PCD8544_clear_screen>
		PCD8544_backlight_state(ON);
 8000afe:	2001      	movs	r0, #1
 8000b00:	f7ff fbd6 	bl	80002b0 <PCD8544_backlight_state>
		HAL_Delay(3000);
 8000b04:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000b08:	f001 fb6e 	bl	80021e8 <HAL_Delay>
		PCD8544_clear_screen(WHITE);
 8000b0c:	2001      	movs	r0, #1
 8000b0e:	f7ff fc7d 	bl	800040c <PCD8544_clear_screen>

	  // doc DHT11



		if( HAL_UART_Receive(&huart3, &c,1, 0)==HAL_OK)
 8000b12:	2300      	movs	r3, #0
 8000b14:	2201      	movs	r2, #1
 8000b16:	4998      	ldr	r1, [pc, #608]	; (8000d78 <main+0x328>)
 8000b18:	4898      	ldr	r0, [pc, #608]	; (8000d7c <main+0x32c>)
 8000b1a:	f003 f862 	bl	8003be2 <HAL_UART_Receive>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d169      	bne.n	8000bf8 <main+0x1a8>
		 {  switch (c)
 8000b24:	4b94      	ldr	r3, [pc, #592]	; (8000d78 <main+0x328>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	3b61      	subs	r3, #97	; 0x61
 8000b2a:	2b0a      	cmp	r3, #10
 8000b2c:	d864      	bhi.n	8000bf8 <main+0x1a8>
 8000b2e:	a201      	add	r2, pc, #4	; (adr r2, 8000b34 <main+0xe4>)
 8000b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b34:	08000b61 	.word	0x08000b61
 8000b38:	08000b6f 	.word	0x08000b6f
 8000b3c:	08000b7d 	.word	0x08000b7d
 8000b40:	08000b8b 	.word	0x08000b8b
 8000b44:	08000b99 	.word	0x08000b99
 8000b48:	08000ba7 	.word	0x08000ba7
 8000b4c:	08000bc1 	.word	0x08000bc1
 8000b50:	08000bcf 	.word	0x08000bcf
 8000b54:	08000bdd 	.word	0x08000bdd
 8000b58:	08000bf9 	.word	0x08000bf9
 8000b5c:	08000beb 	.word	0x08000beb
		   {

				 case  'a' : {Mode_Color=1; printf("color1\r\n");break;}
 8000b60:	4b87      	ldr	r3, [pc, #540]	; (8000d80 <main+0x330>)
 8000b62:	2201      	movs	r2, #1
 8000b64:	701a      	strb	r2, [r3, #0]
 8000b66:	4887      	ldr	r0, [pc, #540]	; (8000d84 <main+0x334>)
 8000b68:	f003 faac 	bl	80040c4 <puts>
 8000b6c:	e044      	b.n	8000bf8 <main+0x1a8>
				 case  'b' : {Mode_Color=2; printf("color2\r\n");break;}
 8000b6e:	4b84      	ldr	r3, [pc, #528]	; (8000d80 <main+0x330>)
 8000b70:	2202      	movs	r2, #2
 8000b72:	701a      	strb	r2, [r3, #0]
 8000b74:	4884      	ldr	r0, [pc, #528]	; (8000d88 <main+0x338>)
 8000b76:	f003 faa5 	bl	80040c4 <puts>
 8000b7a:	e03d      	b.n	8000bf8 <main+0x1a8>
				 case  'c' : {Mode_Color=3; printf("color3\r\n");break;}
 8000b7c:	4b80      	ldr	r3, [pc, #512]	; (8000d80 <main+0x330>)
 8000b7e:	2203      	movs	r2, #3
 8000b80:	701a      	strb	r2, [r3, #0]
 8000b82:	4882      	ldr	r0, [pc, #520]	; (8000d8c <main+0x33c>)
 8000b84:	f003 fa9e 	bl	80040c4 <puts>
 8000b88:	e036      	b.n	8000bf8 <main+0x1a8>
				 case  'd' : {Mode_Color=4; printf("color4\r\n");break;}
 8000b8a:	4b7d      	ldr	r3, [pc, #500]	; (8000d80 <main+0x330>)
 8000b8c:	2204      	movs	r2, #4
 8000b8e:	701a      	strb	r2, [r3, #0]
 8000b90:	487f      	ldr	r0, [pc, #508]	; (8000d90 <main+0x340>)
 8000b92:	f003 fa97 	bl	80040c4 <puts>
 8000b96:	e02f      	b.n	8000bf8 <main+0x1a8>
				 case  'e' : {Mode_Color=5; printf("color5\r\n");break;}
 8000b98:	4b79      	ldr	r3, [pc, #484]	; (8000d80 <main+0x330>)
 8000b9a:	2205      	movs	r2, #5
 8000b9c:	701a      	strb	r2, [r3, #0]
 8000b9e:	487d      	ldr	r0, [pc, #500]	; (8000d94 <main+0x344>)
 8000ba0:	f003 fa90 	bl	80040c4 <puts>
 8000ba4:	e028      	b.n	8000bf8 <main+0x1a8>
				 case  'f' : {Mode_Color=6; vruc_Cycle = 0; vruc_Count = 0;printf("color6\r\n"); break;}
 8000ba6:	4b76      	ldr	r3, [pc, #472]	; (8000d80 <main+0x330>)
 8000ba8:	2206      	movs	r2, #6
 8000baa:	701a      	strb	r2, [r3, #0]
 8000bac:	4b7a      	ldr	r3, [pc, #488]	; (8000d98 <main+0x348>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	701a      	strb	r2, [r3, #0]
 8000bb2:	4b7a      	ldr	r3, [pc, #488]	; (8000d9c <main+0x34c>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	701a      	strb	r2, [r3, #0]
 8000bb8:	4879      	ldr	r0, [pc, #484]	; (8000da0 <main+0x350>)
 8000bba:	f003 fa83 	bl	80040c4 <puts>
 8000bbe:	e01b      	b.n	8000bf8 <main+0x1a8>
				 case  'g' : {Mode_LCD=1;printf("Mode Menu 1\r\n");break;}
 8000bc0:	4b78      	ldr	r3, [pc, #480]	; (8000da4 <main+0x354>)
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	701a      	strb	r2, [r3, #0]
 8000bc6:	4878      	ldr	r0, [pc, #480]	; (8000da8 <main+0x358>)
 8000bc8:	f003 fa7c 	bl	80040c4 <puts>
 8000bcc:	e014      	b.n	8000bf8 <main+0x1a8>
				 case  'h' : {Mode_LCD=2;printf("Mode Menu 2\r\n");break;}
 8000bce:	4b75      	ldr	r3, [pc, #468]	; (8000da4 <main+0x354>)
 8000bd0:	2202      	movs	r2, #2
 8000bd2:	701a      	strb	r2, [r3, #0]
 8000bd4:	4875      	ldr	r0, [pc, #468]	; (8000dac <main+0x35c>)
 8000bd6:	f003 fa75 	bl	80040c4 <puts>
 8000bda:	e00d      	b.n	8000bf8 <main+0x1a8>
				 case  'i' : {Mode_LCD=3;printf("Mode Menu 3\r\n");break;}
 8000bdc:	4b71      	ldr	r3, [pc, #452]	; (8000da4 <main+0x354>)
 8000bde:	2203      	movs	r2, #3
 8000be0:	701a      	strb	r2, [r3, #0]
 8000be2:	4873      	ldr	r0, [pc, #460]	; (8000db0 <main+0x360>)
 8000be4:	f003 fa6e 	bl	80040c4 <puts>
 8000be8:	e006      	b.n	8000bf8 <main+0x1a8>
				 case  'k' : {Mode_LCD=4;printf("Mode Menu 4\r\n");break;}
 8000bea:	4b6e      	ldr	r3, [pc, #440]	; (8000da4 <main+0x354>)
 8000bec:	2204      	movs	r2, #4
 8000bee:	701a      	strb	r2, [r3, #0]
 8000bf0:	4870      	ldr	r0, [pc, #448]	; (8000db4 <main+0x364>)
 8000bf2:	f003 fa67 	bl	80040c4 <puts>
 8000bf6:	bf00      	nop
		   }

		 }
		switch(Mode_Color)
 8000bf8:	4b61      	ldr	r3, [pc, #388]	; (8000d80 <main+0x330>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	3b01      	subs	r3, #1
 8000bfe:	2b05      	cmp	r3, #5
 8000c00:	f200 8094 	bhi.w	8000d2c <main+0x2dc>
 8000c04:	a201      	add	r2, pc, #4	; (adr r2, 8000c0c <main+0x1bc>)
 8000c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c0a:	bf00      	nop
 8000c0c:	08000c25 	.word	0x08000c25
 8000c10:	08000c31 	.word	0x08000c31
 8000c14:	08000c3d 	.word	0x08000c3d
 8000c18:	08000c49 	.word	0x08000c49
 8000c1c:	08000c55 	.word	0x08000c55
 8000c20:	08000c61 	.word	0x08000c61
		{


			case 1:
			   {
					bam_xung (1,99,99 );
 8000c24:	2263      	movs	r2, #99	; 0x63
 8000c26:	2163      	movs	r1, #99	; 0x63
 8000c28:	2001      	movs	r0, #1
 8000c2a:	f000 ff59 	bl	8001ae0 <bam_xung>
					break;
 8000c2e:	e081      	b.n	8000d34 <main+0x2e4>
			   }
			case 2:
			   {
					bam_xung (99,1,99 );
 8000c30:	2263      	movs	r2, #99	; 0x63
 8000c32:	2101      	movs	r1, #1
 8000c34:	2063      	movs	r0, #99	; 0x63
 8000c36:	f000 ff53 	bl	8001ae0 <bam_xung>
					break;
 8000c3a:	e07b      	b.n	8000d34 <main+0x2e4>
			   }
			case 3:
			   {
					bam_xung (99,99,1);
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	2163      	movs	r1, #99	; 0x63
 8000c40:	2063      	movs	r0, #99	; 0x63
 8000c42:	f000 ff4d 	bl	8001ae0 <bam_xung>
					break;
 8000c46:	e075      	b.n	8000d34 <main+0x2e4>
			   }
			case 4:
			   {
					bam_xung (1,1,99);
 8000c48:	2263      	movs	r2, #99	; 0x63
 8000c4a:	2101      	movs	r1, #1
 8000c4c:	2001      	movs	r0, #1
 8000c4e:	f000 ff47 	bl	8001ae0 <bam_xung>
					break;
 8000c52:	e06f      	b.n	8000d34 <main+0x2e4>
			   }
			case 5:
			   {
					bam_xung (99,1,1);
 8000c54:	2201      	movs	r2, #1
 8000c56:	2101      	movs	r1, #1
 8000c58:	2063      	movs	r0, #99	; 0x63
 8000c5a:	f000 ff41 	bl	8001ae0 <bam_xung>
					break;
 8000c5e:	e069      	b.n	8000d34 <main+0x2e4>
				}
			case 6:
			   {
				   vruc_Count++;
 8000c60:	4b4e      	ldr	r3, [pc, #312]	; (8000d9c <main+0x34c>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	3301      	adds	r3, #1
 8000c66:	b2da      	uxtb	r2, r3
 8000c68:	4b4c      	ldr	r3, [pc, #304]	; (8000d9c <main+0x34c>)
 8000c6a:	701a      	strb	r2, [r3, #0]
				   if(vruc_Count > 99)
 8000c6c:	4b4b      	ldr	r3, [pc, #300]	; (8000d9c <main+0x34c>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	2b63      	cmp	r3, #99	; 0x63
 8000c72:	d90f      	bls.n	8000c94 <main+0x244>
				   {
					   vruc_Count = 0;
 8000c74:	4b49      	ldr	r3, [pc, #292]	; (8000d9c <main+0x34c>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	701a      	strb	r2, [r3, #0]
					   vruc_Cycle++;
 8000c7a:	4b47      	ldr	r3, [pc, #284]	; (8000d98 <main+0x348>)
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	3301      	adds	r3, #1
 8000c80:	b2da      	uxtb	r2, r3
 8000c82:	4b45      	ldr	r3, [pc, #276]	; (8000d98 <main+0x348>)
 8000c84:	701a      	strb	r2, [r3, #0]

					   if(vruc_Cycle > 5)
 8000c86:	4b44      	ldr	r3, [pc, #272]	; (8000d98 <main+0x348>)
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	2b05      	cmp	r3, #5
 8000c8c:	d902      	bls.n	8000c94 <main+0x244>
					   {
						   vruc_Cycle = 0;
 8000c8e:	4b42      	ldr	r3, [pc, #264]	; (8000d98 <main+0x348>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	701a      	strb	r2, [r3, #0]

					   }

				   }

				   switch(vruc_Cycle){
 8000c94:	4b40      	ldr	r3, [pc, #256]	; (8000d98 <main+0x348>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	2b05      	cmp	r3, #5
 8000c9a:	d845      	bhi.n	8000d28 <main+0x2d8>
 8000c9c:	a201      	add	r2, pc, #4	; (adr r2, 8000ca4 <main+0x254>)
 8000c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ca2:	bf00      	nop
 8000ca4:	08000cbd 	.word	0x08000cbd
 8000ca8:	08000ccd 	.word	0x08000ccd
 8000cac:	08000ce1 	.word	0x08000ce1
 8000cb0:	08000cf1 	.word	0x08000cf1
 8000cb4:	08000d05 	.word	0x08000d05
 8000cb8:	08000d15 	.word	0x08000d15
					case 0:
						bam_xung (99,vruc_Count,1);
 8000cbc:	4b37      	ldr	r3, [pc, #220]	; (8000d9c <main+0x34c>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	2063      	movs	r0, #99	; 0x63
 8000cc6:	f000 ff0b 	bl	8001ae0 <bam_xung>
						break;
 8000cca:	e02e      	b.n	8000d2a <main+0x2da>
					case 1:
						bam_xung (99-vruc_Count,99,1);
 8000ccc:	4b33      	ldr	r3, [pc, #204]	; (8000d9c <main+0x34c>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	f1c3 0363 	rsb	r3, r3, #99	; 0x63
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	2163      	movs	r1, #99	; 0x63
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f000 ff01 	bl	8001ae0 <bam_xung>
						break;
 8000cde:	e024      	b.n	8000d2a <main+0x2da>
					case 2:
						bam_xung (1,99,vruc_Count);
 8000ce0:	4b2e      	ldr	r3, [pc, #184]	; (8000d9c <main+0x34c>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	2163      	movs	r1, #99	; 0x63
 8000ce8:	2001      	movs	r0, #1
 8000cea:	f000 fef9 	bl	8001ae0 <bam_xung>
						break;
 8000cee:	e01c      	b.n	8000d2a <main+0x2da>
					case 3:
						bam_xung (1,99-vruc_Count,99);
 8000cf0:	4b2a      	ldr	r3, [pc, #168]	; (8000d9c <main+0x34c>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	f1c3 0363 	rsb	r3, r3, #99	; 0x63
 8000cf8:	2263      	movs	r2, #99	; 0x63
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	f000 feef 	bl	8001ae0 <bam_xung>
						break;
 8000d02:	e012      	b.n	8000d2a <main+0x2da>
					case 4:
						bam_xung (vruc_Count,1,99);
 8000d04:	4b25      	ldr	r3, [pc, #148]	; (8000d9c <main+0x34c>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	2263      	movs	r2, #99	; 0x63
 8000d0a:	2101      	movs	r1, #1
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f000 fee7 	bl	8001ae0 <bam_xung>
						break;
 8000d12:	e00a      	b.n	8000d2a <main+0x2da>
					case 5:
						bam_xung (99,1,99-vruc_Count);
 8000d14:	4b21      	ldr	r3, [pc, #132]	; (8000d9c <main+0x34c>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	f1c3 0363 	rsb	r3, r3, #99	; 0x63
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	2101      	movs	r1, #1
 8000d20:	2063      	movs	r0, #99	; 0x63
 8000d22:	f000 fedd 	bl	8001ae0 <bam_xung>
						break;
 8000d26:	e000      	b.n	8000d2a <main+0x2da>
					default:
						break;
 8000d28:	bf00      	nop
				   }

				   break;
 8000d2a:	e003      	b.n	8000d34 <main+0x2e4>
			   }
			default:
				Mode_Color=1;break;
 8000d2c:	4b14      	ldr	r3, [pc, #80]	; (8000d80 <main+0x330>)
 8000d2e:	2201      	movs	r2, #1
 8000d30:	701a      	strb	r2, [r3, #0]
 8000d32:	bf00      	nop
		}
		switch(Mode_LCD)
 8000d34:	4b1b      	ldr	r3, [pc, #108]	; (8000da4 <main+0x354>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	3b01      	subs	r3, #1
 8000d3a:	2b03      	cmp	r3, #3
 8000d3c:	f200 8447 	bhi.w	80015ce <main+0xb7e>
 8000d40:	a201      	add	r2, pc, #4	; (adr r2, 8000d48 <main+0x2f8>)
 8000d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d46:	bf00      	nop
 8000d48:	08000db9 	.word	0x08000db9
 8000d4c:	08000f61 	.word	0x08000f61
 8000d50:	080011df 	.word	0x080011df
 8000d54:	080014c9 	.word	0x080014c9
 8000d58:	20000330 	.word	0x20000330
 8000d5c:	200002a4 	.word	0x200002a4
 8000d60:	200002a0 	.word	0x200002a0
 8000d64:	2000032c 	.word	0x2000032c
 8000d68:	20000324 	.word	0x20000324
 8000d6c:	20000329 	.word	0x20000329
 8000d70:	20000327 	.word	0x20000327
 8000d74:	200002a1 	.word	0x200002a1
 8000d78:	2000032a 	.word	0x2000032a
 8000d7c:	200002e4 	.word	0x200002e4
 8000d80:	20000328 	.word	0x20000328
 8000d84:	08004e9c 	.word	0x08004e9c
 8000d88:	08004ea4 	.word	0x08004ea4
 8000d8c:	08004eac 	.word	0x08004eac
 8000d90:	08004eb4 	.word	0x08004eb4
 8000d94:	08004ebc 	.word	0x08004ebc
 8000d98:	20000326 	.word	0x20000326
 8000d9c:	2000032d 	.word	0x2000032d
 8000da0:	08004ec4 	.word	0x08004ec4
 8000da4:	20000008 	.word	0x20000008
 8000da8:	08004ecc 	.word	0x08004ecc
 8000dac:	08004edc 	.word	0x08004edc
 8000db0:	08004eec 	.word	0x08004eec
 8000db4:	08004efc 	.word	0x08004efc
		 {
		  case 1: {
					//che do hien thi MAIN MENU
					PCD8544_clear_screen(WHITE);
 8000db8:	2001      	movs	r0, #1
 8000dba:	f7ff fb27 	bl	800040c <PCD8544_clear_screen>
					PCD8544_print_string(1, 0, "    MAIN MENU   ", BLACK);
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	4ab4      	ldr	r2, [pc, #720]	; (8001094 <main+0x644>)
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	2001      	movs	r0, #1
 8000dc6:	f7ff fb49 	bl	800045c <PCD8544_print_string>
					PCD8544_print_string(1, 2, "Cam Bien", WHITE);
 8000dca:	2301      	movs	r3, #1
 8000dcc:	4ab2      	ldr	r2, [pc, #712]	; (8001098 <main+0x648>)
 8000dce:	2102      	movs	r1, #2
 8000dd0:	2001      	movs	r0, #1
 8000dd2:	f7ff fb43 	bl	800045c <PCD8544_print_string>
					PCD8544_print_string(1, 3, "Giam Sat", WHITE);
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	4ab0      	ldr	r2, [pc, #704]	; (800109c <main+0x64c>)
 8000dda:	2103      	movs	r1, #3
 8000ddc:	2001      	movs	r0, #1
 8000dde:	f7ff fb3d 	bl	800045c <PCD8544_print_string>
					PCD8544_print_string(1, 4, "R G B", WHITE);
 8000de2:	2301      	movs	r3, #1
 8000de4:	4aae      	ldr	r2, [pc, #696]	; (80010a0 <main+0x650>)
 8000de6:	2104      	movs	r1, #4
 8000de8:	2001      	movs	r0, #1
 8000dea:	f7ff fb37 	bl	800045c <PCD8544_print_string>

					if(!HAL_GPIO_ReadPin(btn_Xuong_GPIO_Port,btn_Xuong_Pin))
 8000dee:	2120      	movs	r1, #32
 8000df0:	48ac      	ldr	r0, [pc, #688]	; (80010a4 <main+0x654>)
 8000df2:	f001 fc59 	bl	80026a8 <HAL_GPIO_ReadPin>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d114      	bne.n	8000e26 <main+0x3d6>
					{
						while(!HAL_GPIO_ReadPin(btn_Xuong_GPIO_Port,btn_Xuong_Pin));
 8000dfc:	bf00      	nop
 8000dfe:	2120      	movs	r1, #32
 8000e00:	48a8      	ldr	r0, [pc, #672]	; (80010a4 <main+0x654>)
 8000e02:	f001 fc51 	bl	80026a8 <HAL_GPIO_ReadPin>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d0f8      	beq.n	8000dfe <main+0x3ae>
						Mode_menu++;
 8000e0c:	4ba6      	ldr	r3, [pc, #664]	; (80010a8 <main+0x658>)
 8000e0e:	881b      	ldrh	r3, [r3, #0]
 8000e10:	3301      	adds	r3, #1
 8000e12:	b29a      	uxth	r2, r3
 8000e14:	4ba4      	ldr	r3, [pc, #656]	; (80010a8 <main+0x658>)
 8000e16:	801a      	strh	r2, [r3, #0]
						if(Mode_menu>3) Mode_menu=3;
 8000e18:	4ba3      	ldr	r3, [pc, #652]	; (80010a8 <main+0x658>)
 8000e1a:	881b      	ldrh	r3, [r3, #0]
 8000e1c:	2b03      	cmp	r3, #3
 8000e1e:	d902      	bls.n	8000e26 <main+0x3d6>
 8000e20:	4ba1      	ldr	r3, [pc, #644]	; (80010a8 <main+0x658>)
 8000e22:	2203      	movs	r2, #3
 8000e24:	801a      	strh	r2, [r3, #0]
					}
					if(!HAL_GPIO_ReadPin(btn_Len_GPIO_Port,btn_Len_Pin))
 8000e26:	2108      	movs	r1, #8
 8000e28:	489e      	ldr	r0, [pc, #632]	; (80010a4 <main+0x654>)
 8000e2a:	f001 fc3d 	bl	80026a8 <HAL_GPIO_ReadPin>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d114      	bne.n	8000e5e <main+0x40e>
					{
						while(!HAL_GPIO_ReadPin(btn_Len_GPIO_Port,btn_Len_Pin));
 8000e34:	bf00      	nop
 8000e36:	2108      	movs	r1, #8
 8000e38:	489a      	ldr	r0, [pc, #616]	; (80010a4 <main+0x654>)
 8000e3a:	f001 fc35 	bl	80026a8 <HAL_GPIO_ReadPin>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d0f8      	beq.n	8000e36 <main+0x3e6>
						Mode_menu--;
 8000e44:	4b98      	ldr	r3, [pc, #608]	; (80010a8 <main+0x658>)
 8000e46:	881b      	ldrh	r3, [r3, #0]
 8000e48:	3b01      	subs	r3, #1
 8000e4a:	b29a      	uxth	r2, r3
 8000e4c:	4b96      	ldr	r3, [pc, #600]	; (80010a8 <main+0x658>)
 8000e4e:	801a      	strh	r2, [r3, #0]
						if(Mode_menu<1) Mode_menu=1;
 8000e50:	4b95      	ldr	r3, [pc, #596]	; (80010a8 <main+0x658>)
 8000e52:	881b      	ldrh	r3, [r3, #0]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d102      	bne.n	8000e5e <main+0x40e>
 8000e58:	4b93      	ldr	r3, [pc, #588]	; (80010a8 <main+0x658>)
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	801a      	strh	r2, [r3, #0]
					}
					switch(Mode_menu)
 8000e5e:	4b92      	ldr	r3, [pc, #584]	; (80010a8 <main+0x658>)
 8000e60:	881b      	ldrh	r3, [r3, #0]
 8000e62:	2b02      	cmp	r3, #2
 8000e64:	d028      	beq.n	8000eb8 <main+0x468>
 8000e66:	2b03      	cmp	r3, #3
 8000e68:	d04b      	beq.n	8000f02 <main+0x4b2>
 8000e6a:	2b01      	cmp	r3, #1
 8000e6c:	d16e      	bne.n	8000f4c <main+0x4fc>
					   {
						case 1:
						{
							PCD8544_print_string(1, 2, "Cam Bien",BLACK);
 8000e6e:	2300      	movs	r3, #0
 8000e70:	4a89      	ldr	r2, [pc, #548]	; (8001098 <main+0x648>)
 8000e72:	2102      	movs	r1, #2
 8000e74:	2001      	movs	r0, #1
 8000e76:	f7ff faf1 	bl	800045c <PCD8544_print_string>
							PCD8544_print_string(1, 3, "Giam Sat", WHITE);
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	4a87      	ldr	r2, [pc, #540]	; (800109c <main+0x64c>)
 8000e7e:	2103      	movs	r1, #3
 8000e80:	2001      	movs	r0, #1
 8000e82:	f7ff faeb 	bl	800045c <PCD8544_print_string>
							PCD8544_print_string(1, 4, "R G B", WHITE);
 8000e86:	2301      	movs	r3, #1
 8000e88:	4a85      	ldr	r2, [pc, #532]	; (80010a0 <main+0x650>)
 8000e8a:	2104      	movs	r1, #4
 8000e8c:	2001      	movs	r0, #1
 8000e8e:	f7ff fae5 	bl	800045c <PCD8544_print_string>
							if(!HAL_GPIO_ReadPin(btn_OK_GPIO_Port, btn_OK_Pin))
 8000e92:	2110      	movs	r1, #16
 8000e94:	4883      	ldr	r0, [pc, #524]	; (80010a4 <main+0x654>)
 8000e96:	f001 fc07 	bl	80026a8 <HAL_GPIO_ReadPin>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d159      	bne.n	8000f54 <main+0x504>
							{
								while(!HAL_GPIO_ReadPin(btn_OK_GPIO_Port, btn_OK_Pin));
 8000ea0:	bf00      	nop
 8000ea2:	2110      	movs	r1, #16
 8000ea4:	487f      	ldr	r0, [pc, #508]	; (80010a4 <main+0x654>)
 8000ea6:	f001 fbff 	bl	80026a8 <HAL_GPIO_ReadPin>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d0f8      	beq.n	8000ea2 <main+0x452>
								Mode_LCD=2;
 8000eb0:	4b7e      	ldr	r3, [pc, #504]	; (80010ac <main+0x65c>)
 8000eb2:	2202      	movs	r2, #2
 8000eb4:	701a      	strb	r2, [r3, #0]
							}
							break;
 8000eb6:	e04d      	b.n	8000f54 <main+0x504>
						}
						case 2:
						{
							PCD8544_print_string(1, 2, "Cam Bien", WHITE);
 8000eb8:	2301      	movs	r3, #1
 8000eba:	4a77      	ldr	r2, [pc, #476]	; (8001098 <main+0x648>)
 8000ebc:	2102      	movs	r1, #2
 8000ebe:	2001      	movs	r0, #1
 8000ec0:	f7ff facc 	bl	800045c <PCD8544_print_string>
							PCD8544_print_string(1, 3, "Giam Sat", BLACK);
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	4a75      	ldr	r2, [pc, #468]	; (800109c <main+0x64c>)
 8000ec8:	2103      	movs	r1, #3
 8000eca:	2001      	movs	r0, #1
 8000ecc:	f7ff fac6 	bl	800045c <PCD8544_print_string>
							PCD8544_print_string(1, 4, "R G B", WHITE);
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	4a73      	ldr	r2, [pc, #460]	; (80010a0 <main+0x650>)
 8000ed4:	2104      	movs	r1, #4
 8000ed6:	2001      	movs	r0, #1
 8000ed8:	f7ff fac0 	bl	800045c <PCD8544_print_string>
							if(!HAL_GPIO_ReadPin(btn_OK_GPIO_Port, btn_OK_Pin))
 8000edc:	2110      	movs	r1, #16
 8000ede:	4871      	ldr	r0, [pc, #452]	; (80010a4 <main+0x654>)
 8000ee0:	f001 fbe2 	bl	80026a8 <HAL_GPIO_ReadPin>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d136      	bne.n	8000f58 <main+0x508>
							{
								while(!HAL_GPIO_ReadPin(btn_OK_GPIO_Port, btn_OK_Pin));
 8000eea:	bf00      	nop
 8000eec:	2110      	movs	r1, #16
 8000eee:	486d      	ldr	r0, [pc, #436]	; (80010a4 <main+0x654>)
 8000ef0:	f001 fbda 	bl	80026a8 <HAL_GPIO_ReadPin>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d0f8      	beq.n	8000eec <main+0x49c>
								Mode_LCD=3;
 8000efa:	4b6c      	ldr	r3, [pc, #432]	; (80010ac <main+0x65c>)
 8000efc:	2203      	movs	r2, #3
 8000efe:	701a      	strb	r2, [r3, #0]
							}
							break;
 8000f00:	e02a      	b.n	8000f58 <main+0x508>
						}
						case 3:
						{
							PCD8544_print_string(1, 2, "Cam Bien", WHITE);
 8000f02:	2301      	movs	r3, #1
 8000f04:	4a64      	ldr	r2, [pc, #400]	; (8001098 <main+0x648>)
 8000f06:	2102      	movs	r1, #2
 8000f08:	2001      	movs	r0, #1
 8000f0a:	f7ff faa7 	bl	800045c <PCD8544_print_string>
							PCD8544_print_string(1, 3, "Giam Sat", WHITE);
 8000f0e:	2301      	movs	r3, #1
 8000f10:	4a62      	ldr	r2, [pc, #392]	; (800109c <main+0x64c>)
 8000f12:	2103      	movs	r1, #3
 8000f14:	2001      	movs	r0, #1
 8000f16:	f7ff faa1 	bl	800045c <PCD8544_print_string>
							PCD8544_print_string(1, 4, "R G B", BLACK);
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	4a60      	ldr	r2, [pc, #384]	; (80010a0 <main+0x650>)
 8000f1e:	2104      	movs	r1, #4
 8000f20:	2001      	movs	r0, #1
 8000f22:	f7ff fa9b 	bl	800045c <PCD8544_print_string>
							if(!HAL_GPIO_ReadPin(btn_OK_GPIO_Port, btn_OK_Pin))
 8000f26:	2110      	movs	r1, #16
 8000f28:	485e      	ldr	r0, [pc, #376]	; (80010a4 <main+0x654>)
 8000f2a:	f001 fbbd 	bl	80026a8 <HAL_GPIO_ReadPin>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d113      	bne.n	8000f5c <main+0x50c>
							{
								while(!HAL_GPIO_ReadPin(btn_OK_GPIO_Port, btn_OK_Pin));
 8000f34:	bf00      	nop
 8000f36:	2110      	movs	r1, #16
 8000f38:	485a      	ldr	r0, [pc, #360]	; (80010a4 <main+0x654>)
 8000f3a:	f001 fbb5 	bl	80026a8 <HAL_GPIO_ReadPin>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d0f8      	beq.n	8000f36 <main+0x4e6>
								Mode_LCD=4;
 8000f44:	4b59      	ldr	r3, [pc, #356]	; (80010ac <main+0x65c>)
 8000f46:	2204      	movs	r2, #4
 8000f48:	701a      	strb	r2, [r3, #0]
							}
							break;
 8000f4a:	e007      	b.n	8000f5c <main+0x50c>
						}
						default: Mode_menu=1;break;
 8000f4c:	4b56      	ldr	r3, [pc, #344]	; (80010a8 <main+0x658>)
 8000f4e:	2201      	movs	r2, #1
 8000f50:	801a      	strh	r2, [r3, #0]
 8000f52:	e004      	b.n	8000f5e <main+0x50e>
							break;
 8000f54:	bf00      	nop
 8000f56:	e33a      	b.n	80015ce <main+0xb7e>
							break;
 8000f58:	bf00      	nop
 8000f5a:	e338      	b.n	80015ce <main+0xb7e>
							break;
 8000f5c:	bf00      	nop
					}
					break;
 8000f5e:	e336      	b.n	80015ce <main+0xb7e>
				  }
		  case 2: {
					//che do hien thi nhiet do va do am len LCD
					PCD8544_clear_screen(WHITE);
 8000f60:	2001      	movs	r0, #1
 8000f62:	f7ff fa53 	bl	800040c <PCD8544_clear_screen>
					PCD8544_print_string(1, 0, "    Cam Bien    ", BLACK);
 8000f66:	2300      	movs	r3, #0
 8000f68:	4a51      	ldr	r2, [pc, #324]	; (80010b0 <main+0x660>)
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	2001      	movs	r0, #1
 8000f6e:	f7ff fa75 	bl	800045c <PCD8544_print_string>
					PCD8544_print_string(1, 2, "Nhiet Do:", WHITE);print_int(45, 2,int_T, WHITE); PCD8544_set_cursor(70,2);PCD8544_print_char('C',WHITE);
 8000f72:	2301      	movs	r3, #1
 8000f74:	4a4f      	ldr	r2, [pc, #316]	; (80010b4 <main+0x664>)
 8000f76:	2102      	movs	r1, #2
 8000f78:	2001      	movs	r0, #1
 8000f7a:	f7ff fa6f 	bl	800045c <PCD8544_print_string>
 8000f7e:	4b4e      	ldr	r3, [pc, #312]	; (80010b8 <main+0x668>)
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	461a      	mov	r2, r3
 8000f84:	2301      	movs	r3, #1
 8000f86:	2102      	movs	r1, #2
 8000f88:	202d      	movs	r0, #45	; 0x2d
 8000f8a:	f7ff fa8f 	bl	80004ac <print_int>
 8000f8e:	2102      	movs	r1, #2
 8000f90:	2046      	movs	r0, #70	; 0x46
 8000f92:	f7ff f9c5 	bl	8000320 <PCD8544_set_cursor>
 8000f96:	2101      	movs	r1, #1
 8000f98:	2043      	movs	r0, #67	; 0x43
 8000f9a:	f7ff f9dd 	bl	8000358 <PCD8544_print_char>
					PCD8544_print_string(1, 3, "Do Am:", WHITE);print_int(45, 3,int_RH, WHITE); PCD8544_set_cursor(70,3);PCD8544_print_char('%',WHITE);
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	4a46      	ldr	r2, [pc, #280]	; (80010bc <main+0x66c>)
 8000fa2:	2103      	movs	r1, #3
 8000fa4:	2001      	movs	r0, #1
 8000fa6:	f7ff fa59 	bl	800045c <PCD8544_print_string>
 8000faa:	4b45      	ldr	r3, [pc, #276]	; (80010c0 <main+0x670>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	461a      	mov	r2, r3
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	2103      	movs	r1, #3
 8000fb4:	202d      	movs	r0, #45	; 0x2d
 8000fb6:	f7ff fa79 	bl	80004ac <print_int>
 8000fba:	2103      	movs	r1, #3
 8000fbc:	2046      	movs	r0, #70	; 0x46
 8000fbe:	f7ff f9af 	bl	8000320 <PCD8544_set_cursor>
 8000fc2:	2101      	movs	r1, #1
 8000fc4:	2025      	movs	r0, #37	; 0x25
 8000fc6:	f7ff f9c7 	bl	8000358 <PCD8544_print_char>
					if(!HAL_GPIO_ReadPin(btn_phai_GPIO_Port, btn_phai_Pin))
 8000fca:	2180      	movs	r1, #128	; 0x80
 8000fcc:	4835      	ldr	r0, [pc, #212]	; (80010a4 <main+0x654>)
 8000fce:	f001 fb6b 	bl	80026a8 <HAL_GPIO_ReadPin>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d10a      	bne.n	8000fee <main+0x59e>
					{
						while(!HAL_GPIO_ReadPin(btn_phai_GPIO_Port, btn_phai_Pin));
 8000fd8:	bf00      	nop
 8000fda:	2180      	movs	r1, #128	; 0x80
 8000fdc:	4831      	ldr	r0, [pc, #196]	; (80010a4 <main+0x654>)
 8000fde:	f001 fb63 	bl	80026a8 <HAL_GPIO_ReadPin>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d0f8      	beq.n	8000fda <main+0x58a>
                        Mode_cambien=1;
 8000fe8:	4b36      	ldr	r3, [pc, #216]	; (80010c4 <main+0x674>)
 8000fea:	2201      	movs	r2, #1
 8000fec:	801a      	strh	r2, [r3, #0]
					}
					if(!HAL_GPIO_ReadPin(btn_Trai_GPIO_Port, btn_Trai_Pin))
 8000fee:	2140      	movs	r1, #64	; 0x40
 8000ff0:	482c      	ldr	r0, [pc, #176]	; (80010a4 <main+0x654>)
 8000ff2:	f001 fb59 	bl	80026a8 <HAL_GPIO_ReadPin>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d10a      	bne.n	8001012 <main+0x5c2>
					{
						while(!HAL_GPIO_ReadPin(btn_Trai_GPIO_Port, btn_Trai_Pin));
 8000ffc:	bf00      	nop
 8000ffe:	2140      	movs	r1, #64	; 0x40
 8001000:	4828      	ldr	r0, [pc, #160]	; (80010a4 <main+0x654>)
 8001002:	f001 fb51 	bl	80026a8 <HAL_GPIO_ReadPin>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d0f8      	beq.n	8000ffe <main+0x5ae>
						Mode_cambien=2;
 800100c:	4b2d      	ldr	r3, [pc, #180]	; (80010c4 <main+0x674>)
 800100e:	2202      	movs	r2, #2
 8001010:	801a      	strh	r2, [r3, #0]
					}
					switch(Mode_cambien)
 8001012:	4b2c      	ldr	r3, [pc, #176]	; (80010c4 <main+0x674>)
 8001014:	881b      	ldrh	r3, [r3, #0]
 8001016:	2b01      	cmp	r3, #1
 8001018:	d002      	beq.n	8001020 <main+0x5d0>
 800101a:	2b02      	cmp	r3, #2
 800101c:	d056      	beq.n	80010cc <main+0x67c>
 800101e:	e082      	b.n	8001126 <main+0x6d6>
					{
					 case 1:
					 {int F= (9*int_T)/5+32;
 8001020:	4b25      	ldr	r3, [pc, #148]	; (80010b8 <main+0x668>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	461a      	mov	r2, r3
 8001026:	4613      	mov	r3, r2
 8001028:	00db      	lsls	r3, r3, #3
 800102a:	4413      	add	r3, r2
 800102c:	4a26      	ldr	r2, [pc, #152]	; (80010c8 <main+0x678>)
 800102e:	fb82 1203 	smull	r1, r2, r2, r3
 8001032:	1052      	asrs	r2, r2, #1
 8001034:	17db      	asrs	r3, r3, #31
 8001036:	1ad3      	subs	r3, r2, r3
 8001038:	3320      	adds	r3, #32
 800103a:	607b      	str	r3, [r7, #4]
					   PCD8544_print_string(1, 2, "Nhiet Do:", WHITE);print_int(45, 2,F, WHITE); PCD8544_set_cursor(70,2);PCD8544_print_char('F',WHITE);
 800103c:	2301      	movs	r3, #1
 800103e:	4a1d      	ldr	r2, [pc, #116]	; (80010b4 <main+0x664>)
 8001040:	2102      	movs	r1, #2
 8001042:	2001      	movs	r0, #1
 8001044:	f7ff fa0a 	bl	800045c <PCD8544_print_string>
 8001048:	2301      	movs	r3, #1
 800104a:	687a      	ldr	r2, [r7, #4]
 800104c:	2102      	movs	r1, #2
 800104e:	202d      	movs	r0, #45	; 0x2d
 8001050:	f7ff fa2c 	bl	80004ac <print_int>
 8001054:	2102      	movs	r1, #2
 8001056:	2046      	movs	r0, #70	; 0x46
 8001058:	f7ff f962 	bl	8000320 <PCD8544_set_cursor>
 800105c:	2101      	movs	r1, #1
 800105e:	2046      	movs	r0, #70	; 0x46
 8001060:	f7ff f97a 	bl	8000358 <PCD8544_print_char>
					   PCD8544_print_string(1, 3, "Do Am:", WHITE);print_int(45, 3,int_RH, WHITE); PCD8544_set_cursor(70,3);PCD8544_print_char('%',WHITE);
 8001064:	2301      	movs	r3, #1
 8001066:	4a15      	ldr	r2, [pc, #84]	; (80010bc <main+0x66c>)
 8001068:	2103      	movs	r1, #3
 800106a:	2001      	movs	r0, #1
 800106c:	f7ff f9f6 	bl	800045c <PCD8544_print_string>
 8001070:	4b13      	ldr	r3, [pc, #76]	; (80010c0 <main+0x670>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	461a      	mov	r2, r3
 8001076:	2301      	movs	r3, #1
 8001078:	2103      	movs	r1, #3
 800107a:	202d      	movs	r0, #45	; 0x2d
 800107c:	f7ff fa16 	bl	80004ac <print_int>
 8001080:	2103      	movs	r1, #3
 8001082:	2046      	movs	r0, #70	; 0x46
 8001084:	f7ff f94c 	bl	8000320 <PCD8544_set_cursor>
 8001088:	2101      	movs	r1, #1
 800108a:	2025      	movs	r0, #37	; 0x25
 800108c:	f7ff f964 	bl	8000358 <PCD8544_print_char>
					   break;
 8001090:	e049      	b.n	8001126 <main+0x6d6>
 8001092:	bf00      	nop
 8001094:	08004f0c 	.word	0x08004f0c
 8001098:	08004f20 	.word	0x08004f20
 800109c:	08004f2c 	.word	0x08004f2c
 80010a0:	08004f38 	.word	0x08004f38
 80010a4:	40010c00 	.word	0x40010c00
 80010a8:	20000000 	.word	0x20000000
 80010ac:	20000008 	.word	0x20000008
 80010b0:	08004f40 	.word	0x08004f40
 80010b4:	08004f54 	.word	0x08004f54
 80010b8:	20000329 	.word	0x20000329
 80010bc:	08004f60 	.word	0x08004f60
 80010c0:	2000032c 	.word	0x2000032c
 80010c4:	20000004 	.word	0x20000004
 80010c8:	66666667 	.word	0x66666667
					 }
					 case 2:
					 {
					   PCD8544_print_string(1, 2, "Nhiet Do:", WHITE);print_int(45, 2,int_T, WHITE); PCD8544_set_cursor(70,2);PCD8544_print_char('C',WHITE);
 80010cc:	2301      	movs	r3, #1
 80010ce:	4aae      	ldr	r2, [pc, #696]	; (8001388 <main+0x938>)
 80010d0:	2102      	movs	r1, #2
 80010d2:	2001      	movs	r0, #1
 80010d4:	f7ff f9c2 	bl	800045c <PCD8544_print_string>
 80010d8:	4bac      	ldr	r3, [pc, #688]	; (800138c <main+0x93c>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	461a      	mov	r2, r3
 80010de:	2301      	movs	r3, #1
 80010e0:	2102      	movs	r1, #2
 80010e2:	202d      	movs	r0, #45	; 0x2d
 80010e4:	f7ff f9e2 	bl	80004ac <print_int>
 80010e8:	2102      	movs	r1, #2
 80010ea:	2046      	movs	r0, #70	; 0x46
 80010ec:	f7ff f918 	bl	8000320 <PCD8544_set_cursor>
 80010f0:	2101      	movs	r1, #1
 80010f2:	2043      	movs	r0, #67	; 0x43
 80010f4:	f7ff f930 	bl	8000358 <PCD8544_print_char>
					   PCD8544_print_string(1, 3, "Do Am:", WHITE);print_int(45, 3,int_RH, WHITE); PCD8544_set_cursor(70,3);PCD8544_print_char('%',WHITE);
 80010f8:	2301      	movs	r3, #1
 80010fa:	4aa5      	ldr	r2, [pc, #660]	; (8001390 <main+0x940>)
 80010fc:	2103      	movs	r1, #3
 80010fe:	2001      	movs	r0, #1
 8001100:	f7ff f9ac 	bl	800045c <PCD8544_print_string>
 8001104:	4ba3      	ldr	r3, [pc, #652]	; (8001394 <main+0x944>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	461a      	mov	r2, r3
 800110a:	2301      	movs	r3, #1
 800110c:	2103      	movs	r1, #3
 800110e:	202d      	movs	r0, #45	; 0x2d
 8001110:	f7ff f9cc 	bl	80004ac <print_int>
 8001114:	2103      	movs	r1, #3
 8001116:	2046      	movs	r0, #70	; 0x46
 8001118:	f7ff f902 	bl	8000320 <PCD8544_set_cursor>
 800111c:	2101      	movs	r1, #1
 800111e:	2025      	movs	r0, #37	; 0x25
 8001120:	f7ff f91a 	bl	8000358 <PCD8544_print_char>
					   break;
 8001124:	bf00      	nop
					 }
					}
					if(int_T>=T&&int_RH<H)
 8001126:	4b99      	ldr	r3, [pc, #612]	; (800138c <main+0x93c>)
 8001128:	781a      	ldrb	r2, [r3, #0]
 800112a:	4b9b      	ldr	r3, [pc, #620]	; (8001398 <main+0x948>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	429a      	cmp	r2, r3
 8001130:	d30f      	bcc.n	8001152 <main+0x702>
 8001132:	4b98      	ldr	r3, [pc, #608]	; (8001394 <main+0x944>)
 8001134:	781a      	ldrb	r2, [r3, #0]
 8001136:	4b99      	ldr	r3, [pc, #612]	; (800139c <main+0x94c>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	429a      	cmp	r2, r3
 800113c:	d209      	bcs.n	8001152 <main+0x702>
					{
					 PCD8544_print_string(1, 4, "     OVER T!    ", BLACK);	printf("OVER TEMPT!\r\n");
 800113e:	2300      	movs	r3, #0
 8001140:	4a97      	ldr	r2, [pc, #604]	; (80013a0 <main+0x950>)
 8001142:	2104      	movs	r1, #4
 8001144:	2001      	movs	r0, #1
 8001146:	f7ff f989 	bl	800045c <PCD8544_print_string>
 800114a:	4896      	ldr	r0, [pc, #600]	; (80013a4 <main+0x954>)
 800114c:	f002 ffba 	bl	80040c4 <puts>
 8001150:	e031      	b.n	80011b6 <main+0x766>
					}
					else if(int_RH>=H&&int_T<T)
 8001152:	4b90      	ldr	r3, [pc, #576]	; (8001394 <main+0x944>)
 8001154:	781a      	ldrb	r2, [r3, #0]
 8001156:	4b91      	ldr	r3, [pc, #580]	; (800139c <main+0x94c>)
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	429a      	cmp	r2, r3
 800115c:	d30f      	bcc.n	800117e <main+0x72e>
 800115e:	4b8b      	ldr	r3, [pc, #556]	; (800138c <main+0x93c>)
 8001160:	781a      	ldrb	r2, [r3, #0]
 8001162:	4b8d      	ldr	r3, [pc, #564]	; (8001398 <main+0x948>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	429a      	cmp	r2, r3
 8001168:	d209      	bcs.n	800117e <main+0x72e>
					{
						PCD8544_print_string(1, 4, "     OVER H!    ", BLACK); printf("OVER HUM!\r\n");
 800116a:	2300      	movs	r3, #0
 800116c:	4a8e      	ldr	r2, [pc, #568]	; (80013a8 <main+0x958>)
 800116e:	2104      	movs	r1, #4
 8001170:	2001      	movs	r0, #1
 8001172:	f7ff f973 	bl	800045c <PCD8544_print_string>
 8001176:	488d      	ldr	r0, [pc, #564]	; (80013ac <main+0x95c>)
 8001178:	f002 ffa4 	bl	80040c4 <puts>
 800117c:	e01b      	b.n	80011b6 <main+0x766>
					}
					else if(int_T>=T&&int_RH>=H)
 800117e:	4b83      	ldr	r3, [pc, #524]	; (800138c <main+0x93c>)
 8001180:	781a      	ldrb	r2, [r3, #0]
 8001182:	4b85      	ldr	r3, [pc, #532]	; (8001398 <main+0x948>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	429a      	cmp	r2, r3
 8001188:	d30f      	bcc.n	80011aa <main+0x75a>
 800118a:	4b82      	ldr	r3, [pc, #520]	; (8001394 <main+0x944>)
 800118c:	781a      	ldrb	r2, [r3, #0]
 800118e:	4b83      	ldr	r3, [pc, #524]	; (800139c <main+0x94c>)
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	429a      	cmp	r2, r3
 8001194:	d309      	bcc.n	80011aa <main+0x75a>
					{
						PCD8544_print_string(1, 4, "    OVER T&H!   ", BLACK); printf("OVER HUM!\r\n");
 8001196:	2300      	movs	r3, #0
 8001198:	4a85      	ldr	r2, [pc, #532]	; (80013b0 <main+0x960>)
 800119a:	2104      	movs	r1, #4
 800119c:	2001      	movs	r0, #1
 800119e:	f7ff f95d 	bl	800045c <PCD8544_print_string>
 80011a2:	4882      	ldr	r0, [pc, #520]	; (80013ac <main+0x95c>)
 80011a4:	f002 ff8e 	bl	80040c4 <puts>
 80011a8:	e005      	b.n	80011b6 <main+0x766>
					}
					else PCD8544_print_string(1, 4, "     SAVE    ", WHITE);
 80011aa:	2301      	movs	r3, #1
 80011ac:	4a81      	ldr	r2, [pc, #516]	; (80013b4 <main+0x964>)
 80011ae:	2104      	movs	r1, #4
 80011b0:	2001      	movs	r0, #1
 80011b2:	f7ff f953 	bl	800045c <PCD8544_print_string>
					if(!HAL_GPIO_ReadPin(btn_OK_GPIO_Port, btn_OK_Pin))
 80011b6:	2110      	movs	r1, #16
 80011b8:	487f      	ldr	r0, [pc, #508]	; (80013b8 <main+0x968>)
 80011ba:	f001 fa75 	bl	80026a8 <HAL_GPIO_ReadPin>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	f040 81ff 	bne.w	80015c4 <main+0xb74>
					{
						while(!HAL_GPIO_ReadPin(btn_OK_GPIO_Port, btn_OK_Pin));
 80011c6:	bf00      	nop
 80011c8:	2110      	movs	r1, #16
 80011ca:	487b      	ldr	r0, [pc, #492]	; (80013b8 <main+0x968>)
 80011cc:	f001 fa6c 	bl	80026a8 <HAL_GPIO_ReadPin>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d0f8      	beq.n	80011c8 <main+0x778>
						Mode_LCD=1;
 80011d6:	4b79      	ldr	r3, [pc, #484]	; (80013bc <main+0x96c>)
 80011d8:	2201      	movs	r2, #1
 80011da:	701a      	strb	r2, [r3, #0]
					}
					break;
 80011dc:	e1f2      	b.n	80015c4 <main+0xb74>
				  }
		  case 3: {
			        //che do giam sat nhiet do va do am len LCD
					PCD8544_clear_screen(WHITE);
 80011de:	2001      	movs	r0, #1
 80011e0:	f7ff f914 	bl	800040c <PCD8544_clear_screen>
					PCD8544_print_string(1, 0, "    Giam Sat    ", BLACK);
 80011e4:	2300      	movs	r3, #0
 80011e6:	4a76      	ldr	r2, [pc, #472]	; (80013c0 <main+0x970>)
 80011e8:	2100      	movs	r1, #0
 80011ea:	2001      	movs	r0, #1
 80011ec:	f7ff f936 	bl	800045c <PCD8544_print_string>
					PCD8544_print_string(1, 2, "Over T:", WHITE);print_int(45, 2,T, WHITE); PCD8544_set_cursor(70,2);PCD8544_print_char('C',WHITE);
 80011f0:	2301      	movs	r3, #1
 80011f2:	4a74      	ldr	r2, [pc, #464]	; (80013c4 <main+0x974>)
 80011f4:	2102      	movs	r1, #2
 80011f6:	2001      	movs	r0, #1
 80011f8:	f7ff f930 	bl	800045c <PCD8544_print_string>
 80011fc:	4b66      	ldr	r3, [pc, #408]	; (8001398 <main+0x948>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	461a      	mov	r2, r3
 8001202:	2301      	movs	r3, #1
 8001204:	2102      	movs	r1, #2
 8001206:	202d      	movs	r0, #45	; 0x2d
 8001208:	f7ff f950 	bl	80004ac <print_int>
 800120c:	2102      	movs	r1, #2
 800120e:	2046      	movs	r0, #70	; 0x46
 8001210:	f7ff f886 	bl	8000320 <PCD8544_set_cursor>
 8001214:	2101      	movs	r1, #1
 8001216:	2043      	movs	r0, #67	; 0x43
 8001218:	f7ff f89e 	bl	8000358 <PCD8544_print_char>
					PCD8544_print_string(1, 3, "Over H:", WHITE);print_int(45, 3,H, WHITE); PCD8544_set_cursor(70,3);PCD8544_print_char('%',WHITE);
 800121c:	2301      	movs	r3, #1
 800121e:	4a6a      	ldr	r2, [pc, #424]	; (80013c8 <main+0x978>)
 8001220:	2103      	movs	r1, #3
 8001222:	2001      	movs	r0, #1
 8001224:	f7ff f91a 	bl	800045c <PCD8544_print_string>
 8001228:	4b5c      	ldr	r3, [pc, #368]	; (800139c <main+0x94c>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	461a      	mov	r2, r3
 800122e:	2301      	movs	r3, #1
 8001230:	2103      	movs	r1, #3
 8001232:	202d      	movs	r0, #45	; 0x2d
 8001234:	f7ff f93a 	bl	80004ac <print_int>
 8001238:	2103      	movs	r1, #3
 800123a:	2046      	movs	r0, #70	; 0x46
 800123c:	f7ff f870 	bl	8000320 <PCD8544_set_cursor>
 8001240:	2101      	movs	r1, #1
 8001242:	2025      	movs	r0, #37	; 0x25
 8001244:	f7ff f888 	bl	8000358 <PCD8544_print_char>

			        if(!HAL_GPIO_ReadPin(btn_Xuong_GPIO_Port,btn_Xuong_Pin))
 8001248:	2120      	movs	r1, #32
 800124a:	485b      	ldr	r0, [pc, #364]	; (80013b8 <main+0x968>)
 800124c:	f001 fa2c 	bl	80026a8 <HAL_GPIO_ReadPin>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d114      	bne.n	8001280 <main+0x830>
					{
						while(!HAL_GPIO_ReadPin(btn_Xuong_GPIO_Port,btn_Xuong_Pin));
 8001256:	bf00      	nop
 8001258:	2120      	movs	r1, #32
 800125a:	4857      	ldr	r0, [pc, #348]	; (80013b8 <main+0x968>)
 800125c:	f001 fa24 	bl	80026a8 <HAL_GPIO_ReadPin>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d0f8      	beq.n	8001258 <main+0x808>
						Mode_giamsat++;
 8001266:	4b59      	ldr	r3, [pc, #356]	; (80013cc <main+0x97c>)
 8001268:	881b      	ldrh	r3, [r3, #0]
 800126a:	3301      	adds	r3, #1
 800126c:	b29a      	uxth	r2, r3
 800126e:	4b57      	ldr	r3, [pc, #348]	; (80013cc <main+0x97c>)
 8001270:	801a      	strh	r2, [r3, #0]
						if(Mode_giamsat>2) Mode_giamsat=2;
 8001272:	4b56      	ldr	r3, [pc, #344]	; (80013cc <main+0x97c>)
 8001274:	881b      	ldrh	r3, [r3, #0]
 8001276:	2b02      	cmp	r3, #2
 8001278:	d902      	bls.n	8001280 <main+0x830>
 800127a:	4b54      	ldr	r3, [pc, #336]	; (80013cc <main+0x97c>)
 800127c:	2202      	movs	r2, #2
 800127e:	801a      	strh	r2, [r3, #0]
					}
					if(!HAL_GPIO_ReadPin(btn_Len_GPIO_Port,btn_Len_Pin))
 8001280:	2108      	movs	r1, #8
 8001282:	484d      	ldr	r0, [pc, #308]	; (80013b8 <main+0x968>)
 8001284:	f001 fa10 	bl	80026a8 <HAL_GPIO_ReadPin>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d114      	bne.n	80012b8 <main+0x868>
					{
						while(!HAL_GPIO_ReadPin(btn_Len_GPIO_Port,btn_Len_Pin));
 800128e:	bf00      	nop
 8001290:	2108      	movs	r1, #8
 8001292:	4849      	ldr	r0, [pc, #292]	; (80013b8 <main+0x968>)
 8001294:	f001 fa08 	bl	80026a8 <HAL_GPIO_ReadPin>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d0f8      	beq.n	8001290 <main+0x840>
						Mode_giamsat--;
 800129e:	4b4b      	ldr	r3, [pc, #300]	; (80013cc <main+0x97c>)
 80012a0:	881b      	ldrh	r3, [r3, #0]
 80012a2:	3b01      	subs	r3, #1
 80012a4:	b29a      	uxth	r2, r3
 80012a6:	4b49      	ldr	r3, [pc, #292]	; (80013cc <main+0x97c>)
 80012a8:	801a      	strh	r2, [r3, #0]
						if(Mode_giamsat<1) Mode_giamsat=1;
 80012aa:	4b48      	ldr	r3, [pc, #288]	; (80013cc <main+0x97c>)
 80012ac:	881b      	ldrh	r3, [r3, #0]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d102      	bne.n	80012b8 <main+0x868>
 80012b2:	4b46      	ldr	r3, [pc, #280]	; (80013cc <main+0x97c>)
 80012b4:	2201      	movs	r2, #1
 80012b6:	801a      	strh	r2, [r3, #0]
					}
					switch(Mode_giamsat)
 80012b8:	4b44      	ldr	r3, [pc, #272]	; (80013cc <main+0x97c>)
 80012ba:	881b      	ldrh	r3, [r3, #0]
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d003      	beq.n	80012c8 <main+0x878>
 80012c0:	2b02      	cmp	r3, #2
 80012c2:	f000 8085 	beq.w	80013d0 <main+0x980>
 80012c6:	e0eb      	b.n	80014a0 <main+0xa50>
					{
					 case 1:
					 {
						PCD8544_print_string(1, 2, "Over T:", BLACK);print_int(45, 2,T, WHITE); PCD8544_set_cursor(70,2);PCD8544_print_char('C',WHITE);
 80012c8:	2300      	movs	r3, #0
 80012ca:	4a3e      	ldr	r2, [pc, #248]	; (80013c4 <main+0x974>)
 80012cc:	2102      	movs	r1, #2
 80012ce:	2001      	movs	r0, #1
 80012d0:	f7ff f8c4 	bl	800045c <PCD8544_print_string>
 80012d4:	4b30      	ldr	r3, [pc, #192]	; (8001398 <main+0x948>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	461a      	mov	r2, r3
 80012da:	2301      	movs	r3, #1
 80012dc:	2102      	movs	r1, #2
 80012de:	202d      	movs	r0, #45	; 0x2d
 80012e0:	f7ff f8e4 	bl	80004ac <print_int>
 80012e4:	2102      	movs	r1, #2
 80012e6:	2046      	movs	r0, #70	; 0x46
 80012e8:	f7ff f81a 	bl	8000320 <PCD8544_set_cursor>
 80012ec:	2101      	movs	r1, #1
 80012ee:	2043      	movs	r0, #67	; 0x43
 80012f0:	f7ff f832 	bl	8000358 <PCD8544_print_char>
						PCD8544_print_string(1, 3, "Over H:", WHITE);print_int(45, 3,H, WHITE); PCD8544_set_cursor(70,3);PCD8544_print_char('%',WHITE);
 80012f4:	2301      	movs	r3, #1
 80012f6:	4a34      	ldr	r2, [pc, #208]	; (80013c8 <main+0x978>)
 80012f8:	2103      	movs	r1, #3
 80012fa:	2001      	movs	r0, #1
 80012fc:	f7ff f8ae 	bl	800045c <PCD8544_print_string>
 8001300:	4b26      	ldr	r3, [pc, #152]	; (800139c <main+0x94c>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	461a      	mov	r2, r3
 8001306:	2301      	movs	r3, #1
 8001308:	2103      	movs	r1, #3
 800130a:	202d      	movs	r0, #45	; 0x2d
 800130c:	f7ff f8ce 	bl	80004ac <print_int>
 8001310:	2103      	movs	r1, #3
 8001312:	2046      	movs	r0, #70	; 0x46
 8001314:	f7ff f804 	bl	8000320 <PCD8544_set_cursor>
 8001318:	2101      	movs	r1, #1
 800131a:	2025      	movs	r0, #37	; 0x25
 800131c:	f7ff f81c 	bl	8000358 <PCD8544_print_char>
						if(!HAL_GPIO_ReadPin(btn_phai_GPIO_Port, btn_phai_Pin))
 8001320:	2180      	movs	r1, #128	; 0x80
 8001322:	4825      	ldr	r0, [pc, #148]	; (80013b8 <main+0x968>)
 8001324:	f001 f9c0 	bl	80026a8 <HAL_GPIO_ReadPin>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d114      	bne.n	8001358 <main+0x908>
						{
						  while(!HAL_GPIO_ReadPin(btn_phai_GPIO_Port, btn_phai_Pin));
 800132e:	bf00      	nop
 8001330:	2180      	movs	r1, #128	; 0x80
 8001332:	4821      	ldr	r0, [pc, #132]	; (80013b8 <main+0x968>)
 8001334:	f001 f9b8 	bl	80026a8 <HAL_GPIO_ReadPin>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d0f8      	beq.n	8001330 <main+0x8e0>
						  T++;
 800133e:	4b16      	ldr	r3, [pc, #88]	; (8001398 <main+0x948>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	3301      	adds	r3, #1
 8001344:	b2da      	uxtb	r2, r3
 8001346:	4b14      	ldr	r3, [pc, #80]	; (8001398 <main+0x948>)
 8001348:	701a      	strb	r2, [r3, #0]
						  if(T>50) T=50;
 800134a:	4b13      	ldr	r3, [pc, #76]	; (8001398 <main+0x948>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	2b32      	cmp	r3, #50	; 0x32
 8001350:	d902      	bls.n	8001358 <main+0x908>
 8001352:	4b11      	ldr	r3, [pc, #68]	; (8001398 <main+0x948>)
 8001354:	2232      	movs	r2, #50	; 0x32
 8001356:	701a      	strb	r2, [r3, #0]
						}
						if(!HAL_GPIO_ReadPin(btn_Trai_GPIO_Port, btn_Trai_Pin))
 8001358:	2140      	movs	r1, #64	; 0x40
 800135a:	4817      	ldr	r0, [pc, #92]	; (80013b8 <main+0x968>)
 800135c:	f001 f9a4 	bl	80026a8 <HAL_GPIO_ReadPin>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	f040 8099 	bne.w	800149a <main+0xa4a>
						{
						  while(!HAL_GPIO_ReadPin(btn_Trai_GPIO_Port, btn_Trai_Pin));
 8001368:	bf00      	nop
 800136a:	2140      	movs	r1, #64	; 0x40
 800136c:	4812      	ldr	r0, [pc, #72]	; (80013b8 <main+0x968>)
 800136e:	f001 f99b 	bl	80026a8 <HAL_GPIO_ReadPin>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d0f8      	beq.n	800136a <main+0x91a>
						  T--;
 8001378:	4b07      	ldr	r3, [pc, #28]	; (8001398 <main+0x948>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	3b01      	subs	r3, #1
 800137e:	b2da      	uxtb	r2, r3
 8001380:	4b05      	ldr	r3, [pc, #20]	; (8001398 <main+0x948>)
 8001382:	701a      	strb	r2, [r3, #0]
						  if(T<0) T=0;
						}
						break;
 8001384:	e089      	b.n	800149a <main+0xa4a>
 8001386:	bf00      	nop
 8001388:	08004f54 	.word	0x08004f54
 800138c:	20000329 	.word	0x20000329
 8001390:	08004f60 	.word	0x08004f60
 8001394:	2000032c 	.word	0x2000032c
 8001398:	20000006 	.word	0x20000006
 800139c:	20000007 	.word	0x20000007
 80013a0:	08004f68 	.word	0x08004f68
 80013a4:	08004f7c 	.word	0x08004f7c
 80013a8:	08004f8c 	.word	0x08004f8c
 80013ac:	08004fa0 	.word	0x08004fa0
 80013b0:	08004fac 	.word	0x08004fac
 80013b4:	08004fc0 	.word	0x08004fc0
 80013b8:	40010c00 	.word	0x40010c00
 80013bc:	20000008 	.word	0x20000008
 80013c0:	08004fd0 	.word	0x08004fd0
 80013c4:	08004fe4 	.word	0x08004fe4
 80013c8:	08004fec 	.word	0x08004fec
 80013cc:	20000002 	.word	0x20000002
					 }
					 case 2:
					 {
						PCD8544_print_string(1, 2, "Over T:",WHITE );print_int(45, 2,T, WHITE); PCD8544_set_cursor(70,2);PCD8544_print_char('C',WHITE);
 80013d0:	2301      	movs	r3, #1
 80013d2:	4aa1      	ldr	r2, [pc, #644]	; (8001658 <main+0xc08>)
 80013d4:	2102      	movs	r1, #2
 80013d6:	2001      	movs	r0, #1
 80013d8:	f7ff f840 	bl	800045c <PCD8544_print_string>
 80013dc:	4b9f      	ldr	r3, [pc, #636]	; (800165c <main+0xc0c>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	461a      	mov	r2, r3
 80013e2:	2301      	movs	r3, #1
 80013e4:	2102      	movs	r1, #2
 80013e6:	202d      	movs	r0, #45	; 0x2d
 80013e8:	f7ff f860 	bl	80004ac <print_int>
 80013ec:	2102      	movs	r1, #2
 80013ee:	2046      	movs	r0, #70	; 0x46
 80013f0:	f7fe ff96 	bl	8000320 <PCD8544_set_cursor>
 80013f4:	2101      	movs	r1, #1
 80013f6:	2043      	movs	r0, #67	; 0x43
 80013f8:	f7fe ffae 	bl	8000358 <PCD8544_print_char>
						PCD8544_print_string(1, 3, "Over H:", BLACK);print_int(45, 3,H, WHITE); PCD8544_set_cursor(70,3);PCD8544_print_char('%',WHITE);
 80013fc:	2300      	movs	r3, #0
 80013fe:	4a98      	ldr	r2, [pc, #608]	; (8001660 <main+0xc10>)
 8001400:	2103      	movs	r1, #3
 8001402:	2001      	movs	r0, #1
 8001404:	f7ff f82a 	bl	800045c <PCD8544_print_string>
 8001408:	4b96      	ldr	r3, [pc, #600]	; (8001664 <main+0xc14>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	461a      	mov	r2, r3
 800140e:	2301      	movs	r3, #1
 8001410:	2103      	movs	r1, #3
 8001412:	202d      	movs	r0, #45	; 0x2d
 8001414:	f7ff f84a 	bl	80004ac <print_int>
 8001418:	2103      	movs	r1, #3
 800141a:	2046      	movs	r0, #70	; 0x46
 800141c:	f7fe ff80 	bl	8000320 <PCD8544_set_cursor>
 8001420:	2101      	movs	r1, #1
 8001422:	2025      	movs	r0, #37	; 0x25
 8001424:	f7fe ff98 	bl	8000358 <PCD8544_print_char>
						if(!HAL_GPIO_ReadPin(btn_phai_GPIO_Port, btn_phai_Pin))
 8001428:	2180      	movs	r1, #128	; 0x80
 800142a:	488f      	ldr	r0, [pc, #572]	; (8001668 <main+0xc18>)
 800142c:	f001 f93c 	bl	80026a8 <HAL_GPIO_ReadPin>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d114      	bne.n	8001460 <main+0xa10>
						{
						  while(!HAL_GPIO_ReadPin(btn_phai_GPIO_Port, btn_phai_Pin));
 8001436:	bf00      	nop
 8001438:	2180      	movs	r1, #128	; 0x80
 800143a:	488b      	ldr	r0, [pc, #556]	; (8001668 <main+0xc18>)
 800143c:	f001 f934 	bl	80026a8 <HAL_GPIO_ReadPin>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d0f8      	beq.n	8001438 <main+0x9e8>
						  H++;
 8001446:	4b87      	ldr	r3, [pc, #540]	; (8001664 <main+0xc14>)
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	3301      	adds	r3, #1
 800144c:	b2da      	uxtb	r2, r3
 800144e:	4b85      	ldr	r3, [pc, #532]	; (8001664 <main+0xc14>)
 8001450:	701a      	strb	r2, [r3, #0]
						  if(H>100) H=100;
 8001452:	4b84      	ldr	r3, [pc, #528]	; (8001664 <main+0xc14>)
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	2b64      	cmp	r3, #100	; 0x64
 8001458:	d902      	bls.n	8001460 <main+0xa10>
 800145a:	4b82      	ldr	r3, [pc, #520]	; (8001664 <main+0xc14>)
 800145c:	2264      	movs	r2, #100	; 0x64
 800145e:	701a      	strb	r2, [r3, #0]
						}
						if(!HAL_GPIO_ReadPin(btn_Trai_GPIO_Port, btn_Trai_Pin))
 8001460:	2140      	movs	r1, #64	; 0x40
 8001462:	4881      	ldr	r0, [pc, #516]	; (8001668 <main+0xc18>)
 8001464:	f001 f920 	bl	80026a8 <HAL_GPIO_ReadPin>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d117      	bne.n	800149e <main+0xa4e>
						{
						  while(!HAL_GPIO_ReadPin(btn_Trai_GPIO_Port, btn_Trai_Pin));
 800146e:	bf00      	nop
 8001470:	2140      	movs	r1, #64	; 0x40
 8001472:	487d      	ldr	r0, [pc, #500]	; (8001668 <main+0xc18>)
 8001474:	f001 f918 	bl	80026a8 <HAL_GPIO_ReadPin>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d0f8      	beq.n	8001470 <main+0xa20>
						  H--;
 800147e:	4b79      	ldr	r3, [pc, #484]	; (8001664 <main+0xc14>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	3b01      	subs	r3, #1
 8001484:	b2da      	uxtb	r2, r3
 8001486:	4b77      	ldr	r3, [pc, #476]	; (8001664 <main+0xc14>)
 8001488:	701a      	strb	r2, [r3, #0]
						  if(H<20) H=20;
 800148a:	4b76      	ldr	r3, [pc, #472]	; (8001664 <main+0xc14>)
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	2b13      	cmp	r3, #19
 8001490:	d805      	bhi.n	800149e <main+0xa4e>
 8001492:	4b74      	ldr	r3, [pc, #464]	; (8001664 <main+0xc14>)
 8001494:	2214      	movs	r2, #20
 8001496:	701a      	strb	r2, [r3, #0]
						}
						break;
 8001498:	e001      	b.n	800149e <main+0xa4e>
						break;
 800149a:	bf00      	nop
 800149c:	e000      	b.n	80014a0 <main+0xa50>
						break;
 800149e:	bf00      	nop
					 }
					}

					if(!HAL_GPIO_ReadPin(btn_OK_GPIO_Port, btn_OK_Pin))
 80014a0:	2110      	movs	r1, #16
 80014a2:	4871      	ldr	r0, [pc, #452]	; (8001668 <main+0xc18>)
 80014a4:	f001 f900 	bl	80026a8 <HAL_GPIO_ReadPin>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	f040 808c 	bne.w	80015c8 <main+0xb78>
					{
						while(!HAL_GPIO_ReadPin(btn_OK_GPIO_Port, btn_OK_Pin));
 80014b0:	bf00      	nop
 80014b2:	2110      	movs	r1, #16
 80014b4:	486c      	ldr	r0, [pc, #432]	; (8001668 <main+0xc18>)
 80014b6:	f001 f8f7 	bl	80026a8 <HAL_GPIO_ReadPin>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d0f8      	beq.n	80014b2 <main+0xa62>
						Mode_LCD=1;
 80014c0:	4b6a      	ldr	r3, [pc, #424]	; (800166c <main+0xc1c>)
 80014c2:	2201      	movs	r2, #1
 80014c4:	701a      	strb	r2, [r3, #0]
					}
					break;
 80014c6:	e07f      	b.n	80015c8 <main+0xb78>
				  }
		  case 4: {
					//hien thi che do RGB len LCD
					PCD8544_clear_screen(WHITE);
 80014c8:	2001      	movs	r0, #1
 80014ca:	f7fe ff9f 	bl	800040c <PCD8544_clear_screen>
					if(!HAL_GPIO_ReadPin(btn_Len_GPIO_Port, btn_Len_Pin))
 80014ce:	2108      	movs	r1, #8
 80014d0:	4865      	ldr	r0, [pc, #404]	; (8001668 <main+0xc18>)
 80014d2:	f001 f8e9 	bl	80026a8 <HAL_GPIO_ReadPin>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d10d      	bne.n	80014f8 <main+0xaa8>
					{
					  while(!HAL_GPIO_ReadPin(btn_Len_GPIO_Port, btn_Len_Pin));
 80014dc:	bf00      	nop
 80014de:	2108      	movs	r1, #8
 80014e0:	4861      	ldr	r0, [pc, #388]	; (8001668 <main+0xc18>)
 80014e2:	f001 f8e1 	bl	80026a8 <HAL_GPIO_ReadPin>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d0f8      	beq.n	80014de <main+0xa8e>
					  Mode_Color++;
 80014ec:	4b60      	ldr	r3, [pc, #384]	; (8001670 <main+0xc20>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	3301      	adds	r3, #1
 80014f2:	b2da      	uxtb	r2, r3
 80014f4:	4b5e      	ldr	r3, [pc, #376]	; (8001670 <main+0xc20>)
 80014f6:	701a      	strb	r2, [r3, #0]
					}
					if(!HAL_GPIO_ReadPin(btn_Xuong_GPIO_Port, btn_Xuong_Pin))
 80014f8:	2120      	movs	r1, #32
 80014fa:	485b      	ldr	r0, [pc, #364]	; (8001668 <main+0xc18>)
 80014fc:	f001 f8d4 	bl	80026a8 <HAL_GPIO_ReadPin>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d10d      	bne.n	8001522 <main+0xad2>
					{
					  while(!HAL_GPIO_ReadPin(btn_Xuong_GPIO_Port, btn_Xuong_Pin));
 8001506:	bf00      	nop
 8001508:	2120      	movs	r1, #32
 800150a:	4857      	ldr	r0, [pc, #348]	; (8001668 <main+0xc18>)
 800150c:	f001 f8cc 	bl	80026a8 <HAL_GPIO_ReadPin>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d0f8      	beq.n	8001508 <main+0xab8>
					  Mode_Color--;
 8001516:	4b56      	ldr	r3, [pc, #344]	; (8001670 <main+0xc20>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	3b01      	subs	r3, #1
 800151c:	b2da      	uxtb	r2, r3
 800151e:	4b54      	ldr	r3, [pc, #336]	; (8001670 <main+0xc20>)
 8001520:	701a      	strb	r2, [r3, #0]
					}
					PCD8544_print_string(1, 0, "      R G B     ", BLACK);
 8001522:	2300      	movs	r3, #0
 8001524:	4a53      	ldr	r2, [pc, #332]	; (8001674 <main+0xc24>)
 8001526:	2100      	movs	r1, #0
 8001528:	2001      	movs	r0, #1
 800152a:	f7fe ff97 	bl	800045c <PCD8544_print_string>
					PCD8544_print_string(1, 1, "Color:", WHITE);print_int(45, 1,Mode_Color, WHITE);
 800152e:	2301      	movs	r3, #1
 8001530:	4a51      	ldr	r2, [pc, #324]	; (8001678 <main+0xc28>)
 8001532:	2101      	movs	r1, #1
 8001534:	2001      	movs	r0, #1
 8001536:	f7fe ff91 	bl	800045c <PCD8544_print_string>
 800153a:	4b4d      	ldr	r3, [pc, #308]	; (8001670 <main+0xc20>)
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	461a      	mov	r2, r3
 8001540:	2301      	movs	r3, #1
 8001542:	2101      	movs	r1, #1
 8001544:	202d      	movs	r0, #45	; 0x2d
 8001546:	f7fe ffb1 	bl	80004ac <print_int>
					PCD8544_print_string(1, 2, "% R:", WHITE);print_int(45, 2,d1, WHITE);
 800154a:	2301      	movs	r3, #1
 800154c:	4a4b      	ldr	r2, [pc, #300]	; (800167c <main+0xc2c>)
 800154e:	2102      	movs	r1, #2
 8001550:	2001      	movs	r0, #1
 8001552:	f7fe ff83 	bl	800045c <PCD8544_print_string>
 8001556:	4b4a      	ldr	r3, [pc, #296]	; (8001680 <main+0xc30>)
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	461a      	mov	r2, r3
 800155c:	2301      	movs	r3, #1
 800155e:	2102      	movs	r1, #2
 8001560:	202d      	movs	r0, #45	; 0x2d
 8001562:	f7fe ffa3 	bl	80004ac <print_int>
					PCD8544_print_string(1, 3, "% G:", WHITE);print_int(45, 3,d2, WHITE);
 8001566:	2301      	movs	r3, #1
 8001568:	4a46      	ldr	r2, [pc, #280]	; (8001684 <main+0xc34>)
 800156a:	2103      	movs	r1, #3
 800156c:	2001      	movs	r0, #1
 800156e:	f7fe ff75 	bl	800045c <PCD8544_print_string>
 8001572:	4b45      	ldr	r3, [pc, #276]	; (8001688 <main+0xc38>)
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	461a      	mov	r2, r3
 8001578:	2301      	movs	r3, #1
 800157a:	2103      	movs	r1, #3
 800157c:	202d      	movs	r0, #45	; 0x2d
 800157e:	f7fe ff95 	bl	80004ac <print_int>
					PCD8544_print_string(1, 4, "% B:", WHITE);print_int(45, 4,d3, WHITE);
 8001582:	2301      	movs	r3, #1
 8001584:	4a41      	ldr	r2, [pc, #260]	; (800168c <main+0xc3c>)
 8001586:	2104      	movs	r1, #4
 8001588:	2001      	movs	r0, #1
 800158a:	f7fe ff67 	bl	800045c <PCD8544_print_string>
 800158e:	4b40      	ldr	r3, [pc, #256]	; (8001690 <main+0xc40>)
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	461a      	mov	r2, r3
 8001594:	2301      	movs	r3, #1
 8001596:	2104      	movs	r1, #4
 8001598:	202d      	movs	r0, #45	; 0x2d
 800159a:	f7fe ff87 	bl	80004ac <print_int>
					if(!HAL_GPIO_ReadPin(btn_OK_GPIO_Port, btn_OK_Pin))
 800159e:	2110      	movs	r1, #16
 80015a0:	4831      	ldr	r0, [pc, #196]	; (8001668 <main+0xc18>)
 80015a2:	f001 f881 	bl	80026a8 <HAL_GPIO_ReadPin>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d10f      	bne.n	80015cc <main+0xb7c>
					{
						while(!HAL_GPIO_ReadPin(btn_OK_GPIO_Port, btn_OK_Pin));
 80015ac:	bf00      	nop
 80015ae:	2110      	movs	r1, #16
 80015b0:	482d      	ldr	r0, [pc, #180]	; (8001668 <main+0xc18>)
 80015b2:	f001 f879 	bl	80026a8 <HAL_GPIO_ReadPin>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d0f8      	beq.n	80015ae <main+0xb5e>
						Mode_LCD=1;
 80015bc:	4b2b      	ldr	r3, [pc, #172]	; (800166c <main+0xc1c>)
 80015be:	2201      	movs	r2, #1
 80015c0:	701a      	strb	r2, [r3, #0]
					}
					break;
 80015c2:	e003      	b.n	80015cc <main+0xb7c>
					break;
 80015c4:	bf00      	nop
 80015c6:	e002      	b.n	80015ce <main+0xb7e>
					break;
 80015c8:	bf00      	nop
 80015ca:	e000      	b.n	80015ce <main+0xb7e>
					break;
 80015cc:	bf00      	nop
				  }
		 }
		if(delaymain>20)
 80015ce:	4b31      	ldr	r3, [pc, #196]	; (8001694 <main+0xc44>)
 80015d0:	881b      	ldrh	r3, [r3, #0]
 80015d2:	2b14      	cmp	r3, #20
 80015d4:	d934      	bls.n	8001640 <main+0xbf0>
		{
			DHT_Start();
 80015d6:	f000 fb11 	bl	8001bfc <DHT_Start>
			Respones_State = DHT_Check_Response();
 80015da:	f000 fb27 	bl	8001c2c <DHT_Check_Response>
 80015de:	4603      	mov	r3, r0
 80015e0:	461a      	mov	r2, r3
 80015e2:	4b2d      	ldr	r3, [pc, #180]	; (8001698 <main+0xc48>)
 80015e4:	701a      	strb	r2, [r3, #0]
			int_RH = DHT_Read_Data();
 80015e6:	f000 fb4b 	bl	8001c80 <DHT_Read_Data>
 80015ea:	4603      	mov	r3, r0
 80015ec:	461a      	mov	r2, r3
 80015ee:	4b2b      	ldr	r3, [pc, #172]	; (800169c <main+0xc4c>)
 80015f0:	701a      	strb	r2, [r3, #0]
			dec_RH = DHT_Read_Data();
 80015f2:	f000 fb45 	bl	8001c80 <DHT_Read_Data>
 80015f6:	4603      	mov	r3, r0
 80015f8:	461a      	mov	r2, r3
 80015fa:	4b29      	ldr	r3, [pc, #164]	; (80016a0 <main+0xc50>)
 80015fc:	701a      	strb	r2, [r3, #0]
			int_T  = DHT_Read_Data();
 80015fe:	f000 fb3f 	bl	8001c80 <DHT_Read_Data>
 8001602:	4603      	mov	r3, r0
 8001604:	461a      	mov	r2, r3
 8001606:	4b27      	ldr	r3, [pc, #156]	; (80016a4 <main+0xc54>)
 8001608:	701a      	strb	r2, [r3, #0]
			dec_T  = DHT_Read_Data();
 800160a:	f000 fb39 	bl	8001c80 <DHT_Read_Data>
 800160e:	4603      	mov	r3, r0
 8001610:	461a      	mov	r2, r3
 8001612:	4b25      	ldr	r3, [pc, #148]	; (80016a8 <main+0xc58>)
 8001614:	701a      	strb	r2, [r3, #0]
			Check_Sum = DHT_Read_Data();
 8001616:	f000 fb33 	bl	8001c80 <DHT_Read_Data>
 800161a:	4603      	mov	r3, r0
 800161c:	461a      	mov	r2, r3
 800161e:	4b23      	ldr	r3, [pc, #140]	; (80016ac <main+0xc5c>)
 8001620:	701a      	strb	r2, [r3, #0]
			printf("nhiet do: %d\r\n", int_T);
 8001622:	4b20      	ldr	r3, [pc, #128]	; (80016a4 <main+0xc54>)
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	4619      	mov	r1, r3
 8001628:	4821      	ldr	r0, [pc, #132]	; (80016b0 <main+0xc60>)
 800162a:	f002 fcd7 	bl	8003fdc <iprintf>
			printf("Do am: %d\r\n", int_RH);
 800162e:	4b1b      	ldr	r3, [pc, #108]	; (800169c <main+0xc4c>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	4619      	mov	r1, r3
 8001634:	481f      	ldr	r0, [pc, #124]	; (80016b4 <main+0xc64>)
 8001636:	f002 fcd1 	bl	8003fdc <iprintf>
			//HAL_Delay(2000);

		 delaymain=0;
 800163a:	4b16      	ldr	r3, [pc, #88]	; (8001694 <main+0xc44>)
 800163c:	2200      	movs	r2, #0
 800163e:	801a      	strh	r2, [r3, #0]
		}
		HAL_Delay(50);
 8001640:	2032      	movs	r0, #50	; 0x32
 8001642:	f000 fdd1 	bl	80021e8 <HAL_Delay>
		delaymain++;
 8001646:	4b13      	ldr	r3, [pc, #76]	; (8001694 <main+0xc44>)
 8001648:	881b      	ldrh	r3, [r3, #0]
 800164a:	3301      	adds	r3, #1
 800164c:	b29a      	uxth	r2, r3
 800164e:	4b11      	ldr	r3, [pc, #68]	; (8001694 <main+0xc44>)
 8001650:	801a      	strh	r2, [r3, #0]
		if( HAL_UART_Receive(&huart3, &c,1, 0)==HAL_OK)
 8001652:	f7ff ba5e 	b.w	8000b12 <main+0xc2>
 8001656:	bf00      	nop
 8001658:	08004fe4 	.word	0x08004fe4
 800165c:	20000006 	.word	0x20000006
 8001660:	08004fec 	.word	0x08004fec
 8001664:	20000007 	.word	0x20000007
 8001668:	40010c00 	.word	0x40010c00
 800166c:	20000008 	.word	0x20000008
 8001670:	20000328 	.word	0x20000328
 8001674:	08004ff4 	.word	0x08004ff4
 8001678:	08005008 	.word	0x08005008
 800167c:	08005010 	.word	0x08005010
 8001680:	20000325 	.word	0x20000325
 8001684:	08005018 	.word	0x08005018
 8001688:	2000032b 	.word	0x2000032b
 800168c:	08005020 	.word	0x08005020
 8001690:	20000370 	.word	0x20000370
 8001694:	20000098 	.word	0x20000098
 8001698:	200002a0 	.word	0x200002a0
 800169c:	2000032c 	.word	0x2000032c
 80016a0:	20000324 	.word	0x20000324
 80016a4:	20000329 	.word	0x20000329
 80016a8:	20000327 	.word	0x20000327
 80016ac:	200002a1 	.word	0x200002a1
 80016b0:	08005028 	.word	0x08005028
 80016b4:	08005038 	.word	0x08005038

080016b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b090      	sub	sp, #64	; 0x40
 80016bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016be:	f107 0318 	add.w	r3, r7, #24
 80016c2:	2228      	movs	r2, #40	; 0x28
 80016c4:	2100      	movs	r1, #0
 80016c6:	4618      	mov	r0, r3
 80016c8:	f002 fc80 	bl	8003fcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016cc:	1d3b      	adds	r3, r7, #4
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]
 80016d2:	605a      	str	r2, [r3, #4]
 80016d4:	609a      	str	r2, [r3, #8]
 80016d6:	60da      	str	r2, [r3, #12]
 80016d8:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016da:	2301      	movs	r3, #1
 80016dc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016e2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80016e4:	2300      	movs	r3, #0
 80016e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016e8:	2301      	movs	r3, #1
 80016ea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016ec:	2302      	movs	r3, #2
 80016ee:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80016f6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80016fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016fc:	f107 0318 	add.w	r3, r7, #24
 8001700:	4618      	mov	r0, r3
 8001702:	f001 f801 	bl	8002708 <HAL_RCC_OscConfig>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800170c:	f000 fb06 	bl	8001d1c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001710:	230f      	movs	r3, #15
 8001712:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001714:	2302      	movs	r3, #2
 8001716:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001718:	2300      	movs	r3, #0
 800171a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800171c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001720:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001722:	2300      	movs	r3, #0
 8001724:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001726:	1d3b      	adds	r3, r7, #4
 8001728:	2102      	movs	r1, #2
 800172a:	4618      	mov	r0, r3
 800172c:	f001 fa6c 	bl	8002c08 <HAL_RCC_ClockConfig>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001736:	f000 faf1 	bl	8001d1c <Error_Handler>
  }
}
 800173a:	bf00      	nop
 800173c:	3740      	adds	r7, #64	; 0x40
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
	...

08001744 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b096      	sub	sp, #88	; 0x58
 8001748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800174a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800174e:	2200      	movs	r2, #0
 8001750:	601a      	str	r2, [r3, #0]
 8001752:	605a      	str	r2, [r3, #4]
 8001754:	609a      	str	r2, [r3, #8]
 8001756:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001758:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001762:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001766:	2200      	movs	r2, #0
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	605a      	str	r2, [r3, #4]
 800176c:	609a      	str	r2, [r3, #8]
 800176e:	60da      	str	r2, [r3, #12]
 8001770:	611a      	str	r2, [r3, #16]
 8001772:	615a      	str	r2, [r3, #20]
 8001774:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001776:	1d3b      	adds	r3, r7, #4
 8001778:	2220      	movs	r2, #32
 800177a:	2100      	movs	r1, #0
 800177c:	4618      	mov	r0, r3
 800177e:	f002 fc25 	bl	8003fcc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001782:	4b52      	ldr	r3, [pc, #328]	; (80018cc <MX_TIM1_Init+0x188>)
 8001784:	4a52      	ldr	r2, [pc, #328]	; (80018d0 <MX_TIM1_Init+0x18c>)
 8001786:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8001788:	4b50      	ldr	r3, [pc, #320]	; (80018cc <MX_TIM1_Init+0x188>)
 800178a:	2247      	movs	r2, #71	; 0x47
 800178c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800178e:	4b4f      	ldr	r3, [pc, #316]	; (80018cc <MX_TIM1_Init+0x188>)
 8001790:	2200      	movs	r2, #0
 8001792:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001794:	4b4d      	ldr	r3, [pc, #308]	; (80018cc <MX_TIM1_Init+0x188>)
 8001796:	f240 32e7 	movw	r2, #999	; 0x3e7
 800179a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800179c:	4b4b      	ldr	r3, [pc, #300]	; (80018cc <MX_TIM1_Init+0x188>)
 800179e:	2200      	movs	r2, #0
 80017a0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80017a2:	4b4a      	ldr	r3, [pc, #296]	; (80018cc <MX_TIM1_Init+0x188>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017a8:	4b48      	ldr	r3, [pc, #288]	; (80018cc <MX_TIM1_Init+0x188>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80017ae:	4847      	ldr	r0, [pc, #284]	; (80018cc <MX_TIM1_Init+0x188>)
 80017b0:	f001 fbc6 	bl	8002f40 <HAL_TIM_Base_Init>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80017ba:	f000 faaf 	bl	8001d1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017c2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80017c4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80017c8:	4619      	mov	r1, r3
 80017ca:	4840      	ldr	r0, [pc, #256]	; (80018cc <MX_TIM1_Init+0x188>)
 80017cc:	f001 fd32 	bl	8003234 <HAL_TIM_ConfigClockSource>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80017d6:	f000 faa1 	bl	8001d1c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80017da:	483c      	ldr	r0, [pc, #240]	; (80018cc <MX_TIM1_Init+0x188>)
 80017dc:	f001 fbfe 	bl	8002fdc <HAL_TIM_PWM_Init>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80017e6:	f000 fa99 	bl	8001d1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017ea:	2300      	movs	r3, #0
 80017ec:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017ee:	2300      	movs	r3, #0
 80017f0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80017f2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80017f6:	4619      	mov	r1, r3
 80017f8:	4834      	ldr	r0, [pc, #208]	; (80018cc <MX_TIM1_Init+0x188>)
 80017fa:	f002 f877 	bl	80038ec <HAL_TIMEx_MasterConfigSynchronization>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001804:	f000 fa8a 	bl	8001d1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001808:	2360      	movs	r3, #96	; 0x60
 800180a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800180c:	2300      	movs	r3, #0
 800180e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001810:	2300      	movs	r3, #0
 8001812:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001814:	2300      	movs	r3, #0
 8001816:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001818:	2300      	movs	r3, #0
 800181a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800181c:	2300      	movs	r3, #0
 800181e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001820:	2300      	movs	r3, #0
 8001822:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001824:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001828:	2200      	movs	r2, #0
 800182a:	4619      	mov	r1, r3
 800182c:	4827      	ldr	r0, [pc, #156]	; (80018cc <MX_TIM1_Init+0x188>)
 800182e:	f001 fc3b 	bl	80030a8 <HAL_TIM_PWM_ConfigChannel>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001838:	f000 fa70 	bl	8001d1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800183c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001840:	2204      	movs	r2, #4
 8001842:	4619      	mov	r1, r3
 8001844:	4821      	ldr	r0, [pc, #132]	; (80018cc <MX_TIM1_Init+0x188>)
 8001846:	f001 fc2f 	bl	80030a8 <HAL_TIM_PWM_ConfigChannel>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001850:	f000 fa64 	bl	8001d1c <Error_Handler>
  }
  sConfigOC.Pulse = 499;
 8001854:	f240 13f3 	movw	r3, #499	; 0x1f3
 8001858:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800185a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800185e:	2208      	movs	r2, #8
 8001860:	4619      	mov	r1, r3
 8001862:	481a      	ldr	r0, [pc, #104]	; (80018cc <MX_TIM1_Init+0x188>)
 8001864:	f001 fc20 	bl	80030a8 <HAL_TIM_PWM_ConfigChannel>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 800186e:	f000 fa55 	bl	8001d1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001872:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001876:	220c      	movs	r2, #12
 8001878:	4619      	mov	r1, r3
 800187a:	4814      	ldr	r0, [pc, #80]	; (80018cc <MX_TIM1_Init+0x188>)
 800187c:	f001 fc14 	bl	80030a8 <HAL_TIM_PWM_ConfigChannel>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8001886:	f000 fa49 	bl	8001d1c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800188a:	2300      	movs	r3, #0
 800188c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800188e:	2300      	movs	r3, #0
 8001890:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001892:	2300      	movs	r3, #0
 8001894:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001896:	2300      	movs	r3, #0
 8001898:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800189a:	2300      	movs	r3, #0
 800189c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800189e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018a2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018a4:	2300      	movs	r3, #0
 80018a6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80018a8:	1d3b      	adds	r3, r7, #4
 80018aa:	4619      	mov	r1, r3
 80018ac:	4807      	ldr	r0, [pc, #28]	; (80018cc <MX_TIM1_Init+0x188>)
 80018ae:	f002 f861 	bl	8003974 <HAL_TIMEx_ConfigBreakDeadTime>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <MX_TIM1_Init+0x178>
  {
    Error_Handler();
 80018b8:	f000 fa30 	bl	8001d1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80018bc:	4803      	ldr	r0, [pc, #12]	; (80018cc <MX_TIM1_Init+0x188>)
 80018be:	f000 fa97 	bl	8001df0 <HAL_TIM_MspPostInit>

}
 80018c2:	bf00      	nop
 80018c4:	3758      	adds	r7, #88	; 0x58
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	20000330 	.word	0x20000330
 80018d0:	40012c00 	.word	0x40012c00

080018d4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b086      	sub	sp, #24
 80018d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018da:	f107 0308 	add.w	r3, r7, #8
 80018de:	2200      	movs	r2, #0
 80018e0:	601a      	str	r2, [r3, #0]
 80018e2:	605a      	str	r2, [r3, #4]
 80018e4:	609a      	str	r2, [r3, #8]
 80018e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018e8:	463b      	mov	r3, r7
 80018ea:	2200      	movs	r2, #0
 80018ec:	601a      	str	r2, [r3, #0]
 80018ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80018f0:	4b1d      	ldr	r3, [pc, #116]	; (8001968 <MX_TIM4_Init+0x94>)
 80018f2:	4a1e      	ldr	r2, [pc, #120]	; (800196c <MX_TIM4_Init+0x98>)
 80018f4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 80018f6:	4b1c      	ldr	r3, [pc, #112]	; (8001968 <MX_TIM4_Init+0x94>)
 80018f8:	2247      	movs	r2, #71	; 0x47
 80018fa:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018fc:	4b1a      	ldr	r3, [pc, #104]	; (8001968 <MX_TIM4_Init+0x94>)
 80018fe:	2200      	movs	r2, #0
 8001900:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xffff-1;
 8001902:	4b19      	ldr	r3, [pc, #100]	; (8001968 <MX_TIM4_Init+0x94>)
 8001904:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001908:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800190a:	4b17      	ldr	r3, [pc, #92]	; (8001968 <MX_TIM4_Init+0x94>)
 800190c:	2200      	movs	r2, #0
 800190e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001910:	4b15      	ldr	r3, [pc, #84]	; (8001968 <MX_TIM4_Init+0x94>)
 8001912:	2200      	movs	r2, #0
 8001914:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001916:	4814      	ldr	r0, [pc, #80]	; (8001968 <MX_TIM4_Init+0x94>)
 8001918:	f001 fb12 	bl	8002f40 <HAL_TIM_Base_Init>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001922:	f000 f9fb 	bl	8001d1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001926:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800192a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800192c:	f107 0308 	add.w	r3, r7, #8
 8001930:	4619      	mov	r1, r3
 8001932:	480d      	ldr	r0, [pc, #52]	; (8001968 <MX_TIM4_Init+0x94>)
 8001934:	f001 fc7e 	bl	8003234 <HAL_TIM_ConfigClockSource>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800193e:	f000 f9ed 	bl	8001d1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001942:	2300      	movs	r3, #0
 8001944:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001946:	2300      	movs	r3, #0
 8001948:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800194a:	463b      	mov	r3, r7
 800194c:	4619      	mov	r1, r3
 800194e:	4806      	ldr	r0, [pc, #24]	; (8001968 <MX_TIM4_Init+0x94>)
 8001950:	f001 ffcc 	bl	80038ec <HAL_TIMEx_MasterConfigSynchronization>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800195a:	f000 f9df 	bl	8001d1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800195e:	bf00      	nop
 8001960:	3718      	adds	r7, #24
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	200002a4 	.word	0x200002a4
 800196c:	40000800 	.word	0x40000800

08001970 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001974:	4b11      	ldr	r3, [pc, #68]	; (80019bc <MX_USART3_UART_Init+0x4c>)
 8001976:	4a12      	ldr	r2, [pc, #72]	; (80019c0 <MX_USART3_UART_Init+0x50>)
 8001978:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800197a:	4b10      	ldr	r3, [pc, #64]	; (80019bc <MX_USART3_UART_Init+0x4c>)
 800197c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001980:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001982:	4b0e      	ldr	r3, [pc, #56]	; (80019bc <MX_USART3_UART_Init+0x4c>)
 8001984:	2200      	movs	r2, #0
 8001986:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001988:	4b0c      	ldr	r3, [pc, #48]	; (80019bc <MX_USART3_UART_Init+0x4c>)
 800198a:	2200      	movs	r2, #0
 800198c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800198e:	4b0b      	ldr	r3, [pc, #44]	; (80019bc <MX_USART3_UART_Init+0x4c>)
 8001990:	2200      	movs	r2, #0
 8001992:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001994:	4b09      	ldr	r3, [pc, #36]	; (80019bc <MX_USART3_UART_Init+0x4c>)
 8001996:	220c      	movs	r2, #12
 8001998:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800199a:	4b08      	ldr	r3, [pc, #32]	; (80019bc <MX_USART3_UART_Init+0x4c>)
 800199c:	2200      	movs	r2, #0
 800199e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80019a0:	4b06      	ldr	r3, [pc, #24]	; (80019bc <MX_USART3_UART_Init+0x4c>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80019a6:	4805      	ldr	r0, [pc, #20]	; (80019bc <MX_USART3_UART_Init+0x4c>)
 80019a8:	f002 f835 	bl	8003a16 <HAL_UART_Init>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80019b2:	f000 f9b3 	bl	8001d1c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80019b6:	bf00      	nop
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	200002e4 	.word	0x200002e4
 80019c0:	40004800 	.word	0x40004800

080019c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b088      	sub	sp, #32
 80019c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ca:	f107 0310 	add.w	r3, r7, #16
 80019ce:	2200      	movs	r2, #0
 80019d0:	601a      	str	r2, [r3, #0]
 80019d2:	605a      	str	r2, [r3, #4]
 80019d4:	609a      	str	r2, [r3, #8]
 80019d6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019d8:	4b3d      	ldr	r3, [pc, #244]	; (8001ad0 <MX_GPIO_Init+0x10c>)
 80019da:	699b      	ldr	r3, [r3, #24]
 80019dc:	4a3c      	ldr	r2, [pc, #240]	; (8001ad0 <MX_GPIO_Init+0x10c>)
 80019de:	f043 0310 	orr.w	r3, r3, #16
 80019e2:	6193      	str	r3, [r2, #24]
 80019e4:	4b3a      	ldr	r3, [pc, #232]	; (8001ad0 <MX_GPIO_Init+0x10c>)
 80019e6:	699b      	ldr	r3, [r3, #24]
 80019e8:	f003 0310 	and.w	r3, r3, #16
 80019ec:	60fb      	str	r3, [r7, #12]
 80019ee:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019f0:	4b37      	ldr	r3, [pc, #220]	; (8001ad0 <MX_GPIO_Init+0x10c>)
 80019f2:	699b      	ldr	r3, [r3, #24]
 80019f4:	4a36      	ldr	r2, [pc, #216]	; (8001ad0 <MX_GPIO_Init+0x10c>)
 80019f6:	f043 0320 	orr.w	r3, r3, #32
 80019fa:	6193      	str	r3, [r2, #24]
 80019fc:	4b34      	ldr	r3, [pc, #208]	; (8001ad0 <MX_GPIO_Init+0x10c>)
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	f003 0320 	and.w	r3, r3, #32
 8001a04:	60bb      	str	r3, [r7, #8]
 8001a06:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a08:	4b31      	ldr	r3, [pc, #196]	; (8001ad0 <MX_GPIO_Init+0x10c>)
 8001a0a:	699b      	ldr	r3, [r3, #24]
 8001a0c:	4a30      	ldr	r2, [pc, #192]	; (8001ad0 <MX_GPIO_Init+0x10c>)
 8001a0e:	f043 0304 	orr.w	r3, r3, #4
 8001a12:	6193      	str	r3, [r2, #24]
 8001a14:	4b2e      	ldr	r3, [pc, #184]	; (8001ad0 <MX_GPIO_Init+0x10c>)
 8001a16:	699b      	ldr	r3, [r3, #24]
 8001a18:	f003 0304 	and.w	r3, r3, #4
 8001a1c:	607b      	str	r3, [r7, #4]
 8001a1e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a20:	4b2b      	ldr	r3, [pc, #172]	; (8001ad0 <MX_GPIO_Init+0x10c>)
 8001a22:	699b      	ldr	r3, [r3, #24]
 8001a24:	4a2a      	ldr	r2, [pc, #168]	; (8001ad0 <MX_GPIO_Init+0x10c>)
 8001a26:	f043 0308 	orr.w	r3, r3, #8
 8001a2a:	6193      	str	r3, [r2, #24]
 8001a2c:	4b28      	ldr	r3, [pc, #160]	; (8001ad0 <MX_GPIO_Init+0x10c>)
 8001a2e:	699b      	ldr	r3, [r3, #24]
 8001a30:	f003 0308 	and.w	r3, r3, #8
 8001a34:	603b      	str	r3, [r7, #0]
 8001a36:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001a38:	2200      	movs	r2, #0
 8001a3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a3e:	4825      	ldr	r0, [pc, #148]	; (8001ad4 <MX_GPIO_Init+0x110>)
 8001a40:	f000 fe49 	bl	80026d6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RST_Pin|DC_Pin|LIGHT_Pin|CS_Pin
 8001a44:	2200      	movs	r2, #0
 8001a46:	21b7      	movs	r1, #183	; 0xb7
 8001a48:	4823      	ldr	r0, [pc, #140]	; (8001ad8 <MX_GPIO_Init+0x114>)
 8001a4a:	f000 fe44 	bl	80026d6 <HAL_GPIO_WritePin>
                          |SCLK_Pin|MOSI_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_RESET);
 8001a4e:	2200      	movs	r2, #0
 8001a50:	2102      	movs	r1, #2
 8001a52:	4822      	ldr	r0, [pc, #136]	; (8001adc <MX_GPIO_Init+0x118>)
 8001a54:	f000 fe3f 	bl	80026d6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001a58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a62:	2300      	movs	r3, #0
 8001a64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a66:	2302      	movs	r3, #2
 8001a68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001a6a:	f107 0310 	add.w	r3, r7, #16
 8001a6e:	4619      	mov	r1, r3
 8001a70:	4818      	ldr	r0, [pc, #96]	; (8001ad4 <MX_GPIO_Init+0x110>)
 8001a72:	f000 fcbf 	bl	80023f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RST_Pin DC_Pin LIGHT_Pin CS_Pin
                           SCLK_Pin MOSI_Pin */
  GPIO_InitStruct.Pin = RST_Pin|DC_Pin|LIGHT_Pin|CS_Pin
 8001a76:	23b7      	movs	r3, #183	; 0xb7
 8001a78:	613b      	str	r3, [r7, #16]
                          |SCLK_Pin|MOSI_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a82:	2302      	movs	r3, #2
 8001a84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a86:	f107 0310 	add.w	r3, r7, #16
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	4812      	ldr	r0, [pc, #72]	; (8001ad8 <MX_GPIO_Init+0x114>)
 8001a8e:	f000 fcb1 	bl	80023f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 8001a92:	2302      	movs	r3, #2
 8001a94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a96:	2301      	movs	r3, #1
 8001a98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a9e:	2302      	movs	r3, #2
 8001aa0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 8001aa2:	f107 0310 	add.w	r3, r7, #16
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	480c      	ldr	r0, [pc, #48]	; (8001adc <MX_GPIO_Init+0x118>)
 8001aaa:	f000 fca3 	bl	80023f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : btn_Len_Pin btn_OK_Pin btn_Xuong_Pin btn_Trai_Pin
                           btn_phai_Pin */
  GPIO_InitStruct.Pin = btn_Len_Pin|btn_OK_Pin|btn_Xuong_Pin|btn_Trai_Pin
 8001aae:	23f8      	movs	r3, #248	; 0xf8
 8001ab0:	613b      	str	r3, [r7, #16]
                          |btn_phai_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aba:	f107 0310 	add.w	r3, r7, #16
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4806      	ldr	r0, [pc, #24]	; (8001adc <MX_GPIO_Init+0x118>)
 8001ac2:	f000 fc97 	bl	80023f4 <HAL_GPIO_Init>

}
 8001ac6:	bf00      	nop
 8001ac8:	3720      	adds	r7, #32
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	40021000 	.word	0x40021000
 8001ad4:	40011000 	.word	0x40011000
 8001ad8:	40010800 	.word	0x40010800
 8001adc:	40010c00 	.word	0x40010c00

08001ae0 <bam_xung>:

/* USER CODE BEGIN 4 */
void bam_xung (int duty1,int duty2, int duty3 )
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b085      	sub	sp, #20
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	60b9      	str	r1, [r7, #8]
 8001aea:	607a      	str	r2, [r7, #4]
	d1=duty1;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	b2da      	uxtb	r2, r3
 8001af0:	4b14      	ldr	r3, [pc, #80]	; (8001b44 <bam_xung+0x64>)
 8001af2:	701a      	strb	r2, [r3, #0]
	d2=duty2;
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	b2da      	uxtb	r2, r3
 8001af8:	4b13      	ldr	r3, [pc, #76]	; (8001b48 <bam_xung+0x68>)
 8001afa:	701a      	strb	r2, [r3, #0]
	d3=duty3;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	b2da      	uxtb	r2, r3
 8001b00:	4b12      	ldr	r3, [pc, #72]	; (8001b4c <bam_xung+0x6c>)
 8001b02:	701a      	strb	r2, [r3, #0]
	//duty1 =pwm1;duty2=pwm2;duty3=pwm3;
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,10*duty1);
 8001b04:	68fa      	ldr	r2, [r7, #12]
 8001b06:	4613      	mov	r3, r2
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	4413      	add	r3, r2
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	461a      	mov	r2, r3
 8001b10:	4b0f      	ldr	r3, [pc, #60]	; (8001b50 <bam_xung+0x70>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,10*duty2);
 8001b16:	68ba      	ldr	r2, [r7, #8]
 8001b18:	4613      	mov	r3, r2
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	4413      	add	r3, r2
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	461a      	mov	r2, r3
 8001b22:	4b0b      	ldr	r3, [pc, #44]	; (8001b50 <bam_xung+0x70>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,10*duty3);
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	4413      	add	r3, r2
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	461a      	mov	r2, r3
 8001b34:	4b06      	ldr	r3, [pc, #24]	; (8001b50 <bam_xung+0x70>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001b3a:	bf00      	nop
 8001b3c:	3714      	adds	r7, #20
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bc80      	pop	{r7}
 8001b42:	4770      	bx	lr
 8001b44:	20000325 	.word	0x20000325
 8001b48:	2000032b 	.word	0x2000032b
 8001b4c:	20000370 	.word	0x20000370
 8001b50:	20000330 	.word	0x20000330

08001b54 <Delay_us>:

void Delay_us(uint16_t time_us)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 8001b5e:	4b08      	ldr	r3, [pc, #32]	; (8001b80 <Delay_us+0x2c>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	2200      	movs	r2, #0
 8001b64:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim4) <= time_us)
 8001b66:	bf00      	nop
 8001b68:	4b05      	ldr	r3, [pc, #20]	; (8001b80 <Delay_us+0x2c>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b6e:	88fb      	ldrh	r3, [r7, #6]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d9f9      	bls.n	8001b68 <Delay_us+0x14>
	{

	}
}
 8001b74:	bf00      	nop
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bc80      	pop	{r7}
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	200002a4 	.word	0x200002a4

08001b84 <Set_Pin_Output>:

void Set_Pin_Output(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b086      	sub	sp, #24
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b90:	f107 0308 	add.w	r3, r7, #8
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	605a      	str	r2, [r3, #4]
 8001b9a:	609a      	str	r2, [r3, #8]
 8001b9c:	60da      	str	r2, [r3, #12]

	GPIO_InitStruct.Pin = GPIO_Pin;
 8001b9e:	887b      	ldrh	r3, [r7, #2]
 8001ba0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001baa:	2302      	movs	r3, #2
 8001bac:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001bae:	f107 0308 	add.w	r3, r7, #8
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f000 fc1d 	bl	80023f4 <HAL_GPIO_Init>
}
 8001bba:	bf00      	nop
 8001bbc:	3718      	adds	r7, #24
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <Set_Pin_Input>:

void Set_Pin_Input(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	b086      	sub	sp, #24
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
 8001bca:	460b      	mov	r3, r1
 8001bcc:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bce:	f107 0308 	add.w	r3, r7, #8
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	601a      	str	r2, [r3, #0]
 8001bd6:	605a      	str	r2, [r3, #4]
 8001bd8:	609a      	str	r2, [r3, #8]
 8001bda:	60da      	str	r2, [r3, #12]

	GPIO_InitStruct.Pin = GPIO_Pin;
 8001bdc:	887b      	ldrh	r3, [r7, #2]
 8001bde:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001be0:	2300      	movs	r3, #0
 8001be2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be4:	2300      	movs	r3, #0
 8001be6:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001be8:	f107 0308 	add.w	r3, r7, #8
 8001bec:	4619      	mov	r1, r3
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f000 fc00 	bl	80023f4 <HAL_GPIO_Init>
}
 8001bf4:	bf00      	nop
 8001bf6:	3718      	adds	r7, #24
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <DHT_Start>:

void DHT_Start()
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
	Set_Pin_Output(DHT11_GPIO_Port, DHT11_Pin);
 8001c00:	2102      	movs	r1, #2
 8001c02:	4809      	ldr	r0, [pc, #36]	; (8001c28 <DHT_Start+0x2c>)
 8001c04:	f7ff ffbe 	bl	8001b84 <Set_Pin_Output>

	HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_RESET);
 8001c08:	2200      	movs	r2, #0
 8001c0a:	2102      	movs	r1, #2
 8001c0c:	4806      	ldr	r0, [pc, #24]	; (8001c28 <DHT_Start+0x2c>)
 8001c0e:	f000 fd62 	bl	80026d6 <HAL_GPIO_WritePin>
	Delay_us(18000);	// delay 18ms
 8001c12:	f244 6050 	movw	r0, #18000	; 0x4650
 8001c16:	f7ff ff9d 	bl	8001b54 <Delay_us>

	Set_Pin_Input(DHT11_GPIO_Port, DHT11_Pin);
 8001c1a:	2102      	movs	r1, #2
 8001c1c:	4802      	ldr	r0, [pc, #8]	; (8001c28 <DHT_Start+0x2c>)
 8001c1e:	f7ff ffd0 	bl	8001bc2 <Set_Pin_Input>

}
 8001c22:	bf00      	nop
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	40010c00 	.word	0x40010c00

08001c2c <DHT_Check_Response>:

uint8_t DHT_Check_Response()
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
	uint8_t response=0;
 8001c32:	2300      	movs	r3, #0
 8001c34:	71fb      	strb	r3, [r7, #7]
	// wait for 40 us because length's signal is LOW 80us
	Delay_us(40);
 8001c36:	2028      	movs	r0, #40	; 0x28
 8001c38:	f7ff ff8c 	bl	8001b54 <Delay_us>
	if(!HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin))       // if LOW is ok
 8001c3c:	2102      	movs	r1, #2
 8001c3e:	480f      	ldr	r0, [pc, #60]	; (8001c7c <DHT_Check_Response+0x50>)
 8001c40:	f000 fd32 	bl	80026a8 <HAL_GPIO_ReadPin>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d10b      	bne.n	8001c62 <DHT_Check_Response+0x36>
	{
		// wait for 40 us because length's signal is LOW 80us
		Delay_us(80);
 8001c4a:	2050      	movs	r0, #80	; 0x50
 8001c4c:	f7ff ff82 	bl	8001b54 <Delay_us>
		if(HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin))
 8001c50:	2102      	movs	r1, #2
 8001c52:	480a      	ldr	r0, [pc, #40]	; (8001c7c <DHT_Check_Response+0x50>)
 8001c54:	f000 fd28 	bl	80026a8 <HAL_GPIO_ReadPin>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <DHT_Check_Response+0x36>
		{
			response =1;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	71fb      	strb	r3, [r7, #7]
		}
	}
	// waint Data_Pin pull LOW
	while(HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin))
 8001c62:	bf00      	nop
 8001c64:	2102      	movs	r1, #2
 8001c66:	4805      	ldr	r0, [pc, #20]	; (8001c7c <DHT_Check_Response+0x50>)
 8001c68:	f000 fd1e 	bl	80026a8 <HAL_GPIO_ReadPin>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d1f8      	bne.n	8001c64 <DHT_Check_Response+0x38>
	{

	}
	return response;
 8001c72:	79fb      	ldrb	r3, [r7, #7]
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3708      	adds	r7, #8
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	40010c00 	.word	0x40010c00

08001c80 <DHT_Read_Data>:

uint8_t DHT_Read_Data()
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
	uint8_t data=0x00;
 8001c86:	2300      	movs	r3, #0
 8001c88:	71fb      	strb	r3, [r7, #7]
	for(int i=0; i<8; i++)
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	603b      	str	r3, [r7, #0]
 8001c8e:	e028      	b.n	8001ce2 <DHT_Read_Data+0x62>
	{
		// wait Data_Pin Set LOW
		while(!HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin))
 8001c90:	bf00      	nop
 8001c92:	2102      	movs	r1, #2
 8001c94:	4817      	ldr	r0, [pc, #92]	; (8001cf4 <DHT_Read_Data+0x74>)
 8001c96:	f000 fd07 	bl	80026a8 <HAL_GPIO_ReadPin>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d0f8      	beq.n	8001c92 <DHT_Read_Data+0x12>
		{

		}
		Delay_us(40); // wait 40us between 28us and 70 us
 8001ca0:	2028      	movs	r0, #40	; 0x28
 8001ca2:	f7ff ff57 	bl	8001b54 <Delay_us>
		// if bit == 1
		if(HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin))
 8001ca6:	2102      	movs	r1, #2
 8001ca8:	4812      	ldr	r0, [pc, #72]	; (8001cf4 <DHT_Read_Data+0x74>)
 8001caa:	f000 fcfd 	bl	80026a8 <HAL_GPIO_ReadPin>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d00b      	beq.n	8001ccc <DHT_Read_Data+0x4c>
		{
			data |= (1<<(7-i));
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	f1c3 0307 	rsb	r3, r3, #7
 8001cba:	2201      	movs	r2, #1
 8001cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc0:	b25a      	sxtb	r2, r3
 8001cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	b25b      	sxtb	r3, r3
 8001cca:	71fb      	strb	r3, [r7, #7]
		}
		else
		{

		}
		while ((HAL_GPIO_ReadPin (DHT11_GPIO_Port, DHT11_Pin)));  // wait for the pin to go low
 8001ccc:	bf00      	nop
 8001cce:	2102      	movs	r1, #2
 8001cd0:	4808      	ldr	r0, [pc, #32]	; (8001cf4 <DHT_Read_Data+0x74>)
 8001cd2:	f000 fce9 	bl	80026a8 <HAL_GPIO_ReadPin>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d1f8      	bne.n	8001cce <DHT_Read_Data+0x4e>
	for(int i=0; i<8; i++)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	3301      	adds	r3, #1
 8001ce0:	603b      	str	r3, [r7, #0]
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	2b07      	cmp	r3, #7
 8001ce6:	ddd3      	ble.n	8001c90 <DHT_Read_Data+0x10>
	}
	return data;
 8001ce8:	79fb      	ldrb	r3, [r7, #7]
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	40010c00 	.word	0x40010c00

08001cf8 <__io_putchar>:
 * @brief Retargets the C library printf function to the USART.
 * @param None
 * @retval None
 */
PUTCHAR_PROTOTYPE
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 /* Place your implementation of fputc here */
 /* e.g. write a character to the USART */
 HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 100);
 8001d00:	1d39      	adds	r1, r7, #4
 8001d02:	2364      	movs	r3, #100	; 0x64
 8001d04:	2201      	movs	r2, #1
 8001d06:	4804      	ldr	r0, [pc, #16]	; (8001d18 <__io_putchar+0x20>)
 8001d08:	f001 fed2 	bl	8003ab0 <HAL_UART_Transmit>
 return ch;
 8001d0c:	687b      	ldr	r3, [r7, #4]
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	200002e4 	.word	0x200002e4

08001d1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001d20:	bf00      	nop
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bc80      	pop	{r7}
 8001d26:	4770      	bx	lr

08001d28 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b085      	sub	sp, #20
 8001d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001d2e:	4b15      	ldr	r3, [pc, #84]	; (8001d84 <HAL_MspInit+0x5c>)
 8001d30:	699b      	ldr	r3, [r3, #24]
 8001d32:	4a14      	ldr	r2, [pc, #80]	; (8001d84 <HAL_MspInit+0x5c>)
 8001d34:	f043 0301 	orr.w	r3, r3, #1
 8001d38:	6193      	str	r3, [r2, #24]
 8001d3a:	4b12      	ldr	r3, [pc, #72]	; (8001d84 <HAL_MspInit+0x5c>)
 8001d3c:	699b      	ldr	r3, [r3, #24]
 8001d3e:	f003 0301 	and.w	r3, r3, #1
 8001d42:	60bb      	str	r3, [r7, #8]
 8001d44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d46:	4b0f      	ldr	r3, [pc, #60]	; (8001d84 <HAL_MspInit+0x5c>)
 8001d48:	69db      	ldr	r3, [r3, #28]
 8001d4a:	4a0e      	ldr	r2, [pc, #56]	; (8001d84 <HAL_MspInit+0x5c>)
 8001d4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d50:	61d3      	str	r3, [r2, #28]
 8001d52:	4b0c      	ldr	r3, [pc, #48]	; (8001d84 <HAL_MspInit+0x5c>)
 8001d54:	69db      	ldr	r3, [r3, #28]
 8001d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d5a:	607b      	str	r3, [r7, #4]
 8001d5c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001d5e:	4b0a      	ldr	r3, [pc, #40]	; (8001d88 <HAL_MspInit+0x60>)
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	60fb      	str	r3, [r7, #12]
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001d6a:	60fb      	str	r3, [r7, #12]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d72:	60fb      	str	r3, [r7, #12]
 8001d74:	4a04      	ldr	r2, [pc, #16]	; (8001d88 <HAL_MspInit+0x60>)
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d7a:	bf00      	nop
 8001d7c:	3714      	adds	r7, #20
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bc80      	pop	{r7}
 8001d82:	4770      	bx	lr
 8001d84:	40021000 	.word	0x40021000
 8001d88:	40010000 	.word	0x40010000

08001d8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b085      	sub	sp, #20
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a12      	ldr	r2, [pc, #72]	; (8001de4 <HAL_TIM_Base_MspInit+0x58>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d10c      	bne.n	8001db8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d9e:	4b12      	ldr	r3, [pc, #72]	; (8001de8 <HAL_TIM_Base_MspInit+0x5c>)
 8001da0:	699b      	ldr	r3, [r3, #24]
 8001da2:	4a11      	ldr	r2, [pc, #68]	; (8001de8 <HAL_TIM_Base_MspInit+0x5c>)
 8001da4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001da8:	6193      	str	r3, [r2, #24]
 8001daa:	4b0f      	ldr	r3, [pc, #60]	; (8001de8 <HAL_TIM_Base_MspInit+0x5c>)
 8001dac:	699b      	ldr	r3, [r3, #24]
 8001dae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001db2:	60fb      	str	r3, [r7, #12]
 8001db4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001db6:	e010      	b.n	8001dda <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM4)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a0b      	ldr	r2, [pc, #44]	; (8001dec <HAL_TIM_Base_MspInit+0x60>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d10b      	bne.n	8001dda <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001dc2:	4b09      	ldr	r3, [pc, #36]	; (8001de8 <HAL_TIM_Base_MspInit+0x5c>)
 8001dc4:	69db      	ldr	r3, [r3, #28]
 8001dc6:	4a08      	ldr	r2, [pc, #32]	; (8001de8 <HAL_TIM_Base_MspInit+0x5c>)
 8001dc8:	f043 0304 	orr.w	r3, r3, #4
 8001dcc:	61d3      	str	r3, [r2, #28]
 8001dce:	4b06      	ldr	r3, [pc, #24]	; (8001de8 <HAL_TIM_Base_MspInit+0x5c>)
 8001dd0:	69db      	ldr	r3, [r3, #28]
 8001dd2:	f003 0304 	and.w	r3, r3, #4
 8001dd6:	60bb      	str	r3, [r7, #8]
 8001dd8:	68bb      	ldr	r3, [r7, #8]
}
 8001dda:	bf00      	nop
 8001ddc:	3714      	adds	r7, #20
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bc80      	pop	{r7}
 8001de2:	4770      	bx	lr
 8001de4:	40012c00 	.word	0x40012c00
 8001de8:	40021000 	.word	0x40021000
 8001dec:	40000800 	.word	0x40000800

08001df0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b088      	sub	sp, #32
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df8:	f107 0310 	add.w	r3, r7, #16
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	605a      	str	r2, [r3, #4]
 8001e02:	609a      	str	r2, [r3, #8]
 8001e04:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a10      	ldr	r2, [pc, #64]	; (8001e4c <HAL_TIM_MspPostInit+0x5c>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d118      	bne.n	8001e42 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e10:	4b0f      	ldr	r3, [pc, #60]	; (8001e50 <HAL_TIM_MspPostInit+0x60>)
 8001e12:	699b      	ldr	r3, [r3, #24]
 8001e14:	4a0e      	ldr	r2, [pc, #56]	; (8001e50 <HAL_TIM_MspPostInit+0x60>)
 8001e16:	f043 0304 	orr.w	r3, r3, #4
 8001e1a:	6193      	str	r3, [r2, #24]
 8001e1c:	4b0c      	ldr	r3, [pc, #48]	; (8001e50 <HAL_TIM_MspPostInit+0x60>)
 8001e1e:	699b      	ldr	r3, [r3, #24]
 8001e20:	f003 0304 	and.w	r3, r3, #4
 8001e24:	60fb      	str	r3, [r7, #12]
 8001e26:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001e28:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001e2c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e2e:	2302      	movs	r3, #2
 8001e30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e32:	2302      	movs	r3, #2
 8001e34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e36:	f107 0310 	add.w	r3, r7, #16
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	4805      	ldr	r0, [pc, #20]	; (8001e54 <HAL_TIM_MspPostInit+0x64>)
 8001e3e:	f000 fad9 	bl	80023f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001e42:	bf00      	nop
 8001e44:	3720      	adds	r7, #32
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	40012c00 	.word	0x40012c00
 8001e50:	40021000 	.word	0x40021000
 8001e54:	40010800 	.word	0x40010800

08001e58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b088      	sub	sp, #32
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e60:	f107 0310 	add.w	r3, r7, #16
 8001e64:	2200      	movs	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]
 8001e68:	605a      	str	r2, [r3, #4]
 8001e6a:	609a      	str	r2, [r3, #8]
 8001e6c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a1c      	ldr	r2, [pc, #112]	; (8001ee4 <HAL_UART_MspInit+0x8c>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d131      	bne.n	8001edc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001e78:	4b1b      	ldr	r3, [pc, #108]	; (8001ee8 <HAL_UART_MspInit+0x90>)
 8001e7a:	69db      	ldr	r3, [r3, #28]
 8001e7c:	4a1a      	ldr	r2, [pc, #104]	; (8001ee8 <HAL_UART_MspInit+0x90>)
 8001e7e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e82:	61d3      	str	r3, [r2, #28]
 8001e84:	4b18      	ldr	r3, [pc, #96]	; (8001ee8 <HAL_UART_MspInit+0x90>)
 8001e86:	69db      	ldr	r3, [r3, #28]
 8001e88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e8c:	60fb      	str	r3, [r7, #12]
 8001e8e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e90:	4b15      	ldr	r3, [pc, #84]	; (8001ee8 <HAL_UART_MspInit+0x90>)
 8001e92:	699b      	ldr	r3, [r3, #24]
 8001e94:	4a14      	ldr	r2, [pc, #80]	; (8001ee8 <HAL_UART_MspInit+0x90>)
 8001e96:	f043 0308 	orr.w	r3, r3, #8
 8001e9a:	6193      	str	r3, [r2, #24]
 8001e9c:	4b12      	ldr	r3, [pc, #72]	; (8001ee8 <HAL_UART_MspInit+0x90>)
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	f003 0308 	and.w	r3, r3, #8
 8001ea4:	60bb      	str	r3, [r7, #8]
 8001ea6:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ea8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001eac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eae:	2302      	movs	r3, #2
 8001eb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eb6:	f107 0310 	add.w	r3, r7, #16
 8001eba:	4619      	mov	r1, r3
 8001ebc:	480b      	ldr	r0, [pc, #44]	; (8001eec <HAL_UART_MspInit+0x94>)
 8001ebe:	f000 fa99 	bl	80023f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001ec2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ec6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ed0:	f107 0310 	add.w	r3, r7, #16
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	4805      	ldr	r0, [pc, #20]	; (8001eec <HAL_UART_MspInit+0x94>)
 8001ed8:	f000 fa8c 	bl	80023f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001edc:	bf00      	nop
 8001ede:	3720      	adds	r7, #32
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	40004800 	.word	0x40004800
 8001ee8:	40021000 	.word	0x40021000
 8001eec:	40010c00 	.word	0x40010c00

08001ef0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001ef4:	bf00      	nop
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bc80      	pop	{r7}
 8001efa:	4770      	bx	lr

08001efc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f00:	e7fe      	b.n	8001f00 <HardFault_Handler+0x4>

08001f02 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f02:	b480      	push	{r7}
 8001f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f06:	e7fe      	b.n	8001f06 <MemManage_Handler+0x4>

08001f08 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f0c:	e7fe      	b.n	8001f0c <BusFault_Handler+0x4>

08001f0e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f0e:	b480      	push	{r7}
 8001f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f12:	e7fe      	b.n	8001f12 <UsageFault_Handler+0x4>

08001f14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f18:	bf00      	nop
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bc80      	pop	{r7}
 8001f1e:	4770      	bx	lr

08001f20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f24:	bf00      	nop
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bc80      	pop	{r7}
 8001f2a:	4770      	bx	lr

08001f2c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f30:	bf00      	nop
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bc80      	pop	{r7}
 8001f36:	4770      	bx	lr

08001f38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f3c:	f000 f938 	bl	80021b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f40:	bf00      	nop
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b086      	sub	sp, #24
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	60f8      	str	r0, [r7, #12]
 8001f4c:	60b9      	str	r1, [r7, #8]
 8001f4e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f50:	2300      	movs	r3, #0
 8001f52:	617b      	str	r3, [r7, #20]
 8001f54:	e00a      	b.n	8001f6c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001f56:	f3af 8000 	nop.w
 8001f5a:	4601      	mov	r1, r0
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	1c5a      	adds	r2, r3, #1
 8001f60:	60ba      	str	r2, [r7, #8]
 8001f62:	b2ca      	uxtb	r2, r1
 8001f64:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	3301      	adds	r3, #1
 8001f6a:	617b      	str	r3, [r7, #20]
 8001f6c:	697a      	ldr	r2, [r7, #20]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	dbf0      	blt.n	8001f56 <_read+0x12>
	}

return len;
 8001f74:	687b      	ldr	r3, [r7, #4]
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3718      	adds	r7, #24
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}

08001f7e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f7e:	b580      	push	{r7, lr}
 8001f80:	b086      	sub	sp, #24
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	60f8      	str	r0, [r7, #12]
 8001f86:	60b9      	str	r1, [r7, #8]
 8001f88:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	617b      	str	r3, [r7, #20]
 8001f8e:	e009      	b.n	8001fa4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	1c5a      	adds	r2, r3, #1
 8001f94:	60ba      	str	r2, [r7, #8]
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7ff fead 	bl	8001cf8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	617b      	str	r3, [r7, #20]
 8001fa4:	697a      	ldr	r2, [r7, #20]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	dbf1      	blt.n	8001f90 <_write+0x12>
	}
	return len;
 8001fac:	687b      	ldr	r3, [r7, #4]
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3718      	adds	r7, #24
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <_close>:

int _close(int file)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	b083      	sub	sp, #12
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
	return -1;
 8001fbe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	370c      	adds	r7, #12
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bc80      	pop	{r7}
 8001fca:	4770      	bx	lr

08001fcc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fdc:	605a      	str	r2, [r3, #4]
	return 0;
 8001fde:	2300      	movs	r3, #0
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bc80      	pop	{r7}
 8001fe8:	4770      	bx	lr

08001fea <_isatty>:

int _isatty(int file)
{
 8001fea:	b480      	push	{r7}
 8001fec:	b083      	sub	sp, #12
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
	return 1;
 8001ff2:	2301      	movs	r3, #1
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bc80      	pop	{r7}
 8001ffc:	4770      	bx	lr

08001ffe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ffe:	b480      	push	{r7}
 8002000:	b085      	sub	sp, #20
 8002002:	af00      	add	r7, sp, #0
 8002004:	60f8      	str	r0, [r7, #12]
 8002006:	60b9      	str	r1, [r7, #8]
 8002008:	607a      	str	r2, [r7, #4]
	return 0;
 800200a:	2300      	movs	r3, #0
}
 800200c:	4618      	mov	r0, r3
 800200e:	3714      	adds	r7, #20
 8002010:	46bd      	mov	sp, r7
 8002012:	bc80      	pop	{r7}
 8002014:	4770      	bx	lr
	...

08002018 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002020:	4b11      	ldr	r3, [pc, #68]	; (8002068 <_sbrk+0x50>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d102      	bne.n	800202e <_sbrk+0x16>
		heap_end = &end;
 8002028:	4b0f      	ldr	r3, [pc, #60]	; (8002068 <_sbrk+0x50>)
 800202a:	4a10      	ldr	r2, [pc, #64]	; (800206c <_sbrk+0x54>)
 800202c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800202e:	4b0e      	ldr	r3, [pc, #56]	; (8002068 <_sbrk+0x50>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002034:	4b0c      	ldr	r3, [pc, #48]	; (8002068 <_sbrk+0x50>)
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4413      	add	r3, r2
 800203c:	466a      	mov	r2, sp
 800203e:	4293      	cmp	r3, r2
 8002040:	d907      	bls.n	8002052 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002042:	f001 ff99 	bl	8003f78 <__errno>
 8002046:	4602      	mov	r2, r0
 8002048:	230c      	movs	r3, #12
 800204a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800204c:	f04f 33ff 	mov.w	r3, #4294967295
 8002050:	e006      	b.n	8002060 <_sbrk+0x48>
	}

	heap_end += incr;
 8002052:	4b05      	ldr	r3, [pc, #20]	; (8002068 <_sbrk+0x50>)
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4413      	add	r3, r2
 800205a:	4a03      	ldr	r2, [pc, #12]	; (8002068 <_sbrk+0x50>)
 800205c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800205e:	68fb      	ldr	r3, [r7, #12]
}
 8002060:	4618      	mov	r0, r3
 8002062:	3710      	adds	r7, #16
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	2000009c 	.word	0x2000009c
 800206c:	20000380 	.word	0x20000380

08002070 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002074:	4b15      	ldr	r3, [pc, #84]	; (80020cc <SystemInit+0x5c>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a14      	ldr	r2, [pc, #80]	; (80020cc <SystemInit+0x5c>)
 800207a:	f043 0301 	orr.w	r3, r3, #1
 800207e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002080:	4b12      	ldr	r3, [pc, #72]	; (80020cc <SystemInit+0x5c>)
 8002082:	685a      	ldr	r2, [r3, #4]
 8002084:	4911      	ldr	r1, [pc, #68]	; (80020cc <SystemInit+0x5c>)
 8002086:	4b12      	ldr	r3, [pc, #72]	; (80020d0 <SystemInit+0x60>)
 8002088:	4013      	ands	r3, r2
 800208a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800208c:	4b0f      	ldr	r3, [pc, #60]	; (80020cc <SystemInit+0x5c>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a0e      	ldr	r2, [pc, #56]	; (80020cc <SystemInit+0x5c>)
 8002092:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002096:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800209a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800209c:	4b0b      	ldr	r3, [pc, #44]	; (80020cc <SystemInit+0x5c>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a0a      	ldr	r2, [pc, #40]	; (80020cc <SystemInit+0x5c>)
 80020a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020a6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80020a8:	4b08      	ldr	r3, [pc, #32]	; (80020cc <SystemInit+0x5c>)
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	4a07      	ldr	r2, [pc, #28]	; (80020cc <SystemInit+0x5c>)
 80020ae:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80020b2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80020b4:	4b05      	ldr	r3, [pc, #20]	; (80020cc <SystemInit+0x5c>)
 80020b6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80020ba:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80020bc:	4b05      	ldr	r3, [pc, #20]	; (80020d4 <SystemInit+0x64>)
 80020be:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80020c2:	609a      	str	r2, [r3, #8]
#endif 
}
 80020c4:	bf00      	nop
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bc80      	pop	{r7}
 80020ca:	4770      	bx	lr
 80020cc:	40021000 	.word	0x40021000
 80020d0:	f8ff0000 	.word	0xf8ff0000
 80020d4:	e000ed00 	.word	0xe000ed00

080020d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80020d8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80020da:	e003      	b.n	80020e4 <LoopCopyDataInit>

080020dc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80020dc:	4b0b      	ldr	r3, [pc, #44]	; (800210c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80020de:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80020e0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80020e2:	3104      	adds	r1, #4

080020e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80020e4:	480a      	ldr	r0, [pc, #40]	; (8002110 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80020e6:	4b0b      	ldr	r3, [pc, #44]	; (8002114 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80020e8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80020ea:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80020ec:	d3f6      	bcc.n	80020dc <CopyDataInit>
  ldr r2, =_sbss
 80020ee:	4a0a      	ldr	r2, [pc, #40]	; (8002118 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80020f0:	e002      	b.n	80020f8 <LoopFillZerobss>

080020f2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80020f2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80020f4:	f842 3b04 	str.w	r3, [r2], #4

080020f8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80020f8:	4b08      	ldr	r3, [pc, #32]	; (800211c <LoopFillZerobss+0x24>)
  cmp r2, r3
 80020fa:	429a      	cmp	r2, r3
  bcc FillZerobss
 80020fc:	d3f9      	bcc.n	80020f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80020fe:	f7ff ffb7 	bl	8002070 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002102:	f001 ff3f 	bl	8003f84 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002106:	f7fe fca3 	bl	8000a50 <main>
  bx lr
 800210a:	4770      	bx	lr
  ldr r3, =_sidata
 800210c:	080052f0 	.word	0x080052f0
  ldr r0, =_sdata
 8002110:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002114:	2000007c 	.word	0x2000007c
  ldr r2, =_sbss
 8002118:	2000007c 	.word	0x2000007c
  ldr r3, = _ebss
 800211c:	2000037c 	.word	0x2000037c

08002120 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002120:	e7fe      	b.n	8002120 <ADC1_2_IRQHandler>
	...

08002124 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002128:	4b08      	ldr	r3, [pc, #32]	; (800214c <HAL_Init+0x28>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a07      	ldr	r2, [pc, #28]	; (800214c <HAL_Init+0x28>)
 800212e:	f043 0310 	orr.w	r3, r3, #16
 8002132:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002134:	2003      	movs	r0, #3
 8002136:	f000 f929 	bl	800238c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800213a:	2000      	movs	r0, #0
 800213c:	f000 f808 	bl	8002150 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002140:	f7ff fdf2 	bl	8001d28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002144:	2300      	movs	r3, #0
}
 8002146:	4618      	mov	r0, r3
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	40022000 	.word	0x40022000

08002150 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002158:	4b12      	ldr	r3, [pc, #72]	; (80021a4 <HAL_InitTick+0x54>)
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	4b12      	ldr	r3, [pc, #72]	; (80021a8 <HAL_InitTick+0x58>)
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	4619      	mov	r1, r3
 8002162:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002166:	fbb3 f3f1 	udiv	r3, r3, r1
 800216a:	fbb2 f3f3 	udiv	r3, r2, r3
 800216e:	4618      	mov	r0, r3
 8002170:	f000 f933 	bl	80023da <HAL_SYSTICK_Config>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e00e      	b.n	800219c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2b0f      	cmp	r3, #15
 8002182:	d80a      	bhi.n	800219a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002184:	2200      	movs	r2, #0
 8002186:	6879      	ldr	r1, [r7, #4]
 8002188:	f04f 30ff 	mov.w	r0, #4294967295
 800218c:	f000 f909 	bl	80023a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002190:	4a06      	ldr	r2, [pc, #24]	; (80021ac <HAL_InitTick+0x5c>)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002196:	2300      	movs	r3, #0
 8002198:	e000      	b.n	800219c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
}
 800219c:	4618      	mov	r0, r3
 800219e:	3708      	adds	r7, #8
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	2000000c 	.word	0x2000000c
 80021a8:	20000014 	.word	0x20000014
 80021ac:	20000010 	.word	0x20000010

080021b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021b4:	4b05      	ldr	r3, [pc, #20]	; (80021cc <HAL_IncTick+0x1c>)
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	461a      	mov	r2, r3
 80021ba:	4b05      	ldr	r3, [pc, #20]	; (80021d0 <HAL_IncTick+0x20>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4413      	add	r3, r2
 80021c0:	4a03      	ldr	r2, [pc, #12]	; (80021d0 <HAL_IncTick+0x20>)
 80021c2:	6013      	str	r3, [r2, #0]
}
 80021c4:	bf00      	nop
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bc80      	pop	{r7}
 80021ca:	4770      	bx	lr
 80021cc:	20000014 	.word	0x20000014
 80021d0:	20000374 	.word	0x20000374

080021d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  return uwTick;
 80021d8:	4b02      	ldr	r3, [pc, #8]	; (80021e4 <HAL_GetTick+0x10>)
 80021da:	681b      	ldr	r3, [r3, #0]
}
 80021dc:	4618      	mov	r0, r3
 80021de:	46bd      	mov	sp, r7
 80021e0:	bc80      	pop	{r7}
 80021e2:	4770      	bx	lr
 80021e4:	20000374 	.word	0x20000374

080021e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021f0:	f7ff fff0 	bl	80021d4 <HAL_GetTick>
 80021f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002200:	d005      	beq.n	800220e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002202:	4b09      	ldr	r3, [pc, #36]	; (8002228 <HAL_Delay+0x40>)
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	461a      	mov	r2, r3
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	4413      	add	r3, r2
 800220c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800220e:	bf00      	nop
 8002210:	f7ff ffe0 	bl	80021d4 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	68fa      	ldr	r2, [r7, #12]
 800221c:	429a      	cmp	r2, r3
 800221e:	d8f7      	bhi.n	8002210 <HAL_Delay+0x28>
  {
  }
}
 8002220:	bf00      	nop
 8002222:	3710      	adds	r7, #16
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	20000014 	.word	0x20000014

0800222c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800222c:	b480      	push	{r7}
 800222e:	b085      	sub	sp, #20
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f003 0307 	and.w	r3, r3, #7
 800223a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800223c:	4b0c      	ldr	r3, [pc, #48]	; (8002270 <__NVIC_SetPriorityGrouping+0x44>)
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002242:	68ba      	ldr	r2, [r7, #8]
 8002244:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002248:	4013      	ands	r3, r2
 800224a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002254:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002258:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800225c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800225e:	4a04      	ldr	r2, [pc, #16]	; (8002270 <__NVIC_SetPriorityGrouping+0x44>)
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	60d3      	str	r3, [r2, #12]
}
 8002264:	bf00      	nop
 8002266:	3714      	adds	r7, #20
 8002268:	46bd      	mov	sp, r7
 800226a:	bc80      	pop	{r7}
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	e000ed00 	.word	0xe000ed00

08002274 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002278:	4b04      	ldr	r3, [pc, #16]	; (800228c <__NVIC_GetPriorityGrouping+0x18>)
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	0a1b      	lsrs	r3, r3, #8
 800227e:	f003 0307 	and.w	r3, r3, #7
}
 8002282:	4618      	mov	r0, r3
 8002284:	46bd      	mov	sp, r7
 8002286:	bc80      	pop	{r7}
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	e000ed00 	.word	0xe000ed00

08002290 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	4603      	mov	r3, r0
 8002298:	6039      	str	r1, [r7, #0]
 800229a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800229c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	db0a      	blt.n	80022ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	b2da      	uxtb	r2, r3
 80022a8:	490c      	ldr	r1, [pc, #48]	; (80022dc <__NVIC_SetPriority+0x4c>)
 80022aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ae:	0112      	lsls	r2, r2, #4
 80022b0:	b2d2      	uxtb	r2, r2
 80022b2:	440b      	add	r3, r1
 80022b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022b8:	e00a      	b.n	80022d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	b2da      	uxtb	r2, r3
 80022be:	4908      	ldr	r1, [pc, #32]	; (80022e0 <__NVIC_SetPriority+0x50>)
 80022c0:	79fb      	ldrb	r3, [r7, #7]
 80022c2:	f003 030f 	and.w	r3, r3, #15
 80022c6:	3b04      	subs	r3, #4
 80022c8:	0112      	lsls	r2, r2, #4
 80022ca:	b2d2      	uxtb	r2, r2
 80022cc:	440b      	add	r3, r1
 80022ce:	761a      	strb	r2, [r3, #24]
}
 80022d0:	bf00      	nop
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bc80      	pop	{r7}
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	e000e100 	.word	0xe000e100
 80022e0:	e000ed00 	.word	0xe000ed00

080022e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b089      	sub	sp, #36	; 0x24
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	60b9      	str	r1, [r7, #8]
 80022ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f003 0307 	and.w	r3, r3, #7
 80022f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	f1c3 0307 	rsb	r3, r3, #7
 80022fe:	2b04      	cmp	r3, #4
 8002300:	bf28      	it	cs
 8002302:	2304      	movcs	r3, #4
 8002304:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	3304      	adds	r3, #4
 800230a:	2b06      	cmp	r3, #6
 800230c:	d902      	bls.n	8002314 <NVIC_EncodePriority+0x30>
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	3b03      	subs	r3, #3
 8002312:	e000      	b.n	8002316 <NVIC_EncodePriority+0x32>
 8002314:	2300      	movs	r3, #0
 8002316:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002318:	f04f 32ff 	mov.w	r2, #4294967295
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	fa02 f303 	lsl.w	r3, r2, r3
 8002322:	43da      	mvns	r2, r3
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	401a      	ands	r2, r3
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800232c:	f04f 31ff 	mov.w	r1, #4294967295
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	fa01 f303 	lsl.w	r3, r1, r3
 8002336:	43d9      	mvns	r1, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800233c:	4313      	orrs	r3, r2
         );
}
 800233e:	4618      	mov	r0, r3
 8002340:	3724      	adds	r7, #36	; 0x24
 8002342:	46bd      	mov	sp, r7
 8002344:	bc80      	pop	{r7}
 8002346:	4770      	bx	lr

08002348 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	3b01      	subs	r3, #1
 8002354:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002358:	d301      	bcc.n	800235e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800235a:	2301      	movs	r3, #1
 800235c:	e00f      	b.n	800237e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800235e:	4a0a      	ldr	r2, [pc, #40]	; (8002388 <SysTick_Config+0x40>)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	3b01      	subs	r3, #1
 8002364:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002366:	210f      	movs	r1, #15
 8002368:	f04f 30ff 	mov.w	r0, #4294967295
 800236c:	f7ff ff90 	bl	8002290 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002370:	4b05      	ldr	r3, [pc, #20]	; (8002388 <SysTick_Config+0x40>)
 8002372:	2200      	movs	r2, #0
 8002374:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002376:	4b04      	ldr	r3, [pc, #16]	; (8002388 <SysTick_Config+0x40>)
 8002378:	2207      	movs	r2, #7
 800237a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800237c:	2300      	movs	r3, #0
}
 800237e:	4618      	mov	r0, r3
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	e000e010 	.word	0xe000e010

0800238c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f7ff ff49 	bl	800222c <__NVIC_SetPriorityGrouping>
}
 800239a:	bf00      	nop
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023a2:	b580      	push	{r7, lr}
 80023a4:	b086      	sub	sp, #24
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	4603      	mov	r3, r0
 80023aa:	60b9      	str	r1, [r7, #8]
 80023ac:	607a      	str	r2, [r7, #4]
 80023ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023b0:	2300      	movs	r3, #0
 80023b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023b4:	f7ff ff5e 	bl	8002274 <__NVIC_GetPriorityGrouping>
 80023b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	68b9      	ldr	r1, [r7, #8]
 80023be:	6978      	ldr	r0, [r7, #20]
 80023c0:	f7ff ff90 	bl	80022e4 <NVIC_EncodePriority>
 80023c4:	4602      	mov	r2, r0
 80023c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023ca:	4611      	mov	r1, r2
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7ff ff5f 	bl	8002290 <__NVIC_SetPriority>
}
 80023d2:	bf00      	nop
 80023d4:	3718      	adds	r7, #24
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}

080023da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023da:	b580      	push	{r7, lr}
 80023dc:	b082      	sub	sp, #8
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f7ff ffb0 	bl	8002348 <SysTick_Config>
 80023e8:	4603      	mov	r3, r0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3708      	adds	r7, #8
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
	...

080023f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b08b      	sub	sp, #44	; 0x2c
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023fe:	2300      	movs	r3, #0
 8002400:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002402:	2300      	movs	r3, #0
 8002404:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002406:	e127      	b.n	8002658 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002408:	2201      	movs	r2, #1
 800240a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	69fa      	ldr	r2, [r7, #28]
 8002418:	4013      	ands	r3, r2
 800241a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	429a      	cmp	r2, r3
 8002422:	f040 8116 	bne.w	8002652 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	2b12      	cmp	r3, #18
 800242c:	d034      	beq.n	8002498 <HAL_GPIO_Init+0xa4>
 800242e:	2b12      	cmp	r3, #18
 8002430:	d80d      	bhi.n	800244e <HAL_GPIO_Init+0x5a>
 8002432:	2b02      	cmp	r3, #2
 8002434:	d02b      	beq.n	800248e <HAL_GPIO_Init+0x9a>
 8002436:	2b02      	cmp	r3, #2
 8002438:	d804      	bhi.n	8002444 <HAL_GPIO_Init+0x50>
 800243a:	2b00      	cmp	r3, #0
 800243c:	d031      	beq.n	80024a2 <HAL_GPIO_Init+0xae>
 800243e:	2b01      	cmp	r3, #1
 8002440:	d01c      	beq.n	800247c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002442:	e048      	b.n	80024d6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002444:	2b03      	cmp	r3, #3
 8002446:	d043      	beq.n	80024d0 <HAL_GPIO_Init+0xdc>
 8002448:	2b11      	cmp	r3, #17
 800244a:	d01b      	beq.n	8002484 <HAL_GPIO_Init+0x90>
          break;
 800244c:	e043      	b.n	80024d6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800244e:	4a89      	ldr	r2, [pc, #548]	; (8002674 <HAL_GPIO_Init+0x280>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d026      	beq.n	80024a2 <HAL_GPIO_Init+0xae>
 8002454:	4a87      	ldr	r2, [pc, #540]	; (8002674 <HAL_GPIO_Init+0x280>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d806      	bhi.n	8002468 <HAL_GPIO_Init+0x74>
 800245a:	4a87      	ldr	r2, [pc, #540]	; (8002678 <HAL_GPIO_Init+0x284>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d020      	beq.n	80024a2 <HAL_GPIO_Init+0xae>
 8002460:	4a86      	ldr	r2, [pc, #536]	; (800267c <HAL_GPIO_Init+0x288>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d01d      	beq.n	80024a2 <HAL_GPIO_Init+0xae>
          break;
 8002466:	e036      	b.n	80024d6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002468:	4a85      	ldr	r2, [pc, #532]	; (8002680 <HAL_GPIO_Init+0x28c>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d019      	beq.n	80024a2 <HAL_GPIO_Init+0xae>
 800246e:	4a85      	ldr	r2, [pc, #532]	; (8002684 <HAL_GPIO_Init+0x290>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d016      	beq.n	80024a2 <HAL_GPIO_Init+0xae>
 8002474:	4a84      	ldr	r2, [pc, #528]	; (8002688 <HAL_GPIO_Init+0x294>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d013      	beq.n	80024a2 <HAL_GPIO_Init+0xae>
          break;
 800247a:	e02c      	b.n	80024d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	623b      	str	r3, [r7, #32]
          break;
 8002482:	e028      	b.n	80024d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	3304      	adds	r3, #4
 800248a:	623b      	str	r3, [r7, #32]
          break;
 800248c:	e023      	b.n	80024d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	3308      	adds	r3, #8
 8002494:	623b      	str	r3, [r7, #32]
          break;
 8002496:	e01e      	b.n	80024d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	330c      	adds	r3, #12
 800249e:	623b      	str	r3, [r7, #32]
          break;
 80024a0:	e019      	b.n	80024d6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d102      	bne.n	80024b0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80024aa:	2304      	movs	r3, #4
 80024ac:	623b      	str	r3, [r7, #32]
          break;
 80024ae:	e012      	b.n	80024d6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d105      	bne.n	80024c4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80024b8:	2308      	movs	r3, #8
 80024ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	69fa      	ldr	r2, [r7, #28]
 80024c0:	611a      	str	r2, [r3, #16]
          break;
 80024c2:	e008      	b.n	80024d6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80024c4:	2308      	movs	r3, #8
 80024c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	69fa      	ldr	r2, [r7, #28]
 80024cc:	615a      	str	r2, [r3, #20]
          break;
 80024ce:	e002      	b.n	80024d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80024d0:	2300      	movs	r3, #0
 80024d2:	623b      	str	r3, [r7, #32]
          break;
 80024d4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	2bff      	cmp	r3, #255	; 0xff
 80024da:	d801      	bhi.n	80024e0 <HAL_GPIO_Init+0xec>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	e001      	b.n	80024e4 <HAL_GPIO_Init+0xf0>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	3304      	adds	r3, #4
 80024e4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	2bff      	cmp	r3, #255	; 0xff
 80024ea:	d802      	bhi.n	80024f2 <HAL_GPIO_Init+0xfe>
 80024ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	e002      	b.n	80024f8 <HAL_GPIO_Init+0x104>
 80024f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f4:	3b08      	subs	r3, #8
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	210f      	movs	r1, #15
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	fa01 f303 	lsl.w	r3, r1, r3
 8002506:	43db      	mvns	r3, r3
 8002508:	401a      	ands	r2, r3
 800250a:	6a39      	ldr	r1, [r7, #32]
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	fa01 f303 	lsl.w	r3, r1, r3
 8002512:	431a      	orrs	r2, r3
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002520:	2b00      	cmp	r3, #0
 8002522:	f000 8096 	beq.w	8002652 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002526:	4b59      	ldr	r3, [pc, #356]	; (800268c <HAL_GPIO_Init+0x298>)
 8002528:	699b      	ldr	r3, [r3, #24]
 800252a:	4a58      	ldr	r2, [pc, #352]	; (800268c <HAL_GPIO_Init+0x298>)
 800252c:	f043 0301 	orr.w	r3, r3, #1
 8002530:	6193      	str	r3, [r2, #24]
 8002532:	4b56      	ldr	r3, [pc, #344]	; (800268c <HAL_GPIO_Init+0x298>)
 8002534:	699b      	ldr	r3, [r3, #24]
 8002536:	f003 0301 	and.w	r3, r3, #1
 800253a:	60bb      	str	r3, [r7, #8]
 800253c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800253e:	4a54      	ldr	r2, [pc, #336]	; (8002690 <HAL_GPIO_Init+0x29c>)
 8002540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002542:	089b      	lsrs	r3, r3, #2
 8002544:	3302      	adds	r3, #2
 8002546:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800254a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800254c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254e:	f003 0303 	and.w	r3, r3, #3
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	220f      	movs	r2, #15
 8002556:	fa02 f303 	lsl.w	r3, r2, r3
 800255a:	43db      	mvns	r3, r3
 800255c:	68fa      	ldr	r2, [r7, #12]
 800255e:	4013      	ands	r3, r2
 8002560:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a4b      	ldr	r2, [pc, #300]	; (8002694 <HAL_GPIO_Init+0x2a0>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d013      	beq.n	8002592 <HAL_GPIO_Init+0x19e>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a4a      	ldr	r2, [pc, #296]	; (8002698 <HAL_GPIO_Init+0x2a4>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d00d      	beq.n	800258e <HAL_GPIO_Init+0x19a>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a49      	ldr	r2, [pc, #292]	; (800269c <HAL_GPIO_Init+0x2a8>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d007      	beq.n	800258a <HAL_GPIO_Init+0x196>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a48      	ldr	r2, [pc, #288]	; (80026a0 <HAL_GPIO_Init+0x2ac>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d101      	bne.n	8002586 <HAL_GPIO_Init+0x192>
 8002582:	2303      	movs	r3, #3
 8002584:	e006      	b.n	8002594 <HAL_GPIO_Init+0x1a0>
 8002586:	2304      	movs	r3, #4
 8002588:	e004      	b.n	8002594 <HAL_GPIO_Init+0x1a0>
 800258a:	2302      	movs	r3, #2
 800258c:	e002      	b.n	8002594 <HAL_GPIO_Init+0x1a0>
 800258e:	2301      	movs	r3, #1
 8002590:	e000      	b.n	8002594 <HAL_GPIO_Init+0x1a0>
 8002592:	2300      	movs	r3, #0
 8002594:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002596:	f002 0203 	and.w	r2, r2, #3
 800259a:	0092      	lsls	r2, r2, #2
 800259c:	4093      	lsls	r3, r2
 800259e:	68fa      	ldr	r2, [r7, #12]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80025a4:	493a      	ldr	r1, [pc, #232]	; (8002690 <HAL_GPIO_Init+0x29c>)
 80025a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a8:	089b      	lsrs	r3, r3, #2
 80025aa:	3302      	adds	r3, #2
 80025ac:	68fa      	ldr	r2, [r7, #12]
 80025ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d006      	beq.n	80025cc <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80025be:	4b39      	ldr	r3, [pc, #228]	; (80026a4 <HAL_GPIO_Init+0x2b0>)
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	4938      	ldr	r1, [pc, #224]	; (80026a4 <HAL_GPIO_Init+0x2b0>)
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	600b      	str	r3, [r1, #0]
 80025ca:	e006      	b.n	80025da <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80025cc:	4b35      	ldr	r3, [pc, #212]	; (80026a4 <HAL_GPIO_Init+0x2b0>)
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	43db      	mvns	r3, r3
 80025d4:	4933      	ldr	r1, [pc, #204]	; (80026a4 <HAL_GPIO_Init+0x2b0>)
 80025d6:	4013      	ands	r3, r2
 80025d8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d006      	beq.n	80025f4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80025e6:	4b2f      	ldr	r3, [pc, #188]	; (80026a4 <HAL_GPIO_Init+0x2b0>)
 80025e8:	685a      	ldr	r2, [r3, #4]
 80025ea:	492e      	ldr	r1, [pc, #184]	; (80026a4 <HAL_GPIO_Init+0x2b0>)
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	604b      	str	r3, [r1, #4]
 80025f2:	e006      	b.n	8002602 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80025f4:	4b2b      	ldr	r3, [pc, #172]	; (80026a4 <HAL_GPIO_Init+0x2b0>)
 80025f6:	685a      	ldr	r2, [r3, #4]
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	43db      	mvns	r3, r3
 80025fc:	4929      	ldr	r1, [pc, #164]	; (80026a4 <HAL_GPIO_Init+0x2b0>)
 80025fe:	4013      	ands	r3, r2
 8002600:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d006      	beq.n	800261c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800260e:	4b25      	ldr	r3, [pc, #148]	; (80026a4 <HAL_GPIO_Init+0x2b0>)
 8002610:	689a      	ldr	r2, [r3, #8]
 8002612:	4924      	ldr	r1, [pc, #144]	; (80026a4 <HAL_GPIO_Init+0x2b0>)
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	4313      	orrs	r3, r2
 8002618:	608b      	str	r3, [r1, #8]
 800261a:	e006      	b.n	800262a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800261c:	4b21      	ldr	r3, [pc, #132]	; (80026a4 <HAL_GPIO_Init+0x2b0>)
 800261e:	689a      	ldr	r2, [r3, #8]
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	43db      	mvns	r3, r3
 8002624:	491f      	ldr	r1, [pc, #124]	; (80026a4 <HAL_GPIO_Init+0x2b0>)
 8002626:	4013      	ands	r3, r2
 8002628:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d006      	beq.n	8002644 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002636:	4b1b      	ldr	r3, [pc, #108]	; (80026a4 <HAL_GPIO_Init+0x2b0>)
 8002638:	68da      	ldr	r2, [r3, #12]
 800263a:	491a      	ldr	r1, [pc, #104]	; (80026a4 <HAL_GPIO_Init+0x2b0>)
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	4313      	orrs	r3, r2
 8002640:	60cb      	str	r3, [r1, #12]
 8002642:	e006      	b.n	8002652 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002644:	4b17      	ldr	r3, [pc, #92]	; (80026a4 <HAL_GPIO_Init+0x2b0>)
 8002646:	68da      	ldr	r2, [r3, #12]
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	43db      	mvns	r3, r3
 800264c:	4915      	ldr	r1, [pc, #84]	; (80026a4 <HAL_GPIO_Init+0x2b0>)
 800264e:	4013      	ands	r3, r2
 8002650:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002654:	3301      	adds	r3, #1
 8002656:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265e:	fa22 f303 	lsr.w	r3, r2, r3
 8002662:	2b00      	cmp	r3, #0
 8002664:	f47f aed0 	bne.w	8002408 <HAL_GPIO_Init+0x14>
  }
}
 8002668:	bf00      	nop
 800266a:	372c      	adds	r7, #44	; 0x2c
 800266c:	46bd      	mov	sp, r7
 800266e:	bc80      	pop	{r7}
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	10210000 	.word	0x10210000
 8002678:	10110000 	.word	0x10110000
 800267c:	10120000 	.word	0x10120000
 8002680:	10310000 	.word	0x10310000
 8002684:	10320000 	.word	0x10320000
 8002688:	10220000 	.word	0x10220000
 800268c:	40021000 	.word	0x40021000
 8002690:	40010000 	.word	0x40010000
 8002694:	40010800 	.word	0x40010800
 8002698:	40010c00 	.word	0x40010c00
 800269c:	40011000 	.word	0x40011000
 80026a0:	40011400 	.word	0x40011400
 80026a4:	40010400 	.word	0x40010400

080026a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b085      	sub	sp, #20
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	460b      	mov	r3, r1
 80026b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	689a      	ldr	r2, [r3, #8]
 80026b8:	887b      	ldrh	r3, [r7, #2]
 80026ba:	4013      	ands	r3, r2
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d002      	beq.n	80026c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80026c0:	2301      	movs	r3, #1
 80026c2:	73fb      	strb	r3, [r7, #15]
 80026c4:	e001      	b.n	80026ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80026c6:	2300      	movs	r3, #0
 80026c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80026ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3714      	adds	r7, #20
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bc80      	pop	{r7}
 80026d4:	4770      	bx	lr

080026d6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026d6:	b480      	push	{r7}
 80026d8:	b083      	sub	sp, #12
 80026da:	af00      	add	r7, sp, #0
 80026dc:	6078      	str	r0, [r7, #4]
 80026de:	460b      	mov	r3, r1
 80026e0:	807b      	strh	r3, [r7, #2]
 80026e2:	4613      	mov	r3, r2
 80026e4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026e6:	787b      	ldrb	r3, [r7, #1]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d003      	beq.n	80026f4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026ec:	887a      	ldrh	r2, [r7, #2]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80026f2:	e003      	b.n	80026fc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80026f4:	887b      	ldrh	r3, [r7, #2]
 80026f6:	041a      	lsls	r2, r3, #16
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	611a      	str	r2, [r3, #16]
}
 80026fc:	bf00      	nop
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	bc80      	pop	{r7}
 8002704:	4770      	bx	lr
	...

08002708 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b086      	sub	sp, #24
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d101      	bne.n	800271a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e26c      	b.n	8002bf4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0301 	and.w	r3, r3, #1
 8002722:	2b00      	cmp	r3, #0
 8002724:	f000 8087 	beq.w	8002836 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002728:	4b92      	ldr	r3, [pc, #584]	; (8002974 <HAL_RCC_OscConfig+0x26c>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f003 030c 	and.w	r3, r3, #12
 8002730:	2b04      	cmp	r3, #4
 8002732:	d00c      	beq.n	800274e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002734:	4b8f      	ldr	r3, [pc, #572]	; (8002974 <HAL_RCC_OscConfig+0x26c>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f003 030c 	and.w	r3, r3, #12
 800273c:	2b08      	cmp	r3, #8
 800273e:	d112      	bne.n	8002766 <HAL_RCC_OscConfig+0x5e>
 8002740:	4b8c      	ldr	r3, [pc, #560]	; (8002974 <HAL_RCC_OscConfig+0x26c>)
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002748:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800274c:	d10b      	bne.n	8002766 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800274e:	4b89      	ldr	r3, [pc, #548]	; (8002974 <HAL_RCC_OscConfig+0x26c>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d06c      	beq.n	8002834 <HAL_RCC_OscConfig+0x12c>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d168      	bne.n	8002834 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e246      	b.n	8002bf4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800276e:	d106      	bne.n	800277e <HAL_RCC_OscConfig+0x76>
 8002770:	4b80      	ldr	r3, [pc, #512]	; (8002974 <HAL_RCC_OscConfig+0x26c>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a7f      	ldr	r2, [pc, #508]	; (8002974 <HAL_RCC_OscConfig+0x26c>)
 8002776:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800277a:	6013      	str	r3, [r2, #0]
 800277c:	e02e      	b.n	80027dc <HAL_RCC_OscConfig+0xd4>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d10c      	bne.n	80027a0 <HAL_RCC_OscConfig+0x98>
 8002786:	4b7b      	ldr	r3, [pc, #492]	; (8002974 <HAL_RCC_OscConfig+0x26c>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a7a      	ldr	r2, [pc, #488]	; (8002974 <HAL_RCC_OscConfig+0x26c>)
 800278c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002790:	6013      	str	r3, [r2, #0]
 8002792:	4b78      	ldr	r3, [pc, #480]	; (8002974 <HAL_RCC_OscConfig+0x26c>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a77      	ldr	r2, [pc, #476]	; (8002974 <HAL_RCC_OscConfig+0x26c>)
 8002798:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800279c:	6013      	str	r3, [r2, #0]
 800279e:	e01d      	b.n	80027dc <HAL_RCC_OscConfig+0xd4>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027a8:	d10c      	bne.n	80027c4 <HAL_RCC_OscConfig+0xbc>
 80027aa:	4b72      	ldr	r3, [pc, #456]	; (8002974 <HAL_RCC_OscConfig+0x26c>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a71      	ldr	r2, [pc, #452]	; (8002974 <HAL_RCC_OscConfig+0x26c>)
 80027b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027b4:	6013      	str	r3, [r2, #0]
 80027b6:	4b6f      	ldr	r3, [pc, #444]	; (8002974 <HAL_RCC_OscConfig+0x26c>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a6e      	ldr	r2, [pc, #440]	; (8002974 <HAL_RCC_OscConfig+0x26c>)
 80027bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027c0:	6013      	str	r3, [r2, #0]
 80027c2:	e00b      	b.n	80027dc <HAL_RCC_OscConfig+0xd4>
 80027c4:	4b6b      	ldr	r3, [pc, #428]	; (8002974 <HAL_RCC_OscConfig+0x26c>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a6a      	ldr	r2, [pc, #424]	; (8002974 <HAL_RCC_OscConfig+0x26c>)
 80027ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027ce:	6013      	str	r3, [r2, #0]
 80027d0:	4b68      	ldr	r3, [pc, #416]	; (8002974 <HAL_RCC_OscConfig+0x26c>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a67      	ldr	r2, [pc, #412]	; (8002974 <HAL_RCC_OscConfig+0x26c>)
 80027d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d013      	beq.n	800280c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e4:	f7ff fcf6 	bl	80021d4 <HAL_GetTick>
 80027e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ea:	e008      	b.n	80027fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027ec:	f7ff fcf2 	bl	80021d4 <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	2b64      	cmp	r3, #100	; 0x64
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e1fa      	b.n	8002bf4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027fe:	4b5d      	ldr	r3, [pc, #372]	; (8002974 <HAL_RCC_OscConfig+0x26c>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d0f0      	beq.n	80027ec <HAL_RCC_OscConfig+0xe4>
 800280a:	e014      	b.n	8002836 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800280c:	f7ff fce2 	bl	80021d4 <HAL_GetTick>
 8002810:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002812:	e008      	b.n	8002826 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002814:	f7ff fcde 	bl	80021d4 <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	2b64      	cmp	r3, #100	; 0x64
 8002820:	d901      	bls.n	8002826 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e1e6      	b.n	8002bf4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002826:	4b53      	ldr	r3, [pc, #332]	; (8002974 <HAL_RCC_OscConfig+0x26c>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d1f0      	bne.n	8002814 <HAL_RCC_OscConfig+0x10c>
 8002832:	e000      	b.n	8002836 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002834:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0302 	and.w	r3, r3, #2
 800283e:	2b00      	cmp	r3, #0
 8002840:	d063      	beq.n	800290a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002842:	4b4c      	ldr	r3, [pc, #304]	; (8002974 <HAL_RCC_OscConfig+0x26c>)
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f003 030c 	and.w	r3, r3, #12
 800284a:	2b00      	cmp	r3, #0
 800284c:	d00b      	beq.n	8002866 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800284e:	4b49      	ldr	r3, [pc, #292]	; (8002974 <HAL_RCC_OscConfig+0x26c>)
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f003 030c 	and.w	r3, r3, #12
 8002856:	2b08      	cmp	r3, #8
 8002858:	d11c      	bne.n	8002894 <HAL_RCC_OscConfig+0x18c>
 800285a:	4b46      	ldr	r3, [pc, #280]	; (8002974 <HAL_RCC_OscConfig+0x26c>)
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d116      	bne.n	8002894 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002866:	4b43      	ldr	r3, [pc, #268]	; (8002974 <HAL_RCC_OscConfig+0x26c>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0302 	and.w	r3, r3, #2
 800286e:	2b00      	cmp	r3, #0
 8002870:	d005      	beq.n	800287e <HAL_RCC_OscConfig+0x176>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	2b01      	cmp	r3, #1
 8002878:	d001      	beq.n	800287e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e1ba      	b.n	8002bf4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800287e:	4b3d      	ldr	r3, [pc, #244]	; (8002974 <HAL_RCC_OscConfig+0x26c>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	695b      	ldr	r3, [r3, #20]
 800288a:	00db      	lsls	r3, r3, #3
 800288c:	4939      	ldr	r1, [pc, #228]	; (8002974 <HAL_RCC_OscConfig+0x26c>)
 800288e:	4313      	orrs	r3, r2
 8002890:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002892:	e03a      	b.n	800290a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	691b      	ldr	r3, [r3, #16]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d020      	beq.n	80028de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800289c:	4b36      	ldr	r3, [pc, #216]	; (8002978 <HAL_RCC_OscConfig+0x270>)
 800289e:	2201      	movs	r2, #1
 80028a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a2:	f7ff fc97 	bl	80021d4 <HAL_GetTick>
 80028a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028a8:	e008      	b.n	80028bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028aa:	f7ff fc93 	bl	80021d4 <HAL_GetTick>
 80028ae:	4602      	mov	r2, r0
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d901      	bls.n	80028bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80028b8:	2303      	movs	r3, #3
 80028ba:	e19b      	b.n	8002bf4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028bc:	4b2d      	ldr	r3, [pc, #180]	; (8002974 <HAL_RCC_OscConfig+0x26c>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0302 	and.w	r3, r3, #2
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d0f0      	beq.n	80028aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028c8:	4b2a      	ldr	r3, [pc, #168]	; (8002974 <HAL_RCC_OscConfig+0x26c>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	695b      	ldr	r3, [r3, #20]
 80028d4:	00db      	lsls	r3, r3, #3
 80028d6:	4927      	ldr	r1, [pc, #156]	; (8002974 <HAL_RCC_OscConfig+0x26c>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	600b      	str	r3, [r1, #0]
 80028dc:	e015      	b.n	800290a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028de:	4b26      	ldr	r3, [pc, #152]	; (8002978 <HAL_RCC_OscConfig+0x270>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e4:	f7ff fc76 	bl	80021d4 <HAL_GetTick>
 80028e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028ea:	e008      	b.n	80028fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028ec:	f7ff fc72 	bl	80021d4 <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d901      	bls.n	80028fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e17a      	b.n	8002bf4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028fe:	4b1d      	ldr	r3, [pc, #116]	; (8002974 <HAL_RCC_OscConfig+0x26c>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0302 	and.w	r3, r3, #2
 8002906:	2b00      	cmp	r3, #0
 8002908:	d1f0      	bne.n	80028ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0308 	and.w	r3, r3, #8
 8002912:	2b00      	cmp	r3, #0
 8002914:	d03a      	beq.n	800298c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	699b      	ldr	r3, [r3, #24]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d019      	beq.n	8002952 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800291e:	4b17      	ldr	r3, [pc, #92]	; (800297c <HAL_RCC_OscConfig+0x274>)
 8002920:	2201      	movs	r2, #1
 8002922:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002924:	f7ff fc56 	bl	80021d4 <HAL_GetTick>
 8002928:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800292a:	e008      	b.n	800293e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800292c:	f7ff fc52 	bl	80021d4 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b02      	cmp	r3, #2
 8002938:	d901      	bls.n	800293e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e15a      	b.n	8002bf4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800293e:	4b0d      	ldr	r3, [pc, #52]	; (8002974 <HAL_RCC_OscConfig+0x26c>)
 8002940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002942:	f003 0302 	and.w	r3, r3, #2
 8002946:	2b00      	cmp	r3, #0
 8002948:	d0f0      	beq.n	800292c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800294a:	2001      	movs	r0, #1
 800294c:	f000 fada 	bl	8002f04 <RCC_Delay>
 8002950:	e01c      	b.n	800298c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002952:	4b0a      	ldr	r3, [pc, #40]	; (800297c <HAL_RCC_OscConfig+0x274>)
 8002954:	2200      	movs	r2, #0
 8002956:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002958:	f7ff fc3c 	bl	80021d4 <HAL_GetTick>
 800295c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800295e:	e00f      	b.n	8002980 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002960:	f7ff fc38 	bl	80021d4 <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	2b02      	cmp	r3, #2
 800296c:	d908      	bls.n	8002980 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e140      	b.n	8002bf4 <HAL_RCC_OscConfig+0x4ec>
 8002972:	bf00      	nop
 8002974:	40021000 	.word	0x40021000
 8002978:	42420000 	.word	0x42420000
 800297c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002980:	4b9e      	ldr	r3, [pc, #632]	; (8002bfc <HAL_RCC_OscConfig+0x4f4>)
 8002982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002984:	f003 0302 	and.w	r3, r3, #2
 8002988:	2b00      	cmp	r3, #0
 800298a:	d1e9      	bne.n	8002960 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0304 	and.w	r3, r3, #4
 8002994:	2b00      	cmp	r3, #0
 8002996:	f000 80a6 	beq.w	8002ae6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800299a:	2300      	movs	r3, #0
 800299c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800299e:	4b97      	ldr	r3, [pc, #604]	; (8002bfc <HAL_RCC_OscConfig+0x4f4>)
 80029a0:	69db      	ldr	r3, [r3, #28]
 80029a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d10d      	bne.n	80029c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029aa:	4b94      	ldr	r3, [pc, #592]	; (8002bfc <HAL_RCC_OscConfig+0x4f4>)
 80029ac:	69db      	ldr	r3, [r3, #28]
 80029ae:	4a93      	ldr	r2, [pc, #588]	; (8002bfc <HAL_RCC_OscConfig+0x4f4>)
 80029b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029b4:	61d3      	str	r3, [r2, #28]
 80029b6:	4b91      	ldr	r3, [pc, #580]	; (8002bfc <HAL_RCC_OscConfig+0x4f4>)
 80029b8:	69db      	ldr	r3, [r3, #28]
 80029ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029be:	60bb      	str	r3, [r7, #8]
 80029c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029c2:	2301      	movs	r3, #1
 80029c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029c6:	4b8e      	ldr	r3, [pc, #568]	; (8002c00 <HAL_RCC_OscConfig+0x4f8>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d118      	bne.n	8002a04 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029d2:	4b8b      	ldr	r3, [pc, #556]	; (8002c00 <HAL_RCC_OscConfig+0x4f8>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a8a      	ldr	r2, [pc, #552]	; (8002c00 <HAL_RCC_OscConfig+0x4f8>)
 80029d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029de:	f7ff fbf9 	bl	80021d4 <HAL_GetTick>
 80029e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029e4:	e008      	b.n	80029f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029e6:	f7ff fbf5 	bl	80021d4 <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	2b64      	cmp	r3, #100	; 0x64
 80029f2:	d901      	bls.n	80029f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e0fd      	b.n	8002bf4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029f8:	4b81      	ldr	r3, [pc, #516]	; (8002c00 <HAL_RCC_OscConfig+0x4f8>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d0f0      	beq.n	80029e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d106      	bne.n	8002a1a <HAL_RCC_OscConfig+0x312>
 8002a0c:	4b7b      	ldr	r3, [pc, #492]	; (8002bfc <HAL_RCC_OscConfig+0x4f4>)
 8002a0e:	6a1b      	ldr	r3, [r3, #32]
 8002a10:	4a7a      	ldr	r2, [pc, #488]	; (8002bfc <HAL_RCC_OscConfig+0x4f4>)
 8002a12:	f043 0301 	orr.w	r3, r3, #1
 8002a16:	6213      	str	r3, [r2, #32]
 8002a18:	e02d      	b.n	8002a76 <HAL_RCC_OscConfig+0x36e>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d10c      	bne.n	8002a3c <HAL_RCC_OscConfig+0x334>
 8002a22:	4b76      	ldr	r3, [pc, #472]	; (8002bfc <HAL_RCC_OscConfig+0x4f4>)
 8002a24:	6a1b      	ldr	r3, [r3, #32]
 8002a26:	4a75      	ldr	r2, [pc, #468]	; (8002bfc <HAL_RCC_OscConfig+0x4f4>)
 8002a28:	f023 0301 	bic.w	r3, r3, #1
 8002a2c:	6213      	str	r3, [r2, #32]
 8002a2e:	4b73      	ldr	r3, [pc, #460]	; (8002bfc <HAL_RCC_OscConfig+0x4f4>)
 8002a30:	6a1b      	ldr	r3, [r3, #32]
 8002a32:	4a72      	ldr	r2, [pc, #456]	; (8002bfc <HAL_RCC_OscConfig+0x4f4>)
 8002a34:	f023 0304 	bic.w	r3, r3, #4
 8002a38:	6213      	str	r3, [r2, #32]
 8002a3a:	e01c      	b.n	8002a76 <HAL_RCC_OscConfig+0x36e>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	2b05      	cmp	r3, #5
 8002a42:	d10c      	bne.n	8002a5e <HAL_RCC_OscConfig+0x356>
 8002a44:	4b6d      	ldr	r3, [pc, #436]	; (8002bfc <HAL_RCC_OscConfig+0x4f4>)
 8002a46:	6a1b      	ldr	r3, [r3, #32]
 8002a48:	4a6c      	ldr	r2, [pc, #432]	; (8002bfc <HAL_RCC_OscConfig+0x4f4>)
 8002a4a:	f043 0304 	orr.w	r3, r3, #4
 8002a4e:	6213      	str	r3, [r2, #32]
 8002a50:	4b6a      	ldr	r3, [pc, #424]	; (8002bfc <HAL_RCC_OscConfig+0x4f4>)
 8002a52:	6a1b      	ldr	r3, [r3, #32]
 8002a54:	4a69      	ldr	r2, [pc, #420]	; (8002bfc <HAL_RCC_OscConfig+0x4f4>)
 8002a56:	f043 0301 	orr.w	r3, r3, #1
 8002a5a:	6213      	str	r3, [r2, #32]
 8002a5c:	e00b      	b.n	8002a76 <HAL_RCC_OscConfig+0x36e>
 8002a5e:	4b67      	ldr	r3, [pc, #412]	; (8002bfc <HAL_RCC_OscConfig+0x4f4>)
 8002a60:	6a1b      	ldr	r3, [r3, #32]
 8002a62:	4a66      	ldr	r2, [pc, #408]	; (8002bfc <HAL_RCC_OscConfig+0x4f4>)
 8002a64:	f023 0301 	bic.w	r3, r3, #1
 8002a68:	6213      	str	r3, [r2, #32]
 8002a6a:	4b64      	ldr	r3, [pc, #400]	; (8002bfc <HAL_RCC_OscConfig+0x4f4>)
 8002a6c:	6a1b      	ldr	r3, [r3, #32]
 8002a6e:	4a63      	ldr	r2, [pc, #396]	; (8002bfc <HAL_RCC_OscConfig+0x4f4>)
 8002a70:	f023 0304 	bic.w	r3, r3, #4
 8002a74:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d015      	beq.n	8002aaa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a7e:	f7ff fba9 	bl	80021d4 <HAL_GetTick>
 8002a82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a84:	e00a      	b.n	8002a9c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a86:	f7ff fba5 	bl	80021d4 <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d901      	bls.n	8002a9c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	e0ab      	b.n	8002bf4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a9c:	4b57      	ldr	r3, [pc, #348]	; (8002bfc <HAL_RCC_OscConfig+0x4f4>)
 8002a9e:	6a1b      	ldr	r3, [r3, #32]
 8002aa0:	f003 0302 	and.w	r3, r3, #2
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d0ee      	beq.n	8002a86 <HAL_RCC_OscConfig+0x37e>
 8002aa8:	e014      	b.n	8002ad4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aaa:	f7ff fb93 	bl	80021d4 <HAL_GetTick>
 8002aae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ab0:	e00a      	b.n	8002ac8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ab2:	f7ff fb8f 	bl	80021d4 <HAL_GetTick>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d901      	bls.n	8002ac8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e095      	b.n	8002bf4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ac8:	4b4c      	ldr	r3, [pc, #304]	; (8002bfc <HAL_RCC_OscConfig+0x4f4>)
 8002aca:	6a1b      	ldr	r3, [r3, #32]
 8002acc:	f003 0302 	and.w	r3, r3, #2
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d1ee      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ad4:	7dfb      	ldrb	r3, [r7, #23]
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d105      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ada:	4b48      	ldr	r3, [pc, #288]	; (8002bfc <HAL_RCC_OscConfig+0x4f4>)
 8002adc:	69db      	ldr	r3, [r3, #28]
 8002ade:	4a47      	ldr	r2, [pc, #284]	; (8002bfc <HAL_RCC_OscConfig+0x4f4>)
 8002ae0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ae4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	69db      	ldr	r3, [r3, #28]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	f000 8081 	beq.w	8002bf2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002af0:	4b42      	ldr	r3, [pc, #264]	; (8002bfc <HAL_RCC_OscConfig+0x4f4>)
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f003 030c 	and.w	r3, r3, #12
 8002af8:	2b08      	cmp	r3, #8
 8002afa:	d061      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	69db      	ldr	r3, [r3, #28]
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d146      	bne.n	8002b92 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b04:	4b3f      	ldr	r3, [pc, #252]	; (8002c04 <HAL_RCC_OscConfig+0x4fc>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b0a:	f7ff fb63 	bl	80021d4 <HAL_GetTick>
 8002b0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b10:	e008      	b.n	8002b24 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b12:	f7ff fb5f 	bl	80021d4 <HAL_GetTick>
 8002b16:	4602      	mov	r2, r0
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	d901      	bls.n	8002b24 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002b20:	2303      	movs	r3, #3
 8002b22:	e067      	b.n	8002bf4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b24:	4b35      	ldr	r3, [pc, #212]	; (8002bfc <HAL_RCC_OscConfig+0x4f4>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d1f0      	bne.n	8002b12 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6a1b      	ldr	r3, [r3, #32]
 8002b34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b38:	d108      	bne.n	8002b4c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b3a:	4b30      	ldr	r3, [pc, #192]	; (8002bfc <HAL_RCC_OscConfig+0x4f4>)
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	492d      	ldr	r1, [pc, #180]	; (8002bfc <HAL_RCC_OscConfig+0x4f4>)
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b4c:	4b2b      	ldr	r3, [pc, #172]	; (8002bfc <HAL_RCC_OscConfig+0x4f4>)
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6a19      	ldr	r1, [r3, #32]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5c:	430b      	orrs	r3, r1
 8002b5e:	4927      	ldr	r1, [pc, #156]	; (8002bfc <HAL_RCC_OscConfig+0x4f4>)
 8002b60:	4313      	orrs	r3, r2
 8002b62:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b64:	4b27      	ldr	r3, [pc, #156]	; (8002c04 <HAL_RCC_OscConfig+0x4fc>)
 8002b66:	2201      	movs	r2, #1
 8002b68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b6a:	f7ff fb33 	bl	80021d4 <HAL_GetTick>
 8002b6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b70:	e008      	b.n	8002b84 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b72:	f7ff fb2f 	bl	80021d4 <HAL_GetTick>
 8002b76:	4602      	mov	r2, r0
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d901      	bls.n	8002b84 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e037      	b.n	8002bf4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b84:	4b1d      	ldr	r3, [pc, #116]	; (8002bfc <HAL_RCC_OscConfig+0x4f4>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d0f0      	beq.n	8002b72 <HAL_RCC_OscConfig+0x46a>
 8002b90:	e02f      	b.n	8002bf2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b92:	4b1c      	ldr	r3, [pc, #112]	; (8002c04 <HAL_RCC_OscConfig+0x4fc>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b98:	f7ff fb1c 	bl	80021d4 <HAL_GetTick>
 8002b9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b9e:	e008      	b.n	8002bb2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ba0:	f7ff fb18 	bl	80021d4 <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e020      	b.n	8002bf4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bb2:	4b12      	ldr	r3, [pc, #72]	; (8002bfc <HAL_RCC_OscConfig+0x4f4>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d1f0      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x498>
 8002bbe:	e018      	b.n	8002bf2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	69db      	ldr	r3, [r3, #28]
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d101      	bne.n	8002bcc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e013      	b.n	8002bf4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002bcc:	4b0b      	ldr	r3, [pc, #44]	; (8002bfc <HAL_RCC_OscConfig+0x4f4>)
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6a1b      	ldr	r3, [r3, #32]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d106      	bne.n	8002bee <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d001      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e000      	b.n	8002bf4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002bf2:	2300      	movs	r3, #0
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3718      	adds	r7, #24
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	40021000 	.word	0x40021000
 8002c00:	40007000 	.word	0x40007000
 8002c04:	42420060 	.word	0x42420060

08002c08 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d101      	bne.n	8002c1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e0d0      	b.n	8002dbe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c1c:	4b6a      	ldr	r3, [pc, #424]	; (8002dc8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0307 	and.w	r3, r3, #7
 8002c24:	683a      	ldr	r2, [r7, #0]
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d910      	bls.n	8002c4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c2a:	4b67      	ldr	r3, [pc, #412]	; (8002dc8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f023 0207 	bic.w	r2, r3, #7
 8002c32:	4965      	ldr	r1, [pc, #404]	; (8002dc8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c3a:	4b63      	ldr	r3, [pc, #396]	; (8002dc8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0307 	and.w	r3, r3, #7
 8002c42:	683a      	ldr	r2, [r7, #0]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d001      	beq.n	8002c4c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e0b8      	b.n	8002dbe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0302 	and.w	r3, r3, #2
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d020      	beq.n	8002c9a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0304 	and.w	r3, r3, #4
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d005      	beq.n	8002c70 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c64:	4b59      	ldr	r3, [pc, #356]	; (8002dcc <HAL_RCC_ClockConfig+0x1c4>)
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	4a58      	ldr	r2, [pc, #352]	; (8002dcc <HAL_RCC_ClockConfig+0x1c4>)
 8002c6a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002c6e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0308 	and.w	r3, r3, #8
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d005      	beq.n	8002c88 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c7c:	4b53      	ldr	r3, [pc, #332]	; (8002dcc <HAL_RCC_ClockConfig+0x1c4>)
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	4a52      	ldr	r2, [pc, #328]	; (8002dcc <HAL_RCC_ClockConfig+0x1c4>)
 8002c82:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002c86:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c88:	4b50      	ldr	r3, [pc, #320]	; (8002dcc <HAL_RCC_ClockConfig+0x1c4>)
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	494d      	ldr	r1, [pc, #308]	; (8002dcc <HAL_RCC_ClockConfig+0x1c4>)
 8002c96:	4313      	orrs	r3, r2
 8002c98:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0301 	and.w	r3, r3, #1
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d040      	beq.n	8002d28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d107      	bne.n	8002cbe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cae:	4b47      	ldr	r3, [pc, #284]	; (8002dcc <HAL_RCC_ClockConfig+0x1c4>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d115      	bne.n	8002ce6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e07f      	b.n	8002dbe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d107      	bne.n	8002cd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cc6:	4b41      	ldr	r3, [pc, #260]	; (8002dcc <HAL_RCC_ClockConfig+0x1c4>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d109      	bne.n	8002ce6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e073      	b.n	8002dbe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cd6:	4b3d      	ldr	r3, [pc, #244]	; (8002dcc <HAL_RCC_ClockConfig+0x1c4>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d101      	bne.n	8002ce6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e06b      	b.n	8002dbe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ce6:	4b39      	ldr	r3, [pc, #228]	; (8002dcc <HAL_RCC_ClockConfig+0x1c4>)
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f023 0203 	bic.w	r2, r3, #3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	4936      	ldr	r1, [pc, #216]	; (8002dcc <HAL_RCC_ClockConfig+0x1c4>)
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cf8:	f7ff fa6c 	bl	80021d4 <HAL_GetTick>
 8002cfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cfe:	e00a      	b.n	8002d16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d00:	f7ff fa68 	bl	80021d4 <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d901      	bls.n	8002d16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e053      	b.n	8002dbe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d16:	4b2d      	ldr	r3, [pc, #180]	; (8002dcc <HAL_RCC_ClockConfig+0x1c4>)
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f003 020c 	and.w	r2, r3, #12
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d1eb      	bne.n	8002d00 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d28:	4b27      	ldr	r3, [pc, #156]	; (8002dc8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0307 	and.w	r3, r3, #7
 8002d30:	683a      	ldr	r2, [r7, #0]
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d210      	bcs.n	8002d58 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d36:	4b24      	ldr	r3, [pc, #144]	; (8002dc8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f023 0207 	bic.w	r2, r3, #7
 8002d3e:	4922      	ldr	r1, [pc, #136]	; (8002dc8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d46:	4b20      	ldr	r3, [pc, #128]	; (8002dc8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0307 	and.w	r3, r3, #7
 8002d4e:	683a      	ldr	r2, [r7, #0]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d001      	beq.n	8002d58 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e032      	b.n	8002dbe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0304 	and.w	r3, r3, #4
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d008      	beq.n	8002d76 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d64:	4b19      	ldr	r3, [pc, #100]	; (8002dcc <HAL_RCC_ClockConfig+0x1c4>)
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	4916      	ldr	r1, [pc, #88]	; (8002dcc <HAL_RCC_ClockConfig+0x1c4>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0308 	and.w	r3, r3, #8
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d009      	beq.n	8002d96 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d82:	4b12      	ldr	r3, [pc, #72]	; (8002dcc <HAL_RCC_ClockConfig+0x1c4>)
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	00db      	lsls	r3, r3, #3
 8002d90:	490e      	ldr	r1, [pc, #56]	; (8002dcc <HAL_RCC_ClockConfig+0x1c4>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d96:	f000 f821 	bl	8002ddc <HAL_RCC_GetSysClockFreq>
 8002d9a:	4601      	mov	r1, r0
 8002d9c:	4b0b      	ldr	r3, [pc, #44]	; (8002dcc <HAL_RCC_ClockConfig+0x1c4>)
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	091b      	lsrs	r3, r3, #4
 8002da2:	f003 030f 	and.w	r3, r3, #15
 8002da6:	4a0a      	ldr	r2, [pc, #40]	; (8002dd0 <HAL_RCC_ClockConfig+0x1c8>)
 8002da8:	5cd3      	ldrb	r3, [r2, r3]
 8002daa:	fa21 f303 	lsr.w	r3, r1, r3
 8002dae:	4a09      	ldr	r2, [pc, #36]	; (8002dd4 <HAL_RCC_ClockConfig+0x1cc>)
 8002db0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002db2:	4b09      	ldr	r3, [pc, #36]	; (8002dd8 <HAL_RCC_ClockConfig+0x1d0>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4618      	mov	r0, r3
 8002db8:	f7ff f9ca 	bl	8002150 <HAL_InitTick>

  return HAL_OK;
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3710      	adds	r7, #16
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	40022000 	.word	0x40022000
 8002dcc:	40021000 	.word	0x40021000
 8002dd0:	08005238 	.word	0x08005238
 8002dd4:	2000000c 	.word	0x2000000c
 8002dd8:	20000010 	.word	0x20000010

08002ddc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ddc:	b490      	push	{r4, r7}
 8002dde:	b08a      	sub	sp, #40	; 0x28
 8002de0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002de2:	4b2a      	ldr	r3, [pc, #168]	; (8002e8c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002de4:	1d3c      	adds	r4, r7, #4
 8002de6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002de8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002dec:	4b28      	ldr	r3, [pc, #160]	; (8002e90 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002dee:	881b      	ldrh	r3, [r3, #0]
 8002df0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002df2:	2300      	movs	r3, #0
 8002df4:	61fb      	str	r3, [r7, #28]
 8002df6:	2300      	movs	r3, #0
 8002df8:	61bb      	str	r3, [r7, #24]
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	627b      	str	r3, [r7, #36]	; 0x24
 8002dfe:	2300      	movs	r3, #0
 8002e00:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002e02:	2300      	movs	r3, #0
 8002e04:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002e06:	4b23      	ldr	r3, [pc, #140]	; (8002e94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	f003 030c 	and.w	r3, r3, #12
 8002e12:	2b04      	cmp	r3, #4
 8002e14:	d002      	beq.n	8002e1c <HAL_RCC_GetSysClockFreq+0x40>
 8002e16:	2b08      	cmp	r3, #8
 8002e18:	d003      	beq.n	8002e22 <HAL_RCC_GetSysClockFreq+0x46>
 8002e1a:	e02d      	b.n	8002e78 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e1c:	4b1e      	ldr	r3, [pc, #120]	; (8002e98 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002e1e:	623b      	str	r3, [r7, #32]
      break;
 8002e20:	e02d      	b.n	8002e7e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	0c9b      	lsrs	r3, r3, #18
 8002e26:	f003 030f 	and.w	r3, r3, #15
 8002e2a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002e2e:	4413      	add	r3, r2
 8002e30:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002e34:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d013      	beq.n	8002e68 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002e40:	4b14      	ldr	r3, [pc, #80]	; (8002e94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	0c5b      	lsrs	r3, r3, #17
 8002e46:	f003 0301 	and.w	r3, r3, #1
 8002e4a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002e4e:	4413      	add	r3, r2
 8002e50:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002e54:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	4a0f      	ldr	r2, [pc, #60]	; (8002e98 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002e5a:	fb02 f203 	mul.w	r2, r2, r3
 8002e5e:	69bb      	ldr	r3, [r7, #24]
 8002e60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e64:	627b      	str	r3, [r7, #36]	; 0x24
 8002e66:	e004      	b.n	8002e72 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	4a0c      	ldr	r2, [pc, #48]	; (8002e9c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002e6c:	fb02 f303 	mul.w	r3, r2, r3
 8002e70:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e74:	623b      	str	r3, [r7, #32]
      break;
 8002e76:	e002      	b.n	8002e7e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e78:	4b07      	ldr	r3, [pc, #28]	; (8002e98 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002e7a:	623b      	str	r3, [r7, #32]
      break;
 8002e7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e7e:	6a3b      	ldr	r3, [r7, #32]
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3728      	adds	r7, #40	; 0x28
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bc90      	pop	{r4, r7}
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	08005044 	.word	0x08005044
 8002e90:	08005054 	.word	0x08005054
 8002e94:	40021000 	.word	0x40021000
 8002e98:	007a1200 	.word	0x007a1200
 8002e9c:	003d0900 	.word	0x003d0900

08002ea0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ea4:	4b02      	ldr	r3, [pc, #8]	; (8002eb0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bc80      	pop	{r7}
 8002eae:	4770      	bx	lr
 8002eb0:	2000000c 	.word	0x2000000c

08002eb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002eb8:	f7ff fff2 	bl	8002ea0 <HAL_RCC_GetHCLKFreq>
 8002ebc:	4601      	mov	r1, r0
 8002ebe:	4b05      	ldr	r3, [pc, #20]	; (8002ed4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	0a1b      	lsrs	r3, r3, #8
 8002ec4:	f003 0307 	and.w	r3, r3, #7
 8002ec8:	4a03      	ldr	r2, [pc, #12]	; (8002ed8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002eca:	5cd3      	ldrb	r3, [r2, r3]
 8002ecc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	40021000 	.word	0x40021000
 8002ed8:	08005248 	.word	0x08005248

08002edc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ee0:	f7ff ffde 	bl	8002ea0 <HAL_RCC_GetHCLKFreq>
 8002ee4:	4601      	mov	r1, r0
 8002ee6:	4b05      	ldr	r3, [pc, #20]	; (8002efc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	0adb      	lsrs	r3, r3, #11
 8002eec:	f003 0307 	and.w	r3, r3, #7
 8002ef0:	4a03      	ldr	r2, [pc, #12]	; (8002f00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ef2:	5cd3      	ldrb	r3, [r2, r3]
 8002ef4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	40021000 	.word	0x40021000
 8002f00:	08005248 	.word	0x08005248

08002f04 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b085      	sub	sp, #20
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002f0c:	4b0a      	ldr	r3, [pc, #40]	; (8002f38 <RCC_Delay+0x34>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a0a      	ldr	r2, [pc, #40]	; (8002f3c <RCC_Delay+0x38>)
 8002f12:	fba2 2303 	umull	r2, r3, r2, r3
 8002f16:	0a5b      	lsrs	r3, r3, #9
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	fb02 f303 	mul.w	r3, r2, r3
 8002f1e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002f20:	bf00      	nop
  }
  while (Delay --);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	1e5a      	subs	r2, r3, #1
 8002f26:	60fa      	str	r2, [r7, #12]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d1f9      	bne.n	8002f20 <RCC_Delay+0x1c>
}
 8002f2c:	bf00      	nop
 8002f2e:	3714      	adds	r7, #20
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bc80      	pop	{r7}
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop
 8002f38:	2000000c 	.word	0x2000000c
 8002f3c:	10624dd3 	.word	0x10624dd3

08002f40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d101      	bne.n	8002f52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e01d      	b.n	8002f8e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d106      	bne.n	8002f6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f7fe ff10 	bl	8001d8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2202      	movs	r2, #2
 8002f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	3304      	adds	r3, #4
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	4610      	mov	r0, r2
 8002f80:	f000 fa10 	bl	80033a4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3708      	adds	r7, #8
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002f96:	b480      	push	{r7}
 8002f98:	b085      	sub	sp, #20
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2202      	movs	r2, #2
 8002fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	f003 0307 	and.w	r3, r3, #7
 8002fb0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2b06      	cmp	r3, #6
 8002fb6:	d007      	beq.n	8002fc8 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f042 0201 	orr.w	r2, r2, #1
 8002fc6:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002fd0:	2300      	movs	r3, #0
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3714      	adds	r7, #20
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bc80      	pop	{r7}
 8002fda:	4770      	bx	lr

08002fdc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d101      	bne.n	8002fee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e01d      	b.n	800302a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d106      	bne.n	8003008 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f000 f815 	bl	8003032 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2202      	movs	r2, #2
 800300c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	3304      	adds	r3, #4
 8003018:	4619      	mov	r1, r3
 800301a:	4610      	mov	r0, r2
 800301c:	f000 f9c2 	bl	80033a4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003028:	2300      	movs	r3, #0
}
 800302a:	4618      	mov	r0, r3
 800302c:	3708      	adds	r7, #8
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}

08003032 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003032:	b480      	push	{r7}
 8003034:	b083      	sub	sp, #12
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800303a:	bf00      	nop
 800303c:	370c      	adds	r7, #12
 800303e:	46bd      	mov	sp, r7
 8003040:	bc80      	pop	{r7}
 8003042:	4770      	bx	lr

08003044 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	2201      	movs	r2, #1
 8003054:	6839      	ldr	r1, [r7, #0]
 8003056:	4618      	mov	r0, r3
 8003058:	f000 fc24 	bl	80038a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a10      	ldr	r2, [pc, #64]	; (80030a4 <HAL_TIM_PWM_Start+0x60>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d107      	bne.n	8003076 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003074:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f003 0307 	and.w	r3, r3, #7
 8003080:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2b06      	cmp	r3, #6
 8003086:	d007      	beq.n	8003098 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f042 0201 	orr.w	r2, r2, #1
 8003096:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003098:	2300      	movs	r3, #0
}
 800309a:	4618      	mov	r0, r3
 800309c:	3710      	adds	r7, #16
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	40012c00 	.word	0x40012c00

080030a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	60f8      	str	r0, [r7, #12]
 80030b0:	60b9      	str	r1, [r7, #8]
 80030b2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d101      	bne.n	80030c2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80030be:	2302      	movs	r3, #2
 80030c0:	e0b4      	b.n	800322c <HAL_TIM_PWM_ConfigChannel+0x184>
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2201      	movs	r2, #1
 80030c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2202      	movs	r2, #2
 80030ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2b0c      	cmp	r3, #12
 80030d6:	f200 809f 	bhi.w	8003218 <HAL_TIM_PWM_ConfigChannel+0x170>
 80030da:	a201      	add	r2, pc, #4	; (adr r2, 80030e0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80030dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030e0:	08003115 	.word	0x08003115
 80030e4:	08003219 	.word	0x08003219
 80030e8:	08003219 	.word	0x08003219
 80030ec:	08003219 	.word	0x08003219
 80030f0:	08003155 	.word	0x08003155
 80030f4:	08003219 	.word	0x08003219
 80030f8:	08003219 	.word	0x08003219
 80030fc:	08003219 	.word	0x08003219
 8003100:	08003197 	.word	0x08003197
 8003104:	08003219 	.word	0x08003219
 8003108:	08003219 	.word	0x08003219
 800310c:	08003219 	.word	0x08003219
 8003110:	080031d7 	.word	0x080031d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	68b9      	ldr	r1, [r7, #8]
 800311a:	4618      	mov	r0, r3
 800311c:	f000 f9a4 	bl	8003468 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	699a      	ldr	r2, [r3, #24]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f042 0208 	orr.w	r2, r2, #8
 800312e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	699a      	ldr	r2, [r3, #24]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f022 0204 	bic.w	r2, r2, #4
 800313e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	6999      	ldr	r1, [r3, #24]
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	691a      	ldr	r2, [r3, #16]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	430a      	orrs	r2, r1
 8003150:	619a      	str	r2, [r3, #24]
      break;
 8003152:	e062      	b.n	800321a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	68b9      	ldr	r1, [r7, #8]
 800315a:	4618      	mov	r0, r3
 800315c:	f000 f9ea 	bl	8003534 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	699a      	ldr	r2, [r3, #24]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800316e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	699a      	ldr	r2, [r3, #24]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800317e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	6999      	ldr	r1, [r3, #24]
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	691b      	ldr	r3, [r3, #16]
 800318a:	021a      	lsls	r2, r3, #8
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	430a      	orrs	r2, r1
 8003192:	619a      	str	r2, [r3, #24]
      break;
 8003194:	e041      	b.n	800321a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	68b9      	ldr	r1, [r7, #8]
 800319c:	4618      	mov	r0, r3
 800319e:	f000 fa33 	bl	8003608 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	69da      	ldr	r2, [r3, #28]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f042 0208 	orr.w	r2, r2, #8
 80031b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	69da      	ldr	r2, [r3, #28]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f022 0204 	bic.w	r2, r2, #4
 80031c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	69d9      	ldr	r1, [r3, #28]
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	691a      	ldr	r2, [r3, #16]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	430a      	orrs	r2, r1
 80031d2:	61da      	str	r2, [r3, #28]
      break;
 80031d4:	e021      	b.n	800321a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	68b9      	ldr	r1, [r7, #8]
 80031dc:	4618      	mov	r0, r3
 80031de:	f000 fa7d 	bl	80036dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	69da      	ldr	r2, [r3, #28]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	69da      	ldr	r2, [r3, #28]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003200:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	69d9      	ldr	r1, [r3, #28]
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	691b      	ldr	r3, [r3, #16]
 800320c:	021a      	lsls	r2, r3, #8
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	430a      	orrs	r2, r1
 8003214:	61da      	str	r2, [r3, #28]
      break;
 8003216:	e000      	b.n	800321a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003218:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2201      	movs	r2, #1
 800321e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2200      	movs	r2, #0
 8003226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800322a:	2300      	movs	r3, #0
}
 800322c:	4618      	mov	r0, r3
 800322e:	3710      	adds	r7, #16
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b084      	sub	sp, #16
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003244:	2b01      	cmp	r3, #1
 8003246:	d101      	bne.n	800324c <HAL_TIM_ConfigClockSource+0x18>
 8003248:	2302      	movs	r3, #2
 800324a:	e0a6      	b.n	800339a <HAL_TIM_ConfigClockSource+0x166>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2202      	movs	r2, #2
 8003258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800326a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003272:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	68fa      	ldr	r2, [r7, #12]
 800327a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2b40      	cmp	r3, #64	; 0x40
 8003282:	d067      	beq.n	8003354 <HAL_TIM_ConfigClockSource+0x120>
 8003284:	2b40      	cmp	r3, #64	; 0x40
 8003286:	d80b      	bhi.n	80032a0 <HAL_TIM_ConfigClockSource+0x6c>
 8003288:	2b10      	cmp	r3, #16
 800328a:	d073      	beq.n	8003374 <HAL_TIM_ConfigClockSource+0x140>
 800328c:	2b10      	cmp	r3, #16
 800328e:	d802      	bhi.n	8003296 <HAL_TIM_ConfigClockSource+0x62>
 8003290:	2b00      	cmp	r3, #0
 8003292:	d06f      	beq.n	8003374 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003294:	e078      	b.n	8003388 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003296:	2b20      	cmp	r3, #32
 8003298:	d06c      	beq.n	8003374 <HAL_TIM_ConfigClockSource+0x140>
 800329a:	2b30      	cmp	r3, #48	; 0x30
 800329c:	d06a      	beq.n	8003374 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800329e:	e073      	b.n	8003388 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80032a0:	2b70      	cmp	r3, #112	; 0x70
 80032a2:	d00d      	beq.n	80032c0 <HAL_TIM_ConfigClockSource+0x8c>
 80032a4:	2b70      	cmp	r3, #112	; 0x70
 80032a6:	d804      	bhi.n	80032b2 <HAL_TIM_ConfigClockSource+0x7e>
 80032a8:	2b50      	cmp	r3, #80	; 0x50
 80032aa:	d033      	beq.n	8003314 <HAL_TIM_ConfigClockSource+0xe0>
 80032ac:	2b60      	cmp	r3, #96	; 0x60
 80032ae:	d041      	beq.n	8003334 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80032b0:	e06a      	b.n	8003388 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80032b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032b6:	d066      	beq.n	8003386 <HAL_TIM_ConfigClockSource+0x152>
 80032b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032bc:	d017      	beq.n	80032ee <HAL_TIM_ConfigClockSource+0xba>
      break;
 80032be:	e063      	b.n	8003388 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6818      	ldr	r0, [r3, #0]
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	6899      	ldr	r1, [r3, #8]
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	685a      	ldr	r2, [r3, #4]
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	f000 fac9 	bl	8003866 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80032e2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	68fa      	ldr	r2, [r7, #12]
 80032ea:	609a      	str	r2, [r3, #8]
      break;
 80032ec:	e04c      	b.n	8003388 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6818      	ldr	r0, [r3, #0]
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	6899      	ldr	r1, [r3, #8]
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	685a      	ldr	r2, [r3, #4]
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	f000 fab2 	bl	8003866 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	689a      	ldr	r2, [r3, #8]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003310:	609a      	str	r2, [r3, #8]
      break;
 8003312:	e039      	b.n	8003388 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6818      	ldr	r0, [r3, #0]
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	6859      	ldr	r1, [r3, #4]
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	461a      	mov	r2, r3
 8003322:	f000 fa29 	bl	8003778 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2150      	movs	r1, #80	; 0x50
 800332c:	4618      	mov	r0, r3
 800332e:	f000 fa80 	bl	8003832 <TIM_ITRx_SetConfig>
      break;
 8003332:	e029      	b.n	8003388 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6818      	ldr	r0, [r3, #0]
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	6859      	ldr	r1, [r3, #4]
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	461a      	mov	r2, r3
 8003342:	f000 fa47 	bl	80037d4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	2160      	movs	r1, #96	; 0x60
 800334c:	4618      	mov	r0, r3
 800334e:	f000 fa70 	bl	8003832 <TIM_ITRx_SetConfig>
      break;
 8003352:	e019      	b.n	8003388 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6818      	ldr	r0, [r3, #0]
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	6859      	ldr	r1, [r3, #4]
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	461a      	mov	r2, r3
 8003362:	f000 fa09 	bl	8003778 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2140      	movs	r1, #64	; 0x40
 800336c:	4618      	mov	r0, r3
 800336e:	f000 fa60 	bl	8003832 <TIM_ITRx_SetConfig>
      break;
 8003372:	e009      	b.n	8003388 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4619      	mov	r1, r3
 800337e:	4610      	mov	r0, r2
 8003380:	f000 fa57 	bl	8003832 <TIM_ITRx_SetConfig>
      break;
 8003384:	e000      	b.n	8003388 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003386:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	3710      	adds	r7, #16
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
	...

080033a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b085      	sub	sp, #20
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	4a29      	ldr	r2, [pc, #164]	; (800345c <TIM_Base_SetConfig+0xb8>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d00b      	beq.n	80033d4 <TIM_Base_SetConfig+0x30>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033c2:	d007      	beq.n	80033d4 <TIM_Base_SetConfig+0x30>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	4a26      	ldr	r2, [pc, #152]	; (8003460 <TIM_Base_SetConfig+0xbc>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d003      	beq.n	80033d4 <TIM_Base_SetConfig+0x30>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	4a25      	ldr	r2, [pc, #148]	; (8003464 <TIM_Base_SetConfig+0xc0>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d108      	bne.n	80033e6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	68fa      	ldr	r2, [r7, #12]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a1c      	ldr	r2, [pc, #112]	; (800345c <TIM_Base_SetConfig+0xb8>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d00b      	beq.n	8003406 <TIM_Base_SetConfig+0x62>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033f4:	d007      	beq.n	8003406 <TIM_Base_SetConfig+0x62>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a19      	ldr	r2, [pc, #100]	; (8003460 <TIM_Base_SetConfig+0xbc>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d003      	beq.n	8003406 <TIM_Base_SetConfig+0x62>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a18      	ldr	r2, [pc, #96]	; (8003464 <TIM_Base_SetConfig+0xc0>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d108      	bne.n	8003418 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800340c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	68fa      	ldr	r2, [r7, #12]
 8003414:	4313      	orrs	r3, r2
 8003416:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	695b      	ldr	r3, [r3, #20]
 8003422:	4313      	orrs	r3, r2
 8003424:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	68fa      	ldr	r2, [r7, #12]
 800342a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	689a      	ldr	r2, [r3, #8]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	4a07      	ldr	r2, [pc, #28]	; (800345c <TIM_Base_SetConfig+0xb8>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d103      	bne.n	800344c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	691a      	ldr	r2, [r3, #16]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	615a      	str	r2, [r3, #20]
}
 8003452:	bf00      	nop
 8003454:	3714      	adds	r7, #20
 8003456:	46bd      	mov	sp, r7
 8003458:	bc80      	pop	{r7}
 800345a:	4770      	bx	lr
 800345c:	40012c00 	.word	0x40012c00
 8003460:	40000400 	.word	0x40000400
 8003464:	40000800 	.word	0x40000800

08003468 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003468:	b480      	push	{r7}
 800346a:	b087      	sub	sp, #28
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a1b      	ldr	r3, [r3, #32]
 8003476:	f023 0201 	bic.w	r2, r3, #1
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a1b      	ldr	r3, [r3, #32]
 8003482:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	699b      	ldr	r3, [r3, #24]
 800348e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003496:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f023 0303 	bic.w	r3, r3, #3
 800349e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	68fa      	ldr	r2, [r7, #12]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	f023 0302 	bic.w	r3, r3, #2
 80034b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	697a      	ldr	r2, [r7, #20]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	4a1c      	ldr	r2, [pc, #112]	; (8003530 <TIM_OC1_SetConfig+0xc8>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d10c      	bne.n	80034de <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	f023 0308 	bic.w	r3, r3, #8
 80034ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	697a      	ldr	r2, [r7, #20]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	f023 0304 	bic.w	r3, r3, #4
 80034dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4a13      	ldr	r2, [pc, #76]	; (8003530 <TIM_OC1_SetConfig+0xc8>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d111      	bne.n	800350a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80034f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	695b      	ldr	r3, [r3, #20]
 80034fa:	693a      	ldr	r2, [r7, #16]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	699b      	ldr	r3, [r3, #24]
 8003504:	693a      	ldr	r2, [r7, #16]
 8003506:	4313      	orrs	r3, r2
 8003508:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	693a      	ldr	r2, [r7, #16]
 800350e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	68fa      	ldr	r2, [r7, #12]
 8003514:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	685a      	ldr	r2, [r3, #4]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	697a      	ldr	r2, [r7, #20]
 8003522:	621a      	str	r2, [r3, #32]
}
 8003524:	bf00      	nop
 8003526:	371c      	adds	r7, #28
 8003528:	46bd      	mov	sp, r7
 800352a:	bc80      	pop	{r7}
 800352c:	4770      	bx	lr
 800352e:	bf00      	nop
 8003530:	40012c00 	.word	0x40012c00

08003534 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003534:	b480      	push	{r7}
 8003536:	b087      	sub	sp, #28
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a1b      	ldr	r3, [r3, #32]
 8003542:	f023 0210 	bic.w	r2, r3, #16
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a1b      	ldr	r3, [r3, #32]
 800354e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	699b      	ldr	r3, [r3, #24]
 800355a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003562:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800356a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	021b      	lsls	r3, r3, #8
 8003572:	68fa      	ldr	r2, [r7, #12]
 8003574:	4313      	orrs	r3, r2
 8003576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	f023 0320 	bic.w	r3, r3, #32
 800357e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	011b      	lsls	r3, r3, #4
 8003586:	697a      	ldr	r2, [r7, #20]
 8003588:	4313      	orrs	r3, r2
 800358a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	4a1d      	ldr	r2, [pc, #116]	; (8003604 <TIM_OC2_SetConfig+0xd0>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d10d      	bne.n	80035b0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800359a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	011b      	lsls	r3, r3, #4
 80035a2:	697a      	ldr	r2, [r7, #20]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035ae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	4a14      	ldr	r2, [pc, #80]	; (8003604 <TIM_OC2_SetConfig+0xd0>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d113      	bne.n	80035e0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80035be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80035c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	695b      	ldr	r3, [r3, #20]
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	693a      	ldr	r2, [r7, #16]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	699b      	ldr	r3, [r3, #24]
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	693a      	ldr	r2, [r7, #16]
 80035dc:	4313      	orrs	r3, r2
 80035de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	693a      	ldr	r2, [r7, #16]
 80035e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	68fa      	ldr	r2, [r7, #12]
 80035ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	685a      	ldr	r2, [r3, #4]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	697a      	ldr	r2, [r7, #20]
 80035f8:	621a      	str	r2, [r3, #32]
}
 80035fa:	bf00      	nop
 80035fc:	371c      	adds	r7, #28
 80035fe:	46bd      	mov	sp, r7
 8003600:	bc80      	pop	{r7}
 8003602:	4770      	bx	lr
 8003604:	40012c00 	.word	0x40012c00

08003608 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003608:	b480      	push	{r7}
 800360a:	b087      	sub	sp, #28
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a1b      	ldr	r3, [r3, #32]
 8003616:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a1b      	ldr	r3, [r3, #32]
 8003622:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	69db      	ldr	r3, [r3, #28]
 800362e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003636:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f023 0303 	bic.w	r3, r3, #3
 800363e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	68fa      	ldr	r2, [r7, #12]
 8003646:	4313      	orrs	r3, r2
 8003648:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003650:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	021b      	lsls	r3, r3, #8
 8003658:	697a      	ldr	r2, [r7, #20]
 800365a:	4313      	orrs	r3, r2
 800365c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a1d      	ldr	r2, [pc, #116]	; (80036d8 <TIM_OC3_SetConfig+0xd0>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d10d      	bne.n	8003682 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800366c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	021b      	lsls	r3, r3, #8
 8003674:	697a      	ldr	r2, [r7, #20]
 8003676:	4313      	orrs	r3, r2
 8003678:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003680:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	4a14      	ldr	r2, [pc, #80]	; (80036d8 <TIM_OC3_SetConfig+0xd0>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d113      	bne.n	80036b2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003690:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003698:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	695b      	ldr	r3, [r3, #20]
 800369e:	011b      	lsls	r3, r3, #4
 80036a0:	693a      	ldr	r2, [r7, #16]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	699b      	ldr	r3, [r3, #24]
 80036aa:	011b      	lsls	r3, r3, #4
 80036ac:	693a      	ldr	r2, [r7, #16]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	693a      	ldr	r2, [r7, #16]
 80036b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	68fa      	ldr	r2, [r7, #12]
 80036bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	685a      	ldr	r2, [r3, #4]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	697a      	ldr	r2, [r7, #20]
 80036ca:	621a      	str	r2, [r3, #32]
}
 80036cc:	bf00      	nop
 80036ce:	371c      	adds	r7, #28
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bc80      	pop	{r7}
 80036d4:	4770      	bx	lr
 80036d6:	bf00      	nop
 80036d8:	40012c00 	.word	0x40012c00

080036dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036dc:	b480      	push	{r7}
 80036de:	b087      	sub	sp, #28
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6a1b      	ldr	r3, [r3, #32]
 80036ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a1b      	ldr	r3, [r3, #32]
 80036f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	69db      	ldr	r3, [r3, #28]
 8003702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800370a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003712:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	021b      	lsls	r3, r3, #8
 800371a:	68fa      	ldr	r2, [r7, #12]
 800371c:	4313      	orrs	r3, r2
 800371e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003726:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	031b      	lsls	r3, r3, #12
 800372e:	693a      	ldr	r2, [r7, #16]
 8003730:	4313      	orrs	r3, r2
 8003732:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	4a0f      	ldr	r2, [pc, #60]	; (8003774 <TIM_OC4_SetConfig+0x98>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d109      	bne.n	8003750 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003742:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	695b      	ldr	r3, [r3, #20]
 8003748:	019b      	lsls	r3, r3, #6
 800374a:	697a      	ldr	r2, [r7, #20]
 800374c:	4313      	orrs	r3, r2
 800374e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	697a      	ldr	r2, [r7, #20]
 8003754:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	68fa      	ldr	r2, [r7, #12]
 800375a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	685a      	ldr	r2, [r3, #4]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	693a      	ldr	r2, [r7, #16]
 8003768:	621a      	str	r2, [r3, #32]
}
 800376a:	bf00      	nop
 800376c:	371c      	adds	r7, #28
 800376e:	46bd      	mov	sp, r7
 8003770:	bc80      	pop	{r7}
 8003772:	4770      	bx	lr
 8003774:	40012c00 	.word	0x40012c00

08003778 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003778:	b480      	push	{r7}
 800377a:	b087      	sub	sp, #28
 800377c:	af00      	add	r7, sp, #0
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	60b9      	str	r1, [r7, #8]
 8003782:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6a1b      	ldr	r3, [r3, #32]
 8003788:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	6a1b      	ldr	r3, [r3, #32]
 800378e:	f023 0201 	bic.w	r2, r3, #1
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	699b      	ldr	r3, [r3, #24]
 800379a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	011b      	lsls	r3, r3, #4
 80037a8:	693a      	ldr	r2, [r7, #16]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	f023 030a 	bic.w	r3, r3, #10
 80037b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80037b6:	697a      	ldr	r2, [r7, #20]
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	693a      	ldr	r2, [r7, #16]
 80037c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	697a      	ldr	r2, [r7, #20]
 80037c8:	621a      	str	r2, [r3, #32]
}
 80037ca:	bf00      	nop
 80037cc:	371c      	adds	r7, #28
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bc80      	pop	{r7}
 80037d2:	4770      	bx	lr

080037d4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b087      	sub	sp, #28
 80037d8:	af00      	add	r7, sp, #0
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	60b9      	str	r1, [r7, #8]
 80037de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6a1b      	ldr	r3, [r3, #32]
 80037e4:	f023 0210 	bic.w	r2, r3, #16
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	699b      	ldr	r3, [r3, #24]
 80037f0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6a1b      	ldr	r3, [r3, #32]
 80037f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80037fe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	031b      	lsls	r3, r3, #12
 8003804:	697a      	ldr	r2, [r7, #20]
 8003806:	4313      	orrs	r3, r2
 8003808:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003810:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	011b      	lsls	r3, r3, #4
 8003816:	693a      	ldr	r2, [r7, #16]
 8003818:	4313      	orrs	r3, r2
 800381a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	697a      	ldr	r2, [r7, #20]
 8003820:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	693a      	ldr	r2, [r7, #16]
 8003826:	621a      	str	r2, [r3, #32]
}
 8003828:	bf00      	nop
 800382a:	371c      	adds	r7, #28
 800382c:	46bd      	mov	sp, r7
 800382e:	bc80      	pop	{r7}
 8003830:	4770      	bx	lr

08003832 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003832:	b480      	push	{r7}
 8003834:	b085      	sub	sp, #20
 8003836:	af00      	add	r7, sp, #0
 8003838:	6078      	str	r0, [r7, #4]
 800383a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003848:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800384a:	683a      	ldr	r2, [r7, #0]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	4313      	orrs	r3, r2
 8003850:	f043 0307 	orr.w	r3, r3, #7
 8003854:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	68fa      	ldr	r2, [r7, #12]
 800385a:	609a      	str	r2, [r3, #8]
}
 800385c:	bf00      	nop
 800385e:	3714      	adds	r7, #20
 8003860:	46bd      	mov	sp, r7
 8003862:	bc80      	pop	{r7}
 8003864:	4770      	bx	lr

08003866 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003866:	b480      	push	{r7}
 8003868:	b087      	sub	sp, #28
 800386a:	af00      	add	r7, sp, #0
 800386c:	60f8      	str	r0, [r7, #12]
 800386e:	60b9      	str	r1, [r7, #8]
 8003870:	607a      	str	r2, [r7, #4]
 8003872:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003880:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	021a      	lsls	r2, r3, #8
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	431a      	orrs	r2, r3
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	4313      	orrs	r3, r2
 800388e:	697a      	ldr	r2, [r7, #20]
 8003890:	4313      	orrs	r3, r2
 8003892:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	697a      	ldr	r2, [r7, #20]
 8003898:	609a      	str	r2, [r3, #8]
}
 800389a:	bf00      	nop
 800389c:	371c      	adds	r7, #28
 800389e:	46bd      	mov	sp, r7
 80038a0:	bc80      	pop	{r7}
 80038a2:	4770      	bx	lr

080038a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b087      	sub	sp, #28
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	60b9      	str	r1, [r7, #8]
 80038ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	f003 031f 	and.w	r3, r3, #31
 80038b6:	2201      	movs	r2, #1
 80038b8:	fa02 f303 	lsl.w	r3, r2, r3
 80038bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6a1a      	ldr	r2, [r3, #32]
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	43db      	mvns	r3, r3
 80038c6:	401a      	ands	r2, r3
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6a1a      	ldr	r2, [r3, #32]
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	f003 031f 	and.w	r3, r3, #31
 80038d6:	6879      	ldr	r1, [r7, #4]
 80038d8:	fa01 f303 	lsl.w	r3, r1, r3
 80038dc:	431a      	orrs	r2, r3
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	621a      	str	r2, [r3, #32]
}
 80038e2:	bf00      	nop
 80038e4:	371c      	adds	r7, #28
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bc80      	pop	{r7}
 80038ea:	4770      	bx	lr

080038ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b085      	sub	sp, #20
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d101      	bne.n	8003904 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003900:	2302      	movs	r3, #2
 8003902:	e032      	b.n	800396a <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2202      	movs	r2, #2
 8003910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800392a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	68fa      	ldr	r2, [r7, #12]
 8003932:	4313      	orrs	r3, r2
 8003934:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800393c:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	68ba      	ldr	r2, [r7, #8]
 8003944:	4313      	orrs	r3, r2
 8003946:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	68fa      	ldr	r2, [r7, #12]
 800394e:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	68ba      	ldr	r2, [r7, #8]
 8003956:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2201      	movs	r2, #1
 800395c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003968:	2300      	movs	r3, #0
}
 800396a:	4618      	mov	r0, r3
 800396c:	3714      	adds	r7, #20
 800396e:	46bd      	mov	sp, r7
 8003970:	bc80      	pop	{r7}
 8003972:	4770      	bx	lr

08003974 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003974:	b480      	push	{r7}
 8003976:	b085      	sub	sp, #20
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800397e:	2300      	movs	r3, #0
 8003980:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003988:	2b01      	cmp	r3, #1
 800398a:	d101      	bne.n	8003990 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800398c:	2302      	movs	r3, #2
 800398e:	e03d      	b.n	8003a0c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	4313      	orrs	r3, r2
 80039c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	691b      	ldr	r3, [r3, #16]
 80039da:	4313      	orrs	r3, r2
 80039dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	695b      	ldr	r3, [r3, #20]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	69db      	ldr	r3, [r3, #28]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	68fa      	ldr	r2, [r7, #12]
 8003a00:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a0a:	2300      	movs	r3, #0
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3714      	adds	r7, #20
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bc80      	pop	{r7}
 8003a14:	4770      	bx	lr

08003a16 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a16:	b580      	push	{r7, lr}
 8003a18:	b082      	sub	sp, #8
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d101      	bne.n	8003a28 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e03f      	b.n	8003aa8 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d106      	bne.n	8003a42 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f7fe fa0b 	bl	8001e58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2224      	movs	r2, #36	; 0x24
 8003a46:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	68da      	ldr	r2, [r3, #12]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a58:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f000 f9b2 	bl	8003dc4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	691a      	ldr	r2, [r3, #16]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a6e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	695a      	ldr	r2, [r3, #20]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a7e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	68da      	ldr	r2, [r3, #12]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a8e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2220      	movs	r2, #32
 8003a9a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2220      	movs	r2, #32
 8003aa2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003aa6:	2300      	movs	r3, #0
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3708      	adds	r7, #8
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b088      	sub	sp, #32
 8003ab4:	af02      	add	r7, sp, #8
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	603b      	str	r3, [r7, #0]
 8003abc:	4613      	mov	r3, r2
 8003abe:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	2b20      	cmp	r3, #32
 8003ace:	f040 8083 	bne.w	8003bd8 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d002      	beq.n	8003ade <HAL_UART_Transmit+0x2e>
 8003ad8:	88fb      	ldrh	r3, [r7, #6]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d101      	bne.n	8003ae2 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e07b      	b.n	8003bda <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d101      	bne.n	8003af0 <HAL_UART_Transmit+0x40>
 8003aec:	2302      	movs	r3, #2
 8003aee:	e074      	b.n	8003bda <HAL_UART_Transmit+0x12a>
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2200      	movs	r2, #0
 8003afc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2221      	movs	r2, #33	; 0x21
 8003b02:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003b06:	f7fe fb65 	bl	80021d4 <HAL_GetTick>
 8003b0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	88fa      	ldrh	r2, [r7, #6]
 8003b10:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	88fa      	ldrh	r2, [r7, #6]
 8003b16:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003b18:	e042      	b.n	8003ba0 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	3b01      	subs	r3, #1
 8003b22:	b29a      	uxth	r2, r3
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b30:	d122      	bne.n	8003b78 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	9300      	str	r3, [sp, #0]
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	2180      	movs	r1, #128	; 0x80
 8003b3c:	68f8      	ldr	r0, [r7, #12]
 8003b3e:	f000 f8f6 	bl	8003d2e <UART_WaitOnFlagUntilTimeout>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d001      	beq.n	8003b4c <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8003b48:	2303      	movs	r3, #3
 8003b4a:	e046      	b.n	8003bda <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	881b      	ldrh	r3, [r3, #0]
 8003b54:	461a      	mov	r2, r3
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b5e:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	691b      	ldr	r3, [r3, #16]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d103      	bne.n	8003b70 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	3302      	adds	r3, #2
 8003b6c:	60bb      	str	r3, [r7, #8]
 8003b6e:	e017      	b.n	8003ba0 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	3301      	adds	r3, #1
 8003b74:	60bb      	str	r3, [r7, #8]
 8003b76:	e013      	b.n	8003ba0 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	9300      	str	r3, [sp, #0]
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	2180      	movs	r1, #128	; 0x80
 8003b82:	68f8      	ldr	r0, [r7, #12]
 8003b84:	f000 f8d3 	bl	8003d2e <UART_WaitOnFlagUntilTimeout>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d001      	beq.n	8003b92 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e023      	b.n	8003bda <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	1c5a      	adds	r2, r3, #1
 8003b96:	60ba      	str	r2, [r7, #8]
 8003b98:	781a      	ldrb	r2, [r3, #0]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ba4:	b29b      	uxth	r3, r3
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d1b7      	bne.n	8003b1a <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	9300      	str	r3, [sp, #0]
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	2140      	movs	r1, #64	; 0x40
 8003bb4:	68f8      	ldr	r0, [r7, #12]
 8003bb6:	f000 f8ba 	bl	8003d2e <UART_WaitOnFlagUntilTimeout>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d001      	beq.n	8003bc4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e00a      	b.n	8003bda <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2220      	movs	r2, #32
 8003bc8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	e000      	b.n	8003bda <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003bd8:	2302      	movs	r3, #2
  }
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3718      	adds	r7, #24
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}

08003be2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003be2:	b580      	push	{r7, lr}
 8003be4:	b088      	sub	sp, #32
 8003be6:	af02      	add	r7, sp, #8
 8003be8:	60f8      	str	r0, [r7, #12]
 8003bea:	60b9      	str	r1, [r7, #8]
 8003bec:	603b      	str	r3, [r7, #0]
 8003bee:	4613      	mov	r3, r2
 8003bf0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	2b20      	cmp	r3, #32
 8003c00:	f040 8090 	bne.w	8003d24 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d002      	beq.n	8003c10 <HAL_UART_Receive+0x2e>
 8003c0a:	88fb      	ldrh	r3, [r7, #6]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d101      	bne.n	8003c14 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	e088      	b.n	8003d26 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d101      	bne.n	8003c22 <HAL_UART_Receive+0x40>
 8003c1e:	2302      	movs	r3, #2
 8003c20:	e081      	b.n	8003d26 <HAL_UART_Receive+0x144>
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2201      	movs	r2, #1
 8003c26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2222      	movs	r2, #34	; 0x22
 8003c34:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003c38:	f7fe facc 	bl	80021d4 <HAL_GetTick>
 8003c3c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	88fa      	ldrh	r2, [r7, #6]
 8003c42:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	88fa      	ldrh	r2, [r7, #6]
 8003c48:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003c4a:	e05c      	b.n	8003d06 <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	3b01      	subs	r3, #1
 8003c54:	b29a      	uxth	r2, r3
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c62:	d12b      	bne.n	8003cbc <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	9300      	str	r3, [sp, #0]
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	2120      	movs	r1, #32
 8003c6e:	68f8      	ldr	r0, [r7, #12]
 8003c70:	f000 f85d 	bl	8003d2e <UART_WaitOnFlagUntilTimeout>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d001      	beq.n	8003c7e <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e053      	b.n	8003d26 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d10c      	bne.n	8003ca4 <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c96:	b29a      	uxth	r2, r3
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	3302      	adds	r3, #2
 8003ca0:	60bb      	str	r3, [r7, #8]
 8003ca2:	e030      	b.n	8003d06 <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	b29a      	uxth	r2, r3
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	3301      	adds	r3, #1
 8003cb8:	60bb      	str	r3, [r7, #8]
 8003cba:	e024      	b.n	8003d06 <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	9300      	str	r3, [sp, #0]
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	2120      	movs	r1, #32
 8003cc6:	68f8      	ldr	r0, [r7, #12]
 8003cc8:	f000 f831 	bl	8003d2e <UART_WaitOnFlagUntilTimeout>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d001      	beq.n	8003cd6 <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e027      	b.n	8003d26 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	691b      	ldr	r3, [r3, #16]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d108      	bne.n	8003cf0 <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	6859      	ldr	r1, [r3, #4]
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	1c5a      	adds	r2, r3, #1
 8003ce8:	60ba      	str	r2, [r7, #8]
 8003cea:	b2ca      	uxtb	r2, r1
 8003cec:	701a      	strb	r2, [r3, #0]
 8003cee:	e00a      	b.n	8003d06 <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	b2da      	uxtb	r2, r3
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	1c59      	adds	r1, r3, #1
 8003cfc:	60b9      	str	r1, [r7, #8]
 8003cfe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003d02:	b2d2      	uxtb	r2, r2
 8003d04:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d19d      	bne.n	8003c4c <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2220      	movs	r2, #32
 8003d14:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8003d20:	2300      	movs	r3, #0
 8003d22:	e000      	b.n	8003d26 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8003d24:	2302      	movs	r3, #2
  }
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3718      	adds	r7, #24
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}

08003d2e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003d2e:	b580      	push	{r7, lr}
 8003d30:	b084      	sub	sp, #16
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	60f8      	str	r0, [r7, #12]
 8003d36:	60b9      	str	r1, [r7, #8]
 8003d38:	603b      	str	r3, [r7, #0]
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d3e:	e02c      	b.n	8003d9a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d40:	69bb      	ldr	r3, [r7, #24]
 8003d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d46:	d028      	beq.n	8003d9a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d007      	beq.n	8003d5e <UART_WaitOnFlagUntilTimeout+0x30>
 8003d4e:	f7fe fa41 	bl	80021d4 <HAL_GetTick>
 8003d52:	4602      	mov	r2, r0
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	69ba      	ldr	r2, [r7, #24]
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d21d      	bcs.n	8003d9a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	68da      	ldr	r2, [r3, #12]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003d6c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	695a      	ldr	r2, [r3, #20]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f022 0201 	bic.w	r2, r2, #1
 8003d7c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2220      	movs	r2, #32
 8003d82:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2220      	movs	r2, #32
 8003d8a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	e00f      	b.n	8003dba <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	4013      	ands	r3, r2
 8003da4:	68ba      	ldr	r2, [r7, #8]
 8003da6:	429a      	cmp	r2, r3
 8003da8:	bf0c      	ite	eq
 8003daa:	2301      	moveq	r3, #1
 8003dac:	2300      	movne	r3, #0
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	461a      	mov	r2, r3
 8003db2:	79fb      	ldrb	r3, [r7, #7]
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d0c3      	beq.n	8003d40 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003db8:	2300      	movs	r3, #0
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3710      	adds	r7, #16
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
	...

08003dc4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b084      	sub	sp, #16
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	691b      	ldr	r3, [r3, #16]
 8003dd2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	68da      	ldr	r2, [r3, #12]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	430a      	orrs	r2, r1
 8003de0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	689a      	ldr	r2, [r3, #8]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	691b      	ldr	r3, [r3, #16]
 8003dea:	431a      	orrs	r2, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	695b      	ldr	r3, [r3, #20]
 8003df0:	4313      	orrs	r3, r2
 8003df2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	68db      	ldr	r3, [r3, #12]
 8003dfa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003dfe:	f023 030c 	bic.w	r3, r3, #12
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	6812      	ldr	r2, [r2, #0]
 8003e06:	68f9      	ldr	r1, [r7, #12]
 8003e08:	430b      	orrs	r3, r1
 8003e0a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	695b      	ldr	r3, [r3, #20]
 8003e12:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	699a      	ldr	r2, [r3, #24]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	430a      	orrs	r2, r1
 8003e20:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a52      	ldr	r2, [pc, #328]	; (8003f70 <UART_SetConfig+0x1ac>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d14e      	bne.n	8003eca <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003e2c:	f7ff f856 	bl	8002edc <HAL_RCC_GetPCLK2Freq>
 8003e30:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e32:	68ba      	ldr	r2, [r7, #8]
 8003e34:	4613      	mov	r3, r2
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	4413      	add	r3, r2
 8003e3a:	009a      	lsls	r2, r3, #2
 8003e3c:	441a      	add	r2, r3
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e48:	4a4a      	ldr	r2, [pc, #296]	; (8003f74 <UART_SetConfig+0x1b0>)
 8003e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e4e:	095b      	lsrs	r3, r3, #5
 8003e50:	0119      	lsls	r1, r3, #4
 8003e52:	68ba      	ldr	r2, [r7, #8]
 8003e54:	4613      	mov	r3, r2
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	4413      	add	r3, r2
 8003e5a:	009a      	lsls	r2, r3, #2
 8003e5c:	441a      	add	r2, r3
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e68:	4b42      	ldr	r3, [pc, #264]	; (8003f74 <UART_SetConfig+0x1b0>)
 8003e6a:	fba3 0302 	umull	r0, r3, r3, r2
 8003e6e:	095b      	lsrs	r3, r3, #5
 8003e70:	2064      	movs	r0, #100	; 0x64
 8003e72:	fb00 f303 	mul.w	r3, r0, r3
 8003e76:	1ad3      	subs	r3, r2, r3
 8003e78:	011b      	lsls	r3, r3, #4
 8003e7a:	3332      	adds	r3, #50	; 0x32
 8003e7c:	4a3d      	ldr	r2, [pc, #244]	; (8003f74 <UART_SetConfig+0x1b0>)
 8003e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e82:	095b      	lsrs	r3, r3, #5
 8003e84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e88:	4419      	add	r1, r3
 8003e8a:	68ba      	ldr	r2, [r7, #8]
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	4413      	add	r3, r2
 8003e92:	009a      	lsls	r2, r3, #2
 8003e94:	441a      	add	r2, r3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ea0:	4b34      	ldr	r3, [pc, #208]	; (8003f74 <UART_SetConfig+0x1b0>)
 8003ea2:	fba3 0302 	umull	r0, r3, r3, r2
 8003ea6:	095b      	lsrs	r3, r3, #5
 8003ea8:	2064      	movs	r0, #100	; 0x64
 8003eaa:	fb00 f303 	mul.w	r3, r0, r3
 8003eae:	1ad3      	subs	r3, r2, r3
 8003eb0:	011b      	lsls	r3, r3, #4
 8003eb2:	3332      	adds	r3, #50	; 0x32
 8003eb4:	4a2f      	ldr	r2, [pc, #188]	; (8003f74 <UART_SetConfig+0x1b0>)
 8003eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8003eba:	095b      	lsrs	r3, r3, #5
 8003ebc:	f003 020f 	and.w	r2, r3, #15
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	440a      	add	r2, r1
 8003ec6:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8003ec8:	e04d      	b.n	8003f66 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8003eca:	f7fe fff3 	bl	8002eb4 <HAL_RCC_GetPCLK1Freq>
 8003ece:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ed0:	68ba      	ldr	r2, [r7, #8]
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	4413      	add	r3, r2
 8003ed8:	009a      	lsls	r2, r3, #2
 8003eda:	441a      	add	r2, r3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	009b      	lsls	r3, r3, #2
 8003ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ee6:	4a23      	ldr	r2, [pc, #140]	; (8003f74 <UART_SetConfig+0x1b0>)
 8003ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8003eec:	095b      	lsrs	r3, r3, #5
 8003eee:	0119      	lsls	r1, r3, #4
 8003ef0:	68ba      	ldr	r2, [r7, #8]
 8003ef2:	4613      	mov	r3, r2
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	4413      	add	r3, r2
 8003ef8:	009a      	lsls	r2, r3, #2
 8003efa:	441a      	add	r2, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f06:	4b1b      	ldr	r3, [pc, #108]	; (8003f74 <UART_SetConfig+0x1b0>)
 8003f08:	fba3 0302 	umull	r0, r3, r3, r2
 8003f0c:	095b      	lsrs	r3, r3, #5
 8003f0e:	2064      	movs	r0, #100	; 0x64
 8003f10:	fb00 f303 	mul.w	r3, r0, r3
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	011b      	lsls	r3, r3, #4
 8003f18:	3332      	adds	r3, #50	; 0x32
 8003f1a:	4a16      	ldr	r2, [pc, #88]	; (8003f74 <UART_SetConfig+0x1b0>)
 8003f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f20:	095b      	lsrs	r3, r3, #5
 8003f22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f26:	4419      	add	r1, r3
 8003f28:	68ba      	ldr	r2, [r7, #8]
 8003f2a:	4613      	mov	r3, r2
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	4413      	add	r3, r2
 8003f30:	009a      	lsls	r2, r3, #2
 8003f32:	441a      	add	r2, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f3e:	4b0d      	ldr	r3, [pc, #52]	; (8003f74 <UART_SetConfig+0x1b0>)
 8003f40:	fba3 0302 	umull	r0, r3, r3, r2
 8003f44:	095b      	lsrs	r3, r3, #5
 8003f46:	2064      	movs	r0, #100	; 0x64
 8003f48:	fb00 f303 	mul.w	r3, r0, r3
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	011b      	lsls	r3, r3, #4
 8003f50:	3332      	adds	r3, #50	; 0x32
 8003f52:	4a08      	ldr	r2, [pc, #32]	; (8003f74 <UART_SetConfig+0x1b0>)
 8003f54:	fba2 2303 	umull	r2, r3, r2, r3
 8003f58:	095b      	lsrs	r3, r3, #5
 8003f5a:	f003 020f 	and.w	r2, r3, #15
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	440a      	add	r2, r1
 8003f64:	609a      	str	r2, [r3, #8]
}
 8003f66:	bf00      	nop
 8003f68:	3710      	adds	r7, #16
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	40013800 	.word	0x40013800
 8003f74:	51eb851f 	.word	0x51eb851f

08003f78 <__errno>:
 8003f78:	4b01      	ldr	r3, [pc, #4]	; (8003f80 <__errno+0x8>)
 8003f7a:	6818      	ldr	r0, [r3, #0]
 8003f7c:	4770      	bx	lr
 8003f7e:	bf00      	nop
 8003f80:	20000018 	.word	0x20000018

08003f84 <__libc_init_array>:
 8003f84:	b570      	push	{r4, r5, r6, lr}
 8003f86:	2500      	movs	r5, #0
 8003f88:	4e0c      	ldr	r6, [pc, #48]	; (8003fbc <__libc_init_array+0x38>)
 8003f8a:	4c0d      	ldr	r4, [pc, #52]	; (8003fc0 <__libc_init_array+0x3c>)
 8003f8c:	1ba4      	subs	r4, r4, r6
 8003f8e:	10a4      	asrs	r4, r4, #2
 8003f90:	42a5      	cmp	r5, r4
 8003f92:	d109      	bne.n	8003fa8 <__libc_init_array+0x24>
 8003f94:	f000 ff74 	bl	8004e80 <_init>
 8003f98:	2500      	movs	r5, #0
 8003f9a:	4e0a      	ldr	r6, [pc, #40]	; (8003fc4 <__libc_init_array+0x40>)
 8003f9c:	4c0a      	ldr	r4, [pc, #40]	; (8003fc8 <__libc_init_array+0x44>)
 8003f9e:	1ba4      	subs	r4, r4, r6
 8003fa0:	10a4      	asrs	r4, r4, #2
 8003fa2:	42a5      	cmp	r5, r4
 8003fa4:	d105      	bne.n	8003fb2 <__libc_init_array+0x2e>
 8003fa6:	bd70      	pop	{r4, r5, r6, pc}
 8003fa8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003fac:	4798      	blx	r3
 8003fae:	3501      	adds	r5, #1
 8003fb0:	e7ee      	b.n	8003f90 <__libc_init_array+0xc>
 8003fb2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003fb6:	4798      	blx	r3
 8003fb8:	3501      	adds	r5, #1
 8003fba:	e7f2      	b.n	8003fa2 <__libc_init_array+0x1e>
 8003fbc:	080052e8 	.word	0x080052e8
 8003fc0:	080052e8 	.word	0x080052e8
 8003fc4:	080052e8 	.word	0x080052e8
 8003fc8:	080052ec 	.word	0x080052ec

08003fcc <memset>:
 8003fcc:	4603      	mov	r3, r0
 8003fce:	4402      	add	r2, r0
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d100      	bne.n	8003fd6 <memset+0xa>
 8003fd4:	4770      	bx	lr
 8003fd6:	f803 1b01 	strb.w	r1, [r3], #1
 8003fda:	e7f9      	b.n	8003fd0 <memset+0x4>

08003fdc <iprintf>:
 8003fdc:	b40f      	push	{r0, r1, r2, r3}
 8003fde:	4b0a      	ldr	r3, [pc, #40]	; (8004008 <iprintf+0x2c>)
 8003fe0:	b513      	push	{r0, r1, r4, lr}
 8003fe2:	681c      	ldr	r4, [r3, #0]
 8003fe4:	b124      	cbz	r4, 8003ff0 <iprintf+0x14>
 8003fe6:	69a3      	ldr	r3, [r4, #24]
 8003fe8:	b913      	cbnz	r3, 8003ff0 <iprintf+0x14>
 8003fea:	4620      	mov	r0, r4
 8003fec:	f000 fa22 	bl	8004434 <__sinit>
 8003ff0:	ab05      	add	r3, sp, #20
 8003ff2:	9a04      	ldr	r2, [sp, #16]
 8003ff4:	68a1      	ldr	r1, [r4, #8]
 8003ff6:	4620      	mov	r0, r4
 8003ff8:	9301      	str	r3, [sp, #4]
 8003ffa:	f000 fbd7 	bl	80047ac <_vfiprintf_r>
 8003ffe:	b002      	add	sp, #8
 8004000:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004004:	b004      	add	sp, #16
 8004006:	4770      	bx	lr
 8004008:	20000018 	.word	0x20000018

0800400c <_puts_r>:
 800400c:	b570      	push	{r4, r5, r6, lr}
 800400e:	460e      	mov	r6, r1
 8004010:	4605      	mov	r5, r0
 8004012:	b118      	cbz	r0, 800401c <_puts_r+0x10>
 8004014:	6983      	ldr	r3, [r0, #24]
 8004016:	b90b      	cbnz	r3, 800401c <_puts_r+0x10>
 8004018:	f000 fa0c 	bl	8004434 <__sinit>
 800401c:	69ab      	ldr	r3, [r5, #24]
 800401e:	68ac      	ldr	r4, [r5, #8]
 8004020:	b913      	cbnz	r3, 8004028 <_puts_r+0x1c>
 8004022:	4628      	mov	r0, r5
 8004024:	f000 fa06 	bl	8004434 <__sinit>
 8004028:	4b23      	ldr	r3, [pc, #140]	; (80040b8 <_puts_r+0xac>)
 800402a:	429c      	cmp	r4, r3
 800402c:	d117      	bne.n	800405e <_puts_r+0x52>
 800402e:	686c      	ldr	r4, [r5, #4]
 8004030:	89a3      	ldrh	r3, [r4, #12]
 8004032:	071b      	lsls	r3, r3, #28
 8004034:	d51d      	bpl.n	8004072 <_puts_r+0x66>
 8004036:	6923      	ldr	r3, [r4, #16]
 8004038:	b1db      	cbz	r3, 8004072 <_puts_r+0x66>
 800403a:	3e01      	subs	r6, #1
 800403c:	68a3      	ldr	r3, [r4, #8]
 800403e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004042:	3b01      	subs	r3, #1
 8004044:	60a3      	str	r3, [r4, #8]
 8004046:	b9e9      	cbnz	r1, 8004084 <_puts_r+0x78>
 8004048:	2b00      	cmp	r3, #0
 800404a:	da2e      	bge.n	80040aa <_puts_r+0x9e>
 800404c:	4622      	mov	r2, r4
 800404e:	210a      	movs	r1, #10
 8004050:	4628      	mov	r0, r5
 8004052:	f000 f83f 	bl	80040d4 <__swbuf_r>
 8004056:	3001      	adds	r0, #1
 8004058:	d011      	beq.n	800407e <_puts_r+0x72>
 800405a:	200a      	movs	r0, #10
 800405c:	e011      	b.n	8004082 <_puts_r+0x76>
 800405e:	4b17      	ldr	r3, [pc, #92]	; (80040bc <_puts_r+0xb0>)
 8004060:	429c      	cmp	r4, r3
 8004062:	d101      	bne.n	8004068 <_puts_r+0x5c>
 8004064:	68ac      	ldr	r4, [r5, #8]
 8004066:	e7e3      	b.n	8004030 <_puts_r+0x24>
 8004068:	4b15      	ldr	r3, [pc, #84]	; (80040c0 <_puts_r+0xb4>)
 800406a:	429c      	cmp	r4, r3
 800406c:	bf08      	it	eq
 800406e:	68ec      	ldreq	r4, [r5, #12]
 8004070:	e7de      	b.n	8004030 <_puts_r+0x24>
 8004072:	4621      	mov	r1, r4
 8004074:	4628      	mov	r0, r5
 8004076:	f000 f87f 	bl	8004178 <__swsetup_r>
 800407a:	2800      	cmp	r0, #0
 800407c:	d0dd      	beq.n	800403a <_puts_r+0x2e>
 800407e:	f04f 30ff 	mov.w	r0, #4294967295
 8004082:	bd70      	pop	{r4, r5, r6, pc}
 8004084:	2b00      	cmp	r3, #0
 8004086:	da04      	bge.n	8004092 <_puts_r+0x86>
 8004088:	69a2      	ldr	r2, [r4, #24]
 800408a:	429a      	cmp	r2, r3
 800408c:	dc06      	bgt.n	800409c <_puts_r+0x90>
 800408e:	290a      	cmp	r1, #10
 8004090:	d004      	beq.n	800409c <_puts_r+0x90>
 8004092:	6823      	ldr	r3, [r4, #0]
 8004094:	1c5a      	adds	r2, r3, #1
 8004096:	6022      	str	r2, [r4, #0]
 8004098:	7019      	strb	r1, [r3, #0]
 800409a:	e7cf      	b.n	800403c <_puts_r+0x30>
 800409c:	4622      	mov	r2, r4
 800409e:	4628      	mov	r0, r5
 80040a0:	f000 f818 	bl	80040d4 <__swbuf_r>
 80040a4:	3001      	adds	r0, #1
 80040a6:	d1c9      	bne.n	800403c <_puts_r+0x30>
 80040a8:	e7e9      	b.n	800407e <_puts_r+0x72>
 80040aa:	200a      	movs	r0, #10
 80040ac:	6823      	ldr	r3, [r4, #0]
 80040ae:	1c5a      	adds	r2, r3, #1
 80040b0:	6022      	str	r2, [r4, #0]
 80040b2:	7018      	strb	r0, [r3, #0]
 80040b4:	e7e5      	b.n	8004082 <_puts_r+0x76>
 80040b6:	bf00      	nop
 80040b8:	08005274 	.word	0x08005274
 80040bc:	08005294 	.word	0x08005294
 80040c0:	08005254 	.word	0x08005254

080040c4 <puts>:
 80040c4:	4b02      	ldr	r3, [pc, #8]	; (80040d0 <puts+0xc>)
 80040c6:	4601      	mov	r1, r0
 80040c8:	6818      	ldr	r0, [r3, #0]
 80040ca:	f7ff bf9f 	b.w	800400c <_puts_r>
 80040ce:	bf00      	nop
 80040d0:	20000018 	.word	0x20000018

080040d4 <__swbuf_r>:
 80040d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040d6:	460e      	mov	r6, r1
 80040d8:	4614      	mov	r4, r2
 80040da:	4605      	mov	r5, r0
 80040dc:	b118      	cbz	r0, 80040e6 <__swbuf_r+0x12>
 80040de:	6983      	ldr	r3, [r0, #24]
 80040e0:	b90b      	cbnz	r3, 80040e6 <__swbuf_r+0x12>
 80040e2:	f000 f9a7 	bl	8004434 <__sinit>
 80040e6:	4b21      	ldr	r3, [pc, #132]	; (800416c <__swbuf_r+0x98>)
 80040e8:	429c      	cmp	r4, r3
 80040ea:	d12a      	bne.n	8004142 <__swbuf_r+0x6e>
 80040ec:	686c      	ldr	r4, [r5, #4]
 80040ee:	69a3      	ldr	r3, [r4, #24]
 80040f0:	60a3      	str	r3, [r4, #8]
 80040f2:	89a3      	ldrh	r3, [r4, #12]
 80040f4:	071a      	lsls	r2, r3, #28
 80040f6:	d52e      	bpl.n	8004156 <__swbuf_r+0x82>
 80040f8:	6923      	ldr	r3, [r4, #16]
 80040fa:	b363      	cbz	r3, 8004156 <__swbuf_r+0x82>
 80040fc:	6923      	ldr	r3, [r4, #16]
 80040fe:	6820      	ldr	r0, [r4, #0]
 8004100:	b2f6      	uxtb	r6, r6
 8004102:	1ac0      	subs	r0, r0, r3
 8004104:	6963      	ldr	r3, [r4, #20]
 8004106:	4637      	mov	r7, r6
 8004108:	4283      	cmp	r3, r0
 800410a:	dc04      	bgt.n	8004116 <__swbuf_r+0x42>
 800410c:	4621      	mov	r1, r4
 800410e:	4628      	mov	r0, r5
 8004110:	f000 f926 	bl	8004360 <_fflush_r>
 8004114:	bb28      	cbnz	r0, 8004162 <__swbuf_r+0x8e>
 8004116:	68a3      	ldr	r3, [r4, #8]
 8004118:	3001      	adds	r0, #1
 800411a:	3b01      	subs	r3, #1
 800411c:	60a3      	str	r3, [r4, #8]
 800411e:	6823      	ldr	r3, [r4, #0]
 8004120:	1c5a      	adds	r2, r3, #1
 8004122:	6022      	str	r2, [r4, #0]
 8004124:	701e      	strb	r6, [r3, #0]
 8004126:	6963      	ldr	r3, [r4, #20]
 8004128:	4283      	cmp	r3, r0
 800412a:	d004      	beq.n	8004136 <__swbuf_r+0x62>
 800412c:	89a3      	ldrh	r3, [r4, #12]
 800412e:	07db      	lsls	r3, r3, #31
 8004130:	d519      	bpl.n	8004166 <__swbuf_r+0x92>
 8004132:	2e0a      	cmp	r6, #10
 8004134:	d117      	bne.n	8004166 <__swbuf_r+0x92>
 8004136:	4621      	mov	r1, r4
 8004138:	4628      	mov	r0, r5
 800413a:	f000 f911 	bl	8004360 <_fflush_r>
 800413e:	b190      	cbz	r0, 8004166 <__swbuf_r+0x92>
 8004140:	e00f      	b.n	8004162 <__swbuf_r+0x8e>
 8004142:	4b0b      	ldr	r3, [pc, #44]	; (8004170 <__swbuf_r+0x9c>)
 8004144:	429c      	cmp	r4, r3
 8004146:	d101      	bne.n	800414c <__swbuf_r+0x78>
 8004148:	68ac      	ldr	r4, [r5, #8]
 800414a:	e7d0      	b.n	80040ee <__swbuf_r+0x1a>
 800414c:	4b09      	ldr	r3, [pc, #36]	; (8004174 <__swbuf_r+0xa0>)
 800414e:	429c      	cmp	r4, r3
 8004150:	bf08      	it	eq
 8004152:	68ec      	ldreq	r4, [r5, #12]
 8004154:	e7cb      	b.n	80040ee <__swbuf_r+0x1a>
 8004156:	4621      	mov	r1, r4
 8004158:	4628      	mov	r0, r5
 800415a:	f000 f80d 	bl	8004178 <__swsetup_r>
 800415e:	2800      	cmp	r0, #0
 8004160:	d0cc      	beq.n	80040fc <__swbuf_r+0x28>
 8004162:	f04f 37ff 	mov.w	r7, #4294967295
 8004166:	4638      	mov	r0, r7
 8004168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800416a:	bf00      	nop
 800416c:	08005274 	.word	0x08005274
 8004170:	08005294 	.word	0x08005294
 8004174:	08005254 	.word	0x08005254

08004178 <__swsetup_r>:
 8004178:	4b32      	ldr	r3, [pc, #200]	; (8004244 <__swsetup_r+0xcc>)
 800417a:	b570      	push	{r4, r5, r6, lr}
 800417c:	681d      	ldr	r5, [r3, #0]
 800417e:	4606      	mov	r6, r0
 8004180:	460c      	mov	r4, r1
 8004182:	b125      	cbz	r5, 800418e <__swsetup_r+0x16>
 8004184:	69ab      	ldr	r3, [r5, #24]
 8004186:	b913      	cbnz	r3, 800418e <__swsetup_r+0x16>
 8004188:	4628      	mov	r0, r5
 800418a:	f000 f953 	bl	8004434 <__sinit>
 800418e:	4b2e      	ldr	r3, [pc, #184]	; (8004248 <__swsetup_r+0xd0>)
 8004190:	429c      	cmp	r4, r3
 8004192:	d10f      	bne.n	80041b4 <__swsetup_r+0x3c>
 8004194:	686c      	ldr	r4, [r5, #4]
 8004196:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800419a:	b29a      	uxth	r2, r3
 800419c:	0715      	lsls	r5, r2, #28
 800419e:	d42c      	bmi.n	80041fa <__swsetup_r+0x82>
 80041a0:	06d0      	lsls	r0, r2, #27
 80041a2:	d411      	bmi.n	80041c8 <__swsetup_r+0x50>
 80041a4:	2209      	movs	r2, #9
 80041a6:	6032      	str	r2, [r6, #0]
 80041a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041ac:	81a3      	strh	r3, [r4, #12]
 80041ae:	f04f 30ff 	mov.w	r0, #4294967295
 80041b2:	e03e      	b.n	8004232 <__swsetup_r+0xba>
 80041b4:	4b25      	ldr	r3, [pc, #148]	; (800424c <__swsetup_r+0xd4>)
 80041b6:	429c      	cmp	r4, r3
 80041b8:	d101      	bne.n	80041be <__swsetup_r+0x46>
 80041ba:	68ac      	ldr	r4, [r5, #8]
 80041bc:	e7eb      	b.n	8004196 <__swsetup_r+0x1e>
 80041be:	4b24      	ldr	r3, [pc, #144]	; (8004250 <__swsetup_r+0xd8>)
 80041c0:	429c      	cmp	r4, r3
 80041c2:	bf08      	it	eq
 80041c4:	68ec      	ldreq	r4, [r5, #12]
 80041c6:	e7e6      	b.n	8004196 <__swsetup_r+0x1e>
 80041c8:	0751      	lsls	r1, r2, #29
 80041ca:	d512      	bpl.n	80041f2 <__swsetup_r+0x7a>
 80041cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80041ce:	b141      	cbz	r1, 80041e2 <__swsetup_r+0x6a>
 80041d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80041d4:	4299      	cmp	r1, r3
 80041d6:	d002      	beq.n	80041de <__swsetup_r+0x66>
 80041d8:	4630      	mov	r0, r6
 80041da:	f000 fa19 	bl	8004610 <_free_r>
 80041de:	2300      	movs	r3, #0
 80041e0:	6363      	str	r3, [r4, #52]	; 0x34
 80041e2:	89a3      	ldrh	r3, [r4, #12]
 80041e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80041e8:	81a3      	strh	r3, [r4, #12]
 80041ea:	2300      	movs	r3, #0
 80041ec:	6063      	str	r3, [r4, #4]
 80041ee:	6923      	ldr	r3, [r4, #16]
 80041f0:	6023      	str	r3, [r4, #0]
 80041f2:	89a3      	ldrh	r3, [r4, #12]
 80041f4:	f043 0308 	orr.w	r3, r3, #8
 80041f8:	81a3      	strh	r3, [r4, #12]
 80041fa:	6923      	ldr	r3, [r4, #16]
 80041fc:	b94b      	cbnz	r3, 8004212 <__swsetup_r+0x9a>
 80041fe:	89a3      	ldrh	r3, [r4, #12]
 8004200:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004204:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004208:	d003      	beq.n	8004212 <__swsetup_r+0x9a>
 800420a:	4621      	mov	r1, r4
 800420c:	4630      	mov	r0, r6
 800420e:	f000 f9bf 	bl	8004590 <__smakebuf_r>
 8004212:	89a2      	ldrh	r2, [r4, #12]
 8004214:	f012 0301 	ands.w	r3, r2, #1
 8004218:	d00c      	beq.n	8004234 <__swsetup_r+0xbc>
 800421a:	2300      	movs	r3, #0
 800421c:	60a3      	str	r3, [r4, #8]
 800421e:	6963      	ldr	r3, [r4, #20]
 8004220:	425b      	negs	r3, r3
 8004222:	61a3      	str	r3, [r4, #24]
 8004224:	6923      	ldr	r3, [r4, #16]
 8004226:	b953      	cbnz	r3, 800423e <__swsetup_r+0xc6>
 8004228:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800422c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004230:	d1ba      	bne.n	80041a8 <__swsetup_r+0x30>
 8004232:	bd70      	pop	{r4, r5, r6, pc}
 8004234:	0792      	lsls	r2, r2, #30
 8004236:	bf58      	it	pl
 8004238:	6963      	ldrpl	r3, [r4, #20]
 800423a:	60a3      	str	r3, [r4, #8]
 800423c:	e7f2      	b.n	8004224 <__swsetup_r+0xac>
 800423e:	2000      	movs	r0, #0
 8004240:	e7f7      	b.n	8004232 <__swsetup_r+0xba>
 8004242:	bf00      	nop
 8004244:	20000018 	.word	0x20000018
 8004248:	08005274 	.word	0x08005274
 800424c:	08005294 	.word	0x08005294
 8004250:	08005254 	.word	0x08005254

08004254 <__sflush_r>:
 8004254:	898a      	ldrh	r2, [r1, #12]
 8004256:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800425a:	4605      	mov	r5, r0
 800425c:	0710      	lsls	r0, r2, #28
 800425e:	460c      	mov	r4, r1
 8004260:	d458      	bmi.n	8004314 <__sflush_r+0xc0>
 8004262:	684b      	ldr	r3, [r1, #4]
 8004264:	2b00      	cmp	r3, #0
 8004266:	dc05      	bgt.n	8004274 <__sflush_r+0x20>
 8004268:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800426a:	2b00      	cmp	r3, #0
 800426c:	dc02      	bgt.n	8004274 <__sflush_r+0x20>
 800426e:	2000      	movs	r0, #0
 8004270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004274:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004276:	2e00      	cmp	r6, #0
 8004278:	d0f9      	beq.n	800426e <__sflush_r+0x1a>
 800427a:	2300      	movs	r3, #0
 800427c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004280:	682f      	ldr	r7, [r5, #0]
 8004282:	6a21      	ldr	r1, [r4, #32]
 8004284:	602b      	str	r3, [r5, #0]
 8004286:	d032      	beq.n	80042ee <__sflush_r+0x9a>
 8004288:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800428a:	89a3      	ldrh	r3, [r4, #12]
 800428c:	075a      	lsls	r2, r3, #29
 800428e:	d505      	bpl.n	800429c <__sflush_r+0x48>
 8004290:	6863      	ldr	r3, [r4, #4]
 8004292:	1ac0      	subs	r0, r0, r3
 8004294:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004296:	b10b      	cbz	r3, 800429c <__sflush_r+0x48>
 8004298:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800429a:	1ac0      	subs	r0, r0, r3
 800429c:	2300      	movs	r3, #0
 800429e:	4602      	mov	r2, r0
 80042a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80042a2:	6a21      	ldr	r1, [r4, #32]
 80042a4:	4628      	mov	r0, r5
 80042a6:	47b0      	blx	r6
 80042a8:	1c43      	adds	r3, r0, #1
 80042aa:	89a3      	ldrh	r3, [r4, #12]
 80042ac:	d106      	bne.n	80042bc <__sflush_r+0x68>
 80042ae:	6829      	ldr	r1, [r5, #0]
 80042b0:	291d      	cmp	r1, #29
 80042b2:	d848      	bhi.n	8004346 <__sflush_r+0xf2>
 80042b4:	4a29      	ldr	r2, [pc, #164]	; (800435c <__sflush_r+0x108>)
 80042b6:	40ca      	lsrs	r2, r1
 80042b8:	07d6      	lsls	r6, r2, #31
 80042ba:	d544      	bpl.n	8004346 <__sflush_r+0xf2>
 80042bc:	2200      	movs	r2, #0
 80042be:	6062      	str	r2, [r4, #4]
 80042c0:	6922      	ldr	r2, [r4, #16]
 80042c2:	04d9      	lsls	r1, r3, #19
 80042c4:	6022      	str	r2, [r4, #0]
 80042c6:	d504      	bpl.n	80042d2 <__sflush_r+0x7e>
 80042c8:	1c42      	adds	r2, r0, #1
 80042ca:	d101      	bne.n	80042d0 <__sflush_r+0x7c>
 80042cc:	682b      	ldr	r3, [r5, #0]
 80042ce:	b903      	cbnz	r3, 80042d2 <__sflush_r+0x7e>
 80042d0:	6560      	str	r0, [r4, #84]	; 0x54
 80042d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80042d4:	602f      	str	r7, [r5, #0]
 80042d6:	2900      	cmp	r1, #0
 80042d8:	d0c9      	beq.n	800426e <__sflush_r+0x1a>
 80042da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80042de:	4299      	cmp	r1, r3
 80042e0:	d002      	beq.n	80042e8 <__sflush_r+0x94>
 80042e2:	4628      	mov	r0, r5
 80042e4:	f000 f994 	bl	8004610 <_free_r>
 80042e8:	2000      	movs	r0, #0
 80042ea:	6360      	str	r0, [r4, #52]	; 0x34
 80042ec:	e7c0      	b.n	8004270 <__sflush_r+0x1c>
 80042ee:	2301      	movs	r3, #1
 80042f0:	4628      	mov	r0, r5
 80042f2:	47b0      	blx	r6
 80042f4:	1c41      	adds	r1, r0, #1
 80042f6:	d1c8      	bne.n	800428a <__sflush_r+0x36>
 80042f8:	682b      	ldr	r3, [r5, #0]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d0c5      	beq.n	800428a <__sflush_r+0x36>
 80042fe:	2b1d      	cmp	r3, #29
 8004300:	d001      	beq.n	8004306 <__sflush_r+0xb2>
 8004302:	2b16      	cmp	r3, #22
 8004304:	d101      	bne.n	800430a <__sflush_r+0xb6>
 8004306:	602f      	str	r7, [r5, #0]
 8004308:	e7b1      	b.n	800426e <__sflush_r+0x1a>
 800430a:	89a3      	ldrh	r3, [r4, #12]
 800430c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004310:	81a3      	strh	r3, [r4, #12]
 8004312:	e7ad      	b.n	8004270 <__sflush_r+0x1c>
 8004314:	690f      	ldr	r7, [r1, #16]
 8004316:	2f00      	cmp	r7, #0
 8004318:	d0a9      	beq.n	800426e <__sflush_r+0x1a>
 800431a:	0793      	lsls	r3, r2, #30
 800431c:	bf18      	it	ne
 800431e:	2300      	movne	r3, #0
 8004320:	680e      	ldr	r6, [r1, #0]
 8004322:	bf08      	it	eq
 8004324:	694b      	ldreq	r3, [r1, #20]
 8004326:	eba6 0807 	sub.w	r8, r6, r7
 800432a:	600f      	str	r7, [r1, #0]
 800432c:	608b      	str	r3, [r1, #8]
 800432e:	f1b8 0f00 	cmp.w	r8, #0
 8004332:	dd9c      	ble.n	800426e <__sflush_r+0x1a>
 8004334:	4643      	mov	r3, r8
 8004336:	463a      	mov	r2, r7
 8004338:	6a21      	ldr	r1, [r4, #32]
 800433a:	4628      	mov	r0, r5
 800433c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800433e:	47b0      	blx	r6
 8004340:	2800      	cmp	r0, #0
 8004342:	dc06      	bgt.n	8004352 <__sflush_r+0xfe>
 8004344:	89a3      	ldrh	r3, [r4, #12]
 8004346:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800434a:	81a3      	strh	r3, [r4, #12]
 800434c:	f04f 30ff 	mov.w	r0, #4294967295
 8004350:	e78e      	b.n	8004270 <__sflush_r+0x1c>
 8004352:	4407      	add	r7, r0
 8004354:	eba8 0800 	sub.w	r8, r8, r0
 8004358:	e7e9      	b.n	800432e <__sflush_r+0xda>
 800435a:	bf00      	nop
 800435c:	20400001 	.word	0x20400001

08004360 <_fflush_r>:
 8004360:	b538      	push	{r3, r4, r5, lr}
 8004362:	690b      	ldr	r3, [r1, #16]
 8004364:	4605      	mov	r5, r0
 8004366:	460c      	mov	r4, r1
 8004368:	b1db      	cbz	r3, 80043a2 <_fflush_r+0x42>
 800436a:	b118      	cbz	r0, 8004374 <_fflush_r+0x14>
 800436c:	6983      	ldr	r3, [r0, #24]
 800436e:	b90b      	cbnz	r3, 8004374 <_fflush_r+0x14>
 8004370:	f000 f860 	bl	8004434 <__sinit>
 8004374:	4b0c      	ldr	r3, [pc, #48]	; (80043a8 <_fflush_r+0x48>)
 8004376:	429c      	cmp	r4, r3
 8004378:	d109      	bne.n	800438e <_fflush_r+0x2e>
 800437a:	686c      	ldr	r4, [r5, #4]
 800437c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004380:	b17b      	cbz	r3, 80043a2 <_fflush_r+0x42>
 8004382:	4621      	mov	r1, r4
 8004384:	4628      	mov	r0, r5
 8004386:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800438a:	f7ff bf63 	b.w	8004254 <__sflush_r>
 800438e:	4b07      	ldr	r3, [pc, #28]	; (80043ac <_fflush_r+0x4c>)
 8004390:	429c      	cmp	r4, r3
 8004392:	d101      	bne.n	8004398 <_fflush_r+0x38>
 8004394:	68ac      	ldr	r4, [r5, #8]
 8004396:	e7f1      	b.n	800437c <_fflush_r+0x1c>
 8004398:	4b05      	ldr	r3, [pc, #20]	; (80043b0 <_fflush_r+0x50>)
 800439a:	429c      	cmp	r4, r3
 800439c:	bf08      	it	eq
 800439e:	68ec      	ldreq	r4, [r5, #12]
 80043a0:	e7ec      	b.n	800437c <_fflush_r+0x1c>
 80043a2:	2000      	movs	r0, #0
 80043a4:	bd38      	pop	{r3, r4, r5, pc}
 80043a6:	bf00      	nop
 80043a8:	08005274 	.word	0x08005274
 80043ac:	08005294 	.word	0x08005294
 80043b0:	08005254 	.word	0x08005254

080043b4 <std>:
 80043b4:	2300      	movs	r3, #0
 80043b6:	b510      	push	{r4, lr}
 80043b8:	4604      	mov	r4, r0
 80043ba:	e9c0 3300 	strd	r3, r3, [r0]
 80043be:	6083      	str	r3, [r0, #8]
 80043c0:	8181      	strh	r1, [r0, #12]
 80043c2:	6643      	str	r3, [r0, #100]	; 0x64
 80043c4:	81c2      	strh	r2, [r0, #14]
 80043c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80043ca:	6183      	str	r3, [r0, #24]
 80043cc:	4619      	mov	r1, r3
 80043ce:	2208      	movs	r2, #8
 80043d0:	305c      	adds	r0, #92	; 0x5c
 80043d2:	f7ff fdfb 	bl	8003fcc <memset>
 80043d6:	4b05      	ldr	r3, [pc, #20]	; (80043ec <std+0x38>)
 80043d8:	6224      	str	r4, [r4, #32]
 80043da:	6263      	str	r3, [r4, #36]	; 0x24
 80043dc:	4b04      	ldr	r3, [pc, #16]	; (80043f0 <std+0x3c>)
 80043de:	62a3      	str	r3, [r4, #40]	; 0x28
 80043e0:	4b04      	ldr	r3, [pc, #16]	; (80043f4 <std+0x40>)
 80043e2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80043e4:	4b04      	ldr	r3, [pc, #16]	; (80043f8 <std+0x44>)
 80043e6:	6323      	str	r3, [r4, #48]	; 0x30
 80043e8:	bd10      	pop	{r4, pc}
 80043ea:	bf00      	nop
 80043ec:	08004d09 	.word	0x08004d09
 80043f0:	08004d2b 	.word	0x08004d2b
 80043f4:	08004d63 	.word	0x08004d63
 80043f8:	08004d87 	.word	0x08004d87

080043fc <_cleanup_r>:
 80043fc:	4901      	ldr	r1, [pc, #4]	; (8004404 <_cleanup_r+0x8>)
 80043fe:	f000 b885 	b.w	800450c <_fwalk_reent>
 8004402:	bf00      	nop
 8004404:	08004361 	.word	0x08004361

08004408 <__sfmoreglue>:
 8004408:	b570      	push	{r4, r5, r6, lr}
 800440a:	2568      	movs	r5, #104	; 0x68
 800440c:	1e4a      	subs	r2, r1, #1
 800440e:	4355      	muls	r5, r2
 8004410:	460e      	mov	r6, r1
 8004412:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004416:	f000 f947 	bl	80046a8 <_malloc_r>
 800441a:	4604      	mov	r4, r0
 800441c:	b140      	cbz	r0, 8004430 <__sfmoreglue+0x28>
 800441e:	2100      	movs	r1, #0
 8004420:	e9c0 1600 	strd	r1, r6, [r0]
 8004424:	300c      	adds	r0, #12
 8004426:	60a0      	str	r0, [r4, #8]
 8004428:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800442c:	f7ff fdce 	bl	8003fcc <memset>
 8004430:	4620      	mov	r0, r4
 8004432:	bd70      	pop	{r4, r5, r6, pc}

08004434 <__sinit>:
 8004434:	6983      	ldr	r3, [r0, #24]
 8004436:	b510      	push	{r4, lr}
 8004438:	4604      	mov	r4, r0
 800443a:	bb33      	cbnz	r3, 800448a <__sinit+0x56>
 800443c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004440:	6503      	str	r3, [r0, #80]	; 0x50
 8004442:	4b12      	ldr	r3, [pc, #72]	; (800448c <__sinit+0x58>)
 8004444:	4a12      	ldr	r2, [pc, #72]	; (8004490 <__sinit+0x5c>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	6282      	str	r2, [r0, #40]	; 0x28
 800444a:	4298      	cmp	r0, r3
 800444c:	bf04      	itt	eq
 800444e:	2301      	moveq	r3, #1
 8004450:	6183      	streq	r3, [r0, #24]
 8004452:	f000 f81f 	bl	8004494 <__sfp>
 8004456:	6060      	str	r0, [r4, #4]
 8004458:	4620      	mov	r0, r4
 800445a:	f000 f81b 	bl	8004494 <__sfp>
 800445e:	60a0      	str	r0, [r4, #8]
 8004460:	4620      	mov	r0, r4
 8004462:	f000 f817 	bl	8004494 <__sfp>
 8004466:	2200      	movs	r2, #0
 8004468:	60e0      	str	r0, [r4, #12]
 800446a:	2104      	movs	r1, #4
 800446c:	6860      	ldr	r0, [r4, #4]
 800446e:	f7ff ffa1 	bl	80043b4 <std>
 8004472:	2201      	movs	r2, #1
 8004474:	2109      	movs	r1, #9
 8004476:	68a0      	ldr	r0, [r4, #8]
 8004478:	f7ff ff9c 	bl	80043b4 <std>
 800447c:	2202      	movs	r2, #2
 800447e:	2112      	movs	r1, #18
 8004480:	68e0      	ldr	r0, [r4, #12]
 8004482:	f7ff ff97 	bl	80043b4 <std>
 8004486:	2301      	movs	r3, #1
 8004488:	61a3      	str	r3, [r4, #24]
 800448a:	bd10      	pop	{r4, pc}
 800448c:	08005250 	.word	0x08005250
 8004490:	080043fd 	.word	0x080043fd

08004494 <__sfp>:
 8004494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004496:	4b1b      	ldr	r3, [pc, #108]	; (8004504 <__sfp+0x70>)
 8004498:	4607      	mov	r7, r0
 800449a:	681e      	ldr	r6, [r3, #0]
 800449c:	69b3      	ldr	r3, [r6, #24]
 800449e:	b913      	cbnz	r3, 80044a6 <__sfp+0x12>
 80044a0:	4630      	mov	r0, r6
 80044a2:	f7ff ffc7 	bl	8004434 <__sinit>
 80044a6:	3648      	adds	r6, #72	; 0x48
 80044a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80044ac:	3b01      	subs	r3, #1
 80044ae:	d503      	bpl.n	80044b8 <__sfp+0x24>
 80044b0:	6833      	ldr	r3, [r6, #0]
 80044b2:	b133      	cbz	r3, 80044c2 <__sfp+0x2e>
 80044b4:	6836      	ldr	r6, [r6, #0]
 80044b6:	e7f7      	b.n	80044a8 <__sfp+0x14>
 80044b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80044bc:	b16d      	cbz	r5, 80044da <__sfp+0x46>
 80044be:	3468      	adds	r4, #104	; 0x68
 80044c0:	e7f4      	b.n	80044ac <__sfp+0x18>
 80044c2:	2104      	movs	r1, #4
 80044c4:	4638      	mov	r0, r7
 80044c6:	f7ff ff9f 	bl	8004408 <__sfmoreglue>
 80044ca:	6030      	str	r0, [r6, #0]
 80044cc:	2800      	cmp	r0, #0
 80044ce:	d1f1      	bne.n	80044b4 <__sfp+0x20>
 80044d0:	230c      	movs	r3, #12
 80044d2:	4604      	mov	r4, r0
 80044d4:	603b      	str	r3, [r7, #0]
 80044d6:	4620      	mov	r0, r4
 80044d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044da:	4b0b      	ldr	r3, [pc, #44]	; (8004508 <__sfp+0x74>)
 80044dc:	6665      	str	r5, [r4, #100]	; 0x64
 80044de:	e9c4 5500 	strd	r5, r5, [r4]
 80044e2:	60a5      	str	r5, [r4, #8]
 80044e4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80044e8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80044ec:	2208      	movs	r2, #8
 80044ee:	4629      	mov	r1, r5
 80044f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80044f4:	f7ff fd6a 	bl	8003fcc <memset>
 80044f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80044fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004500:	e7e9      	b.n	80044d6 <__sfp+0x42>
 8004502:	bf00      	nop
 8004504:	08005250 	.word	0x08005250
 8004508:	ffff0001 	.word	0xffff0001

0800450c <_fwalk_reent>:
 800450c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004510:	4680      	mov	r8, r0
 8004512:	4689      	mov	r9, r1
 8004514:	2600      	movs	r6, #0
 8004516:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800451a:	b914      	cbnz	r4, 8004522 <_fwalk_reent+0x16>
 800451c:	4630      	mov	r0, r6
 800451e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004522:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8004526:	3f01      	subs	r7, #1
 8004528:	d501      	bpl.n	800452e <_fwalk_reent+0x22>
 800452a:	6824      	ldr	r4, [r4, #0]
 800452c:	e7f5      	b.n	800451a <_fwalk_reent+0xe>
 800452e:	89ab      	ldrh	r3, [r5, #12]
 8004530:	2b01      	cmp	r3, #1
 8004532:	d907      	bls.n	8004544 <_fwalk_reent+0x38>
 8004534:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004538:	3301      	adds	r3, #1
 800453a:	d003      	beq.n	8004544 <_fwalk_reent+0x38>
 800453c:	4629      	mov	r1, r5
 800453e:	4640      	mov	r0, r8
 8004540:	47c8      	blx	r9
 8004542:	4306      	orrs	r6, r0
 8004544:	3568      	adds	r5, #104	; 0x68
 8004546:	e7ee      	b.n	8004526 <_fwalk_reent+0x1a>

08004548 <__swhatbuf_r>:
 8004548:	b570      	push	{r4, r5, r6, lr}
 800454a:	460e      	mov	r6, r1
 800454c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004550:	b096      	sub	sp, #88	; 0x58
 8004552:	2900      	cmp	r1, #0
 8004554:	4614      	mov	r4, r2
 8004556:	461d      	mov	r5, r3
 8004558:	da07      	bge.n	800456a <__swhatbuf_r+0x22>
 800455a:	2300      	movs	r3, #0
 800455c:	602b      	str	r3, [r5, #0]
 800455e:	89b3      	ldrh	r3, [r6, #12]
 8004560:	061a      	lsls	r2, r3, #24
 8004562:	d410      	bmi.n	8004586 <__swhatbuf_r+0x3e>
 8004564:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004568:	e00e      	b.n	8004588 <__swhatbuf_r+0x40>
 800456a:	466a      	mov	r2, sp
 800456c:	f000 fc32 	bl	8004dd4 <_fstat_r>
 8004570:	2800      	cmp	r0, #0
 8004572:	dbf2      	blt.n	800455a <__swhatbuf_r+0x12>
 8004574:	9a01      	ldr	r2, [sp, #4]
 8004576:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800457a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800457e:	425a      	negs	r2, r3
 8004580:	415a      	adcs	r2, r3
 8004582:	602a      	str	r2, [r5, #0]
 8004584:	e7ee      	b.n	8004564 <__swhatbuf_r+0x1c>
 8004586:	2340      	movs	r3, #64	; 0x40
 8004588:	2000      	movs	r0, #0
 800458a:	6023      	str	r3, [r4, #0]
 800458c:	b016      	add	sp, #88	; 0x58
 800458e:	bd70      	pop	{r4, r5, r6, pc}

08004590 <__smakebuf_r>:
 8004590:	898b      	ldrh	r3, [r1, #12]
 8004592:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004594:	079d      	lsls	r5, r3, #30
 8004596:	4606      	mov	r6, r0
 8004598:	460c      	mov	r4, r1
 800459a:	d507      	bpl.n	80045ac <__smakebuf_r+0x1c>
 800459c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80045a0:	6023      	str	r3, [r4, #0]
 80045a2:	6123      	str	r3, [r4, #16]
 80045a4:	2301      	movs	r3, #1
 80045a6:	6163      	str	r3, [r4, #20]
 80045a8:	b002      	add	sp, #8
 80045aa:	bd70      	pop	{r4, r5, r6, pc}
 80045ac:	ab01      	add	r3, sp, #4
 80045ae:	466a      	mov	r2, sp
 80045b0:	f7ff ffca 	bl	8004548 <__swhatbuf_r>
 80045b4:	9900      	ldr	r1, [sp, #0]
 80045b6:	4605      	mov	r5, r0
 80045b8:	4630      	mov	r0, r6
 80045ba:	f000 f875 	bl	80046a8 <_malloc_r>
 80045be:	b948      	cbnz	r0, 80045d4 <__smakebuf_r+0x44>
 80045c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045c4:	059a      	lsls	r2, r3, #22
 80045c6:	d4ef      	bmi.n	80045a8 <__smakebuf_r+0x18>
 80045c8:	f023 0303 	bic.w	r3, r3, #3
 80045cc:	f043 0302 	orr.w	r3, r3, #2
 80045d0:	81a3      	strh	r3, [r4, #12]
 80045d2:	e7e3      	b.n	800459c <__smakebuf_r+0xc>
 80045d4:	4b0d      	ldr	r3, [pc, #52]	; (800460c <__smakebuf_r+0x7c>)
 80045d6:	62b3      	str	r3, [r6, #40]	; 0x28
 80045d8:	89a3      	ldrh	r3, [r4, #12]
 80045da:	6020      	str	r0, [r4, #0]
 80045dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045e0:	81a3      	strh	r3, [r4, #12]
 80045e2:	9b00      	ldr	r3, [sp, #0]
 80045e4:	6120      	str	r0, [r4, #16]
 80045e6:	6163      	str	r3, [r4, #20]
 80045e8:	9b01      	ldr	r3, [sp, #4]
 80045ea:	b15b      	cbz	r3, 8004604 <__smakebuf_r+0x74>
 80045ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80045f0:	4630      	mov	r0, r6
 80045f2:	f000 fc01 	bl	8004df8 <_isatty_r>
 80045f6:	b128      	cbz	r0, 8004604 <__smakebuf_r+0x74>
 80045f8:	89a3      	ldrh	r3, [r4, #12]
 80045fa:	f023 0303 	bic.w	r3, r3, #3
 80045fe:	f043 0301 	orr.w	r3, r3, #1
 8004602:	81a3      	strh	r3, [r4, #12]
 8004604:	89a3      	ldrh	r3, [r4, #12]
 8004606:	431d      	orrs	r5, r3
 8004608:	81a5      	strh	r5, [r4, #12]
 800460a:	e7cd      	b.n	80045a8 <__smakebuf_r+0x18>
 800460c:	080043fd 	.word	0x080043fd

08004610 <_free_r>:
 8004610:	b538      	push	{r3, r4, r5, lr}
 8004612:	4605      	mov	r5, r0
 8004614:	2900      	cmp	r1, #0
 8004616:	d043      	beq.n	80046a0 <_free_r+0x90>
 8004618:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800461c:	1f0c      	subs	r4, r1, #4
 800461e:	2b00      	cmp	r3, #0
 8004620:	bfb8      	it	lt
 8004622:	18e4      	addlt	r4, r4, r3
 8004624:	f000 fc18 	bl	8004e58 <__malloc_lock>
 8004628:	4a1e      	ldr	r2, [pc, #120]	; (80046a4 <_free_r+0x94>)
 800462a:	6813      	ldr	r3, [r2, #0]
 800462c:	4610      	mov	r0, r2
 800462e:	b933      	cbnz	r3, 800463e <_free_r+0x2e>
 8004630:	6063      	str	r3, [r4, #4]
 8004632:	6014      	str	r4, [r2, #0]
 8004634:	4628      	mov	r0, r5
 8004636:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800463a:	f000 bc0e 	b.w	8004e5a <__malloc_unlock>
 800463e:	42a3      	cmp	r3, r4
 8004640:	d90b      	bls.n	800465a <_free_r+0x4a>
 8004642:	6821      	ldr	r1, [r4, #0]
 8004644:	1862      	adds	r2, r4, r1
 8004646:	4293      	cmp	r3, r2
 8004648:	bf01      	itttt	eq
 800464a:	681a      	ldreq	r2, [r3, #0]
 800464c:	685b      	ldreq	r3, [r3, #4]
 800464e:	1852      	addeq	r2, r2, r1
 8004650:	6022      	streq	r2, [r4, #0]
 8004652:	6063      	str	r3, [r4, #4]
 8004654:	6004      	str	r4, [r0, #0]
 8004656:	e7ed      	b.n	8004634 <_free_r+0x24>
 8004658:	4613      	mov	r3, r2
 800465a:	685a      	ldr	r2, [r3, #4]
 800465c:	b10a      	cbz	r2, 8004662 <_free_r+0x52>
 800465e:	42a2      	cmp	r2, r4
 8004660:	d9fa      	bls.n	8004658 <_free_r+0x48>
 8004662:	6819      	ldr	r1, [r3, #0]
 8004664:	1858      	adds	r0, r3, r1
 8004666:	42a0      	cmp	r0, r4
 8004668:	d10b      	bne.n	8004682 <_free_r+0x72>
 800466a:	6820      	ldr	r0, [r4, #0]
 800466c:	4401      	add	r1, r0
 800466e:	1858      	adds	r0, r3, r1
 8004670:	4282      	cmp	r2, r0
 8004672:	6019      	str	r1, [r3, #0]
 8004674:	d1de      	bne.n	8004634 <_free_r+0x24>
 8004676:	6810      	ldr	r0, [r2, #0]
 8004678:	6852      	ldr	r2, [r2, #4]
 800467a:	4401      	add	r1, r0
 800467c:	6019      	str	r1, [r3, #0]
 800467e:	605a      	str	r2, [r3, #4]
 8004680:	e7d8      	b.n	8004634 <_free_r+0x24>
 8004682:	d902      	bls.n	800468a <_free_r+0x7a>
 8004684:	230c      	movs	r3, #12
 8004686:	602b      	str	r3, [r5, #0]
 8004688:	e7d4      	b.n	8004634 <_free_r+0x24>
 800468a:	6820      	ldr	r0, [r4, #0]
 800468c:	1821      	adds	r1, r4, r0
 800468e:	428a      	cmp	r2, r1
 8004690:	bf01      	itttt	eq
 8004692:	6811      	ldreq	r1, [r2, #0]
 8004694:	6852      	ldreq	r2, [r2, #4]
 8004696:	1809      	addeq	r1, r1, r0
 8004698:	6021      	streq	r1, [r4, #0]
 800469a:	6062      	str	r2, [r4, #4]
 800469c:	605c      	str	r4, [r3, #4]
 800469e:	e7c9      	b.n	8004634 <_free_r+0x24>
 80046a0:	bd38      	pop	{r3, r4, r5, pc}
 80046a2:	bf00      	nop
 80046a4:	200000a0 	.word	0x200000a0

080046a8 <_malloc_r>:
 80046a8:	b570      	push	{r4, r5, r6, lr}
 80046aa:	1ccd      	adds	r5, r1, #3
 80046ac:	f025 0503 	bic.w	r5, r5, #3
 80046b0:	3508      	adds	r5, #8
 80046b2:	2d0c      	cmp	r5, #12
 80046b4:	bf38      	it	cc
 80046b6:	250c      	movcc	r5, #12
 80046b8:	2d00      	cmp	r5, #0
 80046ba:	4606      	mov	r6, r0
 80046bc:	db01      	blt.n	80046c2 <_malloc_r+0x1a>
 80046be:	42a9      	cmp	r1, r5
 80046c0:	d903      	bls.n	80046ca <_malloc_r+0x22>
 80046c2:	230c      	movs	r3, #12
 80046c4:	6033      	str	r3, [r6, #0]
 80046c6:	2000      	movs	r0, #0
 80046c8:	bd70      	pop	{r4, r5, r6, pc}
 80046ca:	f000 fbc5 	bl	8004e58 <__malloc_lock>
 80046ce:	4a21      	ldr	r2, [pc, #132]	; (8004754 <_malloc_r+0xac>)
 80046d0:	6814      	ldr	r4, [r2, #0]
 80046d2:	4621      	mov	r1, r4
 80046d4:	b991      	cbnz	r1, 80046fc <_malloc_r+0x54>
 80046d6:	4c20      	ldr	r4, [pc, #128]	; (8004758 <_malloc_r+0xb0>)
 80046d8:	6823      	ldr	r3, [r4, #0]
 80046da:	b91b      	cbnz	r3, 80046e4 <_malloc_r+0x3c>
 80046dc:	4630      	mov	r0, r6
 80046de:	f000 fb03 	bl	8004ce8 <_sbrk_r>
 80046e2:	6020      	str	r0, [r4, #0]
 80046e4:	4629      	mov	r1, r5
 80046e6:	4630      	mov	r0, r6
 80046e8:	f000 fafe 	bl	8004ce8 <_sbrk_r>
 80046ec:	1c43      	adds	r3, r0, #1
 80046ee:	d124      	bne.n	800473a <_malloc_r+0x92>
 80046f0:	230c      	movs	r3, #12
 80046f2:	4630      	mov	r0, r6
 80046f4:	6033      	str	r3, [r6, #0]
 80046f6:	f000 fbb0 	bl	8004e5a <__malloc_unlock>
 80046fa:	e7e4      	b.n	80046c6 <_malloc_r+0x1e>
 80046fc:	680b      	ldr	r3, [r1, #0]
 80046fe:	1b5b      	subs	r3, r3, r5
 8004700:	d418      	bmi.n	8004734 <_malloc_r+0x8c>
 8004702:	2b0b      	cmp	r3, #11
 8004704:	d90f      	bls.n	8004726 <_malloc_r+0x7e>
 8004706:	600b      	str	r3, [r1, #0]
 8004708:	18cc      	adds	r4, r1, r3
 800470a:	50cd      	str	r5, [r1, r3]
 800470c:	4630      	mov	r0, r6
 800470e:	f000 fba4 	bl	8004e5a <__malloc_unlock>
 8004712:	f104 000b 	add.w	r0, r4, #11
 8004716:	1d23      	adds	r3, r4, #4
 8004718:	f020 0007 	bic.w	r0, r0, #7
 800471c:	1ac3      	subs	r3, r0, r3
 800471e:	d0d3      	beq.n	80046c8 <_malloc_r+0x20>
 8004720:	425a      	negs	r2, r3
 8004722:	50e2      	str	r2, [r4, r3]
 8004724:	e7d0      	b.n	80046c8 <_malloc_r+0x20>
 8004726:	684b      	ldr	r3, [r1, #4]
 8004728:	428c      	cmp	r4, r1
 800472a:	bf16      	itet	ne
 800472c:	6063      	strne	r3, [r4, #4]
 800472e:	6013      	streq	r3, [r2, #0]
 8004730:	460c      	movne	r4, r1
 8004732:	e7eb      	b.n	800470c <_malloc_r+0x64>
 8004734:	460c      	mov	r4, r1
 8004736:	6849      	ldr	r1, [r1, #4]
 8004738:	e7cc      	b.n	80046d4 <_malloc_r+0x2c>
 800473a:	1cc4      	adds	r4, r0, #3
 800473c:	f024 0403 	bic.w	r4, r4, #3
 8004740:	42a0      	cmp	r0, r4
 8004742:	d005      	beq.n	8004750 <_malloc_r+0xa8>
 8004744:	1a21      	subs	r1, r4, r0
 8004746:	4630      	mov	r0, r6
 8004748:	f000 face 	bl	8004ce8 <_sbrk_r>
 800474c:	3001      	adds	r0, #1
 800474e:	d0cf      	beq.n	80046f0 <_malloc_r+0x48>
 8004750:	6025      	str	r5, [r4, #0]
 8004752:	e7db      	b.n	800470c <_malloc_r+0x64>
 8004754:	200000a0 	.word	0x200000a0
 8004758:	200000a4 	.word	0x200000a4

0800475c <__sfputc_r>:
 800475c:	6893      	ldr	r3, [r2, #8]
 800475e:	b410      	push	{r4}
 8004760:	3b01      	subs	r3, #1
 8004762:	2b00      	cmp	r3, #0
 8004764:	6093      	str	r3, [r2, #8]
 8004766:	da07      	bge.n	8004778 <__sfputc_r+0x1c>
 8004768:	6994      	ldr	r4, [r2, #24]
 800476a:	42a3      	cmp	r3, r4
 800476c:	db01      	blt.n	8004772 <__sfputc_r+0x16>
 800476e:	290a      	cmp	r1, #10
 8004770:	d102      	bne.n	8004778 <__sfputc_r+0x1c>
 8004772:	bc10      	pop	{r4}
 8004774:	f7ff bcae 	b.w	80040d4 <__swbuf_r>
 8004778:	6813      	ldr	r3, [r2, #0]
 800477a:	1c58      	adds	r0, r3, #1
 800477c:	6010      	str	r0, [r2, #0]
 800477e:	7019      	strb	r1, [r3, #0]
 8004780:	4608      	mov	r0, r1
 8004782:	bc10      	pop	{r4}
 8004784:	4770      	bx	lr

08004786 <__sfputs_r>:
 8004786:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004788:	4606      	mov	r6, r0
 800478a:	460f      	mov	r7, r1
 800478c:	4614      	mov	r4, r2
 800478e:	18d5      	adds	r5, r2, r3
 8004790:	42ac      	cmp	r4, r5
 8004792:	d101      	bne.n	8004798 <__sfputs_r+0x12>
 8004794:	2000      	movs	r0, #0
 8004796:	e007      	b.n	80047a8 <__sfputs_r+0x22>
 8004798:	463a      	mov	r2, r7
 800479a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800479e:	4630      	mov	r0, r6
 80047a0:	f7ff ffdc 	bl	800475c <__sfputc_r>
 80047a4:	1c43      	adds	r3, r0, #1
 80047a6:	d1f3      	bne.n	8004790 <__sfputs_r+0xa>
 80047a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080047ac <_vfiprintf_r>:
 80047ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047b0:	460c      	mov	r4, r1
 80047b2:	b09d      	sub	sp, #116	; 0x74
 80047b4:	4617      	mov	r7, r2
 80047b6:	461d      	mov	r5, r3
 80047b8:	4606      	mov	r6, r0
 80047ba:	b118      	cbz	r0, 80047c4 <_vfiprintf_r+0x18>
 80047bc:	6983      	ldr	r3, [r0, #24]
 80047be:	b90b      	cbnz	r3, 80047c4 <_vfiprintf_r+0x18>
 80047c0:	f7ff fe38 	bl	8004434 <__sinit>
 80047c4:	4b7c      	ldr	r3, [pc, #496]	; (80049b8 <_vfiprintf_r+0x20c>)
 80047c6:	429c      	cmp	r4, r3
 80047c8:	d158      	bne.n	800487c <_vfiprintf_r+0xd0>
 80047ca:	6874      	ldr	r4, [r6, #4]
 80047cc:	89a3      	ldrh	r3, [r4, #12]
 80047ce:	0718      	lsls	r0, r3, #28
 80047d0:	d55e      	bpl.n	8004890 <_vfiprintf_r+0xe4>
 80047d2:	6923      	ldr	r3, [r4, #16]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d05b      	beq.n	8004890 <_vfiprintf_r+0xe4>
 80047d8:	2300      	movs	r3, #0
 80047da:	9309      	str	r3, [sp, #36]	; 0x24
 80047dc:	2320      	movs	r3, #32
 80047de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80047e2:	2330      	movs	r3, #48	; 0x30
 80047e4:	f04f 0b01 	mov.w	fp, #1
 80047e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80047ec:	9503      	str	r5, [sp, #12]
 80047ee:	46b8      	mov	r8, r7
 80047f0:	4645      	mov	r5, r8
 80047f2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80047f6:	b10b      	cbz	r3, 80047fc <_vfiprintf_r+0x50>
 80047f8:	2b25      	cmp	r3, #37	; 0x25
 80047fa:	d154      	bne.n	80048a6 <_vfiprintf_r+0xfa>
 80047fc:	ebb8 0a07 	subs.w	sl, r8, r7
 8004800:	d00b      	beq.n	800481a <_vfiprintf_r+0x6e>
 8004802:	4653      	mov	r3, sl
 8004804:	463a      	mov	r2, r7
 8004806:	4621      	mov	r1, r4
 8004808:	4630      	mov	r0, r6
 800480a:	f7ff ffbc 	bl	8004786 <__sfputs_r>
 800480e:	3001      	adds	r0, #1
 8004810:	f000 80c2 	beq.w	8004998 <_vfiprintf_r+0x1ec>
 8004814:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004816:	4453      	add	r3, sl
 8004818:	9309      	str	r3, [sp, #36]	; 0x24
 800481a:	f898 3000 	ldrb.w	r3, [r8]
 800481e:	2b00      	cmp	r3, #0
 8004820:	f000 80ba 	beq.w	8004998 <_vfiprintf_r+0x1ec>
 8004824:	2300      	movs	r3, #0
 8004826:	f04f 32ff 	mov.w	r2, #4294967295
 800482a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800482e:	9304      	str	r3, [sp, #16]
 8004830:	9307      	str	r3, [sp, #28]
 8004832:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004836:	931a      	str	r3, [sp, #104]	; 0x68
 8004838:	46a8      	mov	r8, r5
 800483a:	2205      	movs	r2, #5
 800483c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8004840:	485e      	ldr	r0, [pc, #376]	; (80049bc <_vfiprintf_r+0x210>)
 8004842:	f000 fafb 	bl	8004e3c <memchr>
 8004846:	9b04      	ldr	r3, [sp, #16]
 8004848:	bb78      	cbnz	r0, 80048aa <_vfiprintf_r+0xfe>
 800484a:	06d9      	lsls	r1, r3, #27
 800484c:	bf44      	itt	mi
 800484e:	2220      	movmi	r2, #32
 8004850:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004854:	071a      	lsls	r2, r3, #28
 8004856:	bf44      	itt	mi
 8004858:	222b      	movmi	r2, #43	; 0x2b
 800485a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800485e:	782a      	ldrb	r2, [r5, #0]
 8004860:	2a2a      	cmp	r2, #42	; 0x2a
 8004862:	d02a      	beq.n	80048ba <_vfiprintf_r+0x10e>
 8004864:	46a8      	mov	r8, r5
 8004866:	2000      	movs	r0, #0
 8004868:	250a      	movs	r5, #10
 800486a:	9a07      	ldr	r2, [sp, #28]
 800486c:	4641      	mov	r1, r8
 800486e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004872:	3b30      	subs	r3, #48	; 0x30
 8004874:	2b09      	cmp	r3, #9
 8004876:	d969      	bls.n	800494c <_vfiprintf_r+0x1a0>
 8004878:	b360      	cbz	r0, 80048d4 <_vfiprintf_r+0x128>
 800487a:	e024      	b.n	80048c6 <_vfiprintf_r+0x11a>
 800487c:	4b50      	ldr	r3, [pc, #320]	; (80049c0 <_vfiprintf_r+0x214>)
 800487e:	429c      	cmp	r4, r3
 8004880:	d101      	bne.n	8004886 <_vfiprintf_r+0xda>
 8004882:	68b4      	ldr	r4, [r6, #8]
 8004884:	e7a2      	b.n	80047cc <_vfiprintf_r+0x20>
 8004886:	4b4f      	ldr	r3, [pc, #316]	; (80049c4 <_vfiprintf_r+0x218>)
 8004888:	429c      	cmp	r4, r3
 800488a:	bf08      	it	eq
 800488c:	68f4      	ldreq	r4, [r6, #12]
 800488e:	e79d      	b.n	80047cc <_vfiprintf_r+0x20>
 8004890:	4621      	mov	r1, r4
 8004892:	4630      	mov	r0, r6
 8004894:	f7ff fc70 	bl	8004178 <__swsetup_r>
 8004898:	2800      	cmp	r0, #0
 800489a:	d09d      	beq.n	80047d8 <_vfiprintf_r+0x2c>
 800489c:	f04f 30ff 	mov.w	r0, #4294967295
 80048a0:	b01d      	add	sp, #116	; 0x74
 80048a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048a6:	46a8      	mov	r8, r5
 80048a8:	e7a2      	b.n	80047f0 <_vfiprintf_r+0x44>
 80048aa:	4a44      	ldr	r2, [pc, #272]	; (80049bc <_vfiprintf_r+0x210>)
 80048ac:	4645      	mov	r5, r8
 80048ae:	1a80      	subs	r0, r0, r2
 80048b0:	fa0b f000 	lsl.w	r0, fp, r0
 80048b4:	4318      	orrs	r0, r3
 80048b6:	9004      	str	r0, [sp, #16]
 80048b8:	e7be      	b.n	8004838 <_vfiprintf_r+0x8c>
 80048ba:	9a03      	ldr	r2, [sp, #12]
 80048bc:	1d11      	adds	r1, r2, #4
 80048be:	6812      	ldr	r2, [r2, #0]
 80048c0:	9103      	str	r1, [sp, #12]
 80048c2:	2a00      	cmp	r2, #0
 80048c4:	db01      	blt.n	80048ca <_vfiprintf_r+0x11e>
 80048c6:	9207      	str	r2, [sp, #28]
 80048c8:	e004      	b.n	80048d4 <_vfiprintf_r+0x128>
 80048ca:	4252      	negs	r2, r2
 80048cc:	f043 0302 	orr.w	r3, r3, #2
 80048d0:	9207      	str	r2, [sp, #28]
 80048d2:	9304      	str	r3, [sp, #16]
 80048d4:	f898 3000 	ldrb.w	r3, [r8]
 80048d8:	2b2e      	cmp	r3, #46	; 0x2e
 80048da:	d10e      	bne.n	80048fa <_vfiprintf_r+0x14e>
 80048dc:	f898 3001 	ldrb.w	r3, [r8, #1]
 80048e0:	2b2a      	cmp	r3, #42	; 0x2a
 80048e2:	d138      	bne.n	8004956 <_vfiprintf_r+0x1aa>
 80048e4:	9b03      	ldr	r3, [sp, #12]
 80048e6:	f108 0802 	add.w	r8, r8, #2
 80048ea:	1d1a      	adds	r2, r3, #4
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	9203      	str	r2, [sp, #12]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	bfb8      	it	lt
 80048f4:	f04f 33ff 	movlt.w	r3, #4294967295
 80048f8:	9305      	str	r3, [sp, #20]
 80048fa:	4d33      	ldr	r5, [pc, #204]	; (80049c8 <_vfiprintf_r+0x21c>)
 80048fc:	2203      	movs	r2, #3
 80048fe:	f898 1000 	ldrb.w	r1, [r8]
 8004902:	4628      	mov	r0, r5
 8004904:	f000 fa9a 	bl	8004e3c <memchr>
 8004908:	b140      	cbz	r0, 800491c <_vfiprintf_r+0x170>
 800490a:	2340      	movs	r3, #64	; 0x40
 800490c:	1b40      	subs	r0, r0, r5
 800490e:	fa03 f000 	lsl.w	r0, r3, r0
 8004912:	9b04      	ldr	r3, [sp, #16]
 8004914:	f108 0801 	add.w	r8, r8, #1
 8004918:	4303      	orrs	r3, r0
 800491a:	9304      	str	r3, [sp, #16]
 800491c:	f898 1000 	ldrb.w	r1, [r8]
 8004920:	2206      	movs	r2, #6
 8004922:	482a      	ldr	r0, [pc, #168]	; (80049cc <_vfiprintf_r+0x220>)
 8004924:	f108 0701 	add.w	r7, r8, #1
 8004928:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800492c:	f000 fa86 	bl	8004e3c <memchr>
 8004930:	2800      	cmp	r0, #0
 8004932:	d037      	beq.n	80049a4 <_vfiprintf_r+0x1f8>
 8004934:	4b26      	ldr	r3, [pc, #152]	; (80049d0 <_vfiprintf_r+0x224>)
 8004936:	bb1b      	cbnz	r3, 8004980 <_vfiprintf_r+0x1d4>
 8004938:	9b03      	ldr	r3, [sp, #12]
 800493a:	3307      	adds	r3, #7
 800493c:	f023 0307 	bic.w	r3, r3, #7
 8004940:	3308      	adds	r3, #8
 8004942:	9303      	str	r3, [sp, #12]
 8004944:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004946:	444b      	add	r3, r9
 8004948:	9309      	str	r3, [sp, #36]	; 0x24
 800494a:	e750      	b.n	80047ee <_vfiprintf_r+0x42>
 800494c:	fb05 3202 	mla	r2, r5, r2, r3
 8004950:	2001      	movs	r0, #1
 8004952:	4688      	mov	r8, r1
 8004954:	e78a      	b.n	800486c <_vfiprintf_r+0xc0>
 8004956:	2300      	movs	r3, #0
 8004958:	250a      	movs	r5, #10
 800495a:	4619      	mov	r1, r3
 800495c:	f108 0801 	add.w	r8, r8, #1
 8004960:	9305      	str	r3, [sp, #20]
 8004962:	4640      	mov	r0, r8
 8004964:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004968:	3a30      	subs	r2, #48	; 0x30
 800496a:	2a09      	cmp	r2, #9
 800496c:	d903      	bls.n	8004976 <_vfiprintf_r+0x1ca>
 800496e:	2b00      	cmp	r3, #0
 8004970:	d0c3      	beq.n	80048fa <_vfiprintf_r+0x14e>
 8004972:	9105      	str	r1, [sp, #20]
 8004974:	e7c1      	b.n	80048fa <_vfiprintf_r+0x14e>
 8004976:	fb05 2101 	mla	r1, r5, r1, r2
 800497a:	2301      	movs	r3, #1
 800497c:	4680      	mov	r8, r0
 800497e:	e7f0      	b.n	8004962 <_vfiprintf_r+0x1b6>
 8004980:	ab03      	add	r3, sp, #12
 8004982:	9300      	str	r3, [sp, #0]
 8004984:	4622      	mov	r2, r4
 8004986:	4b13      	ldr	r3, [pc, #76]	; (80049d4 <_vfiprintf_r+0x228>)
 8004988:	a904      	add	r1, sp, #16
 800498a:	4630      	mov	r0, r6
 800498c:	f3af 8000 	nop.w
 8004990:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004994:	4681      	mov	r9, r0
 8004996:	d1d5      	bne.n	8004944 <_vfiprintf_r+0x198>
 8004998:	89a3      	ldrh	r3, [r4, #12]
 800499a:	065b      	lsls	r3, r3, #25
 800499c:	f53f af7e 	bmi.w	800489c <_vfiprintf_r+0xf0>
 80049a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80049a2:	e77d      	b.n	80048a0 <_vfiprintf_r+0xf4>
 80049a4:	ab03      	add	r3, sp, #12
 80049a6:	9300      	str	r3, [sp, #0]
 80049a8:	4622      	mov	r2, r4
 80049aa:	4b0a      	ldr	r3, [pc, #40]	; (80049d4 <_vfiprintf_r+0x228>)
 80049ac:	a904      	add	r1, sp, #16
 80049ae:	4630      	mov	r0, r6
 80049b0:	f000 f888 	bl	8004ac4 <_printf_i>
 80049b4:	e7ec      	b.n	8004990 <_vfiprintf_r+0x1e4>
 80049b6:	bf00      	nop
 80049b8:	08005274 	.word	0x08005274
 80049bc:	080052b4 	.word	0x080052b4
 80049c0:	08005294 	.word	0x08005294
 80049c4:	08005254 	.word	0x08005254
 80049c8:	080052ba 	.word	0x080052ba
 80049cc:	080052be 	.word	0x080052be
 80049d0:	00000000 	.word	0x00000000
 80049d4:	08004787 	.word	0x08004787

080049d8 <_printf_common>:
 80049d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049dc:	4691      	mov	r9, r2
 80049de:	461f      	mov	r7, r3
 80049e0:	688a      	ldr	r2, [r1, #8]
 80049e2:	690b      	ldr	r3, [r1, #16]
 80049e4:	4606      	mov	r6, r0
 80049e6:	4293      	cmp	r3, r2
 80049e8:	bfb8      	it	lt
 80049ea:	4613      	movlt	r3, r2
 80049ec:	f8c9 3000 	str.w	r3, [r9]
 80049f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80049f4:	460c      	mov	r4, r1
 80049f6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80049fa:	b112      	cbz	r2, 8004a02 <_printf_common+0x2a>
 80049fc:	3301      	adds	r3, #1
 80049fe:	f8c9 3000 	str.w	r3, [r9]
 8004a02:	6823      	ldr	r3, [r4, #0]
 8004a04:	0699      	lsls	r1, r3, #26
 8004a06:	bf42      	ittt	mi
 8004a08:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004a0c:	3302      	addmi	r3, #2
 8004a0e:	f8c9 3000 	strmi.w	r3, [r9]
 8004a12:	6825      	ldr	r5, [r4, #0]
 8004a14:	f015 0506 	ands.w	r5, r5, #6
 8004a18:	d107      	bne.n	8004a2a <_printf_common+0x52>
 8004a1a:	f104 0a19 	add.w	sl, r4, #25
 8004a1e:	68e3      	ldr	r3, [r4, #12]
 8004a20:	f8d9 2000 	ldr.w	r2, [r9]
 8004a24:	1a9b      	subs	r3, r3, r2
 8004a26:	42ab      	cmp	r3, r5
 8004a28:	dc29      	bgt.n	8004a7e <_printf_common+0xa6>
 8004a2a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004a2e:	6822      	ldr	r2, [r4, #0]
 8004a30:	3300      	adds	r3, #0
 8004a32:	bf18      	it	ne
 8004a34:	2301      	movne	r3, #1
 8004a36:	0692      	lsls	r2, r2, #26
 8004a38:	d42e      	bmi.n	8004a98 <_printf_common+0xc0>
 8004a3a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a3e:	4639      	mov	r1, r7
 8004a40:	4630      	mov	r0, r6
 8004a42:	47c0      	blx	r8
 8004a44:	3001      	adds	r0, #1
 8004a46:	d021      	beq.n	8004a8c <_printf_common+0xb4>
 8004a48:	6823      	ldr	r3, [r4, #0]
 8004a4a:	68e5      	ldr	r5, [r4, #12]
 8004a4c:	f003 0306 	and.w	r3, r3, #6
 8004a50:	2b04      	cmp	r3, #4
 8004a52:	bf18      	it	ne
 8004a54:	2500      	movne	r5, #0
 8004a56:	f8d9 2000 	ldr.w	r2, [r9]
 8004a5a:	f04f 0900 	mov.w	r9, #0
 8004a5e:	bf08      	it	eq
 8004a60:	1aad      	subeq	r5, r5, r2
 8004a62:	68a3      	ldr	r3, [r4, #8]
 8004a64:	6922      	ldr	r2, [r4, #16]
 8004a66:	bf08      	it	eq
 8004a68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	bfc4      	itt	gt
 8004a70:	1a9b      	subgt	r3, r3, r2
 8004a72:	18ed      	addgt	r5, r5, r3
 8004a74:	341a      	adds	r4, #26
 8004a76:	454d      	cmp	r5, r9
 8004a78:	d11a      	bne.n	8004ab0 <_printf_common+0xd8>
 8004a7a:	2000      	movs	r0, #0
 8004a7c:	e008      	b.n	8004a90 <_printf_common+0xb8>
 8004a7e:	2301      	movs	r3, #1
 8004a80:	4652      	mov	r2, sl
 8004a82:	4639      	mov	r1, r7
 8004a84:	4630      	mov	r0, r6
 8004a86:	47c0      	blx	r8
 8004a88:	3001      	adds	r0, #1
 8004a8a:	d103      	bne.n	8004a94 <_printf_common+0xbc>
 8004a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8004a90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a94:	3501      	adds	r5, #1
 8004a96:	e7c2      	b.n	8004a1e <_printf_common+0x46>
 8004a98:	2030      	movs	r0, #48	; 0x30
 8004a9a:	18e1      	adds	r1, r4, r3
 8004a9c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004aa0:	1c5a      	adds	r2, r3, #1
 8004aa2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004aa6:	4422      	add	r2, r4
 8004aa8:	3302      	adds	r3, #2
 8004aaa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004aae:	e7c4      	b.n	8004a3a <_printf_common+0x62>
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	4622      	mov	r2, r4
 8004ab4:	4639      	mov	r1, r7
 8004ab6:	4630      	mov	r0, r6
 8004ab8:	47c0      	blx	r8
 8004aba:	3001      	adds	r0, #1
 8004abc:	d0e6      	beq.n	8004a8c <_printf_common+0xb4>
 8004abe:	f109 0901 	add.w	r9, r9, #1
 8004ac2:	e7d8      	b.n	8004a76 <_printf_common+0x9e>

08004ac4 <_printf_i>:
 8004ac4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004ac8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004acc:	460c      	mov	r4, r1
 8004ace:	7e09      	ldrb	r1, [r1, #24]
 8004ad0:	b085      	sub	sp, #20
 8004ad2:	296e      	cmp	r1, #110	; 0x6e
 8004ad4:	4617      	mov	r7, r2
 8004ad6:	4606      	mov	r6, r0
 8004ad8:	4698      	mov	r8, r3
 8004ada:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004adc:	f000 80b3 	beq.w	8004c46 <_printf_i+0x182>
 8004ae0:	d822      	bhi.n	8004b28 <_printf_i+0x64>
 8004ae2:	2963      	cmp	r1, #99	; 0x63
 8004ae4:	d036      	beq.n	8004b54 <_printf_i+0x90>
 8004ae6:	d80a      	bhi.n	8004afe <_printf_i+0x3a>
 8004ae8:	2900      	cmp	r1, #0
 8004aea:	f000 80b9 	beq.w	8004c60 <_printf_i+0x19c>
 8004aee:	2958      	cmp	r1, #88	; 0x58
 8004af0:	f000 8083 	beq.w	8004bfa <_printf_i+0x136>
 8004af4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004af8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004afc:	e032      	b.n	8004b64 <_printf_i+0xa0>
 8004afe:	2964      	cmp	r1, #100	; 0x64
 8004b00:	d001      	beq.n	8004b06 <_printf_i+0x42>
 8004b02:	2969      	cmp	r1, #105	; 0x69
 8004b04:	d1f6      	bne.n	8004af4 <_printf_i+0x30>
 8004b06:	6820      	ldr	r0, [r4, #0]
 8004b08:	6813      	ldr	r3, [r2, #0]
 8004b0a:	0605      	lsls	r5, r0, #24
 8004b0c:	f103 0104 	add.w	r1, r3, #4
 8004b10:	d52a      	bpl.n	8004b68 <_printf_i+0xa4>
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	6011      	str	r1, [r2, #0]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	da03      	bge.n	8004b22 <_printf_i+0x5e>
 8004b1a:	222d      	movs	r2, #45	; 0x2d
 8004b1c:	425b      	negs	r3, r3
 8004b1e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004b22:	486f      	ldr	r0, [pc, #444]	; (8004ce0 <_printf_i+0x21c>)
 8004b24:	220a      	movs	r2, #10
 8004b26:	e039      	b.n	8004b9c <_printf_i+0xd8>
 8004b28:	2973      	cmp	r1, #115	; 0x73
 8004b2a:	f000 809d 	beq.w	8004c68 <_printf_i+0x1a4>
 8004b2e:	d808      	bhi.n	8004b42 <_printf_i+0x7e>
 8004b30:	296f      	cmp	r1, #111	; 0x6f
 8004b32:	d020      	beq.n	8004b76 <_printf_i+0xb2>
 8004b34:	2970      	cmp	r1, #112	; 0x70
 8004b36:	d1dd      	bne.n	8004af4 <_printf_i+0x30>
 8004b38:	6823      	ldr	r3, [r4, #0]
 8004b3a:	f043 0320 	orr.w	r3, r3, #32
 8004b3e:	6023      	str	r3, [r4, #0]
 8004b40:	e003      	b.n	8004b4a <_printf_i+0x86>
 8004b42:	2975      	cmp	r1, #117	; 0x75
 8004b44:	d017      	beq.n	8004b76 <_printf_i+0xb2>
 8004b46:	2978      	cmp	r1, #120	; 0x78
 8004b48:	d1d4      	bne.n	8004af4 <_printf_i+0x30>
 8004b4a:	2378      	movs	r3, #120	; 0x78
 8004b4c:	4865      	ldr	r0, [pc, #404]	; (8004ce4 <_printf_i+0x220>)
 8004b4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004b52:	e055      	b.n	8004c00 <_printf_i+0x13c>
 8004b54:	6813      	ldr	r3, [r2, #0]
 8004b56:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b5a:	1d19      	adds	r1, r3, #4
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	6011      	str	r1, [r2, #0]
 8004b60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b64:	2301      	movs	r3, #1
 8004b66:	e08c      	b.n	8004c82 <_printf_i+0x1be>
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004b6e:	6011      	str	r1, [r2, #0]
 8004b70:	bf18      	it	ne
 8004b72:	b21b      	sxthne	r3, r3
 8004b74:	e7cf      	b.n	8004b16 <_printf_i+0x52>
 8004b76:	6813      	ldr	r3, [r2, #0]
 8004b78:	6825      	ldr	r5, [r4, #0]
 8004b7a:	1d18      	adds	r0, r3, #4
 8004b7c:	6010      	str	r0, [r2, #0]
 8004b7e:	0628      	lsls	r0, r5, #24
 8004b80:	d501      	bpl.n	8004b86 <_printf_i+0xc2>
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	e002      	b.n	8004b8c <_printf_i+0xc8>
 8004b86:	0668      	lsls	r0, r5, #25
 8004b88:	d5fb      	bpl.n	8004b82 <_printf_i+0xbe>
 8004b8a:	881b      	ldrh	r3, [r3, #0]
 8004b8c:	296f      	cmp	r1, #111	; 0x6f
 8004b8e:	bf14      	ite	ne
 8004b90:	220a      	movne	r2, #10
 8004b92:	2208      	moveq	r2, #8
 8004b94:	4852      	ldr	r0, [pc, #328]	; (8004ce0 <_printf_i+0x21c>)
 8004b96:	2100      	movs	r1, #0
 8004b98:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004b9c:	6865      	ldr	r5, [r4, #4]
 8004b9e:	2d00      	cmp	r5, #0
 8004ba0:	60a5      	str	r5, [r4, #8]
 8004ba2:	f2c0 8095 	blt.w	8004cd0 <_printf_i+0x20c>
 8004ba6:	6821      	ldr	r1, [r4, #0]
 8004ba8:	f021 0104 	bic.w	r1, r1, #4
 8004bac:	6021      	str	r1, [r4, #0]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d13d      	bne.n	8004c2e <_printf_i+0x16a>
 8004bb2:	2d00      	cmp	r5, #0
 8004bb4:	f040 808e 	bne.w	8004cd4 <_printf_i+0x210>
 8004bb8:	4665      	mov	r5, ip
 8004bba:	2a08      	cmp	r2, #8
 8004bbc:	d10b      	bne.n	8004bd6 <_printf_i+0x112>
 8004bbe:	6823      	ldr	r3, [r4, #0]
 8004bc0:	07db      	lsls	r3, r3, #31
 8004bc2:	d508      	bpl.n	8004bd6 <_printf_i+0x112>
 8004bc4:	6923      	ldr	r3, [r4, #16]
 8004bc6:	6862      	ldr	r2, [r4, #4]
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	bfde      	ittt	le
 8004bcc:	2330      	movle	r3, #48	; 0x30
 8004bce:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004bd2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004bd6:	ebac 0305 	sub.w	r3, ip, r5
 8004bda:	6123      	str	r3, [r4, #16]
 8004bdc:	f8cd 8000 	str.w	r8, [sp]
 8004be0:	463b      	mov	r3, r7
 8004be2:	aa03      	add	r2, sp, #12
 8004be4:	4621      	mov	r1, r4
 8004be6:	4630      	mov	r0, r6
 8004be8:	f7ff fef6 	bl	80049d8 <_printf_common>
 8004bec:	3001      	adds	r0, #1
 8004bee:	d14d      	bne.n	8004c8c <_printf_i+0x1c8>
 8004bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8004bf4:	b005      	add	sp, #20
 8004bf6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004bfa:	4839      	ldr	r0, [pc, #228]	; (8004ce0 <_printf_i+0x21c>)
 8004bfc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004c00:	6813      	ldr	r3, [r2, #0]
 8004c02:	6821      	ldr	r1, [r4, #0]
 8004c04:	1d1d      	adds	r5, r3, #4
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	6015      	str	r5, [r2, #0]
 8004c0a:	060a      	lsls	r2, r1, #24
 8004c0c:	d50b      	bpl.n	8004c26 <_printf_i+0x162>
 8004c0e:	07ca      	lsls	r2, r1, #31
 8004c10:	bf44      	itt	mi
 8004c12:	f041 0120 	orrmi.w	r1, r1, #32
 8004c16:	6021      	strmi	r1, [r4, #0]
 8004c18:	b91b      	cbnz	r3, 8004c22 <_printf_i+0x15e>
 8004c1a:	6822      	ldr	r2, [r4, #0]
 8004c1c:	f022 0220 	bic.w	r2, r2, #32
 8004c20:	6022      	str	r2, [r4, #0]
 8004c22:	2210      	movs	r2, #16
 8004c24:	e7b7      	b.n	8004b96 <_printf_i+0xd2>
 8004c26:	064d      	lsls	r5, r1, #25
 8004c28:	bf48      	it	mi
 8004c2a:	b29b      	uxthmi	r3, r3
 8004c2c:	e7ef      	b.n	8004c0e <_printf_i+0x14a>
 8004c2e:	4665      	mov	r5, ip
 8004c30:	fbb3 f1f2 	udiv	r1, r3, r2
 8004c34:	fb02 3311 	mls	r3, r2, r1, r3
 8004c38:	5cc3      	ldrb	r3, [r0, r3]
 8004c3a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004c3e:	460b      	mov	r3, r1
 8004c40:	2900      	cmp	r1, #0
 8004c42:	d1f5      	bne.n	8004c30 <_printf_i+0x16c>
 8004c44:	e7b9      	b.n	8004bba <_printf_i+0xf6>
 8004c46:	6813      	ldr	r3, [r2, #0]
 8004c48:	6825      	ldr	r5, [r4, #0]
 8004c4a:	1d18      	adds	r0, r3, #4
 8004c4c:	6961      	ldr	r1, [r4, #20]
 8004c4e:	6010      	str	r0, [r2, #0]
 8004c50:	0628      	lsls	r0, r5, #24
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	d501      	bpl.n	8004c5a <_printf_i+0x196>
 8004c56:	6019      	str	r1, [r3, #0]
 8004c58:	e002      	b.n	8004c60 <_printf_i+0x19c>
 8004c5a:	066a      	lsls	r2, r5, #25
 8004c5c:	d5fb      	bpl.n	8004c56 <_printf_i+0x192>
 8004c5e:	8019      	strh	r1, [r3, #0]
 8004c60:	2300      	movs	r3, #0
 8004c62:	4665      	mov	r5, ip
 8004c64:	6123      	str	r3, [r4, #16]
 8004c66:	e7b9      	b.n	8004bdc <_printf_i+0x118>
 8004c68:	6813      	ldr	r3, [r2, #0]
 8004c6a:	1d19      	adds	r1, r3, #4
 8004c6c:	6011      	str	r1, [r2, #0]
 8004c6e:	681d      	ldr	r5, [r3, #0]
 8004c70:	6862      	ldr	r2, [r4, #4]
 8004c72:	2100      	movs	r1, #0
 8004c74:	4628      	mov	r0, r5
 8004c76:	f000 f8e1 	bl	8004e3c <memchr>
 8004c7a:	b108      	cbz	r0, 8004c80 <_printf_i+0x1bc>
 8004c7c:	1b40      	subs	r0, r0, r5
 8004c7e:	6060      	str	r0, [r4, #4]
 8004c80:	6863      	ldr	r3, [r4, #4]
 8004c82:	6123      	str	r3, [r4, #16]
 8004c84:	2300      	movs	r3, #0
 8004c86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c8a:	e7a7      	b.n	8004bdc <_printf_i+0x118>
 8004c8c:	6923      	ldr	r3, [r4, #16]
 8004c8e:	462a      	mov	r2, r5
 8004c90:	4639      	mov	r1, r7
 8004c92:	4630      	mov	r0, r6
 8004c94:	47c0      	blx	r8
 8004c96:	3001      	adds	r0, #1
 8004c98:	d0aa      	beq.n	8004bf0 <_printf_i+0x12c>
 8004c9a:	6823      	ldr	r3, [r4, #0]
 8004c9c:	079b      	lsls	r3, r3, #30
 8004c9e:	d413      	bmi.n	8004cc8 <_printf_i+0x204>
 8004ca0:	68e0      	ldr	r0, [r4, #12]
 8004ca2:	9b03      	ldr	r3, [sp, #12]
 8004ca4:	4298      	cmp	r0, r3
 8004ca6:	bfb8      	it	lt
 8004ca8:	4618      	movlt	r0, r3
 8004caa:	e7a3      	b.n	8004bf4 <_printf_i+0x130>
 8004cac:	2301      	movs	r3, #1
 8004cae:	464a      	mov	r2, r9
 8004cb0:	4639      	mov	r1, r7
 8004cb2:	4630      	mov	r0, r6
 8004cb4:	47c0      	blx	r8
 8004cb6:	3001      	adds	r0, #1
 8004cb8:	d09a      	beq.n	8004bf0 <_printf_i+0x12c>
 8004cba:	3501      	adds	r5, #1
 8004cbc:	68e3      	ldr	r3, [r4, #12]
 8004cbe:	9a03      	ldr	r2, [sp, #12]
 8004cc0:	1a9b      	subs	r3, r3, r2
 8004cc2:	42ab      	cmp	r3, r5
 8004cc4:	dcf2      	bgt.n	8004cac <_printf_i+0x1e8>
 8004cc6:	e7eb      	b.n	8004ca0 <_printf_i+0x1dc>
 8004cc8:	2500      	movs	r5, #0
 8004cca:	f104 0919 	add.w	r9, r4, #25
 8004cce:	e7f5      	b.n	8004cbc <_printf_i+0x1f8>
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d1ac      	bne.n	8004c2e <_printf_i+0x16a>
 8004cd4:	7803      	ldrb	r3, [r0, #0]
 8004cd6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004cda:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004cde:	e76c      	b.n	8004bba <_printf_i+0xf6>
 8004ce0:	080052c5 	.word	0x080052c5
 8004ce4:	080052d6 	.word	0x080052d6

08004ce8 <_sbrk_r>:
 8004ce8:	b538      	push	{r3, r4, r5, lr}
 8004cea:	2300      	movs	r3, #0
 8004cec:	4c05      	ldr	r4, [pc, #20]	; (8004d04 <_sbrk_r+0x1c>)
 8004cee:	4605      	mov	r5, r0
 8004cf0:	4608      	mov	r0, r1
 8004cf2:	6023      	str	r3, [r4, #0]
 8004cf4:	f7fd f990 	bl	8002018 <_sbrk>
 8004cf8:	1c43      	adds	r3, r0, #1
 8004cfa:	d102      	bne.n	8004d02 <_sbrk_r+0x1a>
 8004cfc:	6823      	ldr	r3, [r4, #0]
 8004cfe:	b103      	cbz	r3, 8004d02 <_sbrk_r+0x1a>
 8004d00:	602b      	str	r3, [r5, #0]
 8004d02:	bd38      	pop	{r3, r4, r5, pc}
 8004d04:	20000378 	.word	0x20000378

08004d08 <__sread>:
 8004d08:	b510      	push	{r4, lr}
 8004d0a:	460c      	mov	r4, r1
 8004d0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d10:	f000 f8a4 	bl	8004e5c <_read_r>
 8004d14:	2800      	cmp	r0, #0
 8004d16:	bfab      	itete	ge
 8004d18:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004d1a:	89a3      	ldrhlt	r3, [r4, #12]
 8004d1c:	181b      	addge	r3, r3, r0
 8004d1e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004d22:	bfac      	ite	ge
 8004d24:	6563      	strge	r3, [r4, #84]	; 0x54
 8004d26:	81a3      	strhlt	r3, [r4, #12]
 8004d28:	bd10      	pop	{r4, pc}

08004d2a <__swrite>:
 8004d2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d2e:	461f      	mov	r7, r3
 8004d30:	898b      	ldrh	r3, [r1, #12]
 8004d32:	4605      	mov	r5, r0
 8004d34:	05db      	lsls	r3, r3, #23
 8004d36:	460c      	mov	r4, r1
 8004d38:	4616      	mov	r6, r2
 8004d3a:	d505      	bpl.n	8004d48 <__swrite+0x1e>
 8004d3c:	2302      	movs	r3, #2
 8004d3e:	2200      	movs	r2, #0
 8004d40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d44:	f000 f868 	bl	8004e18 <_lseek_r>
 8004d48:	89a3      	ldrh	r3, [r4, #12]
 8004d4a:	4632      	mov	r2, r6
 8004d4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d50:	81a3      	strh	r3, [r4, #12]
 8004d52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d56:	463b      	mov	r3, r7
 8004d58:	4628      	mov	r0, r5
 8004d5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d5e:	f000 b817 	b.w	8004d90 <_write_r>

08004d62 <__sseek>:
 8004d62:	b510      	push	{r4, lr}
 8004d64:	460c      	mov	r4, r1
 8004d66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d6a:	f000 f855 	bl	8004e18 <_lseek_r>
 8004d6e:	1c43      	adds	r3, r0, #1
 8004d70:	89a3      	ldrh	r3, [r4, #12]
 8004d72:	bf15      	itete	ne
 8004d74:	6560      	strne	r0, [r4, #84]	; 0x54
 8004d76:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004d7a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004d7e:	81a3      	strheq	r3, [r4, #12]
 8004d80:	bf18      	it	ne
 8004d82:	81a3      	strhne	r3, [r4, #12]
 8004d84:	bd10      	pop	{r4, pc}

08004d86 <__sclose>:
 8004d86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d8a:	f000 b813 	b.w	8004db4 <_close_r>
	...

08004d90 <_write_r>:
 8004d90:	b538      	push	{r3, r4, r5, lr}
 8004d92:	4605      	mov	r5, r0
 8004d94:	4608      	mov	r0, r1
 8004d96:	4611      	mov	r1, r2
 8004d98:	2200      	movs	r2, #0
 8004d9a:	4c05      	ldr	r4, [pc, #20]	; (8004db0 <_write_r+0x20>)
 8004d9c:	6022      	str	r2, [r4, #0]
 8004d9e:	461a      	mov	r2, r3
 8004da0:	f7fd f8ed 	bl	8001f7e <_write>
 8004da4:	1c43      	adds	r3, r0, #1
 8004da6:	d102      	bne.n	8004dae <_write_r+0x1e>
 8004da8:	6823      	ldr	r3, [r4, #0]
 8004daa:	b103      	cbz	r3, 8004dae <_write_r+0x1e>
 8004dac:	602b      	str	r3, [r5, #0]
 8004dae:	bd38      	pop	{r3, r4, r5, pc}
 8004db0:	20000378 	.word	0x20000378

08004db4 <_close_r>:
 8004db4:	b538      	push	{r3, r4, r5, lr}
 8004db6:	2300      	movs	r3, #0
 8004db8:	4c05      	ldr	r4, [pc, #20]	; (8004dd0 <_close_r+0x1c>)
 8004dba:	4605      	mov	r5, r0
 8004dbc:	4608      	mov	r0, r1
 8004dbe:	6023      	str	r3, [r4, #0]
 8004dc0:	f7fd f8f9 	bl	8001fb6 <_close>
 8004dc4:	1c43      	adds	r3, r0, #1
 8004dc6:	d102      	bne.n	8004dce <_close_r+0x1a>
 8004dc8:	6823      	ldr	r3, [r4, #0]
 8004dca:	b103      	cbz	r3, 8004dce <_close_r+0x1a>
 8004dcc:	602b      	str	r3, [r5, #0]
 8004dce:	bd38      	pop	{r3, r4, r5, pc}
 8004dd0:	20000378 	.word	0x20000378

08004dd4 <_fstat_r>:
 8004dd4:	b538      	push	{r3, r4, r5, lr}
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	4c06      	ldr	r4, [pc, #24]	; (8004df4 <_fstat_r+0x20>)
 8004dda:	4605      	mov	r5, r0
 8004ddc:	4608      	mov	r0, r1
 8004dde:	4611      	mov	r1, r2
 8004de0:	6023      	str	r3, [r4, #0]
 8004de2:	f7fd f8f3 	bl	8001fcc <_fstat>
 8004de6:	1c43      	adds	r3, r0, #1
 8004de8:	d102      	bne.n	8004df0 <_fstat_r+0x1c>
 8004dea:	6823      	ldr	r3, [r4, #0]
 8004dec:	b103      	cbz	r3, 8004df0 <_fstat_r+0x1c>
 8004dee:	602b      	str	r3, [r5, #0]
 8004df0:	bd38      	pop	{r3, r4, r5, pc}
 8004df2:	bf00      	nop
 8004df4:	20000378 	.word	0x20000378

08004df8 <_isatty_r>:
 8004df8:	b538      	push	{r3, r4, r5, lr}
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	4c05      	ldr	r4, [pc, #20]	; (8004e14 <_isatty_r+0x1c>)
 8004dfe:	4605      	mov	r5, r0
 8004e00:	4608      	mov	r0, r1
 8004e02:	6023      	str	r3, [r4, #0]
 8004e04:	f7fd f8f1 	bl	8001fea <_isatty>
 8004e08:	1c43      	adds	r3, r0, #1
 8004e0a:	d102      	bne.n	8004e12 <_isatty_r+0x1a>
 8004e0c:	6823      	ldr	r3, [r4, #0]
 8004e0e:	b103      	cbz	r3, 8004e12 <_isatty_r+0x1a>
 8004e10:	602b      	str	r3, [r5, #0]
 8004e12:	bd38      	pop	{r3, r4, r5, pc}
 8004e14:	20000378 	.word	0x20000378

08004e18 <_lseek_r>:
 8004e18:	b538      	push	{r3, r4, r5, lr}
 8004e1a:	4605      	mov	r5, r0
 8004e1c:	4608      	mov	r0, r1
 8004e1e:	4611      	mov	r1, r2
 8004e20:	2200      	movs	r2, #0
 8004e22:	4c05      	ldr	r4, [pc, #20]	; (8004e38 <_lseek_r+0x20>)
 8004e24:	6022      	str	r2, [r4, #0]
 8004e26:	461a      	mov	r2, r3
 8004e28:	f7fd f8e9 	bl	8001ffe <_lseek>
 8004e2c:	1c43      	adds	r3, r0, #1
 8004e2e:	d102      	bne.n	8004e36 <_lseek_r+0x1e>
 8004e30:	6823      	ldr	r3, [r4, #0]
 8004e32:	b103      	cbz	r3, 8004e36 <_lseek_r+0x1e>
 8004e34:	602b      	str	r3, [r5, #0]
 8004e36:	bd38      	pop	{r3, r4, r5, pc}
 8004e38:	20000378 	.word	0x20000378

08004e3c <memchr>:
 8004e3c:	b510      	push	{r4, lr}
 8004e3e:	b2c9      	uxtb	r1, r1
 8004e40:	4402      	add	r2, r0
 8004e42:	4290      	cmp	r0, r2
 8004e44:	4603      	mov	r3, r0
 8004e46:	d101      	bne.n	8004e4c <memchr+0x10>
 8004e48:	2300      	movs	r3, #0
 8004e4a:	e003      	b.n	8004e54 <memchr+0x18>
 8004e4c:	781c      	ldrb	r4, [r3, #0]
 8004e4e:	3001      	adds	r0, #1
 8004e50:	428c      	cmp	r4, r1
 8004e52:	d1f6      	bne.n	8004e42 <memchr+0x6>
 8004e54:	4618      	mov	r0, r3
 8004e56:	bd10      	pop	{r4, pc}

08004e58 <__malloc_lock>:
 8004e58:	4770      	bx	lr

08004e5a <__malloc_unlock>:
 8004e5a:	4770      	bx	lr

08004e5c <_read_r>:
 8004e5c:	b538      	push	{r3, r4, r5, lr}
 8004e5e:	4605      	mov	r5, r0
 8004e60:	4608      	mov	r0, r1
 8004e62:	4611      	mov	r1, r2
 8004e64:	2200      	movs	r2, #0
 8004e66:	4c05      	ldr	r4, [pc, #20]	; (8004e7c <_read_r+0x20>)
 8004e68:	6022      	str	r2, [r4, #0]
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	f7fd f86a 	bl	8001f44 <_read>
 8004e70:	1c43      	adds	r3, r0, #1
 8004e72:	d102      	bne.n	8004e7a <_read_r+0x1e>
 8004e74:	6823      	ldr	r3, [r4, #0]
 8004e76:	b103      	cbz	r3, 8004e7a <_read_r+0x1e>
 8004e78:	602b      	str	r3, [r5, #0]
 8004e7a:	bd38      	pop	{r3, r4, r5, pc}
 8004e7c:	20000378 	.word	0x20000378

08004e80 <_init>:
 8004e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e82:	bf00      	nop
 8004e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e86:	bc08      	pop	{r3}
 8004e88:	469e      	mov	lr, r3
 8004e8a:	4770      	bx	lr

08004e8c <_fini>:
 8004e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e8e:	bf00      	nop
 8004e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e92:	bc08      	pop	{r3}
 8004e94:	469e      	mov	lr, r3
 8004e96:	4770      	bx	lr
